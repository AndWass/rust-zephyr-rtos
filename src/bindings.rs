/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const CONFIG_BOARD: &[u8; 20] = b"nrf52840dk_nrf52840\0";
pub const CONFIG_NUM_IRQS: u32 = 48;
pub const CONFIG_SOC_SERIES: &[u8; 6] = b"nrf52\0";
pub const CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC: u32 = 32768;
pub const CONFIG_SOC: &[u8; 14] = b"nRF52840_QIAA\0";
pub const CONFIG_CLOCK_CONTROL_INIT_PRIORITY: u32 = 30;
pub const CONFIG_FLASH_SIZE: u32 = 1024;
pub const CONFIG_FLASH_BASE_ADDRESS: u32 = 0;
pub const CONFIG_ICACHE_LINE_SIZE: u32 = 32;
pub const CONFIG_DCACHE_LINE_SIZE: u32 = 32;
pub const CONFIG_CLOCK_CONTROL: u32 = 1;
pub const CONFIG_PINCTRL: u32 = 1;
pub const CONFIG_HEAP_MEM_POOL_SIZE: u32 = 0;
pub const CONFIG_ROM_START_OFFSET: u32 = 0;
pub const CONFIG_GPIO: u32 = 1;
pub const CONFIG_SOC_HAS_TIMING_FUNCTIONS: u32 = 1;
pub const CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT: u32 = 1;
pub const CONFIG_NRF_RTC_TIMER: u32 = 1;
pub const CONFIG_SYS_CLOCK_TICKS_PER_SEC: u32 = 32768;
pub const CONFIG_BUILD_OUTPUT_HEX: u32 = 1;
pub const CONFIG_SERIAL_INIT_PRIORITY: u32 = 55;
pub const CONFIG_SERIAL: u32 = 1;
pub const CONFIG_MAIN_STACK_SIZE: u32 = 1024;
pub const CONFIG_FLASH_LOAD_OFFSET: u32 = 0;
pub const CONFIG_PLATFORM_SPECIFIC_INIT: u32 = 1;
pub const CONFIG_IDLE_STACK_SIZE: u32 = 320;
pub const CONFIG_BUILD_OUTPUT_BIN: u32 = 1;
pub const CONFIG_MP_MAX_NUM_CPUS: u32 = 1;
pub const CONFIG_DT_HAS_ARDUINO_UNO_ADC_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_ARDUINO_HEADER_R3_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_ARM_ARMV7M_ITM_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_ARM_CORTEX_M4F_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_ARM_CRYPTOCELL_310_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_ARM_V7M_NVIC_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_FIXED_PARTITIONS_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_GPIO_KEYS_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_GPIO_LEDS_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_MMIO_SRAM_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_ACL_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_CCM_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_CLOCK_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_ECB_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_EGU_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_FICR_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_GPIO_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_GPIOTE_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_GPREGRET_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_IEEE802154_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_MWU_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_NFCT_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_PINCTRL_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_POWER_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_PPI_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_PWM_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_QSPI_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_RADIO_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_RNG_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_SAADC_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_SPI_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_SPIM_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_SWI_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_TEMP_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_TWI_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_UARTE_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_UICR_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_USBD_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF_WDT_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_NRF52_FLASH_CONTROLLER_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_NORDIC_QSPI_NOR_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_PWM_LEDS_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_SOC_NV_FLASH_ENABLED: u32 = 1;
pub const CONFIG_DT_HAS_ZEPHYR_BT_HCI_ENTROPY_ENABLED: u32 = 1;
pub const CONFIG_NUM_METAIRQ_PRIORITIES: u32 = 0;
pub const CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE: u32 = 1024;
pub const CONFIG_BOOT_BANNER_STRING: &[u8; 24] = b"Booting nRF Connect SDK\0";
pub const CONFIG_WARN_EXPERIMENTAL: u32 = 1;
pub const CONFIG_PRIVILEGED_STACK_SIZE: u32 = 1024;
pub const CONFIG_INIT_ARCH_HW_AT_BOOT: u32 = 1;
pub const CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE: u32 = 4096;
pub const CONFIG_PM_PARTITION_SIZE_PROVISION: u32 = 4096;
pub const CONFIG_PM_PARTITION_SIZE_B0_IMAGE: u32 = 32768;
pub const CONFIG_SB_VALIDATION_INFO_MAGIC: u32 = 2253489283;
pub const CONFIG_SB_VALIDATION_POINTER_MAGIC: u32 = 1763292286;
pub const CONFIG_SB_VALIDATION_INFO_CRYPTO_ID: u32 = 1;
pub const CONFIG_SB_VALIDATION_INFO_VERSION: u32 = 2;
pub const CONFIG_SB_VALIDATION_METADATA_OFFSET: u32 = 0;
pub const CONFIG_SB_VALIDATE_FW_SIGNATURE: u32 = 1;
pub const CONFIG_PCD_VERSION_PAGE_BUF_SIZE: u32 = 2046;
pub const CONFIG_NRF_CLOUD_CLIENT_ID_SRC_COMPILE_TIME: u32 = 1;
pub const CONFIG_NRF_CLOUD_CLIENT_ID: &[u8; 13] = b"my-client-id\0";
pub const CONFIG_FOTA_USE_NRF_CLOUD_SETTINGS_AREA: u32 = 1;
pub const CONFIG_FOTA_DL_TIMEOUT_MIN: u32 = 15;
pub const CONFIG_NRF_CLOUD_LOG_OUTPUT_LEVEL: u32 = 1;
pub const CONFIG_NRF_CLOUD_LOG_BUF_SIZE: u32 = 256;
pub const CONFIG_MPSL_THREAD_COOP_PRIO: u32 = 8;
pub const CONFIG_MPSL_WORK_STACK_SIZE: u32 = 1024;
pub const CONFIG_MPSL_TIMESLOT_SESSION_COUNT: u32 = 0;
pub const CONFIG_MPSL_LOW_PRIO_IRQN: u32 = 25;
pub const CONFIG_SRAM_SIZE: u32 = 256;
pub const CONFIG_SRAM_BASE_ADDRESS: u32 = 536870912;
pub const CONFIG_PM_EXTERNAL_FLASH_BASE: u32 = 0;
pub const CONFIG_PM_EXTERNAL_FLASH_PATH: &[u8; 1] = b"\0";
pub const CONFIG_PM_EXTERNAL_FLASH_SIZE_BITS: u32 = 0;
pub const CONFIG_PM_SRAM_BASE: u32 = 536870912;
pub const CONFIG_PM_SRAM_SIZE: u32 = 262144;
pub const CONFIG_AUDIO_MODULE_NAME_SIZE: u32 = 20;
pub const CONFIG_COMMON_LIBC_MALLOC_ARENA_SIZE: i32 = -1;
pub const CONFIG_POSIX_MAX_FDS: u32 = 4;
pub const CONFIG_WFA_QT_THREAD_STACK_SIZE: u32 = 4096;
pub const CONFIG_WFA_QT_REBOOT_TIMEOUT_MS: u32 = 1000;
pub const CONFIG_WFA_QT_DEFAULT_INTERFACE: &[u8; 13] = b"nordic_wlan0\0";
pub const CONFIG_WPAS_READY_TIMEOUT_MS: u32 = 10000;
pub const CONFIG_NRF_ACL_FLASH_REGION_SIZE: u32 = 4096;
pub const CONFIG_FPROTECT_BLOCK_SIZE: u32 = 4096;
pub const CONFIG_RESET_ON_FATAL_ERROR: u32 = 1;
pub const CONFIG_HW_UNIQUE_KEY_SUPPORTED: u32 = 1;
pub const CONFIG_HW_UNIQUE_KEY_PARTITION_SIZE: u32 = 4096;
pub const CONFIG_HW_CC3XX: u32 = 1;
pub const CONFIG_NRFX_GPIOTE_NUM_OF_EVT_HANDLERS: u32 = 1;
pub const CONFIG_ZTEST_MULTICORE_DEFAULT_SETTINGS: u32 = 1;
pub const CONFIG_ZEPHYR_NRF_MODULE: u32 = 1;
pub const CONFIG_BOOT_SIGNATURE_KEY_FILE: &[u8; 1] = b"\0";
pub const CONFIG_DT_FLASH_WRITE_BLOCK_SIZE: u32 = 4;
pub const CONFIG_MCUBOOT_USB_SUPPORT: u32 = 1;
pub const CONFIG_ZEPHYR_MCUBOOT_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_MBEDTLS_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_TRUSTED_FIRMWARE_M_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_PSA_ARCH_TESTS_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_CJSON_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_AZURE_SDK_FOR_C_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_CIRRUS_LOGIC_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_OPENTHREAD_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_MEMFAULT_FIRMWARE_SDK_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_CANOPENNODE_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_CHRE_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_LZ4_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_NANOPB_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_TF_M_TESTS_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_ZSCILIB_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_CMSIS_MODULE: u32 = 1;
pub const CONFIG_HAS_CMSIS_CORE: u32 = 1;
pub const CONFIG_HAS_CMSIS_CORE_M: u32 = 1;
pub const CONFIG_ZEPHYR_CMSIS_DSP_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_CMSIS_NN_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_FATFS_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_HAL_NORDIC_MODULE: u32 = 1;
pub const CONFIG_HAS_NORDIC_DRIVERS: u32 = 1;
pub const CONFIG_HAS_NRFX: u32 = 1;
pub const CONFIG_NRFX_CLOCK: u32 = 1;
pub const CONFIG_NRFX_CLOCK_LFXO_TWO_STAGE_ENABLED: u32 = 1;
pub const CONFIG_NRFX_GPIOTE: u32 = 1;
pub const CONFIG_NRFX_GPIOTE0: u32 = 1;
pub const CONFIG_NRFX_PPI: u32 = 1;
pub const CONFIG_ZEPHYR_ST_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_HAL_WURTHELEKTRONIK_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_LIBMETAL_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_LIBLC3_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_LITTLEFS_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_LORAMAC_NODE_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_LVGL_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_MIPI_SYS_T_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_NRF_HW_MODELS_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_OPEN_AMP_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_PICOLIBC_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_SEGGER_MODULE: u32 = 1;
pub const CONFIG_HAS_SEGGER_RTT: u32 = 1;
pub const CONFIG_USE_SEGGER_RTT: u32 = 1;
pub const CONFIG_SEGGER_RTT_MAX_NUM_UP_BUFFERS: u32 = 3;
pub const CONFIG_SEGGER_RTT_MAX_NUM_DOWN_BUFFERS: u32 = 3;
pub const CONFIG_SEGGER_RTT_BUFFER_SIZE_UP: u32 = 1024;
pub const CONFIG_SEGGER_RTT_BUFFER_SIZE_DOWN: u32 = 16;
pub const CONFIG_SEGGER_RTT_PRINTF_BUFFER_SIZE: u32 = 64;
pub const CONFIG_SEGGER_RTT_MODE_NO_BLOCK_SKIP: u32 = 1;
pub const CONFIG_SEGGER_RTT_MODE: u32 = 0;
pub const CONFIG_SEGGER_RTT_SECTION_NONE: u32 = 1;
pub const CONFIG_ZEPHYR_TINYCRYPT_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_UOSCORE_UEDHOC_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_ZCBOR_MODULE: u32 = 1;
pub const CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE: u32 = 1256;
pub const CONFIG_NRFXLIB_CRYPTO: u32 = 1;
pub const CONFIG_HAS_HW_NRF_CC3XX: u32 = 1;
pub const CONFIG_NRF_CC3XX_PLATFORM: u32 = 1;
pub const CONFIG_CC3XX_MUTEX_LOCK: u32 = 1;
pub const CONFIG_NRF_802154_SOURCE_NRFXLIB: u32 = 1;
pub const CONFIG_LC3_ENC_CHAN_MAX: u32 = 1;
pub const CONFIG_LC3_DEC_CHAN_MAX: u32 = 1;
pub const CONFIG_LC3_ENC_SAMPLE_RATE_8KHZ_SUPPORT: u32 = 1;
pub const CONFIG_LC3_ENC_SAMPLE_RATE_16KHZ_SUPPORT: u32 = 1;
pub const CONFIG_LC3_ENC_SAMPLE_RATE_24KHZ_SUPPORT: u32 = 1;
pub const CONFIG_LC3_ENC_SAMPLE_RATE_32KHZ_SUPPORT: u32 = 1;
pub const CONFIG_LC3_ENC_SAMPLE_RATE_441KHZ_SUPPORT: u32 = 1;
pub const CONFIG_LC3_ENC_SAMPLE_RATE_48KHZ_SUPPORT: u32 = 1;
pub const CONFIG_LC3_DEC_SAMPLE_RATE_8KHZ_SUPPORT: u32 = 1;
pub const CONFIG_LC3_DEC_SAMPLE_RATE_16KHZ_SUPPORT: u32 = 1;
pub const CONFIG_LC3_DEC_SAMPLE_RATE_24KHZ_SUPPORT: u32 = 1;
pub const CONFIG_LC3_DEC_SAMPLE_RATE_32KHZ_SUPPORT: u32 = 1;
pub const CONFIG_LC3_DEC_SAMPLE_RATE_441KHZ_SUPPORT: u32 = 1;
pub const CONFIG_LC3_DEC_SAMPLE_RATE_48KHZ_SUPPORT: u32 = 1;
pub const CONFIG_ZEPHYR_NRFXLIB_MODULE: u32 = 1;
pub const CONFIG_ZEPHYR_CONNECTEDHOMEIP_MODULE: u32 = 1;
pub const CONFIG_WIFI_NM_WPA_SUPPLICANT_THREAD_STACK_SIZE: u32 = 8192;
pub const CONFIG_WIFI_NM_WPA_SUPPLICANT_DEBUG_LEVEL: u32 = 6;
pub const CONFIG_BOARD_REVISION: &[u8; 1] = b"\0";
pub const CONFIG_BOARD_NRF52840DK_NRF52840: u32 = 1;
pub const CONFIG_BOARD_ENABLE_DCDC: u32 = 1;
pub const CONFIG_BOARD_ENABLE_DCDC_HV: u32 = 1;
pub const CONFIG_SOC_SERIES_NRF52X: u32 = 1;
pub const CONFIG_CPU_HAS_ARM_MPU: u32 = 1;
pub const CONFIG_HAS_SWO: u32 = 1;
pub const CONFIG_SOC_FAMILY: &[u8; 11] = b"nordic_nrf\0";
pub const CONFIG_GPIO_INIT_PRIORITY: u32 = 40;
pub const CONFIG_SOC_FAMILY_NRF: u32 = 1;
pub const CONFIG_HAS_HW_NRF_ACL: u32 = 1;
pub const CONFIG_HAS_HW_NRF_CC310: u32 = 1;
pub const CONFIG_HAS_HW_NRF_CCM: u32 = 1;
pub const CONFIG_HAS_HW_NRF_CCM_LFLEN_8BIT: u32 = 1;
pub const CONFIG_HAS_HW_NRF_CLOCK: u32 = 1;
pub const CONFIG_HAS_HW_NRF_ECB: u32 = 1;
pub const CONFIG_HAS_HW_NRF_EGU0: u32 = 1;
pub const CONFIG_HAS_HW_NRF_EGU1: u32 = 1;
pub const CONFIG_HAS_HW_NRF_EGU2: u32 = 1;
pub const CONFIG_HAS_HW_NRF_EGU3: u32 = 1;
pub const CONFIG_HAS_HW_NRF_EGU4: u32 = 1;
pub const CONFIG_HAS_HW_NRF_EGU5: u32 = 1;
pub const CONFIG_HAS_HW_NRF_GPIO0: u32 = 1;
pub const CONFIG_HAS_HW_NRF_GPIO1: u32 = 1;
pub const CONFIG_HAS_HW_NRF_GPIOTE0: u32 = 1;
pub const CONFIG_HAS_HW_NRF_MWU: u32 = 1;
pub const CONFIG_HAS_HW_NRF_NFCT: u32 = 1;
pub const CONFIG_HAS_HW_NRF_NVMC_PE: u32 = 1;
pub const CONFIG_HAS_HW_NRF_POWER: u32 = 1;
pub const CONFIG_HAS_HW_NRF_PPI: u32 = 1;
pub const CONFIG_HAS_HW_NRF_PWM0: u32 = 1;
pub const CONFIG_HAS_HW_NRF_QSPI: u32 = 1;
pub const CONFIG_HAS_HW_NRF_RADIO_BLE_2M: u32 = 1;
pub const CONFIG_HAS_HW_NRF_RADIO_BLE_CODED: u32 = 1;
pub const CONFIG_HAS_HW_NRF_RADIO_IEEE802154: u32 = 1;
pub const CONFIG_HAS_HW_NRF_RADIO_TX_PWR_HIGH: u32 = 1;
pub const CONFIG_HAS_HW_NRF_RNG: u32 = 1;
pub const CONFIG_HAS_HW_NRF_SAADC: u32 = 1;
pub const CONFIG_HAS_HW_NRF_SPI1: u32 = 1;
pub const CONFIG_HAS_HW_NRF_SPIM3: u32 = 1;
pub const CONFIG_HAS_HW_NRF_SWI0: u32 = 1;
pub const CONFIG_HAS_HW_NRF_SWI1: u32 = 1;
pub const CONFIG_HAS_HW_NRF_SWI2: u32 = 1;
pub const CONFIG_HAS_HW_NRF_SWI3: u32 = 1;
pub const CONFIG_HAS_HW_NRF_SWI4: u32 = 1;
pub const CONFIG_HAS_HW_NRF_SWI5: u32 = 1;
pub const CONFIG_HAS_HW_NRF_TEMP: u32 = 1;
pub const CONFIG_HAS_HW_NRF_TWI0: u32 = 1;
pub const CONFIG_HAS_HW_NRF_UARTE0: u32 = 1;
pub const CONFIG_HAS_HW_NRF_USBD: u32 = 1;
pub const CONFIG_HAS_HW_NRF_WDT0: u32 = 1;
pub const CONFIG_SOC_NRF52840: u32 = 1;
pub const CONFIG_SOC_NRF52840_QIAA: u32 = 1;
pub const CONFIG_SOC_DCDC_NRF52X: u32 = 1;
pub const CONFIG_SOC_DCDC_NRF52X_HV: u32 = 1;
pub const CONFIG_NRF_ENABLE_ICACHE: u32 = 1;
pub const CONFIG_NRF_RTC_TIMER_USER_CHAN_COUNT: u32 = 0;
pub const CONFIG_NRF_SOC_SECURE_SUPPORTED: u32 = 1;
pub const CONFIG_NRF_APPROTECT_USE_UICR: u32 = 1;
pub const CONFIG_SOC_COMPATIBLE_NRF: u32 = 1;
pub const CONFIG_SOC_COMPATIBLE_NRF52X: u32 = 1;
pub const CONFIG_ARCH: &[u8; 4] = b"arm\0";
pub const CONFIG_CPU_CORTEX: u32 = 1;
pub const CONFIG_CPU_CORTEX_M: u32 = 1;
pub const CONFIG_ISA_THUMB2: u32 = 1;
pub const CONFIG_ASSEMBLER_ISA_THUMB2: u32 = 1;
pub const CONFIG_COMPILER_ISA_THUMB2: u32 = 1;
pub const CONFIG_STACK_ALIGN_DOUBLE_WORD: u32 = 1;
pub const CONFIG_FAULT_DUMP: u32 = 2;
pub const CONFIG_ARM_STACK_PROTECTION: u32 = 1;
pub const CONFIG_FP16: u32 = 1;
pub const CONFIG_FP16_IEEE: u32 = 1;
pub const CONFIG_CPU_CORTEX_M4: u32 = 1;
pub const CONFIG_CPU_CORTEX_M_HAS_SYSTICK: u32 = 1;
pub const CONFIG_CPU_CORTEX_M_HAS_DWT: u32 = 1;
pub const CONFIG_CPU_CORTEX_M_HAS_BASEPRI: u32 = 1;
pub const CONFIG_CPU_CORTEX_M_HAS_VTOR: u32 = 1;
pub const CONFIG_CPU_CORTEX_M_HAS_PROGRAMMABLE_FAULT_PRIOS: u32 = 1;
pub const CONFIG_ARMV7_M_ARMV8_M_MAINLINE: u32 = 1;
pub const CONFIG_ARMV7_M_ARMV8_M_FP: u32 = 1;
pub const CONFIG_GEN_ISR_TABLES: u32 = 1;
pub const CONFIG_NULL_POINTER_EXCEPTION_DETECTION_NONE: u32 = 1;
pub const CONFIG_GEN_IRQ_VECTOR_TABLE: u32 = 1;
pub const CONFIG_ARM_MPU: u32 = 1;
pub const CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE: u32 = 32;
pub const CONFIG_MPU_STACK_GUARD: u32 = 1;
pub const CONFIG_CUSTOM_SECTION_MIN_ALIGN_SIZE: u32 = 32;
pub const CONFIG_ARM: u32 = 1;
pub const CONFIG_ARCH_IS_SET: u32 = 1;
pub const CONFIG_LITTLE_ENDIAN: u32 = 1;
pub const CONFIG_HW_STACK_PROTECTION: u32 = 1;
pub const CONFIG_KOBJECT_TEXT_AREA: u32 = 256;
pub const CONFIG_KOBJECT_DATA_AREA_RESERVE_EXTRA_PERCENT: u32 = 100;
pub const CONFIG_KOBJECT_RODATA_AREA_EXTRA_BYTES: u32 = 16;
pub const CONFIG_GEN_PRIV_STACKS: u32 = 1;
pub const CONFIG_ISR_TABLES_LOCAL_DECLARATION_SUPPORTED: u32 = 1;
pub const CONFIG_ARCH_IRQ_VECTOR_TABLE_ALIGN: u32 = 4;
pub const CONFIG_IRQ_VECTOR_TABLE_JUMP_BY_ADDRESS: u32 = 1;
pub const CONFIG_GEN_SW_ISR_TABLE: u32 = 1;
pub const CONFIG_ARCH_SW_ISR_TABLE_ALIGN: u32 = 4;
pub const CONFIG_GEN_IRQ_START_VECTOR: u32 = 0;
pub const CONFIG_ARCH_HAS_SINGLE_THREAD_SUPPORT: u32 = 1;
pub const CONFIG_ARCH_HAS_TIMING_FUNCTIONS: u32 = 1;
pub const CONFIG_ARCH_HAS_STACK_PROTECTION: u32 = 1;
pub const CONFIG_ARCH_HAS_USERSPACE: u32 = 1;
pub const CONFIG_ARCH_HAS_EXECUTABLE_PAGE_BIT: u32 = 1;
pub const CONFIG_ARCH_HAS_RAMFUNC_SUPPORT: u32 = 1;
pub const CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_COREDUMP: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_ARCH_HW_INIT: u32 = 1;
pub const CONFIG_ARCH_SUPPORTS_ROM_START: u32 = 1;
pub const CONFIG_ARCH_HAS_EXTRA_EXCEPTION_INFO: u32 = 1;
pub const CONFIG_ARCH_HAS_THREAD_LOCAL_STORAGE: u32 = 1;
pub const CONFIG_ARCH_HAS_SUSPEND_TO_RAM: u32 = 1;
pub const CONFIG_ARCH_HAS_THREAD_ABORT: u32 = 1;
pub const CONFIG_ARCH_HAS_CODE_DATA_RELOCATION: u32 = 1;
pub const CONFIG_CPU_HAS_FPU: u32 = 1;
pub const CONFIG_CPU_HAS_MPU: u32 = 1;
pub const CONFIG_MPU: u32 = 1;
pub const CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT: u32 = 1;
pub const CONFIG_SRAM_REGION_PERMISSIONS: u32 = 1;
pub const CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS: u32 = 1;
pub const CONFIG_MULTITHREADING: u32 = 1;
pub const CONFIG_NUM_COOP_PRIORITIES: u32 = 16;
pub const CONFIG_NUM_PREEMPT_PRIORITIES: u32 = 15;
pub const CONFIG_MAIN_THREAD_PRIORITY: u32 = 0;
pub const CONFIG_COOP_ENABLED: u32 = 1;
pub const CONFIG_PREEMPT_ENABLED: u32 = 1;
pub const CONFIG_PRIORITY_CEILING: i32 = -127;
pub const CONFIG_ISR_STACK_SIZE: u32 = 2048;
pub const CONFIG_THREAD_STACK_INFO: u32 = 1;
pub const CONFIG_LIBC_ERRNO: u32 = 1;
pub const CONFIG_ERRNO: u32 = 1;
pub const CONFIG_SCHED_DUMB: u32 = 1;
pub const CONFIG_WAITQ_DUMB: u32 = 1;
pub const CONFIG_BOOT_BANNER: u32 = 1;
pub const CONFIG_BOOT_DELAY: u32 = 0;
pub const CONFIG_SYSTEM_WORKQUEUE_PRIORITY: i32 = -1;
pub const CONFIG_BARRIER_OPERATIONS_ARCH: u32 = 1;
pub const CONFIG_ATOMIC_OPERATIONS_BUILTIN: u32 = 1;
pub const CONFIG_TIMESLICING: u32 = 1;
pub const CONFIG_TIMESLICE_SIZE: u32 = 0;
pub const CONFIG_TIMESLICE_PRIORITY: u32 = 0;
pub const CONFIG_NUM_MBOX_ASYNC_MSGS: u32 = 10;
pub const CONFIG_KERNEL_MEM_POOL: u32 = 1;
pub const CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN: u32 = 1;
pub const CONFIG_SWAP_NONATOMIC: u32 = 1;
pub const CONFIG_SYS_CLOCK_EXISTS: u32 = 1;
pub const CONFIG_TIMEOUT_64BIT: u32 = 1;
pub const CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS: u32 = 365;
pub const CONFIG_XIP: u32 = 1;
pub const CONFIG_KERNEL_INIT_PRIORITY_OBJECTS: u32 = 30;
pub const CONFIG_KERNEL_INIT_PRIORITY_DEFAULT: u32 = 40;
pub const CONFIG_KERNEL_INIT_PRIORITY_DEVICE: u32 = 50;
pub const CONFIG_APPLICATION_INIT_PRIORITY: u32 = 90;
pub const CONFIG_MP_NUM_CPUS: u32 = 1;
pub const CONFIG_TICKLESS_KERNEL: u32 = 1;
pub const CONFIG_TOOLCHAIN_SUPPORTS_THREAD_LOCAL_STORAGE: u32 = 1;
pub const CONFIG_THREAD_LOCAL_STORAGE: u32 = 1;
pub const CONFIG_CLOCK_CONTROL_NRF: u32 = 1;
pub const CONFIG_CLOCK_CONTROL_NRF_K32SRC_XTAL: u32 = 1;
pub const CONFIG_CLOCK_CONTROL_NRF_K32SRC_50PPM: u32 = 1;
pub const CONFIG_CLOCK_CONTROL_NRF_ACCURACY: u32 = 50;
pub const CONFIG_CLOCK_CONTROL_NPCX_SUPP_APB4: u32 = 1;
pub const CONFIG_CONSOLE: u32 = 1;
pub const CONFIG_CONSOLE_INPUT_MAX_LINE_LEN: u32 = 128;
pub const CONFIG_CONSOLE_HAS_DRIVER: u32 = 1;
pub const CONFIG_CONSOLE_INIT_PRIORITY: u32 = 60;
pub const CONFIG_UART_CONSOLE: u32 = 1;
pub const CONFIG_GPIO_NRFX: u32 = 1;
pub const CONFIG_GPIO_NRFX_INTERRUPT: u32 = 1;
pub const CONFIG_INTC_INIT_PRIORITY: u32 = 40;
pub const CONFIG_1ST_LEVEL_INTERRUPT_BITS: u32 = 8;
pub const CONFIG_2ND_LEVEL_INTERRUPT_BITS: u32 = 8;
pub const CONFIG_3RD_LEVEL_INTERRUPT_BITS: u32 = 8;
pub const CONFIG_PINCTRL_STORE_REG: u32 = 1;
pub const CONFIG_PINCTRL_NRF: u32 = 1;
pub const CONFIG_SERIAL_HAS_DRIVER: u32 = 1;
pub const CONFIG_SERIAL_SUPPORT_ASYNC: u32 = 1;
pub const CONFIG_SERIAL_SUPPORT_INTERRUPT: u32 = 1;
pub const CONFIG_UART_NRFX: u32 = 1;
pub const CONFIG_UART_NRFX_UARTE: u32 = 1;
pub const CONFIG_UART_NRFX_UARTE_LEGACY_SHIM: u32 = 1;
pub const CONFIG_UART_0_ENHANCED_POLL_OUT: u32 = 1;
pub const CONFIG_UART_0_NRF_TX_BUFFER_SIZE: u32 = 32;
pub const CONFIG_SYSTEM_CLOCK_INIT_PRIORITY: u32 = 0;
pub const CONFIG_TICKLESS_CAPABLE: u32 = 1;
pub const CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT: u32 = 1;
pub const CONFIG_SYSTEM_CLOCK_WAIT_FOR_STABILITY: u32 = 1;
pub const CONFIG_FULL_LIBC_SUPPORTED: u32 = 1;
pub const CONFIG_MINIMAL_LIBC_SUPPORTED: u32 = 1;
pub const CONFIG_NEWLIB_LIBC_SUPPORTED: u32 = 1;
pub const CONFIG_PICOLIBC_SUPPORTED: u32 = 1;
pub const CONFIG_PICOLIBC: u32 = 1;
pub const CONFIG_HAS_NEWLIB_LIBC_NANO: u32 = 1;
pub const CONFIG_COMMON_LIBC_ABORT: u32 = 1;
pub const CONFIG_COMMON_LIBC_MALLOC: u32 = 1;
pub const CONFIG_COMMON_LIBC_CALLOC: u32 = 1;
pub const CONFIG_COMMON_LIBC_REALLOCARRAY: u32 = 1;
pub const CONFIG_PICOLIBC_USE_TOOLCHAIN: u32 = 1;
pub const CONFIG_PICOLIBC_HEAP_SIZE: i32 = -2;
pub const CONFIG_PICOLIBC_IO_LONG_LONG: u32 = 1;
pub const CONFIG_STDOUT_CONSOLE: u32 = 1;
pub const CONFIG_NEED_LIBC_MEM_PARTITION: u32 = 1;
pub const CONFIG_CPP: u32 = 1;
pub const CONFIG_STD_CPP11: u32 = 1;
pub const CONFIG_MINIMAL_LIBCPP: u32 = 1;
pub const CONFIG_CPP_STATIC_INIT_GNU: u32 = 1;
pub const CONFIG_NOTIFY: u32 = 1;
pub const CONFIG_ONOFF: u32 = 1;
pub const CONFIG_REBOOT: u32 = 1;
pub const CONFIG_HAS_POWEROFF: u32 = 1;
pub const CONFIG_CBPRINTF_COMPLETE: u32 = 1;
pub const CONFIG_CBPRINTF_FULL_INTEGRAL: u32 = 1;
pub const CONFIG_CBPRINTF_CONVERT_CHECK_PTR: u32 = 1;
pub const CONFIG_SYS_HEAP_ALLOC_LOOPS: u32 = 3;
pub const CONFIG_SYS_HEAP_SMALL_ONLY: u32 = 1;
pub const CONFIG_SEM_VALUE_MAX: u32 = 32767;
pub const CONFIG_MAX_TIMER_COUNT: u32 = 5;
pub const CONFIG_TIMER_CREATE_WAIT: u32 = 100;
pub const CONFIG_TIMER_DELAYTIMER_MAX: u32 = 20;
pub const CONFIG_ACPI_HID_LEN_MAX: u32 = 12;
pub const CONFIG_LIBGCC_RTLIB: u32 = 1;
pub const CONFIG_PRINTK: u32 = 1;
pub const CONFIG_EARLY_CONSOLE: u32 = 1;
pub const CONFIG_ASSERT_VERBOSE: u32 = 1;
pub const CONFIG_MEM_ATTR: u32 = 1;
pub const CONFIG_TIMER_RANDOM_INITIAL_STATE: u32 = 123456789;
pub const CONFIG_COVERAGE_GCOV_HEAP_SIZE: u32 = 16384;
pub const CONFIG_TOOLCHAIN_ZEPHYR_0_16: u32 = 1;
pub const CONFIG_TOOLCHAIN_ZEPHYR_SUPPORTS_THREAD_LOCAL_STORAGE: u32 = 1;
pub const CONFIG_TOOLCHAIN_ZEPHYR_SUPPORTS_GNU_EXTENSIONS: u32 = 1;
pub const CONFIG_LINKER_ORPHAN_SECTION_WARN: u32 = 1;
pub const CONFIG_HAS_FLASH_LOAD_OFFSET: u32 = 1;
pub const CONFIG_FLASH_LOAD_SIZE: u32 = 0;
pub const CONFIG_LD_LINKER_SCRIPT_SUPPORTED: u32 = 1;
pub const CONFIG_LD_LINKER_TEMPLATE: u32 = 1;
pub const CONFIG_KERNEL_ENTRY: &[u8; 8] = b"__start\0";
pub const CONFIG_LINKER_SORT_BY_ALIGNMENT: u32 = 1;
pub const CONFIG_SRAM_OFFSET: u32 = 0;
pub const CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT: u32 = 1;
pub const CONFIG_LINKER_LAST_SECTION_ID: u32 = 1;
pub const CONFIG_LINKER_LAST_SECTION_ID_PATTERN: u32 = 3759530005;
pub const CONFIG_LINKER_USE_RELAX: u32 = 1;
pub const CONFIG_LINKER_DEVNULL_SUPPORT: u32 = 1;
pub const CONFIG_SIZE_OPTIMIZATIONS: u32 = 1;
pub const CONFIG_COMPILER_TRACK_MACRO_EXPANSION: u32 = 1;
pub const CONFIG_COMPILER_COLOR_DIAGNOSTICS: u32 = 1;
pub const CONFIG_FORTIFY_SOURCE_COMPILE_TIME: u32 = 1;
pub const CONFIG_COMPILER_OPT: &[u8; 1] = b"\0";
pub const CONFIG_RUNTIME_ERROR_CHECKS: u32 = 1;
pub const CONFIG_KERNEL_BIN_NAME: &[u8; 7] = b"zephyr\0";
pub const CONFIG_OUTPUT_STAT: u32 = 1;
pub const CONFIG_OUTPUT_PRINT_MEMORY_USAGE: u32 = 1;
pub const CONFIG_BUILD_OUTPUT_STRIP_PATHS: u32 = 1;
pub const CONFIG_CHECK_INIT_PRIORITIES: u32 = 1;
pub const CONFIG_WARN_DEPRECATED: u32 = 1;
pub const CONFIG_ENFORCE_ZEPHYR_STDINT: u32 = 1;
pub const _NEWLIB_VERSION_H__: u32 = 1;
pub const _NEWLIB_VERSION: &[u8; 6] = b"3.3.0\0";
pub const __NEWLIB__: u32 = 3;
pub const __NEWLIB_MINOR__: u32 = 3;
pub const __NEWLIB_PATCHLEVEL__: u32 = 0;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __ATFILE_VISIBLE: u32 = 1;
pub const __BSD_VISIBLE: u32 = 0;
pub const __GNU_VISIBLE: u32 = 0;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __LARGEFILE_VISIBLE: u32 = 0;
pub const __MISC_VISIBLE: u32 = 0;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __SVID_VISIBLE: u32 = 0;
pub const __XSI_VISIBLE: u32 = 0;
pub const __SSP_FORTIFY_LEVEL: u32 = 1;
pub const __have_longlong64: u32 = 1;
pub const __have_long32: u32 = 1;
pub const ___int8_t_defined: u32 = 1;
pub const ___int16_t_defined: u32 = 1;
pub const ___int32_t_defined: u32 = 1;
pub const ___int64_t_defined: u32 = 1;
pub const ___int_least8_t_defined: u32 = 1;
pub const ___int_least16_t_defined: u32 = 1;
pub const ___int_least32_t_defined: u32 = 1;
pub const ___int_least64_t_defined: u32 = 1;
pub const __int20: u32 = 2;
pub const __int20__: u32 = 2;
pub const __INT8: &[u8; 3] = b"hh\0";
pub const __INT16: &[u8; 2] = b"h\0";
pub const __INT64: &[u8; 3] = b"ll\0";
pub const __FAST8: &[u8; 3] = b"hh\0";
pub const __FAST16: &[u8; 2] = b"h\0";
pub const __FAST64: &[u8; 3] = b"ll\0";
pub const __LEAST8: &[u8; 3] = b"hh\0";
pub const __LEAST16: &[u8; 2] = b"h\0";
pub const __LEAST64: &[u8; 3] = b"ll\0";
pub const __int8_t_defined: u32 = 1;
pub const __int16_t_defined: u32 = 1;
pub const __int32_t_defined: u32 = 1;
pub const __int64_t_defined: u32 = 1;
pub const __int_least8_t_defined: u32 = 1;
pub const __int_least16_t_defined: u32 = 1;
pub const __int_least32_t_defined: u32 = 1;
pub const __int_least64_t_defined: u32 = 1;
pub const __int_fast8_t_defined: u32 = 1;
pub const __int_fast16_t_defined: u32 = 1;
pub const __int_fast32_t_defined: u32 = 1;
pub const __int_fast64_t_defined: u32 = 1;
pub const WINT_MIN: u32 = 0;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const __NEWLIB_H__: u32 = 1;
pub const _WANT_IO_C99_FORMATS: u32 = 1;
pub const _WANT_IO_LONG_LONG: u32 = 1;
pub const _REENT_CHECK_VERIFY: u32 = 1;
pub const _MB_LEN_MAX: u32 = 1;
pub const HAVE_INITFINI_ARRAY: u32 = 1;
pub const _ATEXIT_DYNAMIC_ALLOC: u32 = 1;
pub const _HAVE_LONG_DOUBLE: u32 = 1;
pub const _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL: u32 = 1;
pub const _LDBL_EQ_DBL: u32 = 1;
pub const _FVWRITE_IN_STREAMIO: u32 = 1;
pub const _UNBUF_STREAM_OPT: u32 = 1;
pub const _LITE_EXIT: u32 = 1;
pub const _REENT_GLOBAL_ATEXIT: u32 = 1;
pub const _RETARGETABLE_LOCKING: u32 = 1;
pub const __GNUCLIKE_ASM: u32 = 3;
pub const __GNUCLIKE___TYPEOF: u32 = 1;
pub const __GNUCLIKE___OFFSETOF: u32 = 1;
pub const __GNUCLIKE___SECTION: u32 = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: u32 = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: u32 = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: u32 = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: u32 = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: u32 = 1;
pub const __CC_SUPPORTS_INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE__: u32 = 1;
pub const __CC_SUPPORTS___FUNC__: u32 = 1;
pub const __CC_SUPPORTS_WARNING: u32 = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: u32 = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: u32 = 1;
pub const ARG_MAX: u32 = 65536;
pub const CHILD_MAX: u32 = 40;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const OPEN_MAX: u32 = 64;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const IOV_MAX: u32 = 1024;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 0;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const MB_LEN_MAX: u32 = 1;
pub const NL_ARGMAX: u32 = 32;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const CHAR_MIN: u32 = 0;
pub const TOOLCHAIN_HAS_PRAGMA_DIAG: u32 = 1;
pub const TOOLCHAIN_HAS_C_GENERIC: u32 = 1;
pub const TOOLCHAIN_HAS_C_AUTO_TYPE: u32 = 1;
pub const TOOLCHAIN_HAS_ZLA: u32 = 1;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const HAS_BUILTIN___builtin_clz: u32 = 1;
pub const HAS_BUILTIN___builtin_clzl: u32 = 1;
pub const HAS_BUILTIN___builtin_clzll: u32 = 1;
pub const HAS_BUILTIN___builtin_ctz: u32 = 1;
pub const HAS_BUILTIN___builtin_ctzl: u32 = 1;
pub const HAS_BUILTIN___builtin_ctzll: u32 = 1;
pub const UTIL_COMPL_0: u32 = 1;
pub const UTIL_COMPL_1: u32 = 0;
pub const Z_UTIL_INC_0: u32 = 1;
pub const Z_UTIL_INC_1: u32 = 2;
pub const Z_UTIL_INC_2: u32 = 3;
pub const Z_UTIL_INC_3: u32 = 4;
pub const Z_UTIL_INC_4: u32 = 5;
pub const Z_UTIL_INC_5: u32 = 6;
pub const Z_UTIL_INC_6: u32 = 7;
pub const Z_UTIL_INC_7: u32 = 8;
pub const Z_UTIL_INC_8: u32 = 9;
pub const Z_UTIL_INC_9: u32 = 10;
pub const Z_UTIL_INC_10: u32 = 11;
pub const Z_UTIL_INC_11: u32 = 12;
pub const Z_UTIL_INC_12: u32 = 13;
pub const Z_UTIL_INC_13: u32 = 14;
pub const Z_UTIL_INC_14: u32 = 15;
pub const Z_UTIL_INC_15: u32 = 16;
pub const Z_UTIL_INC_16: u32 = 17;
pub const Z_UTIL_INC_17: u32 = 18;
pub const Z_UTIL_INC_18: u32 = 19;
pub const Z_UTIL_INC_19: u32 = 20;
pub const Z_UTIL_INC_20: u32 = 21;
pub const Z_UTIL_INC_21: u32 = 22;
pub const Z_UTIL_INC_22: u32 = 23;
pub const Z_UTIL_INC_23: u32 = 24;
pub const Z_UTIL_INC_24: u32 = 25;
pub const Z_UTIL_INC_25: u32 = 26;
pub const Z_UTIL_INC_26: u32 = 27;
pub const Z_UTIL_INC_27: u32 = 28;
pub const Z_UTIL_INC_28: u32 = 29;
pub const Z_UTIL_INC_29: u32 = 30;
pub const Z_UTIL_INC_30: u32 = 31;
pub const Z_UTIL_INC_31: u32 = 32;
pub const Z_UTIL_INC_32: u32 = 33;
pub const Z_UTIL_INC_33: u32 = 34;
pub const Z_UTIL_INC_34: u32 = 35;
pub const Z_UTIL_INC_35: u32 = 36;
pub const Z_UTIL_INC_36: u32 = 37;
pub const Z_UTIL_INC_37: u32 = 38;
pub const Z_UTIL_INC_38: u32 = 39;
pub const Z_UTIL_INC_39: u32 = 40;
pub const Z_UTIL_INC_40: u32 = 41;
pub const Z_UTIL_INC_41: u32 = 42;
pub const Z_UTIL_INC_42: u32 = 43;
pub const Z_UTIL_INC_43: u32 = 44;
pub const Z_UTIL_INC_44: u32 = 45;
pub const Z_UTIL_INC_45: u32 = 46;
pub const Z_UTIL_INC_46: u32 = 47;
pub const Z_UTIL_INC_47: u32 = 48;
pub const Z_UTIL_INC_48: u32 = 49;
pub const Z_UTIL_INC_49: u32 = 50;
pub const Z_UTIL_INC_50: u32 = 51;
pub const Z_UTIL_INC_51: u32 = 52;
pub const Z_UTIL_INC_52: u32 = 53;
pub const Z_UTIL_INC_53: u32 = 54;
pub const Z_UTIL_INC_54: u32 = 55;
pub const Z_UTIL_INC_55: u32 = 56;
pub const Z_UTIL_INC_56: u32 = 57;
pub const Z_UTIL_INC_57: u32 = 58;
pub const Z_UTIL_INC_58: u32 = 59;
pub const Z_UTIL_INC_59: u32 = 60;
pub const Z_UTIL_INC_60: u32 = 61;
pub const Z_UTIL_INC_61: u32 = 62;
pub const Z_UTIL_INC_62: u32 = 63;
pub const Z_UTIL_INC_63: u32 = 64;
pub const Z_UTIL_INC_64: u32 = 65;
pub const Z_UTIL_INC_65: u32 = 66;
pub const Z_UTIL_INC_66: u32 = 67;
pub const Z_UTIL_INC_67: u32 = 68;
pub const Z_UTIL_INC_68: u32 = 69;
pub const Z_UTIL_INC_69: u32 = 70;
pub const Z_UTIL_INC_70: u32 = 71;
pub const Z_UTIL_INC_71: u32 = 72;
pub const Z_UTIL_INC_72: u32 = 73;
pub const Z_UTIL_INC_73: u32 = 74;
pub const Z_UTIL_INC_74: u32 = 75;
pub const Z_UTIL_INC_75: u32 = 76;
pub const Z_UTIL_INC_76: u32 = 77;
pub const Z_UTIL_INC_77: u32 = 78;
pub const Z_UTIL_INC_78: u32 = 79;
pub const Z_UTIL_INC_79: u32 = 80;
pub const Z_UTIL_INC_80: u32 = 81;
pub const Z_UTIL_INC_81: u32 = 82;
pub const Z_UTIL_INC_82: u32 = 83;
pub const Z_UTIL_INC_83: u32 = 84;
pub const Z_UTIL_INC_84: u32 = 85;
pub const Z_UTIL_INC_85: u32 = 86;
pub const Z_UTIL_INC_86: u32 = 87;
pub const Z_UTIL_INC_87: u32 = 88;
pub const Z_UTIL_INC_88: u32 = 89;
pub const Z_UTIL_INC_89: u32 = 90;
pub const Z_UTIL_INC_90: u32 = 91;
pub const Z_UTIL_INC_91: u32 = 92;
pub const Z_UTIL_INC_92: u32 = 93;
pub const Z_UTIL_INC_93: u32 = 94;
pub const Z_UTIL_INC_94: u32 = 95;
pub const Z_UTIL_INC_95: u32 = 96;
pub const Z_UTIL_INC_96: u32 = 97;
pub const Z_UTIL_INC_97: u32 = 98;
pub const Z_UTIL_INC_98: u32 = 99;
pub const Z_UTIL_INC_99: u32 = 100;
pub const Z_UTIL_INC_100: u32 = 101;
pub const Z_UTIL_INC_101: u32 = 102;
pub const Z_UTIL_INC_102: u32 = 103;
pub const Z_UTIL_INC_103: u32 = 104;
pub const Z_UTIL_INC_104: u32 = 105;
pub const Z_UTIL_INC_105: u32 = 106;
pub const Z_UTIL_INC_106: u32 = 107;
pub const Z_UTIL_INC_107: u32 = 108;
pub const Z_UTIL_INC_108: u32 = 109;
pub const Z_UTIL_INC_109: u32 = 110;
pub const Z_UTIL_INC_110: u32 = 111;
pub const Z_UTIL_INC_111: u32 = 112;
pub const Z_UTIL_INC_112: u32 = 113;
pub const Z_UTIL_INC_113: u32 = 114;
pub const Z_UTIL_INC_114: u32 = 115;
pub const Z_UTIL_INC_115: u32 = 116;
pub const Z_UTIL_INC_116: u32 = 117;
pub const Z_UTIL_INC_117: u32 = 118;
pub const Z_UTIL_INC_118: u32 = 119;
pub const Z_UTIL_INC_119: u32 = 120;
pub const Z_UTIL_INC_120: u32 = 121;
pub const Z_UTIL_INC_121: u32 = 122;
pub const Z_UTIL_INC_122: u32 = 123;
pub const Z_UTIL_INC_123: u32 = 124;
pub const Z_UTIL_INC_124: u32 = 125;
pub const Z_UTIL_INC_125: u32 = 126;
pub const Z_UTIL_INC_126: u32 = 127;
pub const Z_UTIL_INC_127: u32 = 128;
pub const Z_UTIL_INC_128: u32 = 129;
pub const Z_UTIL_INC_129: u32 = 130;
pub const Z_UTIL_INC_130: u32 = 131;
pub const Z_UTIL_INC_131: u32 = 132;
pub const Z_UTIL_INC_132: u32 = 133;
pub const Z_UTIL_INC_133: u32 = 134;
pub const Z_UTIL_INC_134: u32 = 135;
pub const Z_UTIL_INC_135: u32 = 136;
pub const Z_UTIL_INC_136: u32 = 137;
pub const Z_UTIL_INC_137: u32 = 138;
pub const Z_UTIL_INC_138: u32 = 139;
pub const Z_UTIL_INC_139: u32 = 140;
pub const Z_UTIL_INC_140: u32 = 141;
pub const Z_UTIL_INC_141: u32 = 142;
pub const Z_UTIL_INC_142: u32 = 143;
pub const Z_UTIL_INC_143: u32 = 144;
pub const Z_UTIL_INC_144: u32 = 145;
pub const Z_UTIL_INC_145: u32 = 146;
pub const Z_UTIL_INC_146: u32 = 147;
pub const Z_UTIL_INC_147: u32 = 148;
pub const Z_UTIL_INC_148: u32 = 149;
pub const Z_UTIL_INC_149: u32 = 150;
pub const Z_UTIL_INC_150: u32 = 151;
pub const Z_UTIL_INC_151: u32 = 152;
pub const Z_UTIL_INC_152: u32 = 153;
pub const Z_UTIL_INC_153: u32 = 154;
pub const Z_UTIL_INC_154: u32 = 155;
pub const Z_UTIL_INC_155: u32 = 156;
pub const Z_UTIL_INC_156: u32 = 157;
pub const Z_UTIL_INC_157: u32 = 158;
pub const Z_UTIL_INC_158: u32 = 159;
pub const Z_UTIL_INC_159: u32 = 160;
pub const Z_UTIL_INC_160: u32 = 161;
pub const Z_UTIL_INC_161: u32 = 162;
pub const Z_UTIL_INC_162: u32 = 163;
pub const Z_UTIL_INC_163: u32 = 164;
pub const Z_UTIL_INC_164: u32 = 165;
pub const Z_UTIL_INC_165: u32 = 166;
pub const Z_UTIL_INC_166: u32 = 167;
pub const Z_UTIL_INC_167: u32 = 168;
pub const Z_UTIL_INC_168: u32 = 169;
pub const Z_UTIL_INC_169: u32 = 170;
pub const Z_UTIL_INC_170: u32 = 171;
pub const Z_UTIL_INC_171: u32 = 172;
pub const Z_UTIL_INC_172: u32 = 173;
pub const Z_UTIL_INC_173: u32 = 174;
pub const Z_UTIL_INC_174: u32 = 175;
pub const Z_UTIL_INC_175: u32 = 176;
pub const Z_UTIL_INC_176: u32 = 177;
pub const Z_UTIL_INC_177: u32 = 178;
pub const Z_UTIL_INC_178: u32 = 179;
pub const Z_UTIL_INC_179: u32 = 180;
pub const Z_UTIL_INC_180: u32 = 181;
pub const Z_UTIL_INC_181: u32 = 182;
pub const Z_UTIL_INC_182: u32 = 183;
pub const Z_UTIL_INC_183: u32 = 184;
pub const Z_UTIL_INC_184: u32 = 185;
pub const Z_UTIL_INC_185: u32 = 186;
pub const Z_UTIL_INC_186: u32 = 187;
pub const Z_UTIL_INC_187: u32 = 188;
pub const Z_UTIL_INC_188: u32 = 189;
pub const Z_UTIL_INC_189: u32 = 190;
pub const Z_UTIL_INC_190: u32 = 191;
pub const Z_UTIL_INC_191: u32 = 192;
pub const Z_UTIL_INC_192: u32 = 193;
pub const Z_UTIL_INC_193: u32 = 194;
pub const Z_UTIL_INC_194: u32 = 195;
pub const Z_UTIL_INC_195: u32 = 196;
pub const Z_UTIL_INC_196: u32 = 197;
pub const Z_UTIL_INC_197: u32 = 198;
pub const Z_UTIL_INC_198: u32 = 199;
pub const Z_UTIL_INC_199: u32 = 200;
pub const Z_UTIL_INC_200: u32 = 201;
pub const Z_UTIL_INC_201: u32 = 202;
pub const Z_UTIL_INC_202: u32 = 203;
pub const Z_UTIL_INC_203: u32 = 204;
pub const Z_UTIL_INC_204: u32 = 205;
pub const Z_UTIL_INC_205: u32 = 206;
pub const Z_UTIL_INC_206: u32 = 207;
pub const Z_UTIL_INC_207: u32 = 208;
pub const Z_UTIL_INC_208: u32 = 209;
pub const Z_UTIL_INC_209: u32 = 210;
pub const Z_UTIL_INC_210: u32 = 211;
pub const Z_UTIL_INC_211: u32 = 212;
pub const Z_UTIL_INC_212: u32 = 213;
pub const Z_UTIL_INC_213: u32 = 214;
pub const Z_UTIL_INC_214: u32 = 215;
pub const Z_UTIL_INC_215: u32 = 216;
pub const Z_UTIL_INC_216: u32 = 217;
pub const Z_UTIL_INC_217: u32 = 218;
pub const Z_UTIL_INC_218: u32 = 219;
pub const Z_UTIL_INC_219: u32 = 220;
pub const Z_UTIL_INC_220: u32 = 221;
pub const Z_UTIL_INC_221: u32 = 222;
pub const Z_UTIL_INC_222: u32 = 223;
pub const Z_UTIL_INC_223: u32 = 224;
pub const Z_UTIL_INC_224: u32 = 225;
pub const Z_UTIL_INC_225: u32 = 226;
pub const Z_UTIL_INC_226: u32 = 227;
pub const Z_UTIL_INC_227: u32 = 228;
pub const Z_UTIL_INC_228: u32 = 229;
pub const Z_UTIL_INC_229: u32 = 230;
pub const Z_UTIL_INC_230: u32 = 231;
pub const Z_UTIL_INC_231: u32 = 232;
pub const Z_UTIL_INC_232: u32 = 233;
pub const Z_UTIL_INC_233: u32 = 234;
pub const Z_UTIL_INC_234: u32 = 235;
pub const Z_UTIL_INC_235: u32 = 236;
pub const Z_UTIL_INC_236: u32 = 237;
pub const Z_UTIL_INC_237: u32 = 238;
pub const Z_UTIL_INC_238: u32 = 239;
pub const Z_UTIL_INC_239: u32 = 240;
pub const Z_UTIL_INC_240: u32 = 241;
pub const Z_UTIL_INC_241: u32 = 242;
pub const Z_UTIL_INC_242: u32 = 243;
pub const Z_UTIL_INC_243: u32 = 244;
pub const Z_UTIL_INC_244: u32 = 245;
pub const Z_UTIL_INC_245: u32 = 246;
pub const Z_UTIL_INC_246: u32 = 247;
pub const Z_UTIL_INC_247: u32 = 248;
pub const Z_UTIL_INC_248: u32 = 249;
pub const Z_UTIL_INC_249: u32 = 250;
pub const Z_UTIL_INC_250: u32 = 251;
pub const Z_UTIL_INC_251: u32 = 252;
pub const Z_UTIL_INC_252: u32 = 253;
pub const Z_UTIL_INC_253: u32 = 254;
pub const Z_UTIL_INC_254: u32 = 255;
pub const Z_UTIL_INC_255: u32 = 256;
pub const Z_UTIL_INC_256: u32 = 257;
pub const Z_UTIL_INC_257: u32 = 258;
pub const Z_UTIL_INC_258: u32 = 259;
pub const Z_UTIL_INC_259: u32 = 260;
pub const Z_UTIL_INC_260: u32 = 261;
pub const Z_UTIL_INC_261: u32 = 262;
pub const Z_UTIL_INC_262: u32 = 263;
pub const Z_UTIL_INC_263: u32 = 264;
pub const Z_UTIL_INC_264: u32 = 265;
pub const Z_UTIL_INC_265: u32 = 266;
pub const Z_UTIL_INC_266: u32 = 267;
pub const Z_UTIL_INC_267: u32 = 268;
pub const Z_UTIL_INC_268: u32 = 269;
pub const Z_UTIL_INC_269: u32 = 270;
pub const Z_UTIL_INC_270: u32 = 271;
pub const Z_UTIL_INC_271: u32 = 272;
pub const Z_UTIL_INC_272: u32 = 273;
pub const Z_UTIL_INC_273: u32 = 274;
pub const Z_UTIL_INC_274: u32 = 275;
pub const Z_UTIL_INC_275: u32 = 276;
pub const Z_UTIL_INC_276: u32 = 277;
pub const Z_UTIL_INC_277: u32 = 278;
pub const Z_UTIL_INC_278: u32 = 279;
pub const Z_UTIL_INC_279: u32 = 280;
pub const Z_UTIL_INC_280: u32 = 281;
pub const Z_UTIL_INC_281: u32 = 282;
pub const Z_UTIL_INC_282: u32 = 283;
pub const Z_UTIL_INC_283: u32 = 284;
pub const Z_UTIL_INC_284: u32 = 285;
pub const Z_UTIL_INC_285: u32 = 286;
pub const Z_UTIL_INC_286: u32 = 287;
pub const Z_UTIL_INC_287: u32 = 288;
pub const Z_UTIL_INC_288: u32 = 289;
pub const Z_UTIL_INC_289: u32 = 290;
pub const Z_UTIL_INC_290: u32 = 291;
pub const Z_UTIL_INC_291: u32 = 292;
pub const Z_UTIL_INC_292: u32 = 293;
pub const Z_UTIL_INC_293: u32 = 294;
pub const Z_UTIL_INC_294: u32 = 295;
pub const Z_UTIL_INC_295: u32 = 296;
pub const Z_UTIL_INC_296: u32 = 297;
pub const Z_UTIL_INC_297: u32 = 298;
pub const Z_UTIL_INC_298: u32 = 299;
pub const Z_UTIL_INC_299: u32 = 300;
pub const Z_UTIL_INC_300: u32 = 301;
pub const Z_UTIL_INC_301: u32 = 302;
pub const Z_UTIL_INC_302: u32 = 303;
pub const Z_UTIL_INC_303: u32 = 304;
pub const Z_UTIL_INC_304: u32 = 305;
pub const Z_UTIL_INC_305: u32 = 306;
pub const Z_UTIL_INC_306: u32 = 307;
pub const Z_UTIL_INC_307: u32 = 308;
pub const Z_UTIL_INC_308: u32 = 309;
pub const Z_UTIL_INC_309: u32 = 310;
pub const Z_UTIL_INC_310: u32 = 311;
pub const Z_UTIL_INC_311: u32 = 312;
pub const Z_UTIL_INC_312: u32 = 313;
pub const Z_UTIL_INC_313: u32 = 314;
pub const Z_UTIL_INC_314: u32 = 315;
pub const Z_UTIL_INC_315: u32 = 316;
pub const Z_UTIL_INC_316: u32 = 317;
pub const Z_UTIL_INC_317: u32 = 318;
pub const Z_UTIL_INC_318: u32 = 319;
pub const Z_UTIL_INC_319: u32 = 320;
pub const Z_UTIL_INC_320: u32 = 321;
pub const Z_UTIL_INC_321: u32 = 322;
pub const Z_UTIL_INC_322: u32 = 323;
pub const Z_UTIL_INC_323: u32 = 324;
pub const Z_UTIL_INC_324: u32 = 325;
pub const Z_UTIL_INC_325: u32 = 326;
pub const Z_UTIL_INC_326: u32 = 327;
pub const Z_UTIL_INC_327: u32 = 328;
pub const Z_UTIL_INC_328: u32 = 329;
pub const Z_UTIL_INC_329: u32 = 330;
pub const Z_UTIL_INC_330: u32 = 331;
pub const Z_UTIL_INC_331: u32 = 332;
pub const Z_UTIL_INC_332: u32 = 333;
pub const Z_UTIL_INC_333: u32 = 334;
pub const Z_UTIL_INC_334: u32 = 335;
pub const Z_UTIL_INC_335: u32 = 336;
pub const Z_UTIL_INC_336: u32 = 337;
pub const Z_UTIL_INC_337: u32 = 338;
pub const Z_UTIL_INC_338: u32 = 339;
pub const Z_UTIL_INC_339: u32 = 340;
pub const Z_UTIL_INC_340: u32 = 341;
pub const Z_UTIL_INC_341: u32 = 342;
pub const Z_UTIL_INC_342: u32 = 343;
pub const Z_UTIL_INC_343: u32 = 344;
pub const Z_UTIL_INC_344: u32 = 345;
pub const Z_UTIL_INC_345: u32 = 346;
pub const Z_UTIL_INC_346: u32 = 347;
pub const Z_UTIL_INC_347: u32 = 348;
pub const Z_UTIL_INC_348: u32 = 349;
pub const Z_UTIL_INC_349: u32 = 350;
pub const Z_UTIL_INC_350: u32 = 351;
pub const Z_UTIL_INC_351: u32 = 352;
pub const Z_UTIL_INC_352: u32 = 353;
pub const Z_UTIL_INC_353: u32 = 354;
pub const Z_UTIL_INC_354: u32 = 355;
pub const Z_UTIL_INC_355: u32 = 356;
pub const Z_UTIL_INC_356: u32 = 357;
pub const Z_UTIL_INC_357: u32 = 358;
pub const Z_UTIL_INC_358: u32 = 359;
pub const Z_UTIL_INC_359: u32 = 360;
pub const Z_UTIL_INC_360: u32 = 361;
pub const Z_UTIL_INC_361: u32 = 362;
pub const Z_UTIL_INC_362: u32 = 363;
pub const Z_UTIL_INC_363: u32 = 364;
pub const Z_UTIL_INC_364: u32 = 365;
pub const Z_UTIL_INC_365: u32 = 366;
pub const Z_UTIL_INC_366: u32 = 367;
pub const Z_UTIL_INC_367: u32 = 368;
pub const Z_UTIL_INC_368: u32 = 369;
pub const Z_UTIL_INC_369: u32 = 370;
pub const Z_UTIL_INC_370: u32 = 371;
pub const Z_UTIL_INC_371: u32 = 372;
pub const Z_UTIL_INC_372: u32 = 373;
pub const Z_UTIL_INC_373: u32 = 374;
pub const Z_UTIL_INC_374: u32 = 375;
pub const Z_UTIL_INC_375: u32 = 376;
pub const Z_UTIL_INC_376: u32 = 377;
pub const Z_UTIL_INC_377: u32 = 378;
pub const Z_UTIL_INC_378: u32 = 379;
pub const Z_UTIL_INC_379: u32 = 380;
pub const Z_UTIL_INC_380: u32 = 381;
pub const Z_UTIL_INC_381: u32 = 382;
pub const Z_UTIL_INC_382: u32 = 383;
pub const Z_UTIL_INC_383: u32 = 384;
pub const Z_UTIL_INC_384: u32 = 385;
pub const Z_UTIL_INC_385: u32 = 386;
pub const Z_UTIL_INC_386: u32 = 387;
pub const Z_UTIL_INC_387: u32 = 388;
pub const Z_UTIL_INC_388: u32 = 389;
pub const Z_UTIL_INC_389: u32 = 390;
pub const Z_UTIL_INC_390: u32 = 391;
pub const Z_UTIL_INC_391: u32 = 392;
pub const Z_UTIL_INC_392: u32 = 393;
pub const Z_UTIL_INC_393: u32 = 394;
pub const Z_UTIL_INC_394: u32 = 395;
pub const Z_UTIL_INC_395: u32 = 396;
pub const Z_UTIL_INC_396: u32 = 397;
pub const Z_UTIL_INC_397: u32 = 398;
pub const Z_UTIL_INC_398: u32 = 399;
pub const Z_UTIL_INC_399: u32 = 400;
pub const Z_UTIL_INC_400: u32 = 401;
pub const Z_UTIL_INC_401: u32 = 402;
pub const Z_UTIL_INC_402: u32 = 403;
pub const Z_UTIL_INC_403: u32 = 404;
pub const Z_UTIL_INC_404: u32 = 405;
pub const Z_UTIL_INC_405: u32 = 406;
pub const Z_UTIL_INC_406: u32 = 407;
pub const Z_UTIL_INC_407: u32 = 408;
pub const Z_UTIL_INC_408: u32 = 409;
pub const Z_UTIL_INC_409: u32 = 410;
pub const Z_UTIL_INC_410: u32 = 411;
pub const Z_UTIL_INC_411: u32 = 412;
pub const Z_UTIL_INC_412: u32 = 413;
pub const Z_UTIL_INC_413: u32 = 414;
pub const Z_UTIL_INC_414: u32 = 415;
pub const Z_UTIL_INC_415: u32 = 416;
pub const Z_UTIL_INC_416: u32 = 417;
pub const Z_UTIL_INC_417: u32 = 418;
pub const Z_UTIL_INC_418: u32 = 419;
pub const Z_UTIL_INC_419: u32 = 420;
pub const Z_UTIL_INC_420: u32 = 421;
pub const Z_UTIL_INC_421: u32 = 422;
pub const Z_UTIL_INC_422: u32 = 423;
pub const Z_UTIL_INC_423: u32 = 424;
pub const Z_UTIL_INC_424: u32 = 425;
pub const Z_UTIL_INC_425: u32 = 426;
pub const Z_UTIL_INC_426: u32 = 427;
pub const Z_UTIL_INC_427: u32 = 428;
pub const Z_UTIL_INC_428: u32 = 429;
pub const Z_UTIL_INC_429: u32 = 430;
pub const Z_UTIL_INC_430: u32 = 431;
pub const Z_UTIL_INC_431: u32 = 432;
pub const Z_UTIL_INC_432: u32 = 433;
pub const Z_UTIL_INC_433: u32 = 434;
pub const Z_UTIL_INC_434: u32 = 435;
pub const Z_UTIL_INC_435: u32 = 436;
pub const Z_UTIL_INC_436: u32 = 437;
pub const Z_UTIL_INC_437: u32 = 438;
pub const Z_UTIL_INC_438: u32 = 439;
pub const Z_UTIL_INC_439: u32 = 440;
pub const Z_UTIL_INC_440: u32 = 441;
pub const Z_UTIL_INC_441: u32 = 442;
pub const Z_UTIL_INC_442: u32 = 443;
pub const Z_UTIL_INC_443: u32 = 444;
pub const Z_UTIL_INC_444: u32 = 445;
pub const Z_UTIL_INC_445: u32 = 446;
pub const Z_UTIL_INC_446: u32 = 447;
pub const Z_UTIL_INC_447: u32 = 448;
pub const Z_UTIL_INC_448: u32 = 449;
pub const Z_UTIL_INC_449: u32 = 450;
pub const Z_UTIL_INC_450: u32 = 451;
pub const Z_UTIL_INC_451: u32 = 452;
pub const Z_UTIL_INC_452: u32 = 453;
pub const Z_UTIL_INC_453: u32 = 454;
pub const Z_UTIL_INC_454: u32 = 455;
pub const Z_UTIL_INC_455: u32 = 456;
pub const Z_UTIL_INC_456: u32 = 457;
pub const Z_UTIL_INC_457: u32 = 458;
pub const Z_UTIL_INC_458: u32 = 459;
pub const Z_UTIL_INC_459: u32 = 460;
pub const Z_UTIL_INC_460: u32 = 461;
pub const Z_UTIL_INC_461: u32 = 462;
pub const Z_UTIL_INC_462: u32 = 463;
pub const Z_UTIL_INC_463: u32 = 464;
pub const Z_UTIL_INC_464: u32 = 465;
pub const Z_UTIL_INC_465: u32 = 466;
pub const Z_UTIL_INC_466: u32 = 467;
pub const Z_UTIL_INC_467: u32 = 468;
pub const Z_UTIL_INC_468: u32 = 469;
pub const Z_UTIL_INC_469: u32 = 470;
pub const Z_UTIL_INC_470: u32 = 471;
pub const Z_UTIL_INC_471: u32 = 472;
pub const Z_UTIL_INC_472: u32 = 473;
pub const Z_UTIL_INC_473: u32 = 474;
pub const Z_UTIL_INC_474: u32 = 475;
pub const Z_UTIL_INC_475: u32 = 476;
pub const Z_UTIL_INC_476: u32 = 477;
pub const Z_UTIL_INC_477: u32 = 478;
pub const Z_UTIL_INC_478: u32 = 479;
pub const Z_UTIL_INC_479: u32 = 480;
pub const Z_UTIL_INC_480: u32 = 481;
pub const Z_UTIL_INC_481: u32 = 482;
pub const Z_UTIL_INC_482: u32 = 483;
pub const Z_UTIL_INC_483: u32 = 484;
pub const Z_UTIL_INC_484: u32 = 485;
pub const Z_UTIL_INC_485: u32 = 486;
pub const Z_UTIL_INC_486: u32 = 487;
pub const Z_UTIL_INC_487: u32 = 488;
pub const Z_UTIL_INC_488: u32 = 489;
pub const Z_UTIL_INC_489: u32 = 490;
pub const Z_UTIL_INC_490: u32 = 491;
pub const Z_UTIL_INC_491: u32 = 492;
pub const Z_UTIL_INC_492: u32 = 493;
pub const Z_UTIL_INC_493: u32 = 494;
pub const Z_UTIL_INC_494: u32 = 495;
pub const Z_UTIL_INC_495: u32 = 496;
pub const Z_UTIL_INC_496: u32 = 497;
pub const Z_UTIL_INC_497: u32 = 498;
pub const Z_UTIL_INC_498: u32 = 499;
pub const Z_UTIL_INC_499: u32 = 500;
pub const Z_UTIL_INC_500: u32 = 501;
pub const Z_UTIL_INC_501: u32 = 502;
pub const Z_UTIL_INC_502: u32 = 503;
pub const Z_UTIL_INC_503: u32 = 504;
pub const Z_UTIL_INC_504: u32 = 505;
pub const Z_UTIL_INC_505: u32 = 506;
pub const Z_UTIL_INC_506: u32 = 507;
pub const Z_UTIL_INC_507: u32 = 508;
pub const Z_UTIL_INC_508: u32 = 509;
pub const Z_UTIL_INC_509: u32 = 510;
pub const Z_UTIL_INC_510: u32 = 511;
pub const Z_UTIL_INC_511: u32 = 512;
pub const Z_UTIL_INC_512: u32 = 513;
pub const Z_UTIL_INC_513: u32 = 514;
pub const Z_UTIL_INC_514: u32 = 515;
pub const Z_UTIL_INC_515: u32 = 516;
pub const Z_UTIL_INC_516: u32 = 517;
pub const Z_UTIL_INC_517: u32 = 518;
pub const Z_UTIL_INC_518: u32 = 519;
pub const Z_UTIL_INC_519: u32 = 520;
pub const Z_UTIL_INC_520: u32 = 521;
pub const Z_UTIL_INC_521: u32 = 522;
pub const Z_UTIL_INC_522: u32 = 523;
pub const Z_UTIL_INC_523: u32 = 524;
pub const Z_UTIL_INC_524: u32 = 525;
pub const Z_UTIL_INC_525: u32 = 526;
pub const Z_UTIL_INC_526: u32 = 527;
pub const Z_UTIL_INC_527: u32 = 528;
pub const Z_UTIL_INC_528: u32 = 529;
pub const Z_UTIL_INC_529: u32 = 530;
pub const Z_UTIL_INC_530: u32 = 531;
pub const Z_UTIL_INC_531: u32 = 532;
pub const Z_UTIL_INC_532: u32 = 533;
pub const Z_UTIL_INC_533: u32 = 534;
pub const Z_UTIL_INC_534: u32 = 535;
pub const Z_UTIL_INC_535: u32 = 536;
pub const Z_UTIL_INC_536: u32 = 537;
pub const Z_UTIL_INC_537: u32 = 538;
pub const Z_UTIL_INC_538: u32 = 539;
pub const Z_UTIL_INC_539: u32 = 540;
pub const Z_UTIL_INC_540: u32 = 541;
pub const Z_UTIL_INC_541: u32 = 542;
pub const Z_UTIL_INC_542: u32 = 543;
pub const Z_UTIL_INC_543: u32 = 544;
pub const Z_UTIL_INC_544: u32 = 545;
pub const Z_UTIL_INC_545: u32 = 546;
pub const Z_UTIL_INC_546: u32 = 547;
pub const Z_UTIL_INC_547: u32 = 548;
pub const Z_UTIL_INC_548: u32 = 549;
pub const Z_UTIL_INC_549: u32 = 550;
pub const Z_UTIL_INC_550: u32 = 551;
pub const Z_UTIL_INC_551: u32 = 552;
pub const Z_UTIL_INC_552: u32 = 553;
pub const Z_UTIL_INC_553: u32 = 554;
pub const Z_UTIL_INC_554: u32 = 555;
pub const Z_UTIL_INC_555: u32 = 556;
pub const Z_UTIL_INC_556: u32 = 557;
pub const Z_UTIL_INC_557: u32 = 558;
pub const Z_UTIL_INC_558: u32 = 559;
pub const Z_UTIL_INC_559: u32 = 560;
pub const Z_UTIL_INC_560: u32 = 561;
pub const Z_UTIL_INC_561: u32 = 562;
pub const Z_UTIL_INC_562: u32 = 563;
pub const Z_UTIL_INC_563: u32 = 564;
pub const Z_UTIL_INC_564: u32 = 565;
pub const Z_UTIL_INC_565: u32 = 566;
pub const Z_UTIL_INC_566: u32 = 567;
pub const Z_UTIL_INC_567: u32 = 568;
pub const Z_UTIL_INC_568: u32 = 569;
pub const Z_UTIL_INC_569: u32 = 570;
pub const Z_UTIL_INC_570: u32 = 571;
pub const Z_UTIL_INC_571: u32 = 572;
pub const Z_UTIL_INC_572: u32 = 573;
pub const Z_UTIL_INC_573: u32 = 574;
pub const Z_UTIL_INC_574: u32 = 575;
pub const Z_UTIL_INC_575: u32 = 576;
pub const Z_UTIL_INC_576: u32 = 577;
pub const Z_UTIL_INC_577: u32 = 578;
pub const Z_UTIL_INC_578: u32 = 579;
pub const Z_UTIL_INC_579: u32 = 580;
pub const Z_UTIL_INC_580: u32 = 581;
pub const Z_UTIL_INC_581: u32 = 582;
pub const Z_UTIL_INC_582: u32 = 583;
pub const Z_UTIL_INC_583: u32 = 584;
pub const Z_UTIL_INC_584: u32 = 585;
pub const Z_UTIL_INC_585: u32 = 586;
pub const Z_UTIL_INC_586: u32 = 587;
pub const Z_UTIL_INC_587: u32 = 588;
pub const Z_UTIL_INC_588: u32 = 589;
pub const Z_UTIL_INC_589: u32 = 590;
pub const Z_UTIL_INC_590: u32 = 591;
pub const Z_UTIL_INC_591: u32 = 592;
pub const Z_UTIL_INC_592: u32 = 593;
pub const Z_UTIL_INC_593: u32 = 594;
pub const Z_UTIL_INC_594: u32 = 595;
pub const Z_UTIL_INC_595: u32 = 596;
pub const Z_UTIL_INC_596: u32 = 597;
pub const Z_UTIL_INC_597: u32 = 598;
pub const Z_UTIL_INC_598: u32 = 599;
pub const Z_UTIL_INC_599: u32 = 600;
pub const Z_UTIL_INC_600: u32 = 601;
pub const Z_UTIL_INC_601: u32 = 602;
pub const Z_UTIL_INC_602: u32 = 603;
pub const Z_UTIL_INC_603: u32 = 604;
pub const Z_UTIL_INC_604: u32 = 605;
pub const Z_UTIL_INC_605: u32 = 606;
pub const Z_UTIL_INC_606: u32 = 607;
pub const Z_UTIL_INC_607: u32 = 608;
pub const Z_UTIL_INC_608: u32 = 609;
pub const Z_UTIL_INC_609: u32 = 610;
pub const Z_UTIL_INC_610: u32 = 611;
pub const Z_UTIL_INC_611: u32 = 612;
pub const Z_UTIL_INC_612: u32 = 613;
pub const Z_UTIL_INC_613: u32 = 614;
pub const Z_UTIL_INC_614: u32 = 615;
pub const Z_UTIL_INC_615: u32 = 616;
pub const Z_UTIL_INC_616: u32 = 617;
pub const Z_UTIL_INC_617: u32 = 618;
pub const Z_UTIL_INC_618: u32 = 619;
pub const Z_UTIL_INC_619: u32 = 620;
pub const Z_UTIL_INC_620: u32 = 621;
pub const Z_UTIL_INC_621: u32 = 622;
pub const Z_UTIL_INC_622: u32 = 623;
pub const Z_UTIL_INC_623: u32 = 624;
pub const Z_UTIL_INC_624: u32 = 625;
pub const Z_UTIL_INC_625: u32 = 626;
pub const Z_UTIL_INC_626: u32 = 627;
pub const Z_UTIL_INC_627: u32 = 628;
pub const Z_UTIL_INC_628: u32 = 629;
pub const Z_UTIL_INC_629: u32 = 630;
pub const Z_UTIL_INC_630: u32 = 631;
pub const Z_UTIL_INC_631: u32 = 632;
pub const Z_UTIL_INC_632: u32 = 633;
pub const Z_UTIL_INC_633: u32 = 634;
pub const Z_UTIL_INC_634: u32 = 635;
pub const Z_UTIL_INC_635: u32 = 636;
pub const Z_UTIL_INC_636: u32 = 637;
pub const Z_UTIL_INC_637: u32 = 638;
pub const Z_UTIL_INC_638: u32 = 639;
pub const Z_UTIL_INC_639: u32 = 640;
pub const Z_UTIL_INC_640: u32 = 641;
pub const Z_UTIL_INC_641: u32 = 642;
pub const Z_UTIL_INC_642: u32 = 643;
pub const Z_UTIL_INC_643: u32 = 644;
pub const Z_UTIL_INC_644: u32 = 645;
pub const Z_UTIL_INC_645: u32 = 646;
pub const Z_UTIL_INC_646: u32 = 647;
pub const Z_UTIL_INC_647: u32 = 648;
pub const Z_UTIL_INC_648: u32 = 649;
pub const Z_UTIL_INC_649: u32 = 650;
pub const Z_UTIL_INC_650: u32 = 651;
pub const Z_UTIL_INC_651: u32 = 652;
pub const Z_UTIL_INC_652: u32 = 653;
pub const Z_UTIL_INC_653: u32 = 654;
pub const Z_UTIL_INC_654: u32 = 655;
pub const Z_UTIL_INC_655: u32 = 656;
pub const Z_UTIL_INC_656: u32 = 657;
pub const Z_UTIL_INC_657: u32 = 658;
pub const Z_UTIL_INC_658: u32 = 659;
pub const Z_UTIL_INC_659: u32 = 660;
pub const Z_UTIL_INC_660: u32 = 661;
pub const Z_UTIL_INC_661: u32 = 662;
pub const Z_UTIL_INC_662: u32 = 663;
pub const Z_UTIL_INC_663: u32 = 664;
pub const Z_UTIL_INC_664: u32 = 665;
pub const Z_UTIL_INC_665: u32 = 666;
pub const Z_UTIL_INC_666: u32 = 667;
pub const Z_UTIL_INC_667: u32 = 668;
pub const Z_UTIL_INC_668: u32 = 669;
pub const Z_UTIL_INC_669: u32 = 670;
pub const Z_UTIL_INC_670: u32 = 671;
pub const Z_UTIL_INC_671: u32 = 672;
pub const Z_UTIL_INC_672: u32 = 673;
pub const Z_UTIL_INC_673: u32 = 674;
pub const Z_UTIL_INC_674: u32 = 675;
pub const Z_UTIL_INC_675: u32 = 676;
pub const Z_UTIL_INC_676: u32 = 677;
pub const Z_UTIL_INC_677: u32 = 678;
pub const Z_UTIL_INC_678: u32 = 679;
pub const Z_UTIL_INC_679: u32 = 680;
pub const Z_UTIL_INC_680: u32 = 681;
pub const Z_UTIL_INC_681: u32 = 682;
pub const Z_UTIL_INC_682: u32 = 683;
pub const Z_UTIL_INC_683: u32 = 684;
pub const Z_UTIL_INC_684: u32 = 685;
pub const Z_UTIL_INC_685: u32 = 686;
pub const Z_UTIL_INC_686: u32 = 687;
pub const Z_UTIL_INC_687: u32 = 688;
pub const Z_UTIL_INC_688: u32 = 689;
pub const Z_UTIL_INC_689: u32 = 690;
pub const Z_UTIL_INC_690: u32 = 691;
pub const Z_UTIL_INC_691: u32 = 692;
pub const Z_UTIL_INC_692: u32 = 693;
pub const Z_UTIL_INC_693: u32 = 694;
pub const Z_UTIL_INC_694: u32 = 695;
pub const Z_UTIL_INC_695: u32 = 696;
pub const Z_UTIL_INC_696: u32 = 697;
pub const Z_UTIL_INC_697: u32 = 698;
pub const Z_UTIL_INC_698: u32 = 699;
pub const Z_UTIL_INC_699: u32 = 700;
pub const Z_UTIL_INC_700: u32 = 701;
pub const Z_UTIL_INC_701: u32 = 702;
pub const Z_UTIL_INC_702: u32 = 703;
pub const Z_UTIL_INC_703: u32 = 704;
pub const Z_UTIL_INC_704: u32 = 705;
pub const Z_UTIL_INC_705: u32 = 706;
pub const Z_UTIL_INC_706: u32 = 707;
pub const Z_UTIL_INC_707: u32 = 708;
pub const Z_UTIL_INC_708: u32 = 709;
pub const Z_UTIL_INC_709: u32 = 710;
pub const Z_UTIL_INC_710: u32 = 711;
pub const Z_UTIL_INC_711: u32 = 712;
pub const Z_UTIL_INC_712: u32 = 713;
pub const Z_UTIL_INC_713: u32 = 714;
pub const Z_UTIL_INC_714: u32 = 715;
pub const Z_UTIL_INC_715: u32 = 716;
pub const Z_UTIL_INC_716: u32 = 717;
pub const Z_UTIL_INC_717: u32 = 718;
pub const Z_UTIL_INC_718: u32 = 719;
pub const Z_UTIL_INC_719: u32 = 720;
pub const Z_UTIL_INC_720: u32 = 721;
pub const Z_UTIL_INC_721: u32 = 722;
pub const Z_UTIL_INC_722: u32 = 723;
pub const Z_UTIL_INC_723: u32 = 724;
pub const Z_UTIL_INC_724: u32 = 725;
pub const Z_UTIL_INC_725: u32 = 726;
pub const Z_UTIL_INC_726: u32 = 727;
pub const Z_UTIL_INC_727: u32 = 728;
pub const Z_UTIL_INC_728: u32 = 729;
pub const Z_UTIL_INC_729: u32 = 730;
pub const Z_UTIL_INC_730: u32 = 731;
pub const Z_UTIL_INC_731: u32 = 732;
pub const Z_UTIL_INC_732: u32 = 733;
pub const Z_UTIL_INC_733: u32 = 734;
pub const Z_UTIL_INC_734: u32 = 735;
pub const Z_UTIL_INC_735: u32 = 736;
pub const Z_UTIL_INC_736: u32 = 737;
pub const Z_UTIL_INC_737: u32 = 738;
pub const Z_UTIL_INC_738: u32 = 739;
pub const Z_UTIL_INC_739: u32 = 740;
pub const Z_UTIL_INC_740: u32 = 741;
pub const Z_UTIL_INC_741: u32 = 742;
pub const Z_UTIL_INC_742: u32 = 743;
pub const Z_UTIL_INC_743: u32 = 744;
pub const Z_UTIL_INC_744: u32 = 745;
pub const Z_UTIL_INC_745: u32 = 746;
pub const Z_UTIL_INC_746: u32 = 747;
pub const Z_UTIL_INC_747: u32 = 748;
pub const Z_UTIL_INC_748: u32 = 749;
pub const Z_UTIL_INC_749: u32 = 750;
pub const Z_UTIL_INC_750: u32 = 751;
pub const Z_UTIL_INC_751: u32 = 752;
pub const Z_UTIL_INC_752: u32 = 753;
pub const Z_UTIL_INC_753: u32 = 754;
pub const Z_UTIL_INC_754: u32 = 755;
pub const Z_UTIL_INC_755: u32 = 756;
pub const Z_UTIL_INC_756: u32 = 757;
pub const Z_UTIL_INC_757: u32 = 758;
pub const Z_UTIL_INC_758: u32 = 759;
pub const Z_UTIL_INC_759: u32 = 760;
pub const Z_UTIL_INC_760: u32 = 761;
pub const Z_UTIL_INC_761: u32 = 762;
pub const Z_UTIL_INC_762: u32 = 763;
pub const Z_UTIL_INC_763: u32 = 764;
pub const Z_UTIL_INC_764: u32 = 765;
pub const Z_UTIL_INC_765: u32 = 766;
pub const Z_UTIL_INC_766: u32 = 767;
pub const Z_UTIL_INC_767: u32 = 768;
pub const Z_UTIL_INC_768: u32 = 769;
pub const Z_UTIL_INC_769: u32 = 770;
pub const Z_UTIL_INC_770: u32 = 771;
pub const Z_UTIL_INC_771: u32 = 772;
pub const Z_UTIL_INC_772: u32 = 773;
pub const Z_UTIL_INC_773: u32 = 774;
pub const Z_UTIL_INC_774: u32 = 775;
pub const Z_UTIL_INC_775: u32 = 776;
pub const Z_UTIL_INC_776: u32 = 777;
pub const Z_UTIL_INC_777: u32 = 778;
pub const Z_UTIL_INC_778: u32 = 779;
pub const Z_UTIL_INC_779: u32 = 780;
pub const Z_UTIL_INC_780: u32 = 781;
pub const Z_UTIL_INC_781: u32 = 782;
pub const Z_UTIL_INC_782: u32 = 783;
pub const Z_UTIL_INC_783: u32 = 784;
pub const Z_UTIL_INC_784: u32 = 785;
pub const Z_UTIL_INC_785: u32 = 786;
pub const Z_UTIL_INC_786: u32 = 787;
pub const Z_UTIL_INC_787: u32 = 788;
pub const Z_UTIL_INC_788: u32 = 789;
pub const Z_UTIL_INC_789: u32 = 790;
pub const Z_UTIL_INC_790: u32 = 791;
pub const Z_UTIL_INC_791: u32 = 792;
pub const Z_UTIL_INC_792: u32 = 793;
pub const Z_UTIL_INC_793: u32 = 794;
pub const Z_UTIL_INC_794: u32 = 795;
pub const Z_UTIL_INC_795: u32 = 796;
pub const Z_UTIL_INC_796: u32 = 797;
pub const Z_UTIL_INC_797: u32 = 798;
pub const Z_UTIL_INC_798: u32 = 799;
pub const Z_UTIL_INC_799: u32 = 800;
pub const Z_UTIL_INC_800: u32 = 801;
pub const Z_UTIL_INC_801: u32 = 802;
pub const Z_UTIL_INC_802: u32 = 803;
pub const Z_UTIL_INC_803: u32 = 804;
pub const Z_UTIL_INC_804: u32 = 805;
pub const Z_UTIL_INC_805: u32 = 806;
pub const Z_UTIL_INC_806: u32 = 807;
pub const Z_UTIL_INC_807: u32 = 808;
pub const Z_UTIL_INC_808: u32 = 809;
pub const Z_UTIL_INC_809: u32 = 810;
pub const Z_UTIL_INC_810: u32 = 811;
pub const Z_UTIL_INC_811: u32 = 812;
pub const Z_UTIL_INC_812: u32 = 813;
pub const Z_UTIL_INC_813: u32 = 814;
pub const Z_UTIL_INC_814: u32 = 815;
pub const Z_UTIL_INC_815: u32 = 816;
pub const Z_UTIL_INC_816: u32 = 817;
pub const Z_UTIL_INC_817: u32 = 818;
pub const Z_UTIL_INC_818: u32 = 819;
pub const Z_UTIL_INC_819: u32 = 820;
pub const Z_UTIL_INC_820: u32 = 821;
pub const Z_UTIL_INC_821: u32 = 822;
pub const Z_UTIL_INC_822: u32 = 823;
pub const Z_UTIL_INC_823: u32 = 824;
pub const Z_UTIL_INC_824: u32 = 825;
pub const Z_UTIL_INC_825: u32 = 826;
pub const Z_UTIL_INC_826: u32 = 827;
pub const Z_UTIL_INC_827: u32 = 828;
pub const Z_UTIL_INC_828: u32 = 829;
pub const Z_UTIL_INC_829: u32 = 830;
pub const Z_UTIL_INC_830: u32 = 831;
pub const Z_UTIL_INC_831: u32 = 832;
pub const Z_UTIL_INC_832: u32 = 833;
pub const Z_UTIL_INC_833: u32 = 834;
pub const Z_UTIL_INC_834: u32 = 835;
pub const Z_UTIL_INC_835: u32 = 836;
pub const Z_UTIL_INC_836: u32 = 837;
pub const Z_UTIL_INC_837: u32 = 838;
pub const Z_UTIL_INC_838: u32 = 839;
pub const Z_UTIL_INC_839: u32 = 840;
pub const Z_UTIL_INC_840: u32 = 841;
pub const Z_UTIL_INC_841: u32 = 842;
pub const Z_UTIL_INC_842: u32 = 843;
pub const Z_UTIL_INC_843: u32 = 844;
pub const Z_UTIL_INC_844: u32 = 845;
pub const Z_UTIL_INC_845: u32 = 846;
pub const Z_UTIL_INC_846: u32 = 847;
pub const Z_UTIL_INC_847: u32 = 848;
pub const Z_UTIL_INC_848: u32 = 849;
pub const Z_UTIL_INC_849: u32 = 850;
pub const Z_UTIL_INC_850: u32 = 851;
pub const Z_UTIL_INC_851: u32 = 852;
pub const Z_UTIL_INC_852: u32 = 853;
pub const Z_UTIL_INC_853: u32 = 854;
pub const Z_UTIL_INC_854: u32 = 855;
pub const Z_UTIL_INC_855: u32 = 856;
pub const Z_UTIL_INC_856: u32 = 857;
pub const Z_UTIL_INC_857: u32 = 858;
pub const Z_UTIL_INC_858: u32 = 859;
pub const Z_UTIL_INC_859: u32 = 860;
pub const Z_UTIL_INC_860: u32 = 861;
pub const Z_UTIL_INC_861: u32 = 862;
pub const Z_UTIL_INC_862: u32 = 863;
pub const Z_UTIL_INC_863: u32 = 864;
pub const Z_UTIL_INC_864: u32 = 865;
pub const Z_UTIL_INC_865: u32 = 866;
pub const Z_UTIL_INC_866: u32 = 867;
pub const Z_UTIL_INC_867: u32 = 868;
pub const Z_UTIL_INC_868: u32 = 869;
pub const Z_UTIL_INC_869: u32 = 870;
pub const Z_UTIL_INC_870: u32 = 871;
pub const Z_UTIL_INC_871: u32 = 872;
pub const Z_UTIL_INC_872: u32 = 873;
pub const Z_UTIL_INC_873: u32 = 874;
pub const Z_UTIL_INC_874: u32 = 875;
pub const Z_UTIL_INC_875: u32 = 876;
pub const Z_UTIL_INC_876: u32 = 877;
pub const Z_UTIL_INC_877: u32 = 878;
pub const Z_UTIL_INC_878: u32 = 879;
pub const Z_UTIL_INC_879: u32 = 880;
pub const Z_UTIL_INC_880: u32 = 881;
pub const Z_UTIL_INC_881: u32 = 882;
pub const Z_UTIL_INC_882: u32 = 883;
pub const Z_UTIL_INC_883: u32 = 884;
pub const Z_UTIL_INC_884: u32 = 885;
pub const Z_UTIL_INC_885: u32 = 886;
pub const Z_UTIL_INC_886: u32 = 887;
pub const Z_UTIL_INC_887: u32 = 888;
pub const Z_UTIL_INC_888: u32 = 889;
pub const Z_UTIL_INC_889: u32 = 890;
pub const Z_UTIL_INC_890: u32 = 891;
pub const Z_UTIL_INC_891: u32 = 892;
pub const Z_UTIL_INC_892: u32 = 893;
pub const Z_UTIL_INC_893: u32 = 894;
pub const Z_UTIL_INC_894: u32 = 895;
pub const Z_UTIL_INC_895: u32 = 896;
pub const Z_UTIL_INC_896: u32 = 897;
pub const Z_UTIL_INC_897: u32 = 898;
pub const Z_UTIL_INC_898: u32 = 899;
pub const Z_UTIL_INC_899: u32 = 900;
pub const Z_UTIL_INC_900: u32 = 901;
pub const Z_UTIL_INC_901: u32 = 902;
pub const Z_UTIL_INC_902: u32 = 903;
pub const Z_UTIL_INC_903: u32 = 904;
pub const Z_UTIL_INC_904: u32 = 905;
pub const Z_UTIL_INC_905: u32 = 906;
pub const Z_UTIL_INC_906: u32 = 907;
pub const Z_UTIL_INC_907: u32 = 908;
pub const Z_UTIL_INC_908: u32 = 909;
pub const Z_UTIL_INC_909: u32 = 910;
pub const Z_UTIL_INC_910: u32 = 911;
pub const Z_UTIL_INC_911: u32 = 912;
pub const Z_UTIL_INC_912: u32 = 913;
pub const Z_UTIL_INC_913: u32 = 914;
pub const Z_UTIL_INC_914: u32 = 915;
pub const Z_UTIL_INC_915: u32 = 916;
pub const Z_UTIL_INC_916: u32 = 917;
pub const Z_UTIL_INC_917: u32 = 918;
pub const Z_UTIL_INC_918: u32 = 919;
pub const Z_UTIL_INC_919: u32 = 920;
pub const Z_UTIL_INC_920: u32 = 921;
pub const Z_UTIL_INC_921: u32 = 922;
pub const Z_UTIL_INC_922: u32 = 923;
pub const Z_UTIL_INC_923: u32 = 924;
pub const Z_UTIL_INC_924: u32 = 925;
pub const Z_UTIL_INC_925: u32 = 926;
pub const Z_UTIL_INC_926: u32 = 927;
pub const Z_UTIL_INC_927: u32 = 928;
pub const Z_UTIL_INC_928: u32 = 929;
pub const Z_UTIL_INC_929: u32 = 930;
pub const Z_UTIL_INC_930: u32 = 931;
pub const Z_UTIL_INC_931: u32 = 932;
pub const Z_UTIL_INC_932: u32 = 933;
pub const Z_UTIL_INC_933: u32 = 934;
pub const Z_UTIL_INC_934: u32 = 935;
pub const Z_UTIL_INC_935: u32 = 936;
pub const Z_UTIL_INC_936: u32 = 937;
pub const Z_UTIL_INC_937: u32 = 938;
pub const Z_UTIL_INC_938: u32 = 939;
pub const Z_UTIL_INC_939: u32 = 940;
pub const Z_UTIL_INC_940: u32 = 941;
pub const Z_UTIL_INC_941: u32 = 942;
pub const Z_UTIL_INC_942: u32 = 943;
pub const Z_UTIL_INC_943: u32 = 944;
pub const Z_UTIL_INC_944: u32 = 945;
pub const Z_UTIL_INC_945: u32 = 946;
pub const Z_UTIL_INC_946: u32 = 947;
pub const Z_UTIL_INC_947: u32 = 948;
pub const Z_UTIL_INC_948: u32 = 949;
pub const Z_UTIL_INC_949: u32 = 950;
pub const Z_UTIL_INC_950: u32 = 951;
pub const Z_UTIL_INC_951: u32 = 952;
pub const Z_UTIL_INC_952: u32 = 953;
pub const Z_UTIL_INC_953: u32 = 954;
pub const Z_UTIL_INC_954: u32 = 955;
pub const Z_UTIL_INC_955: u32 = 956;
pub const Z_UTIL_INC_956: u32 = 957;
pub const Z_UTIL_INC_957: u32 = 958;
pub const Z_UTIL_INC_958: u32 = 959;
pub const Z_UTIL_INC_959: u32 = 960;
pub const Z_UTIL_INC_960: u32 = 961;
pub const Z_UTIL_INC_961: u32 = 962;
pub const Z_UTIL_INC_962: u32 = 963;
pub const Z_UTIL_INC_963: u32 = 964;
pub const Z_UTIL_INC_964: u32 = 965;
pub const Z_UTIL_INC_965: u32 = 966;
pub const Z_UTIL_INC_966: u32 = 967;
pub const Z_UTIL_INC_967: u32 = 968;
pub const Z_UTIL_INC_968: u32 = 969;
pub const Z_UTIL_INC_969: u32 = 970;
pub const Z_UTIL_INC_970: u32 = 971;
pub const Z_UTIL_INC_971: u32 = 972;
pub const Z_UTIL_INC_972: u32 = 973;
pub const Z_UTIL_INC_973: u32 = 974;
pub const Z_UTIL_INC_974: u32 = 975;
pub const Z_UTIL_INC_975: u32 = 976;
pub const Z_UTIL_INC_976: u32 = 977;
pub const Z_UTIL_INC_977: u32 = 978;
pub const Z_UTIL_INC_978: u32 = 979;
pub const Z_UTIL_INC_979: u32 = 980;
pub const Z_UTIL_INC_980: u32 = 981;
pub const Z_UTIL_INC_981: u32 = 982;
pub const Z_UTIL_INC_982: u32 = 983;
pub const Z_UTIL_INC_983: u32 = 984;
pub const Z_UTIL_INC_984: u32 = 985;
pub const Z_UTIL_INC_985: u32 = 986;
pub const Z_UTIL_INC_986: u32 = 987;
pub const Z_UTIL_INC_987: u32 = 988;
pub const Z_UTIL_INC_988: u32 = 989;
pub const Z_UTIL_INC_989: u32 = 990;
pub const Z_UTIL_INC_990: u32 = 991;
pub const Z_UTIL_INC_991: u32 = 992;
pub const Z_UTIL_INC_992: u32 = 993;
pub const Z_UTIL_INC_993: u32 = 994;
pub const Z_UTIL_INC_994: u32 = 995;
pub const Z_UTIL_INC_995: u32 = 996;
pub const Z_UTIL_INC_996: u32 = 997;
pub const Z_UTIL_INC_997: u32 = 998;
pub const Z_UTIL_INC_998: u32 = 999;
pub const Z_UTIL_INC_999: u32 = 1000;
pub const Z_UTIL_INC_1000: u32 = 1001;
pub const Z_UTIL_INC_1001: u32 = 1002;
pub const Z_UTIL_INC_1002: u32 = 1003;
pub const Z_UTIL_INC_1003: u32 = 1004;
pub const Z_UTIL_INC_1004: u32 = 1005;
pub const Z_UTIL_INC_1005: u32 = 1006;
pub const Z_UTIL_INC_1006: u32 = 1007;
pub const Z_UTIL_INC_1007: u32 = 1008;
pub const Z_UTIL_INC_1008: u32 = 1009;
pub const Z_UTIL_INC_1009: u32 = 1010;
pub const Z_UTIL_INC_1010: u32 = 1011;
pub const Z_UTIL_INC_1011: u32 = 1012;
pub const Z_UTIL_INC_1012: u32 = 1013;
pub const Z_UTIL_INC_1013: u32 = 1014;
pub const Z_UTIL_INC_1014: u32 = 1015;
pub const Z_UTIL_INC_1015: u32 = 1016;
pub const Z_UTIL_INC_1016: u32 = 1017;
pub const Z_UTIL_INC_1017: u32 = 1018;
pub const Z_UTIL_INC_1018: u32 = 1019;
pub const Z_UTIL_INC_1019: u32 = 1020;
pub const Z_UTIL_INC_1020: u32 = 1021;
pub const Z_UTIL_INC_1021: u32 = 1022;
pub const Z_UTIL_INC_1022: u32 = 1023;
pub const Z_UTIL_INC_1023: u32 = 1024;
pub const Z_UTIL_INC_1024: u32 = 1025;
pub const Z_UTIL_INC_1025: u32 = 1026;
pub const Z_UTIL_INC_1026: u32 = 1027;
pub const Z_UTIL_INC_1027: u32 = 1028;
pub const Z_UTIL_INC_1028: u32 = 1029;
pub const Z_UTIL_INC_1029: u32 = 1030;
pub const Z_UTIL_INC_1030: u32 = 1031;
pub const Z_UTIL_INC_1031: u32 = 1032;
pub const Z_UTIL_INC_1032: u32 = 1033;
pub const Z_UTIL_INC_1033: u32 = 1034;
pub const Z_UTIL_INC_1034: u32 = 1035;
pub const Z_UTIL_INC_1035: u32 = 1036;
pub const Z_UTIL_INC_1036: u32 = 1037;
pub const Z_UTIL_INC_1037: u32 = 1038;
pub const Z_UTIL_INC_1038: u32 = 1039;
pub const Z_UTIL_INC_1039: u32 = 1040;
pub const Z_UTIL_INC_1040: u32 = 1041;
pub const Z_UTIL_INC_1041: u32 = 1042;
pub const Z_UTIL_INC_1042: u32 = 1043;
pub const Z_UTIL_INC_1043: u32 = 1044;
pub const Z_UTIL_INC_1044: u32 = 1045;
pub const Z_UTIL_INC_1045: u32 = 1046;
pub const Z_UTIL_INC_1046: u32 = 1047;
pub const Z_UTIL_INC_1047: u32 = 1048;
pub const Z_UTIL_INC_1048: u32 = 1049;
pub const Z_UTIL_INC_1049: u32 = 1050;
pub const Z_UTIL_INC_1050: u32 = 1051;
pub const Z_UTIL_INC_1051: u32 = 1052;
pub const Z_UTIL_INC_1052: u32 = 1053;
pub const Z_UTIL_INC_1053: u32 = 1054;
pub const Z_UTIL_INC_1054: u32 = 1055;
pub const Z_UTIL_INC_1055: u32 = 1056;
pub const Z_UTIL_INC_1056: u32 = 1057;
pub const Z_UTIL_INC_1057: u32 = 1058;
pub const Z_UTIL_INC_1058: u32 = 1059;
pub const Z_UTIL_INC_1059: u32 = 1060;
pub const Z_UTIL_INC_1060: u32 = 1061;
pub const Z_UTIL_INC_1061: u32 = 1062;
pub const Z_UTIL_INC_1062: u32 = 1063;
pub const Z_UTIL_INC_1063: u32 = 1064;
pub const Z_UTIL_INC_1064: u32 = 1065;
pub const Z_UTIL_INC_1065: u32 = 1066;
pub const Z_UTIL_INC_1066: u32 = 1067;
pub const Z_UTIL_INC_1067: u32 = 1068;
pub const Z_UTIL_INC_1068: u32 = 1069;
pub const Z_UTIL_INC_1069: u32 = 1070;
pub const Z_UTIL_INC_1070: u32 = 1071;
pub const Z_UTIL_INC_1071: u32 = 1072;
pub const Z_UTIL_INC_1072: u32 = 1073;
pub const Z_UTIL_INC_1073: u32 = 1074;
pub const Z_UTIL_INC_1074: u32 = 1075;
pub const Z_UTIL_INC_1075: u32 = 1076;
pub const Z_UTIL_INC_1076: u32 = 1077;
pub const Z_UTIL_INC_1077: u32 = 1078;
pub const Z_UTIL_INC_1078: u32 = 1079;
pub const Z_UTIL_INC_1079: u32 = 1080;
pub const Z_UTIL_INC_1080: u32 = 1081;
pub const Z_UTIL_INC_1081: u32 = 1082;
pub const Z_UTIL_INC_1082: u32 = 1083;
pub const Z_UTIL_INC_1083: u32 = 1084;
pub const Z_UTIL_INC_1084: u32 = 1085;
pub const Z_UTIL_INC_1085: u32 = 1086;
pub const Z_UTIL_INC_1086: u32 = 1087;
pub const Z_UTIL_INC_1087: u32 = 1088;
pub const Z_UTIL_INC_1088: u32 = 1089;
pub const Z_UTIL_INC_1089: u32 = 1090;
pub const Z_UTIL_INC_1090: u32 = 1091;
pub const Z_UTIL_INC_1091: u32 = 1092;
pub const Z_UTIL_INC_1092: u32 = 1093;
pub const Z_UTIL_INC_1093: u32 = 1094;
pub const Z_UTIL_INC_1094: u32 = 1095;
pub const Z_UTIL_INC_1095: u32 = 1096;
pub const Z_UTIL_INC_1096: u32 = 1097;
pub const Z_UTIL_INC_1097: u32 = 1098;
pub const Z_UTIL_INC_1098: u32 = 1099;
pub const Z_UTIL_INC_1099: u32 = 1100;
pub const Z_UTIL_INC_1100: u32 = 1101;
pub const Z_UTIL_INC_1101: u32 = 1102;
pub const Z_UTIL_INC_1102: u32 = 1103;
pub const Z_UTIL_INC_1103: u32 = 1104;
pub const Z_UTIL_INC_1104: u32 = 1105;
pub const Z_UTIL_INC_1105: u32 = 1106;
pub const Z_UTIL_INC_1106: u32 = 1107;
pub const Z_UTIL_INC_1107: u32 = 1108;
pub const Z_UTIL_INC_1108: u32 = 1109;
pub const Z_UTIL_INC_1109: u32 = 1110;
pub const Z_UTIL_INC_1110: u32 = 1111;
pub const Z_UTIL_INC_1111: u32 = 1112;
pub const Z_UTIL_INC_1112: u32 = 1113;
pub const Z_UTIL_INC_1113: u32 = 1114;
pub const Z_UTIL_INC_1114: u32 = 1115;
pub const Z_UTIL_INC_1115: u32 = 1116;
pub const Z_UTIL_INC_1116: u32 = 1117;
pub const Z_UTIL_INC_1117: u32 = 1118;
pub const Z_UTIL_INC_1118: u32 = 1119;
pub const Z_UTIL_INC_1119: u32 = 1120;
pub const Z_UTIL_INC_1120: u32 = 1121;
pub const Z_UTIL_INC_1121: u32 = 1122;
pub const Z_UTIL_INC_1122: u32 = 1123;
pub const Z_UTIL_INC_1123: u32 = 1124;
pub const Z_UTIL_INC_1124: u32 = 1125;
pub const Z_UTIL_INC_1125: u32 = 1126;
pub const Z_UTIL_INC_1126: u32 = 1127;
pub const Z_UTIL_INC_1127: u32 = 1128;
pub const Z_UTIL_INC_1128: u32 = 1129;
pub const Z_UTIL_INC_1129: u32 = 1130;
pub const Z_UTIL_INC_1130: u32 = 1131;
pub const Z_UTIL_INC_1131: u32 = 1132;
pub const Z_UTIL_INC_1132: u32 = 1133;
pub const Z_UTIL_INC_1133: u32 = 1134;
pub const Z_UTIL_INC_1134: u32 = 1135;
pub const Z_UTIL_INC_1135: u32 = 1136;
pub const Z_UTIL_INC_1136: u32 = 1137;
pub const Z_UTIL_INC_1137: u32 = 1138;
pub const Z_UTIL_INC_1138: u32 = 1139;
pub const Z_UTIL_INC_1139: u32 = 1140;
pub const Z_UTIL_INC_1140: u32 = 1141;
pub const Z_UTIL_INC_1141: u32 = 1142;
pub const Z_UTIL_INC_1142: u32 = 1143;
pub const Z_UTIL_INC_1143: u32 = 1144;
pub const Z_UTIL_INC_1144: u32 = 1145;
pub const Z_UTIL_INC_1145: u32 = 1146;
pub const Z_UTIL_INC_1146: u32 = 1147;
pub const Z_UTIL_INC_1147: u32 = 1148;
pub const Z_UTIL_INC_1148: u32 = 1149;
pub const Z_UTIL_INC_1149: u32 = 1150;
pub const Z_UTIL_INC_1150: u32 = 1151;
pub const Z_UTIL_INC_1151: u32 = 1152;
pub const Z_UTIL_INC_1152: u32 = 1153;
pub const Z_UTIL_INC_1153: u32 = 1154;
pub const Z_UTIL_INC_1154: u32 = 1155;
pub const Z_UTIL_INC_1155: u32 = 1156;
pub const Z_UTIL_INC_1156: u32 = 1157;
pub const Z_UTIL_INC_1157: u32 = 1158;
pub const Z_UTIL_INC_1158: u32 = 1159;
pub const Z_UTIL_INC_1159: u32 = 1160;
pub const Z_UTIL_INC_1160: u32 = 1161;
pub const Z_UTIL_INC_1161: u32 = 1162;
pub const Z_UTIL_INC_1162: u32 = 1163;
pub const Z_UTIL_INC_1163: u32 = 1164;
pub const Z_UTIL_INC_1164: u32 = 1165;
pub const Z_UTIL_INC_1165: u32 = 1166;
pub const Z_UTIL_INC_1166: u32 = 1167;
pub const Z_UTIL_INC_1167: u32 = 1168;
pub const Z_UTIL_INC_1168: u32 = 1169;
pub const Z_UTIL_INC_1169: u32 = 1170;
pub const Z_UTIL_INC_1170: u32 = 1171;
pub const Z_UTIL_INC_1171: u32 = 1172;
pub const Z_UTIL_INC_1172: u32 = 1173;
pub const Z_UTIL_INC_1173: u32 = 1174;
pub const Z_UTIL_INC_1174: u32 = 1175;
pub const Z_UTIL_INC_1175: u32 = 1176;
pub const Z_UTIL_INC_1176: u32 = 1177;
pub const Z_UTIL_INC_1177: u32 = 1178;
pub const Z_UTIL_INC_1178: u32 = 1179;
pub const Z_UTIL_INC_1179: u32 = 1180;
pub const Z_UTIL_INC_1180: u32 = 1181;
pub const Z_UTIL_INC_1181: u32 = 1182;
pub const Z_UTIL_INC_1182: u32 = 1183;
pub const Z_UTIL_INC_1183: u32 = 1184;
pub const Z_UTIL_INC_1184: u32 = 1185;
pub const Z_UTIL_INC_1185: u32 = 1186;
pub const Z_UTIL_INC_1186: u32 = 1187;
pub const Z_UTIL_INC_1187: u32 = 1188;
pub const Z_UTIL_INC_1188: u32 = 1189;
pub const Z_UTIL_INC_1189: u32 = 1190;
pub const Z_UTIL_INC_1190: u32 = 1191;
pub const Z_UTIL_INC_1191: u32 = 1192;
pub const Z_UTIL_INC_1192: u32 = 1193;
pub const Z_UTIL_INC_1193: u32 = 1194;
pub const Z_UTIL_INC_1194: u32 = 1195;
pub const Z_UTIL_INC_1195: u32 = 1196;
pub const Z_UTIL_INC_1196: u32 = 1197;
pub const Z_UTIL_INC_1197: u32 = 1198;
pub const Z_UTIL_INC_1198: u32 = 1199;
pub const Z_UTIL_INC_1199: u32 = 1200;
pub const Z_UTIL_INC_1200: u32 = 1201;
pub const Z_UTIL_INC_1201: u32 = 1202;
pub const Z_UTIL_INC_1202: u32 = 1203;
pub const Z_UTIL_INC_1203: u32 = 1204;
pub const Z_UTIL_INC_1204: u32 = 1205;
pub const Z_UTIL_INC_1205: u32 = 1206;
pub const Z_UTIL_INC_1206: u32 = 1207;
pub const Z_UTIL_INC_1207: u32 = 1208;
pub const Z_UTIL_INC_1208: u32 = 1209;
pub const Z_UTIL_INC_1209: u32 = 1210;
pub const Z_UTIL_INC_1210: u32 = 1211;
pub const Z_UTIL_INC_1211: u32 = 1212;
pub const Z_UTIL_INC_1212: u32 = 1213;
pub const Z_UTIL_INC_1213: u32 = 1214;
pub const Z_UTIL_INC_1214: u32 = 1215;
pub const Z_UTIL_INC_1215: u32 = 1216;
pub const Z_UTIL_INC_1216: u32 = 1217;
pub const Z_UTIL_INC_1217: u32 = 1218;
pub const Z_UTIL_INC_1218: u32 = 1219;
pub const Z_UTIL_INC_1219: u32 = 1220;
pub const Z_UTIL_INC_1220: u32 = 1221;
pub const Z_UTIL_INC_1221: u32 = 1222;
pub const Z_UTIL_INC_1222: u32 = 1223;
pub const Z_UTIL_INC_1223: u32 = 1224;
pub const Z_UTIL_INC_1224: u32 = 1225;
pub const Z_UTIL_INC_1225: u32 = 1226;
pub const Z_UTIL_INC_1226: u32 = 1227;
pub const Z_UTIL_INC_1227: u32 = 1228;
pub const Z_UTIL_INC_1228: u32 = 1229;
pub const Z_UTIL_INC_1229: u32 = 1230;
pub const Z_UTIL_INC_1230: u32 = 1231;
pub const Z_UTIL_INC_1231: u32 = 1232;
pub const Z_UTIL_INC_1232: u32 = 1233;
pub const Z_UTIL_INC_1233: u32 = 1234;
pub const Z_UTIL_INC_1234: u32 = 1235;
pub const Z_UTIL_INC_1235: u32 = 1236;
pub const Z_UTIL_INC_1236: u32 = 1237;
pub const Z_UTIL_INC_1237: u32 = 1238;
pub const Z_UTIL_INC_1238: u32 = 1239;
pub const Z_UTIL_INC_1239: u32 = 1240;
pub const Z_UTIL_INC_1240: u32 = 1241;
pub const Z_UTIL_INC_1241: u32 = 1242;
pub const Z_UTIL_INC_1242: u32 = 1243;
pub const Z_UTIL_INC_1243: u32 = 1244;
pub const Z_UTIL_INC_1244: u32 = 1245;
pub const Z_UTIL_INC_1245: u32 = 1246;
pub const Z_UTIL_INC_1246: u32 = 1247;
pub const Z_UTIL_INC_1247: u32 = 1248;
pub const Z_UTIL_INC_1248: u32 = 1249;
pub const Z_UTIL_INC_1249: u32 = 1250;
pub const Z_UTIL_INC_1250: u32 = 1251;
pub const Z_UTIL_INC_1251: u32 = 1252;
pub const Z_UTIL_INC_1252: u32 = 1253;
pub const Z_UTIL_INC_1253: u32 = 1254;
pub const Z_UTIL_INC_1254: u32 = 1255;
pub const Z_UTIL_INC_1255: u32 = 1256;
pub const Z_UTIL_INC_1256: u32 = 1257;
pub const Z_UTIL_INC_1257: u32 = 1258;
pub const Z_UTIL_INC_1258: u32 = 1259;
pub const Z_UTIL_INC_1259: u32 = 1260;
pub const Z_UTIL_INC_1260: u32 = 1261;
pub const Z_UTIL_INC_1261: u32 = 1262;
pub const Z_UTIL_INC_1262: u32 = 1263;
pub const Z_UTIL_INC_1263: u32 = 1264;
pub const Z_UTIL_INC_1264: u32 = 1265;
pub const Z_UTIL_INC_1265: u32 = 1266;
pub const Z_UTIL_INC_1266: u32 = 1267;
pub const Z_UTIL_INC_1267: u32 = 1268;
pub const Z_UTIL_INC_1268: u32 = 1269;
pub const Z_UTIL_INC_1269: u32 = 1270;
pub const Z_UTIL_INC_1270: u32 = 1271;
pub const Z_UTIL_INC_1271: u32 = 1272;
pub const Z_UTIL_INC_1272: u32 = 1273;
pub const Z_UTIL_INC_1273: u32 = 1274;
pub const Z_UTIL_INC_1274: u32 = 1275;
pub const Z_UTIL_INC_1275: u32 = 1276;
pub const Z_UTIL_INC_1276: u32 = 1277;
pub const Z_UTIL_INC_1277: u32 = 1278;
pub const Z_UTIL_INC_1278: u32 = 1279;
pub const Z_UTIL_INC_1279: u32 = 1280;
pub const Z_UTIL_INC_1280: u32 = 1281;
pub const Z_UTIL_INC_1281: u32 = 1282;
pub const Z_UTIL_INC_1282: u32 = 1283;
pub const Z_UTIL_INC_1283: u32 = 1284;
pub const Z_UTIL_INC_1284: u32 = 1285;
pub const Z_UTIL_INC_1285: u32 = 1286;
pub const Z_UTIL_INC_1286: u32 = 1287;
pub const Z_UTIL_INC_1287: u32 = 1288;
pub const Z_UTIL_INC_1288: u32 = 1289;
pub const Z_UTIL_INC_1289: u32 = 1290;
pub const Z_UTIL_INC_1290: u32 = 1291;
pub const Z_UTIL_INC_1291: u32 = 1292;
pub const Z_UTIL_INC_1292: u32 = 1293;
pub const Z_UTIL_INC_1293: u32 = 1294;
pub const Z_UTIL_INC_1294: u32 = 1295;
pub const Z_UTIL_INC_1295: u32 = 1296;
pub const Z_UTIL_INC_1296: u32 = 1297;
pub const Z_UTIL_INC_1297: u32 = 1298;
pub const Z_UTIL_INC_1298: u32 = 1299;
pub const Z_UTIL_INC_1299: u32 = 1300;
pub const Z_UTIL_INC_1300: u32 = 1301;
pub const Z_UTIL_INC_1301: u32 = 1302;
pub const Z_UTIL_INC_1302: u32 = 1303;
pub const Z_UTIL_INC_1303: u32 = 1304;
pub const Z_UTIL_INC_1304: u32 = 1305;
pub const Z_UTIL_INC_1305: u32 = 1306;
pub const Z_UTIL_INC_1306: u32 = 1307;
pub const Z_UTIL_INC_1307: u32 = 1308;
pub const Z_UTIL_INC_1308: u32 = 1309;
pub const Z_UTIL_INC_1309: u32 = 1310;
pub const Z_UTIL_INC_1310: u32 = 1311;
pub const Z_UTIL_INC_1311: u32 = 1312;
pub const Z_UTIL_INC_1312: u32 = 1313;
pub const Z_UTIL_INC_1313: u32 = 1314;
pub const Z_UTIL_INC_1314: u32 = 1315;
pub const Z_UTIL_INC_1315: u32 = 1316;
pub const Z_UTIL_INC_1316: u32 = 1317;
pub const Z_UTIL_INC_1317: u32 = 1318;
pub const Z_UTIL_INC_1318: u32 = 1319;
pub const Z_UTIL_INC_1319: u32 = 1320;
pub const Z_UTIL_INC_1320: u32 = 1321;
pub const Z_UTIL_INC_1321: u32 = 1322;
pub const Z_UTIL_INC_1322: u32 = 1323;
pub const Z_UTIL_INC_1323: u32 = 1324;
pub const Z_UTIL_INC_1324: u32 = 1325;
pub const Z_UTIL_INC_1325: u32 = 1326;
pub const Z_UTIL_INC_1326: u32 = 1327;
pub const Z_UTIL_INC_1327: u32 = 1328;
pub const Z_UTIL_INC_1328: u32 = 1329;
pub const Z_UTIL_INC_1329: u32 = 1330;
pub const Z_UTIL_INC_1330: u32 = 1331;
pub const Z_UTIL_INC_1331: u32 = 1332;
pub const Z_UTIL_INC_1332: u32 = 1333;
pub const Z_UTIL_INC_1333: u32 = 1334;
pub const Z_UTIL_INC_1334: u32 = 1335;
pub const Z_UTIL_INC_1335: u32 = 1336;
pub const Z_UTIL_INC_1336: u32 = 1337;
pub const Z_UTIL_INC_1337: u32 = 1338;
pub const Z_UTIL_INC_1338: u32 = 1339;
pub const Z_UTIL_INC_1339: u32 = 1340;
pub const Z_UTIL_INC_1340: u32 = 1341;
pub const Z_UTIL_INC_1341: u32 = 1342;
pub const Z_UTIL_INC_1342: u32 = 1343;
pub const Z_UTIL_INC_1343: u32 = 1344;
pub const Z_UTIL_INC_1344: u32 = 1345;
pub const Z_UTIL_INC_1345: u32 = 1346;
pub const Z_UTIL_INC_1346: u32 = 1347;
pub const Z_UTIL_INC_1347: u32 = 1348;
pub const Z_UTIL_INC_1348: u32 = 1349;
pub const Z_UTIL_INC_1349: u32 = 1350;
pub const Z_UTIL_INC_1350: u32 = 1351;
pub const Z_UTIL_INC_1351: u32 = 1352;
pub const Z_UTIL_INC_1352: u32 = 1353;
pub const Z_UTIL_INC_1353: u32 = 1354;
pub const Z_UTIL_INC_1354: u32 = 1355;
pub const Z_UTIL_INC_1355: u32 = 1356;
pub const Z_UTIL_INC_1356: u32 = 1357;
pub const Z_UTIL_INC_1357: u32 = 1358;
pub const Z_UTIL_INC_1358: u32 = 1359;
pub const Z_UTIL_INC_1359: u32 = 1360;
pub const Z_UTIL_INC_1360: u32 = 1361;
pub const Z_UTIL_INC_1361: u32 = 1362;
pub const Z_UTIL_INC_1362: u32 = 1363;
pub const Z_UTIL_INC_1363: u32 = 1364;
pub const Z_UTIL_INC_1364: u32 = 1365;
pub const Z_UTIL_INC_1365: u32 = 1366;
pub const Z_UTIL_INC_1366: u32 = 1367;
pub const Z_UTIL_INC_1367: u32 = 1368;
pub const Z_UTIL_INC_1368: u32 = 1369;
pub const Z_UTIL_INC_1369: u32 = 1370;
pub const Z_UTIL_INC_1370: u32 = 1371;
pub const Z_UTIL_INC_1371: u32 = 1372;
pub const Z_UTIL_INC_1372: u32 = 1373;
pub const Z_UTIL_INC_1373: u32 = 1374;
pub const Z_UTIL_INC_1374: u32 = 1375;
pub const Z_UTIL_INC_1375: u32 = 1376;
pub const Z_UTIL_INC_1376: u32 = 1377;
pub const Z_UTIL_INC_1377: u32 = 1378;
pub const Z_UTIL_INC_1378: u32 = 1379;
pub const Z_UTIL_INC_1379: u32 = 1380;
pub const Z_UTIL_INC_1380: u32 = 1381;
pub const Z_UTIL_INC_1381: u32 = 1382;
pub const Z_UTIL_INC_1382: u32 = 1383;
pub const Z_UTIL_INC_1383: u32 = 1384;
pub const Z_UTIL_INC_1384: u32 = 1385;
pub const Z_UTIL_INC_1385: u32 = 1386;
pub const Z_UTIL_INC_1386: u32 = 1387;
pub const Z_UTIL_INC_1387: u32 = 1388;
pub const Z_UTIL_INC_1388: u32 = 1389;
pub const Z_UTIL_INC_1389: u32 = 1390;
pub const Z_UTIL_INC_1390: u32 = 1391;
pub const Z_UTIL_INC_1391: u32 = 1392;
pub const Z_UTIL_INC_1392: u32 = 1393;
pub const Z_UTIL_INC_1393: u32 = 1394;
pub const Z_UTIL_INC_1394: u32 = 1395;
pub const Z_UTIL_INC_1395: u32 = 1396;
pub const Z_UTIL_INC_1396: u32 = 1397;
pub const Z_UTIL_INC_1397: u32 = 1398;
pub const Z_UTIL_INC_1398: u32 = 1399;
pub const Z_UTIL_INC_1399: u32 = 1400;
pub const Z_UTIL_INC_1400: u32 = 1401;
pub const Z_UTIL_INC_1401: u32 = 1402;
pub const Z_UTIL_INC_1402: u32 = 1403;
pub const Z_UTIL_INC_1403: u32 = 1404;
pub const Z_UTIL_INC_1404: u32 = 1405;
pub const Z_UTIL_INC_1405: u32 = 1406;
pub const Z_UTIL_INC_1406: u32 = 1407;
pub const Z_UTIL_INC_1407: u32 = 1408;
pub const Z_UTIL_INC_1408: u32 = 1409;
pub const Z_UTIL_INC_1409: u32 = 1410;
pub const Z_UTIL_INC_1410: u32 = 1411;
pub const Z_UTIL_INC_1411: u32 = 1412;
pub const Z_UTIL_INC_1412: u32 = 1413;
pub const Z_UTIL_INC_1413: u32 = 1414;
pub const Z_UTIL_INC_1414: u32 = 1415;
pub const Z_UTIL_INC_1415: u32 = 1416;
pub const Z_UTIL_INC_1416: u32 = 1417;
pub const Z_UTIL_INC_1417: u32 = 1418;
pub const Z_UTIL_INC_1418: u32 = 1419;
pub const Z_UTIL_INC_1419: u32 = 1420;
pub const Z_UTIL_INC_1420: u32 = 1421;
pub const Z_UTIL_INC_1421: u32 = 1422;
pub const Z_UTIL_INC_1422: u32 = 1423;
pub const Z_UTIL_INC_1423: u32 = 1424;
pub const Z_UTIL_INC_1424: u32 = 1425;
pub const Z_UTIL_INC_1425: u32 = 1426;
pub const Z_UTIL_INC_1426: u32 = 1427;
pub const Z_UTIL_INC_1427: u32 = 1428;
pub const Z_UTIL_INC_1428: u32 = 1429;
pub const Z_UTIL_INC_1429: u32 = 1430;
pub const Z_UTIL_INC_1430: u32 = 1431;
pub const Z_UTIL_INC_1431: u32 = 1432;
pub const Z_UTIL_INC_1432: u32 = 1433;
pub const Z_UTIL_INC_1433: u32 = 1434;
pub const Z_UTIL_INC_1434: u32 = 1435;
pub const Z_UTIL_INC_1435: u32 = 1436;
pub const Z_UTIL_INC_1436: u32 = 1437;
pub const Z_UTIL_INC_1437: u32 = 1438;
pub const Z_UTIL_INC_1438: u32 = 1439;
pub const Z_UTIL_INC_1439: u32 = 1440;
pub const Z_UTIL_INC_1440: u32 = 1441;
pub const Z_UTIL_INC_1441: u32 = 1442;
pub const Z_UTIL_INC_1442: u32 = 1443;
pub const Z_UTIL_INC_1443: u32 = 1444;
pub const Z_UTIL_INC_1444: u32 = 1445;
pub const Z_UTIL_INC_1445: u32 = 1446;
pub const Z_UTIL_INC_1446: u32 = 1447;
pub const Z_UTIL_INC_1447: u32 = 1448;
pub const Z_UTIL_INC_1448: u32 = 1449;
pub const Z_UTIL_INC_1449: u32 = 1450;
pub const Z_UTIL_INC_1450: u32 = 1451;
pub const Z_UTIL_INC_1451: u32 = 1452;
pub const Z_UTIL_INC_1452: u32 = 1453;
pub const Z_UTIL_INC_1453: u32 = 1454;
pub const Z_UTIL_INC_1454: u32 = 1455;
pub const Z_UTIL_INC_1455: u32 = 1456;
pub const Z_UTIL_INC_1456: u32 = 1457;
pub const Z_UTIL_INC_1457: u32 = 1458;
pub const Z_UTIL_INC_1458: u32 = 1459;
pub const Z_UTIL_INC_1459: u32 = 1460;
pub const Z_UTIL_INC_1460: u32 = 1461;
pub const Z_UTIL_INC_1461: u32 = 1462;
pub const Z_UTIL_INC_1462: u32 = 1463;
pub const Z_UTIL_INC_1463: u32 = 1464;
pub const Z_UTIL_INC_1464: u32 = 1465;
pub const Z_UTIL_INC_1465: u32 = 1466;
pub const Z_UTIL_INC_1466: u32 = 1467;
pub const Z_UTIL_INC_1467: u32 = 1468;
pub const Z_UTIL_INC_1468: u32 = 1469;
pub const Z_UTIL_INC_1469: u32 = 1470;
pub const Z_UTIL_INC_1470: u32 = 1471;
pub const Z_UTIL_INC_1471: u32 = 1472;
pub const Z_UTIL_INC_1472: u32 = 1473;
pub const Z_UTIL_INC_1473: u32 = 1474;
pub const Z_UTIL_INC_1474: u32 = 1475;
pub const Z_UTIL_INC_1475: u32 = 1476;
pub const Z_UTIL_INC_1476: u32 = 1477;
pub const Z_UTIL_INC_1477: u32 = 1478;
pub const Z_UTIL_INC_1478: u32 = 1479;
pub const Z_UTIL_INC_1479: u32 = 1480;
pub const Z_UTIL_INC_1480: u32 = 1481;
pub const Z_UTIL_INC_1481: u32 = 1482;
pub const Z_UTIL_INC_1482: u32 = 1483;
pub const Z_UTIL_INC_1483: u32 = 1484;
pub const Z_UTIL_INC_1484: u32 = 1485;
pub const Z_UTIL_INC_1485: u32 = 1486;
pub const Z_UTIL_INC_1486: u32 = 1487;
pub const Z_UTIL_INC_1487: u32 = 1488;
pub const Z_UTIL_INC_1488: u32 = 1489;
pub const Z_UTIL_INC_1489: u32 = 1490;
pub const Z_UTIL_INC_1490: u32 = 1491;
pub const Z_UTIL_INC_1491: u32 = 1492;
pub const Z_UTIL_INC_1492: u32 = 1493;
pub const Z_UTIL_INC_1493: u32 = 1494;
pub const Z_UTIL_INC_1494: u32 = 1495;
pub const Z_UTIL_INC_1495: u32 = 1496;
pub const Z_UTIL_INC_1496: u32 = 1497;
pub const Z_UTIL_INC_1497: u32 = 1498;
pub const Z_UTIL_INC_1498: u32 = 1499;
pub const Z_UTIL_INC_1499: u32 = 1500;
pub const Z_UTIL_INC_1500: u32 = 1501;
pub const Z_UTIL_INC_1501: u32 = 1502;
pub const Z_UTIL_INC_1502: u32 = 1503;
pub const Z_UTIL_INC_1503: u32 = 1504;
pub const Z_UTIL_INC_1504: u32 = 1505;
pub const Z_UTIL_INC_1505: u32 = 1506;
pub const Z_UTIL_INC_1506: u32 = 1507;
pub const Z_UTIL_INC_1507: u32 = 1508;
pub const Z_UTIL_INC_1508: u32 = 1509;
pub const Z_UTIL_INC_1509: u32 = 1510;
pub const Z_UTIL_INC_1510: u32 = 1511;
pub const Z_UTIL_INC_1511: u32 = 1512;
pub const Z_UTIL_INC_1512: u32 = 1513;
pub const Z_UTIL_INC_1513: u32 = 1514;
pub const Z_UTIL_INC_1514: u32 = 1515;
pub const Z_UTIL_INC_1515: u32 = 1516;
pub const Z_UTIL_INC_1516: u32 = 1517;
pub const Z_UTIL_INC_1517: u32 = 1518;
pub const Z_UTIL_INC_1518: u32 = 1519;
pub const Z_UTIL_INC_1519: u32 = 1520;
pub const Z_UTIL_INC_1520: u32 = 1521;
pub const Z_UTIL_INC_1521: u32 = 1522;
pub const Z_UTIL_INC_1522: u32 = 1523;
pub const Z_UTIL_INC_1523: u32 = 1524;
pub const Z_UTIL_INC_1524: u32 = 1525;
pub const Z_UTIL_INC_1525: u32 = 1526;
pub const Z_UTIL_INC_1526: u32 = 1527;
pub const Z_UTIL_INC_1527: u32 = 1528;
pub const Z_UTIL_INC_1528: u32 = 1529;
pub const Z_UTIL_INC_1529: u32 = 1530;
pub const Z_UTIL_INC_1530: u32 = 1531;
pub const Z_UTIL_INC_1531: u32 = 1532;
pub const Z_UTIL_INC_1532: u32 = 1533;
pub const Z_UTIL_INC_1533: u32 = 1534;
pub const Z_UTIL_INC_1534: u32 = 1535;
pub const Z_UTIL_INC_1535: u32 = 1536;
pub const Z_UTIL_INC_1536: u32 = 1537;
pub const Z_UTIL_INC_1537: u32 = 1538;
pub const Z_UTIL_INC_1538: u32 = 1539;
pub const Z_UTIL_INC_1539: u32 = 1540;
pub const Z_UTIL_INC_1540: u32 = 1541;
pub const Z_UTIL_INC_1541: u32 = 1542;
pub const Z_UTIL_INC_1542: u32 = 1543;
pub const Z_UTIL_INC_1543: u32 = 1544;
pub const Z_UTIL_INC_1544: u32 = 1545;
pub const Z_UTIL_INC_1545: u32 = 1546;
pub const Z_UTIL_INC_1546: u32 = 1547;
pub const Z_UTIL_INC_1547: u32 = 1548;
pub const Z_UTIL_INC_1548: u32 = 1549;
pub const Z_UTIL_INC_1549: u32 = 1550;
pub const Z_UTIL_INC_1550: u32 = 1551;
pub const Z_UTIL_INC_1551: u32 = 1552;
pub const Z_UTIL_INC_1552: u32 = 1553;
pub const Z_UTIL_INC_1553: u32 = 1554;
pub const Z_UTIL_INC_1554: u32 = 1555;
pub const Z_UTIL_INC_1555: u32 = 1556;
pub const Z_UTIL_INC_1556: u32 = 1557;
pub const Z_UTIL_INC_1557: u32 = 1558;
pub const Z_UTIL_INC_1558: u32 = 1559;
pub const Z_UTIL_INC_1559: u32 = 1560;
pub const Z_UTIL_INC_1560: u32 = 1561;
pub const Z_UTIL_INC_1561: u32 = 1562;
pub const Z_UTIL_INC_1562: u32 = 1563;
pub const Z_UTIL_INC_1563: u32 = 1564;
pub const Z_UTIL_INC_1564: u32 = 1565;
pub const Z_UTIL_INC_1565: u32 = 1566;
pub const Z_UTIL_INC_1566: u32 = 1567;
pub const Z_UTIL_INC_1567: u32 = 1568;
pub const Z_UTIL_INC_1568: u32 = 1569;
pub const Z_UTIL_INC_1569: u32 = 1570;
pub const Z_UTIL_INC_1570: u32 = 1571;
pub const Z_UTIL_INC_1571: u32 = 1572;
pub const Z_UTIL_INC_1572: u32 = 1573;
pub const Z_UTIL_INC_1573: u32 = 1574;
pub const Z_UTIL_INC_1574: u32 = 1575;
pub const Z_UTIL_INC_1575: u32 = 1576;
pub const Z_UTIL_INC_1576: u32 = 1577;
pub const Z_UTIL_INC_1577: u32 = 1578;
pub const Z_UTIL_INC_1578: u32 = 1579;
pub const Z_UTIL_INC_1579: u32 = 1580;
pub const Z_UTIL_INC_1580: u32 = 1581;
pub const Z_UTIL_INC_1581: u32 = 1582;
pub const Z_UTIL_INC_1582: u32 = 1583;
pub const Z_UTIL_INC_1583: u32 = 1584;
pub const Z_UTIL_INC_1584: u32 = 1585;
pub const Z_UTIL_INC_1585: u32 = 1586;
pub const Z_UTIL_INC_1586: u32 = 1587;
pub const Z_UTIL_INC_1587: u32 = 1588;
pub const Z_UTIL_INC_1588: u32 = 1589;
pub const Z_UTIL_INC_1589: u32 = 1590;
pub const Z_UTIL_INC_1590: u32 = 1591;
pub const Z_UTIL_INC_1591: u32 = 1592;
pub const Z_UTIL_INC_1592: u32 = 1593;
pub const Z_UTIL_INC_1593: u32 = 1594;
pub const Z_UTIL_INC_1594: u32 = 1595;
pub const Z_UTIL_INC_1595: u32 = 1596;
pub const Z_UTIL_INC_1596: u32 = 1597;
pub const Z_UTIL_INC_1597: u32 = 1598;
pub const Z_UTIL_INC_1598: u32 = 1599;
pub const Z_UTIL_INC_1599: u32 = 1600;
pub const Z_UTIL_INC_1600: u32 = 1601;
pub const Z_UTIL_INC_1601: u32 = 1602;
pub const Z_UTIL_INC_1602: u32 = 1603;
pub const Z_UTIL_INC_1603: u32 = 1604;
pub const Z_UTIL_INC_1604: u32 = 1605;
pub const Z_UTIL_INC_1605: u32 = 1606;
pub const Z_UTIL_INC_1606: u32 = 1607;
pub const Z_UTIL_INC_1607: u32 = 1608;
pub const Z_UTIL_INC_1608: u32 = 1609;
pub const Z_UTIL_INC_1609: u32 = 1610;
pub const Z_UTIL_INC_1610: u32 = 1611;
pub const Z_UTIL_INC_1611: u32 = 1612;
pub const Z_UTIL_INC_1612: u32 = 1613;
pub const Z_UTIL_INC_1613: u32 = 1614;
pub const Z_UTIL_INC_1614: u32 = 1615;
pub const Z_UTIL_INC_1615: u32 = 1616;
pub const Z_UTIL_INC_1616: u32 = 1617;
pub const Z_UTIL_INC_1617: u32 = 1618;
pub const Z_UTIL_INC_1618: u32 = 1619;
pub const Z_UTIL_INC_1619: u32 = 1620;
pub const Z_UTIL_INC_1620: u32 = 1621;
pub const Z_UTIL_INC_1621: u32 = 1622;
pub const Z_UTIL_INC_1622: u32 = 1623;
pub const Z_UTIL_INC_1623: u32 = 1624;
pub const Z_UTIL_INC_1624: u32 = 1625;
pub const Z_UTIL_INC_1625: u32 = 1626;
pub const Z_UTIL_INC_1626: u32 = 1627;
pub const Z_UTIL_INC_1627: u32 = 1628;
pub const Z_UTIL_INC_1628: u32 = 1629;
pub const Z_UTIL_INC_1629: u32 = 1630;
pub const Z_UTIL_INC_1630: u32 = 1631;
pub const Z_UTIL_INC_1631: u32 = 1632;
pub const Z_UTIL_INC_1632: u32 = 1633;
pub const Z_UTIL_INC_1633: u32 = 1634;
pub const Z_UTIL_INC_1634: u32 = 1635;
pub const Z_UTIL_INC_1635: u32 = 1636;
pub const Z_UTIL_INC_1636: u32 = 1637;
pub const Z_UTIL_INC_1637: u32 = 1638;
pub const Z_UTIL_INC_1638: u32 = 1639;
pub const Z_UTIL_INC_1639: u32 = 1640;
pub const Z_UTIL_INC_1640: u32 = 1641;
pub const Z_UTIL_INC_1641: u32 = 1642;
pub const Z_UTIL_INC_1642: u32 = 1643;
pub const Z_UTIL_INC_1643: u32 = 1644;
pub const Z_UTIL_INC_1644: u32 = 1645;
pub const Z_UTIL_INC_1645: u32 = 1646;
pub const Z_UTIL_INC_1646: u32 = 1647;
pub const Z_UTIL_INC_1647: u32 = 1648;
pub const Z_UTIL_INC_1648: u32 = 1649;
pub const Z_UTIL_INC_1649: u32 = 1650;
pub const Z_UTIL_INC_1650: u32 = 1651;
pub const Z_UTIL_INC_1651: u32 = 1652;
pub const Z_UTIL_INC_1652: u32 = 1653;
pub const Z_UTIL_INC_1653: u32 = 1654;
pub const Z_UTIL_INC_1654: u32 = 1655;
pub const Z_UTIL_INC_1655: u32 = 1656;
pub const Z_UTIL_INC_1656: u32 = 1657;
pub const Z_UTIL_INC_1657: u32 = 1658;
pub const Z_UTIL_INC_1658: u32 = 1659;
pub const Z_UTIL_INC_1659: u32 = 1660;
pub const Z_UTIL_INC_1660: u32 = 1661;
pub const Z_UTIL_INC_1661: u32 = 1662;
pub const Z_UTIL_INC_1662: u32 = 1663;
pub const Z_UTIL_INC_1663: u32 = 1664;
pub const Z_UTIL_INC_1664: u32 = 1665;
pub const Z_UTIL_INC_1665: u32 = 1666;
pub const Z_UTIL_INC_1666: u32 = 1667;
pub const Z_UTIL_INC_1667: u32 = 1668;
pub const Z_UTIL_INC_1668: u32 = 1669;
pub const Z_UTIL_INC_1669: u32 = 1670;
pub const Z_UTIL_INC_1670: u32 = 1671;
pub const Z_UTIL_INC_1671: u32 = 1672;
pub const Z_UTIL_INC_1672: u32 = 1673;
pub const Z_UTIL_INC_1673: u32 = 1674;
pub const Z_UTIL_INC_1674: u32 = 1675;
pub const Z_UTIL_INC_1675: u32 = 1676;
pub const Z_UTIL_INC_1676: u32 = 1677;
pub const Z_UTIL_INC_1677: u32 = 1678;
pub const Z_UTIL_INC_1678: u32 = 1679;
pub const Z_UTIL_INC_1679: u32 = 1680;
pub const Z_UTIL_INC_1680: u32 = 1681;
pub const Z_UTIL_INC_1681: u32 = 1682;
pub const Z_UTIL_INC_1682: u32 = 1683;
pub const Z_UTIL_INC_1683: u32 = 1684;
pub const Z_UTIL_INC_1684: u32 = 1685;
pub const Z_UTIL_INC_1685: u32 = 1686;
pub const Z_UTIL_INC_1686: u32 = 1687;
pub const Z_UTIL_INC_1687: u32 = 1688;
pub const Z_UTIL_INC_1688: u32 = 1689;
pub const Z_UTIL_INC_1689: u32 = 1690;
pub const Z_UTIL_INC_1690: u32 = 1691;
pub const Z_UTIL_INC_1691: u32 = 1692;
pub const Z_UTIL_INC_1692: u32 = 1693;
pub const Z_UTIL_INC_1693: u32 = 1694;
pub const Z_UTIL_INC_1694: u32 = 1695;
pub const Z_UTIL_INC_1695: u32 = 1696;
pub const Z_UTIL_INC_1696: u32 = 1697;
pub const Z_UTIL_INC_1697: u32 = 1698;
pub const Z_UTIL_INC_1698: u32 = 1699;
pub const Z_UTIL_INC_1699: u32 = 1700;
pub const Z_UTIL_INC_1700: u32 = 1701;
pub const Z_UTIL_INC_1701: u32 = 1702;
pub const Z_UTIL_INC_1702: u32 = 1703;
pub const Z_UTIL_INC_1703: u32 = 1704;
pub const Z_UTIL_INC_1704: u32 = 1705;
pub const Z_UTIL_INC_1705: u32 = 1706;
pub const Z_UTIL_INC_1706: u32 = 1707;
pub const Z_UTIL_INC_1707: u32 = 1708;
pub const Z_UTIL_INC_1708: u32 = 1709;
pub const Z_UTIL_INC_1709: u32 = 1710;
pub const Z_UTIL_INC_1710: u32 = 1711;
pub const Z_UTIL_INC_1711: u32 = 1712;
pub const Z_UTIL_INC_1712: u32 = 1713;
pub const Z_UTIL_INC_1713: u32 = 1714;
pub const Z_UTIL_INC_1714: u32 = 1715;
pub const Z_UTIL_INC_1715: u32 = 1716;
pub const Z_UTIL_INC_1716: u32 = 1717;
pub const Z_UTIL_INC_1717: u32 = 1718;
pub const Z_UTIL_INC_1718: u32 = 1719;
pub const Z_UTIL_INC_1719: u32 = 1720;
pub const Z_UTIL_INC_1720: u32 = 1721;
pub const Z_UTIL_INC_1721: u32 = 1722;
pub const Z_UTIL_INC_1722: u32 = 1723;
pub const Z_UTIL_INC_1723: u32 = 1724;
pub const Z_UTIL_INC_1724: u32 = 1725;
pub const Z_UTIL_INC_1725: u32 = 1726;
pub const Z_UTIL_INC_1726: u32 = 1727;
pub const Z_UTIL_INC_1727: u32 = 1728;
pub const Z_UTIL_INC_1728: u32 = 1729;
pub const Z_UTIL_INC_1729: u32 = 1730;
pub const Z_UTIL_INC_1730: u32 = 1731;
pub const Z_UTIL_INC_1731: u32 = 1732;
pub const Z_UTIL_INC_1732: u32 = 1733;
pub const Z_UTIL_INC_1733: u32 = 1734;
pub const Z_UTIL_INC_1734: u32 = 1735;
pub const Z_UTIL_INC_1735: u32 = 1736;
pub const Z_UTIL_INC_1736: u32 = 1737;
pub const Z_UTIL_INC_1737: u32 = 1738;
pub const Z_UTIL_INC_1738: u32 = 1739;
pub const Z_UTIL_INC_1739: u32 = 1740;
pub const Z_UTIL_INC_1740: u32 = 1741;
pub const Z_UTIL_INC_1741: u32 = 1742;
pub const Z_UTIL_INC_1742: u32 = 1743;
pub const Z_UTIL_INC_1743: u32 = 1744;
pub const Z_UTIL_INC_1744: u32 = 1745;
pub const Z_UTIL_INC_1745: u32 = 1746;
pub const Z_UTIL_INC_1746: u32 = 1747;
pub const Z_UTIL_INC_1747: u32 = 1748;
pub const Z_UTIL_INC_1748: u32 = 1749;
pub const Z_UTIL_INC_1749: u32 = 1750;
pub const Z_UTIL_INC_1750: u32 = 1751;
pub const Z_UTIL_INC_1751: u32 = 1752;
pub const Z_UTIL_INC_1752: u32 = 1753;
pub const Z_UTIL_INC_1753: u32 = 1754;
pub const Z_UTIL_INC_1754: u32 = 1755;
pub const Z_UTIL_INC_1755: u32 = 1756;
pub const Z_UTIL_INC_1756: u32 = 1757;
pub const Z_UTIL_INC_1757: u32 = 1758;
pub const Z_UTIL_INC_1758: u32 = 1759;
pub const Z_UTIL_INC_1759: u32 = 1760;
pub const Z_UTIL_INC_1760: u32 = 1761;
pub const Z_UTIL_INC_1761: u32 = 1762;
pub const Z_UTIL_INC_1762: u32 = 1763;
pub const Z_UTIL_INC_1763: u32 = 1764;
pub const Z_UTIL_INC_1764: u32 = 1765;
pub const Z_UTIL_INC_1765: u32 = 1766;
pub const Z_UTIL_INC_1766: u32 = 1767;
pub const Z_UTIL_INC_1767: u32 = 1768;
pub const Z_UTIL_INC_1768: u32 = 1769;
pub const Z_UTIL_INC_1769: u32 = 1770;
pub const Z_UTIL_INC_1770: u32 = 1771;
pub const Z_UTIL_INC_1771: u32 = 1772;
pub const Z_UTIL_INC_1772: u32 = 1773;
pub const Z_UTIL_INC_1773: u32 = 1774;
pub const Z_UTIL_INC_1774: u32 = 1775;
pub const Z_UTIL_INC_1775: u32 = 1776;
pub const Z_UTIL_INC_1776: u32 = 1777;
pub const Z_UTIL_INC_1777: u32 = 1778;
pub const Z_UTIL_INC_1778: u32 = 1779;
pub const Z_UTIL_INC_1779: u32 = 1780;
pub const Z_UTIL_INC_1780: u32 = 1781;
pub const Z_UTIL_INC_1781: u32 = 1782;
pub const Z_UTIL_INC_1782: u32 = 1783;
pub const Z_UTIL_INC_1783: u32 = 1784;
pub const Z_UTIL_INC_1784: u32 = 1785;
pub const Z_UTIL_INC_1785: u32 = 1786;
pub const Z_UTIL_INC_1786: u32 = 1787;
pub const Z_UTIL_INC_1787: u32 = 1788;
pub const Z_UTIL_INC_1788: u32 = 1789;
pub const Z_UTIL_INC_1789: u32 = 1790;
pub const Z_UTIL_INC_1790: u32 = 1791;
pub const Z_UTIL_INC_1791: u32 = 1792;
pub const Z_UTIL_INC_1792: u32 = 1793;
pub const Z_UTIL_INC_1793: u32 = 1794;
pub const Z_UTIL_INC_1794: u32 = 1795;
pub const Z_UTIL_INC_1795: u32 = 1796;
pub const Z_UTIL_INC_1796: u32 = 1797;
pub const Z_UTIL_INC_1797: u32 = 1798;
pub const Z_UTIL_INC_1798: u32 = 1799;
pub const Z_UTIL_INC_1799: u32 = 1800;
pub const Z_UTIL_INC_1800: u32 = 1801;
pub const Z_UTIL_INC_1801: u32 = 1802;
pub const Z_UTIL_INC_1802: u32 = 1803;
pub const Z_UTIL_INC_1803: u32 = 1804;
pub const Z_UTIL_INC_1804: u32 = 1805;
pub const Z_UTIL_INC_1805: u32 = 1806;
pub const Z_UTIL_INC_1806: u32 = 1807;
pub const Z_UTIL_INC_1807: u32 = 1808;
pub const Z_UTIL_INC_1808: u32 = 1809;
pub const Z_UTIL_INC_1809: u32 = 1810;
pub const Z_UTIL_INC_1810: u32 = 1811;
pub const Z_UTIL_INC_1811: u32 = 1812;
pub const Z_UTIL_INC_1812: u32 = 1813;
pub const Z_UTIL_INC_1813: u32 = 1814;
pub const Z_UTIL_INC_1814: u32 = 1815;
pub const Z_UTIL_INC_1815: u32 = 1816;
pub const Z_UTIL_INC_1816: u32 = 1817;
pub const Z_UTIL_INC_1817: u32 = 1818;
pub const Z_UTIL_INC_1818: u32 = 1819;
pub const Z_UTIL_INC_1819: u32 = 1820;
pub const Z_UTIL_INC_1820: u32 = 1821;
pub const Z_UTIL_INC_1821: u32 = 1822;
pub const Z_UTIL_INC_1822: u32 = 1823;
pub const Z_UTIL_INC_1823: u32 = 1824;
pub const Z_UTIL_INC_1824: u32 = 1825;
pub const Z_UTIL_INC_1825: u32 = 1826;
pub const Z_UTIL_INC_1826: u32 = 1827;
pub const Z_UTIL_INC_1827: u32 = 1828;
pub const Z_UTIL_INC_1828: u32 = 1829;
pub const Z_UTIL_INC_1829: u32 = 1830;
pub const Z_UTIL_INC_1830: u32 = 1831;
pub const Z_UTIL_INC_1831: u32 = 1832;
pub const Z_UTIL_INC_1832: u32 = 1833;
pub const Z_UTIL_INC_1833: u32 = 1834;
pub const Z_UTIL_INC_1834: u32 = 1835;
pub const Z_UTIL_INC_1835: u32 = 1836;
pub const Z_UTIL_INC_1836: u32 = 1837;
pub const Z_UTIL_INC_1837: u32 = 1838;
pub const Z_UTIL_INC_1838: u32 = 1839;
pub const Z_UTIL_INC_1839: u32 = 1840;
pub const Z_UTIL_INC_1840: u32 = 1841;
pub const Z_UTIL_INC_1841: u32 = 1842;
pub const Z_UTIL_INC_1842: u32 = 1843;
pub const Z_UTIL_INC_1843: u32 = 1844;
pub const Z_UTIL_INC_1844: u32 = 1845;
pub const Z_UTIL_INC_1845: u32 = 1846;
pub const Z_UTIL_INC_1846: u32 = 1847;
pub const Z_UTIL_INC_1847: u32 = 1848;
pub const Z_UTIL_INC_1848: u32 = 1849;
pub const Z_UTIL_INC_1849: u32 = 1850;
pub const Z_UTIL_INC_1850: u32 = 1851;
pub const Z_UTIL_INC_1851: u32 = 1852;
pub const Z_UTIL_INC_1852: u32 = 1853;
pub const Z_UTIL_INC_1853: u32 = 1854;
pub const Z_UTIL_INC_1854: u32 = 1855;
pub const Z_UTIL_INC_1855: u32 = 1856;
pub const Z_UTIL_INC_1856: u32 = 1857;
pub const Z_UTIL_INC_1857: u32 = 1858;
pub const Z_UTIL_INC_1858: u32 = 1859;
pub const Z_UTIL_INC_1859: u32 = 1860;
pub const Z_UTIL_INC_1860: u32 = 1861;
pub const Z_UTIL_INC_1861: u32 = 1862;
pub const Z_UTIL_INC_1862: u32 = 1863;
pub const Z_UTIL_INC_1863: u32 = 1864;
pub const Z_UTIL_INC_1864: u32 = 1865;
pub const Z_UTIL_INC_1865: u32 = 1866;
pub const Z_UTIL_INC_1866: u32 = 1867;
pub const Z_UTIL_INC_1867: u32 = 1868;
pub const Z_UTIL_INC_1868: u32 = 1869;
pub const Z_UTIL_INC_1869: u32 = 1870;
pub const Z_UTIL_INC_1870: u32 = 1871;
pub const Z_UTIL_INC_1871: u32 = 1872;
pub const Z_UTIL_INC_1872: u32 = 1873;
pub const Z_UTIL_INC_1873: u32 = 1874;
pub const Z_UTIL_INC_1874: u32 = 1875;
pub const Z_UTIL_INC_1875: u32 = 1876;
pub const Z_UTIL_INC_1876: u32 = 1877;
pub const Z_UTIL_INC_1877: u32 = 1878;
pub const Z_UTIL_INC_1878: u32 = 1879;
pub const Z_UTIL_INC_1879: u32 = 1880;
pub const Z_UTIL_INC_1880: u32 = 1881;
pub const Z_UTIL_INC_1881: u32 = 1882;
pub const Z_UTIL_INC_1882: u32 = 1883;
pub const Z_UTIL_INC_1883: u32 = 1884;
pub const Z_UTIL_INC_1884: u32 = 1885;
pub const Z_UTIL_INC_1885: u32 = 1886;
pub const Z_UTIL_INC_1886: u32 = 1887;
pub const Z_UTIL_INC_1887: u32 = 1888;
pub const Z_UTIL_INC_1888: u32 = 1889;
pub const Z_UTIL_INC_1889: u32 = 1890;
pub const Z_UTIL_INC_1890: u32 = 1891;
pub const Z_UTIL_INC_1891: u32 = 1892;
pub const Z_UTIL_INC_1892: u32 = 1893;
pub const Z_UTIL_INC_1893: u32 = 1894;
pub const Z_UTIL_INC_1894: u32 = 1895;
pub const Z_UTIL_INC_1895: u32 = 1896;
pub const Z_UTIL_INC_1896: u32 = 1897;
pub const Z_UTIL_INC_1897: u32 = 1898;
pub const Z_UTIL_INC_1898: u32 = 1899;
pub const Z_UTIL_INC_1899: u32 = 1900;
pub const Z_UTIL_INC_1900: u32 = 1901;
pub const Z_UTIL_INC_1901: u32 = 1902;
pub const Z_UTIL_INC_1902: u32 = 1903;
pub const Z_UTIL_INC_1903: u32 = 1904;
pub const Z_UTIL_INC_1904: u32 = 1905;
pub const Z_UTIL_INC_1905: u32 = 1906;
pub const Z_UTIL_INC_1906: u32 = 1907;
pub const Z_UTIL_INC_1907: u32 = 1908;
pub const Z_UTIL_INC_1908: u32 = 1909;
pub const Z_UTIL_INC_1909: u32 = 1910;
pub const Z_UTIL_INC_1910: u32 = 1911;
pub const Z_UTIL_INC_1911: u32 = 1912;
pub const Z_UTIL_INC_1912: u32 = 1913;
pub const Z_UTIL_INC_1913: u32 = 1914;
pub const Z_UTIL_INC_1914: u32 = 1915;
pub const Z_UTIL_INC_1915: u32 = 1916;
pub const Z_UTIL_INC_1916: u32 = 1917;
pub const Z_UTIL_INC_1917: u32 = 1918;
pub const Z_UTIL_INC_1918: u32 = 1919;
pub const Z_UTIL_INC_1919: u32 = 1920;
pub const Z_UTIL_INC_1920: u32 = 1921;
pub const Z_UTIL_INC_1921: u32 = 1922;
pub const Z_UTIL_INC_1922: u32 = 1923;
pub const Z_UTIL_INC_1923: u32 = 1924;
pub const Z_UTIL_INC_1924: u32 = 1925;
pub const Z_UTIL_INC_1925: u32 = 1926;
pub const Z_UTIL_INC_1926: u32 = 1927;
pub const Z_UTIL_INC_1927: u32 = 1928;
pub const Z_UTIL_INC_1928: u32 = 1929;
pub const Z_UTIL_INC_1929: u32 = 1930;
pub const Z_UTIL_INC_1930: u32 = 1931;
pub const Z_UTIL_INC_1931: u32 = 1932;
pub const Z_UTIL_INC_1932: u32 = 1933;
pub const Z_UTIL_INC_1933: u32 = 1934;
pub const Z_UTIL_INC_1934: u32 = 1935;
pub const Z_UTIL_INC_1935: u32 = 1936;
pub const Z_UTIL_INC_1936: u32 = 1937;
pub const Z_UTIL_INC_1937: u32 = 1938;
pub const Z_UTIL_INC_1938: u32 = 1939;
pub const Z_UTIL_INC_1939: u32 = 1940;
pub const Z_UTIL_INC_1940: u32 = 1941;
pub const Z_UTIL_INC_1941: u32 = 1942;
pub const Z_UTIL_INC_1942: u32 = 1943;
pub const Z_UTIL_INC_1943: u32 = 1944;
pub const Z_UTIL_INC_1944: u32 = 1945;
pub const Z_UTIL_INC_1945: u32 = 1946;
pub const Z_UTIL_INC_1946: u32 = 1947;
pub const Z_UTIL_INC_1947: u32 = 1948;
pub const Z_UTIL_INC_1948: u32 = 1949;
pub const Z_UTIL_INC_1949: u32 = 1950;
pub const Z_UTIL_INC_1950: u32 = 1951;
pub const Z_UTIL_INC_1951: u32 = 1952;
pub const Z_UTIL_INC_1952: u32 = 1953;
pub const Z_UTIL_INC_1953: u32 = 1954;
pub const Z_UTIL_INC_1954: u32 = 1955;
pub const Z_UTIL_INC_1955: u32 = 1956;
pub const Z_UTIL_INC_1956: u32 = 1957;
pub const Z_UTIL_INC_1957: u32 = 1958;
pub const Z_UTIL_INC_1958: u32 = 1959;
pub const Z_UTIL_INC_1959: u32 = 1960;
pub const Z_UTIL_INC_1960: u32 = 1961;
pub const Z_UTIL_INC_1961: u32 = 1962;
pub const Z_UTIL_INC_1962: u32 = 1963;
pub const Z_UTIL_INC_1963: u32 = 1964;
pub const Z_UTIL_INC_1964: u32 = 1965;
pub const Z_UTIL_INC_1965: u32 = 1966;
pub const Z_UTIL_INC_1966: u32 = 1967;
pub const Z_UTIL_INC_1967: u32 = 1968;
pub const Z_UTIL_INC_1968: u32 = 1969;
pub const Z_UTIL_INC_1969: u32 = 1970;
pub const Z_UTIL_INC_1970: u32 = 1971;
pub const Z_UTIL_INC_1971: u32 = 1972;
pub const Z_UTIL_INC_1972: u32 = 1973;
pub const Z_UTIL_INC_1973: u32 = 1974;
pub const Z_UTIL_INC_1974: u32 = 1975;
pub const Z_UTIL_INC_1975: u32 = 1976;
pub const Z_UTIL_INC_1976: u32 = 1977;
pub const Z_UTIL_INC_1977: u32 = 1978;
pub const Z_UTIL_INC_1978: u32 = 1979;
pub const Z_UTIL_INC_1979: u32 = 1980;
pub const Z_UTIL_INC_1980: u32 = 1981;
pub const Z_UTIL_INC_1981: u32 = 1982;
pub const Z_UTIL_INC_1982: u32 = 1983;
pub const Z_UTIL_INC_1983: u32 = 1984;
pub const Z_UTIL_INC_1984: u32 = 1985;
pub const Z_UTIL_INC_1985: u32 = 1986;
pub const Z_UTIL_INC_1986: u32 = 1987;
pub const Z_UTIL_INC_1987: u32 = 1988;
pub const Z_UTIL_INC_1988: u32 = 1989;
pub const Z_UTIL_INC_1989: u32 = 1990;
pub const Z_UTIL_INC_1990: u32 = 1991;
pub const Z_UTIL_INC_1991: u32 = 1992;
pub const Z_UTIL_INC_1992: u32 = 1993;
pub const Z_UTIL_INC_1993: u32 = 1994;
pub const Z_UTIL_INC_1994: u32 = 1995;
pub const Z_UTIL_INC_1995: u32 = 1996;
pub const Z_UTIL_INC_1996: u32 = 1997;
pub const Z_UTIL_INC_1997: u32 = 1998;
pub const Z_UTIL_INC_1998: u32 = 1999;
pub const Z_UTIL_INC_1999: u32 = 2000;
pub const Z_UTIL_INC_2000: u32 = 2001;
pub const Z_UTIL_INC_2001: u32 = 2002;
pub const Z_UTIL_INC_2002: u32 = 2003;
pub const Z_UTIL_INC_2003: u32 = 2004;
pub const Z_UTIL_INC_2004: u32 = 2005;
pub const Z_UTIL_INC_2005: u32 = 2006;
pub const Z_UTIL_INC_2006: u32 = 2007;
pub const Z_UTIL_INC_2007: u32 = 2008;
pub const Z_UTIL_INC_2008: u32 = 2009;
pub const Z_UTIL_INC_2009: u32 = 2010;
pub const Z_UTIL_INC_2010: u32 = 2011;
pub const Z_UTIL_INC_2011: u32 = 2012;
pub const Z_UTIL_INC_2012: u32 = 2013;
pub const Z_UTIL_INC_2013: u32 = 2014;
pub const Z_UTIL_INC_2014: u32 = 2015;
pub const Z_UTIL_INC_2015: u32 = 2016;
pub const Z_UTIL_INC_2016: u32 = 2017;
pub const Z_UTIL_INC_2017: u32 = 2018;
pub const Z_UTIL_INC_2018: u32 = 2019;
pub const Z_UTIL_INC_2019: u32 = 2020;
pub const Z_UTIL_INC_2020: u32 = 2021;
pub const Z_UTIL_INC_2021: u32 = 2022;
pub const Z_UTIL_INC_2022: u32 = 2023;
pub const Z_UTIL_INC_2023: u32 = 2024;
pub const Z_UTIL_INC_2024: u32 = 2025;
pub const Z_UTIL_INC_2025: u32 = 2026;
pub const Z_UTIL_INC_2026: u32 = 2027;
pub const Z_UTIL_INC_2027: u32 = 2028;
pub const Z_UTIL_INC_2028: u32 = 2029;
pub const Z_UTIL_INC_2029: u32 = 2030;
pub const Z_UTIL_INC_2030: u32 = 2031;
pub const Z_UTIL_INC_2031: u32 = 2032;
pub const Z_UTIL_INC_2032: u32 = 2033;
pub const Z_UTIL_INC_2033: u32 = 2034;
pub const Z_UTIL_INC_2034: u32 = 2035;
pub const Z_UTIL_INC_2035: u32 = 2036;
pub const Z_UTIL_INC_2036: u32 = 2037;
pub const Z_UTIL_INC_2037: u32 = 2038;
pub const Z_UTIL_INC_2038: u32 = 2039;
pub const Z_UTIL_INC_2039: u32 = 2040;
pub const Z_UTIL_INC_2040: u32 = 2041;
pub const Z_UTIL_INC_2041: u32 = 2042;
pub const Z_UTIL_INC_2042: u32 = 2043;
pub const Z_UTIL_INC_2043: u32 = 2044;
pub const Z_UTIL_INC_2044: u32 = 2045;
pub const Z_UTIL_INC_2045: u32 = 2046;
pub const Z_UTIL_INC_2046: u32 = 2047;
pub const Z_UTIL_INC_2047: u32 = 2048;
pub const Z_UTIL_INC_2048: u32 = 2049;
pub const Z_UTIL_INC_2049: u32 = 2050;
pub const Z_UTIL_INC_2050: u32 = 2051;
pub const Z_UTIL_INC_2051: u32 = 2052;
pub const Z_UTIL_INC_2052: u32 = 2053;
pub const Z_UTIL_INC_2053: u32 = 2054;
pub const Z_UTIL_INC_2054: u32 = 2055;
pub const Z_UTIL_INC_2055: u32 = 2056;
pub const Z_UTIL_INC_2056: u32 = 2057;
pub const Z_UTIL_INC_2057: u32 = 2058;
pub const Z_UTIL_INC_2058: u32 = 2059;
pub const Z_UTIL_INC_2059: u32 = 2060;
pub const Z_UTIL_INC_2060: u32 = 2061;
pub const Z_UTIL_INC_2061: u32 = 2062;
pub const Z_UTIL_INC_2062: u32 = 2063;
pub const Z_UTIL_INC_2063: u32 = 2064;
pub const Z_UTIL_INC_2064: u32 = 2065;
pub const Z_UTIL_INC_2065: u32 = 2066;
pub const Z_UTIL_INC_2066: u32 = 2067;
pub const Z_UTIL_INC_2067: u32 = 2068;
pub const Z_UTIL_INC_2068: u32 = 2069;
pub const Z_UTIL_INC_2069: u32 = 2070;
pub const Z_UTIL_INC_2070: u32 = 2071;
pub const Z_UTIL_INC_2071: u32 = 2072;
pub const Z_UTIL_INC_2072: u32 = 2073;
pub const Z_UTIL_INC_2073: u32 = 2074;
pub const Z_UTIL_INC_2074: u32 = 2075;
pub const Z_UTIL_INC_2075: u32 = 2076;
pub const Z_UTIL_INC_2076: u32 = 2077;
pub const Z_UTIL_INC_2077: u32 = 2078;
pub const Z_UTIL_INC_2078: u32 = 2079;
pub const Z_UTIL_INC_2079: u32 = 2080;
pub const Z_UTIL_INC_2080: u32 = 2081;
pub const Z_UTIL_INC_2081: u32 = 2082;
pub const Z_UTIL_INC_2082: u32 = 2083;
pub const Z_UTIL_INC_2083: u32 = 2084;
pub const Z_UTIL_INC_2084: u32 = 2085;
pub const Z_UTIL_INC_2085: u32 = 2086;
pub const Z_UTIL_INC_2086: u32 = 2087;
pub const Z_UTIL_INC_2087: u32 = 2088;
pub const Z_UTIL_INC_2088: u32 = 2089;
pub const Z_UTIL_INC_2089: u32 = 2090;
pub const Z_UTIL_INC_2090: u32 = 2091;
pub const Z_UTIL_INC_2091: u32 = 2092;
pub const Z_UTIL_INC_2092: u32 = 2093;
pub const Z_UTIL_INC_2093: u32 = 2094;
pub const Z_UTIL_INC_2094: u32 = 2095;
pub const Z_UTIL_INC_2095: u32 = 2096;
pub const Z_UTIL_INC_2096: u32 = 2097;
pub const Z_UTIL_INC_2097: u32 = 2098;
pub const Z_UTIL_INC_2098: u32 = 2099;
pub const Z_UTIL_INC_2099: u32 = 2100;
pub const Z_UTIL_INC_2100: u32 = 2101;
pub const Z_UTIL_INC_2101: u32 = 2102;
pub const Z_UTIL_INC_2102: u32 = 2103;
pub const Z_UTIL_INC_2103: u32 = 2104;
pub const Z_UTIL_INC_2104: u32 = 2105;
pub const Z_UTIL_INC_2105: u32 = 2106;
pub const Z_UTIL_INC_2106: u32 = 2107;
pub const Z_UTIL_INC_2107: u32 = 2108;
pub const Z_UTIL_INC_2108: u32 = 2109;
pub const Z_UTIL_INC_2109: u32 = 2110;
pub const Z_UTIL_INC_2110: u32 = 2111;
pub const Z_UTIL_INC_2111: u32 = 2112;
pub const Z_UTIL_INC_2112: u32 = 2113;
pub const Z_UTIL_INC_2113: u32 = 2114;
pub const Z_UTIL_INC_2114: u32 = 2115;
pub const Z_UTIL_INC_2115: u32 = 2116;
pub const Z_UTIL_INC_2116: u32 = 2117;
pub const Z_UTIL_INC_2117: u32 = 2118;
pub const Z_UTIL_INC_2118: u32 = 2119;
pub const Z_UTIL_INC_2119: u32 = 2120;
pub const Z_UTIL_INC_2120: u32 = 2121;
pub const Z_UTIL_INC_2121: u32 = 2122;
pub const Z_UTIL_INC_2122: u32 = 2123;
pub const Z_UTIL_INC_2123: u32 = 2124;
pub const Z_UTIL_INC_2124: u32 = 2125;
pub const Z_UTIL_INC_2125: u32 = 2126;
pub const Z_UTIL_INC_2126: u32 = 2127;
pub const Z_UTIL_INC_2127: u32 = 2128;
pub const Z_UTIL_INC_2128: u32 = 2129;
pub const Z_UTIL_INC_2129: u32 = 2130;
pub const Z_UTIL_INC_2130: u32 = 2131;
pub const Z_UTIL_INC_2131: u32 = 2132;
pub const Z_UTIL_INC_2132: u32 = 2133;
pub const Z_UTIL_INC_2133: u32 = 2134;
pub const Z_UTIL_INC_2134: u32 = 2135;
pub const Z_UTIL_INC_2135: u32 = 2136;
pub const Z_UTIL_INC_2136: u32 = 2137;
pub const Z_UTIL_INC_2137: u32 = 2138;
pub const Z_UTIL_INC_2138: u32 = 2139;
pub const Z_UTIL_INC_2139: u32 = 2140;
pub const Z_UTIL_INC_2140: u32 = 2141;
pub const Z_UTIL_INC_2141: u32 = 2142;
pub const Z_UTIL_INC_2142: u32 = 2143;
pub const Z_UTIL_INC_2143: u32 = 2144;
pub const Z_UTIL_INC_2144: u32 = 2145;
pub const Z_UTIL_INC_2145: u32 = 2146;
pub const Z_UTIL_INC_2146: u32 = 2147;
pub const Z_UTIL_INC_2147: u32 = 2148;
pub const Z_UTIL_INC_2148: u32 = 2149;
pub const Z_UTIL_INC_2149: u32 = 2150;
pub const Z_UTIL_INC_2150: u32 = 2151;
pub const Z_UTIL_INC_2151: u32 = 2152;
pub const Z_UTIL_INC_2152: u32 = 2153;
pub const Z_UTIL_INC_2153: u32 = 2154;
pub const Z_UTIL_INC_2154: u32 = 2155;
pub const Z_UTIL_INC_2155: u32 = 2156;
pub const Z_UTIL_INC_2156: u32 = 2157;
pub const Z_UTIL_INC_2157: u32 = 2158;
pub const Z_UTIL_INC_2158: u32 = 2159;
pub const Z_UTIL_INC_2159: u32 = 2160;
pub const Z_UTIL_INC_2160: u32 = 2161;
pub const Z_UTIL_INC_2161: u32 = 2162;
pub const Z_UTIL_INC_2162: u32 = 2163;
pub const Z_UTIL_INC_2163: u32 = 2164;
pub const Z_UTIL_INC_2164: u32 = 2165;
pub const Z_UTIL_INC_2165: u32 = 2166;
pub const Z_UTIL_INC_2166: u32 = 2167;
pub const Z_UTIL_INC_2167: u32 = 2168;
pub const Z_UTIL_INC_2168: u32 = 2169;
pub const Z_UTIL_INC_2169: u32 = 2170;
pub const Z_UTIL_INC_2170: u32 = 2171;
pub const Z_UTIL_INC_2171: u32 = 2172;
pub const Z_UTIL_INC_2172: u32 = 2173;
pub const Z_UTIL_INC_2173: u32 = 2174;
pub const Z_UTIL_INC_2174: u32 = 2175;
pub const Z_UTIL_INC_2175: u32 = 2176;
pub const Z_UTIL_INC_2176: u32 = 2177;
pub const Z_UTIL_INC_2177: u32 = 2178;
pub const Z_UTIL_INC_2178: u32 = 2179;
pub const Z_UTIL_INC_2179: u32 = 2180;
pub const Z_UTIL_INC_2180: u32 = 2181;
pub const Z_UTIL_INC_2181: u32 = 2182;
pub const Z_UTIL_INC_2182: u32 = 2183;
pub const Z_UTIL_INC_2183: u32 = 2184;
pub const Z_UTIL_INC_2184: u32 = 2185;
pub const Z_UTIL_INC_2185: u32 = 2186;
pub const Z_UTIL_INC_2186: u32 = 2187;
pub const Z_UTIL_INC_2187: u32 = 2188;
pub const Z_UTIL_INC_2188: u32 = 2189;
pub const Z_UTIL_INC_2189: u32 = 2190;
pub const Z_UTIL_INC_2190: u32 = 2191;
pub const Z_UTIL_INC_2191: u32 = 2192;
pub const Z_UTIL_INC_2192: u32 = 2193;
pub const Z_UTIL_INC_2193: u32 = 2194;
pub const Z_UTIL_INC_2194: u32 = 2195;
pub const Z_UTIL_INC_2195: u32 = 2196;
pub const Z_UTIL_INC_2196: u32 = 2197;
pub const Z_UTIL_INC_2197: u32 = 2198;
pub const Z_UTIL_INC_2198: u32 = 2199;
pub const Z_UTIL_INC_2199: u32 = 2200;
pub const Z_UTIL_INC_2200: u32 = 2201;
pub const Z_UTIL_INC_2201: u32 = 2202;
pub const Z_UTIL_INC_2202: u32 = 2203;
pub const Z_UTIL_INC_2203: u32 = 2204;
pub const Z_UTIL_INC_2204: u32 = 2205;
pub const Z_UTIL_INC_2205: u32 = 2206;
pub const Z_UTIL_INC_2206: u32 = 2207;
pub const Z_UTIL_INC_2207: u32 = 2208;
pub const Z_UTIL_INC_2208: u32 = 2209;
pub const Z_UTIL_INC_2209: u32 = 2210;
pub const Z_UTIL_INC_2210: u32 = 2211;
pub const Z_UTIL_INC_2211: u32 = 2212;
pub const Z_UTIL_INC_2212: u32 = 2213;
pub const Z_UTIL_INC_2213: u32 = 2214;
pub const Z_UTIL_INC_2214: u32 = 2215;
pub const Z_UTIL_INC_2215: u32 = 2216;
pub const Z_UTIL_INC_2216: u32 = 2217;
pub const Z_UTIL_INC_2217: u32 = 2218;
pub const Z_UTIL_INC_2218: u32 = 2219;
pub const Z_UTIL_INC_2219: u32 = 2220;
pub const Z_UTIL_INC_2220: u32 = 2221;
pub const Z_UTIL_INC_2221: u32 = 2222;
pub const Z_UTIL_INC_2222: u32 = 2223;
pub const Z_UTIL_INC_2223: u32 = 2224;
pub const Z_UTIL_INC_2224: u32 = 2225;
pub const Z_UTIL_INC_2225: u32 = 2226;
pub const Z_UTIL_INC_2226: u32 = 2227;
pub const Z_UTIL_INC_2227: u32 = 2228;
pub const Z_UTIL_INC_2228: u32 = 2229;
pub const Z_UTIL_INC_2229: u32 = 2230;
pub const Z_UTIL_INC_2230: u32 = 2231;
pub const Z_UTIL_INC_2231: u32 = 2232;
pub const Z_UTIL_INC_2232: u32 = 2233;
pub const Z_UTIL_INC_2233: u32 = 2234;
pub const Z_UTIL_INC_2234: u32 = 2235;
pub const Z_UTIL_INC_2235: u32 = 2236;
pub const Z_UTIL_INC_2236: u32 = 2237;
pub const Z_UTIL_INC_2237: u32 = 2238;
pub const Z_UTIL_INC_2238: u32 = 2239;
pub const Z_UTIL_INC_2239: u32 = 2240;
pub const Z_UTIL_INC_2240: u32 = 2241;
pub const Z_UTIL_INC_2241: u32 = 2242;
pub const Z_UTIL_INC_2242: u32 = 2243;
pub const Z_UTIL_INC_2243: u32 = 2244;
pub const Z_UTIL_INC_2244: u32 = 2245;
pub const Z_UTIL_INC_2245: u32 = 2246;
pub const Z_UTIL_INC_2246: u32 = 2247;
pub const Z_UTIL_INC_2247: u32 = 2248;
pub const Z_UTIL_INC_2248: u32 = 2249;
pub const Z_UTIL_INC_2249: u32 = 2250;
pub const Z_UTIL_INC_2250: u32 = 2251;
pub const Z_UTIL_INC_2251: u32 = 2252;
pub const Z_UTIL_INC_2252: u32 = 2253;
pub const Z_UTIL_INC_2253: u32 = 2254;
pub const Z_UTIL_INC_2254: u32 = 2255;
pub const Z_UTIL_INC_2255: u32 = 2256;
pub const Z_UTIL_INC_2256: u32 = 2257;
pub const Z_UTIL_INC_2257: u32 = 2258;
pub const Z_UTIL_INC_2258: u32 = 2259;
pub const Z_UTIL_INC_2259: u32 = 2260;
pub const Z_UTIL_INC_2260: u32 = 2261;
pub const Z_UTIL_INC_2261: u32 = 2262;
pub const Z_UTIL_INC_2262: u32 = 2263;
pub const Z_UTIL_INC_2263: u32 = 2264;
pub const Z_UTIL_INC_2264: u32 = 2265;
pub const Z_UTIL_INC_2265: u32 = 2266;
pub const Z_UTIL_INC_2266: u32 = 2267;
pub const Z_UTIL_INC_2267: u32 = 2268;
pub const Z_UTIL_INC_2268: u32 = 2269;
pub const Z_UTIL_INC_2269: u32 = 2270;
pub const Z_UTIL_INC_2270: u32 = 2271;
pub const Z_UTIL_INC_2271: u32 = 2272;
pub const Z_UTIL_INC_2272: u32 = 2273;
pub const Z_UTIL_INC_2273: u32 = 2274;
pub const Z_UTIL_INC_2274: u32 = 2275;
pub const Z_UTIL_INC_2275: u32 = 2276;
pub const Z_UTIL_INC_2276: u32 = 2277;
pub const Z_UTIL_INC_2277: u32 = 2278;
pub const Z_UTIL_INC_2278: u32 = 2279;
pub const Z_UTIL_INC_2279: u32 = 2280;
pub const Z_UTIL_INC_2280: u32 = 2281;
pub const Z_UTIL_INC_2281: u32 = 2282;
pub const Z_UTIL_INC_2282: u32 = 2283;
pub const Z_UTIL_INC_2283: u32 = 2284;
pub const Z_UTIL_INC_2284: u32 = 2285;
pub const Z_UTIL_INC_2285: u32 = 2286;
pub const Z_UTIL_INC_2286: u32 = 2287;
pub const Z_UTIL_INC_2287: u32 = 2288;
pub const Z_UTIL_INC_2288: u32 = 2289;
pub const Z_UTIL_INC_2289: u32 = 2290;
pub const Z_UTIL_INC_2290: u32 = 2291;
pub const Z_UTIL_INC_2291: u32 = 2292;
pub const Z_UTIL_INC_2292: u32 = 2293;
pub const Z_UTIL_INC_2293: u32 = 2294;
pub const Z_UTIL_INC_2294: u32 = 2295;
pub const Z_UTIL_INC_2295: u32 = 2296;
pub const Z_UTIL_INC_2296: u32 = 2297;
pub const Z_UTIL_INC_2297: u32 = 2298;
pub const Z_UTIL_INC_2298: u32 = 2299;
pub const Z_UTIL_INC_2299: u32 = 2300;
pub const Z_UTIL_INC_2300: u32 = 2301;
pub const Z_UTIL_INC_2301: u32 = 2302;
pub const Z_UTIL_INC_2302: u32 = 2303;
pub const Z_UTIL_INC_2303: u32 = 2304;
pub const Z_UTIL_INC_2304: u32 = 2305;
pub const Z_UTIL_INC_2305: u32 = 2306;
pub const Z_UTIL_INC_2306: u32 = 2307;
pub const Z_UTIL_INC_2307: u32 = 2308;
pub const Z_UTIL_INC_2308: u32 = 2309;
pub const Z_UTIL_INC_2309: u32 = 2310;
pub const Z_UTIL_INC_2310: u32 = 2311;
pub const Z_UTIL_INC_2311: u32 = 2312;
pub const Z_UTIL_INC_2312: u32 = 2313;
pub const Z_UTIL_INC_2313: u32 = 2314;
pub const Z_UTIL_INC_2314: u32 = 2315;
pub const Z_UTIL_INC_2315: u32 = 2316;
pub const Z_UTIL_INC_2316: u32 = 2317;
pub const Z_UTIL_INC_2317: u32 = 2318;
pub const Z_UTIL_INC_2318: u32 = 2319;
pub const Z_UTIL_INC_2319: u32 = 2320;
pub const Z_UTIL_INC_2320: u32 = 2321;
pub const Z_UTIL_INC_2321: u32 = 2322;
pub const Z_UTIL_INC_2322: u32 = 2323;
pub const Z_UTIL_INC_2323: u32 = 2324;
pub const Z_UTIL_INC_2324: u32 = 2325;
pub const Z_UTIL_INC_2325: u32 = 2326;
pub const Z_UTIL_INC_2326: u32 = 2327;
pub const Z_UTIL_INC_2327: u32 = 2328;
pub const Z_UTIL_INC_2328: u32 = 2329;
pub const Z_UTIL_INC_2329: u32 = 2330;
pub const Z_UTIL_INC_2330: u32 = 2331;
pub const Z_UTIL_INC_2331: u32 = 2332;
pub const Z_UTIL_INC_2332: u32 = 2333;
pub const Z_UTIL_INC_2333: u32 = 2334;
pub const Z_UTIL_INC_2334: u32 = 2335;
pub const Z_UTIL_INC_2335: u32 = 2336;
pub const Z_UTIL_INC_2336: u32 = 2337;
pub const Z_UTIL_INC_2337: u32 = 2338;
pub const Z_UTIL_INC_2338: u32 = 2339;
pub const Z_UTIL_INC_2339: u32 = 2340;
pub const Z_UTIL_INC_2340: u32 = 2341;
pub const Z_UTIL_INC_2341: u32 = 2342;
pub const Z_UTIL_INC_2342: u32 = 2343;
pub const Z_UTIL_INC_2343: u32 = 2344;
pub const Z_UTIL_INC_2344: u32 = 2345;
pub const Z_UTIL_INC_2345: u32 = 2346;
pub const Z_UTIL_INC_2346: u32 = 2347;
pub const Z_UTIL_INC_2347: u32 = 2348;
pub const Z_UTIL_INC_2348: u32 = 2349;
pub const Z_UTIL_INC_2349: u32 = 2350;
pub const Z_UTIL_INC_2350: u32 = 2351;
pub const Z_UTIL_INC_2351: u32 = 2352;
pub const Z_UTIL_INC_2352: u32 = 2353;
pub const Z_UTIL_INC_2353: u32 = 2354;
pub const Z_UTIL_INC_2354: u32 = 2355;
pub const Z_UTIL_INC_2355: u32 = 2356;
pub const Z_UTIL_INC_2356: u32 = 2357;
pub const Z_UTIL_INC_2357: u32 = 2358;
pub const Z_UTIL_INC_2358: u32 = 2359;
pub const Z_UTIL_INC_2359: u32 = 2360;
pub const Z_UTIL_INC_2360: u32 = 2361;
pub const Z_UTIL_INC_2361: u32 = 2362;
pub const Z_UTIL_INC_2362: u32 = 2363;
pub const Z_UTIL_INC_2363: u32 = 2364;
pub const Z_UTIL_INC_2364: u32 = 2365;
pub const Z_UTIL_INC_2365: u32 = 2366;
pub const Z_UTIL_INC_2366: u32 = 2367;
pub const Z_UTIL_INC_2367: u32 = 2368;
pub const Z_UTIL_INC_2368: u32 = 2369;
pub const Z_UTIL_INC_2369: u32 = 2370;
pub const Z_UTIL_INC_2370: u32 = 2371;
pub const Z_UTIL_INC_2371: u32 = 2372;
pub const Z_UTIL_INC_2372: u32 = 2373;
pub const Z_UTIL_INC_2373: u32 = 2374;
pub const Z_UTIL_INC_2374: u32 = 2375;
pub const Z_UTIL_INC_2375: u32 = 2376;
pub const Z_UTIL_INC_2376: u32 = 2377;
pub const Z_UTIL_INC_2377: u32 = 2378;
pub const Z_UTIL_INC_2378: u32 = 2379;
pub const Z_UTIL_INC_2379: u32 = 2380;
pub const Z_UTIL_INC_2380: u32 = 2381;
pub const Z_UTIL_INC_2381: u32 = 2382;
pub const Z_UTIL_INC_2382: u32 = 2383;
pub const Z_UTIL_INC_2383: u32 = 2384;
pub const Z_UTIL_INC_2384: u32 = 2385;
pub const Z_UTIL_INC_2385: u32 = 2386;
pub const Z_UTIL_INC_2386: u32 = 2387;
pub const Z_UTIL_INC_2387: u32 = 2388;
pub const Z_UTIL_INC_2388: u32 = 2389;
pub const Z_UTIL_INC_2389: u32 = 2390;
pub const Z_UTIL_INC_2390: u32 = 2391;
pub const Z_UTIL_INC_2391: u32 = 2392;
pub const Z_UTIL_INC_2392: u32 = 2393;
pub const Z_UTIL_INC_2393: u32 = 2394;
pub const Z_UTIL_INC_2394: u32 = 2395;
pub const Z_UTIL_INC_2395: u32 = 2396;
pub const Z_UTIL_INC_2396: u32 = 2397;
pub const Z_UTIL_INC_2397: u32 = 2398;
pub const Z_UTIL_INC_2398: u32 = 2399;
pub const Z_UTIL_INC_2399: u32 = 2400;
pub const Z_UTIL_INC_2400: u32 = 2401;
pub const Z_UTIL_INC_2401: u32 = 2402;
pub const Z_UTIL_INC_2402: u32 = 2403;
pub const Z_UTIL_INC_2403: u32 = 2404;
pub const Z_UTIL_INC_2404: u32 = 2405;
pub const Z_UTIL_INC_2405: u32 = 2406;
pub const Z_UTIL_INC_2406: u32 = 2407;
pub const Z_UTIL_INC_2407: u32 = 2408;
pub const Z_UTIL_INC_2408: u32 = 2409;
pub const Z_UTIL_INC_2409: u32 = 2410;
pub const Z_UTIL_INC_2410: u32 = 2411;
pub const Z_UTIL_INC_2411: u32 = 2412;
pub const Z_UTIL_INC_2412: u32 = 2413;
pub const Z_UTIL_INC_2413: u32 = 2414;
pub const Z_UTIL_INC_2414: u32 = 2415;
pub const Z_UTIL_INC_2415: u32 = 2416;
pub const Z_UTIL_INC_2416: u32 = 2417;
pub const Z_UTIL_INC_2417: u32 = 2418;
pub const Z_UTIL_INC_2418: u32 = 2419;
pub const Z_UTIL_INC_2419: u32 = 2420;
pub const Z_UTIL_INC_2420: u32 = 2421;
pub const Z_UTIL_INC_2421: u32 = 2422;
pub const Z_UTIL_INC_2422: u32 = 2423;
pub const Z_UTIL_INC_2423: u32 = 2424;
pub const Z_UTIL_INC_2424: u32 = 2425;
pub const Z_UTIL_INC_2425: u32 = 2426;
pub const Z_UTIL_INC_2426: u32 = 2427;
pub const Z_UTIL_INC_2427: u32 = 2428;
pub const Z_UTIL_INC_2428: u32 = 2429;
pub const Z_UTIL_INC_2429: u32 = 2430;
pub const Z_UTIL_INC_2430: u32 = 2431;
pub const Z_UTIL_INC_2431: u32 = 2432;
pub const Z_UTIL_INC_2432: u32 = 2433;
pub const Z_UTIL_INC_2433: u32 = 2434;
pub const Z_UTIL_INC_2434: u32 = 2435;
pub const Z_UTIL_INC_2435: u32 = 2436;
pub const Z_UTIL_INC_2436: u32 = 2437;
pub const Z_UTIL_INC_2437: u32 = 2438;
pub const Z_UTIL_INC_2438: u32 = 2439;
pub const Z_UTIL_INC_2439: u32 = 2440;
pub const Z_UTIL_INC_2440: u32 = 2441;
pub const Z_UTIL_INC_2441: u32 = 2442;
pub const Z_UTIL_INC_2442: u32 = 2443;
pub const Z_UTIL_INC_2443: u32 = 2444;
pub const Z_UTIL_INC_2444: u32 = 2445;
pub const Z_UTIL_INC_2445: u32 = 2446;
pub const Z_UTIL_INC_2446: u32 = 2447;
pub const Z_UTIL_INC_2447: u32 = 2448;
pub const Z_UTIL_INC_2448: u32 = 2449;
pub const Z_UTIL_INC_2449: u32 = 2450;
pub const Z_UTIL_INC_2450: u32 = 2451;
pub const Z_UTIL_INC_2451: u32 = 2452;
pub const Z_UTIL_INC_2452: u32 = 2453;
pub const Z_UTIL_INC_2453: u32 = 2454;
pub const Z_UTIL_INC_2454: u32 = 2455;
pub const Z_UTIL_INC_2455: u32 = 2456;
pub const Z_UTIL_INC_2456: u32 = 2457;
pub const Z_UTIL_INC_2457: u32 = 2458;
pub const Z_UTIL_INC_2458: u32 = 2459;
pub const Z_UTIL_INC_2459: u32 = 2460;
pub const Z_UTIL_INC_2460: u32 = 2461;
pub const Z_UTIL_INC_2461: u32 = 2462;
pub const Z_UTIL_INC_2462: u32 = 2463;
pub const Z_UTIL_INC_2463: u32 = 2464;
pub const Z_UTIL_INC_2464: u32 = 2465;
pub const Z_UTIL_INC_2465: u32 = 2466;
pub const Z_UTIL_INC_2466: u32 = 2467;
pub const Z_UTIL_INC_2467: u32 = 2468;
pub const Z_UTIL_INC_2468: u32 = 2469;
pub const Z_UTIL_INC_2469: u32 = 2470;
pub const Z_UTIL_INC_2470: u32 = 2471;
pub const Z_UTIL_INC_2471: u32 = 2472;
pub const Z_UTIL_INC_2472: u32 = 2473;
pub const Z_UTIL_INC_2473: u32 = 2474;
pub const Z_UTIL_INC_2474: u32 = 2475;
pub const Z_UTIL_INC_2475: u32 = 2476;
pub const Z_UTIL_INC_2476: u32 = 2477;
pub const Z_UTIL_INC_2477: u32 = 2478;
pub const Z_UTIL_INC_2478: u32 = 2479;
pub const Z_UTIL_INC_2479: u32 = 2480;
pub const Z_UTIL_INC_2480: u32 = 2481;
pub const Z_UTIL_INC_2481: u32 = 2482;
pub const Z_UTIL_INC_2482: u32 = 2483;
pub const Z_UTIL_INC_2483: u32 = 2484;
pub const Z_UTIL_INC_2484: u32 = 2485;
pub const Z_UTIL_INC_2485: u32 = 2486;
pub const Z_UTIL_INC_2486: u32 = 2487;
pub const Z_UTIL_INC_2487: u32 = 2488;
pub const Z_UTIL_INC_2488: u32 = 2489;
pub const Z_UTIL_INC_2489: u32 = 2490;
pub const Z_UTIL_INC_2490: u32 = 2491;
pub const Z_UTIL_INC_2491: u32 = 2492;
pub const Z_UTIL_INC_2492: u32 = 2493;
pub const Z_UTIL_INC_2493: u32 = 2494;
pub const Z_UTIL_INC_2494: u32 = 2495;
pub const Z_UTIL_INC_2495: u32 = 2496;
pub const Z_UTIL_INC_2496: u32 = 2497;
pub const Z_UTIL_INC_2497: u32 = 2498;
pub const Z_UTIL_INC_2498: u32 = 2499;
pub const Z_UTIL_INC_2499: u32 = 2500;
pub const Z_UTIL_INC_2500: u32 = 2501;
pub const Z_UTIL_INC_2501: u32 = 2502;
pub const Z_UTIL_INC_2502: u32 = 2503;
pub const Z_UTIL_INC_2503: u32 = 2504;
pub const Z_UTIL_INC_2504: u32 = 2505;
pub const Z_UTIL_INC_2505: u32 = 2506;
pub const Z_UTIL_INC_2506: u32 = 2507;
pub const Z_UTIL_INC_2507: u32 = 2508;
pub const Z_UTIL_INC_2508: u32 = 2509;
pub const Z_UTIL_INC_2509: u32 = 2510;
pub const Z_UTIL_INC_2510: u32 = 2511;
pub const Z_UTIL_INC_2511: u32 = 2512;
pub const Z_UTIL_INC_2512: u32 = 2513;
pub const Z_UTIL_INC_2513: u32 = 2514;
pub const Z_UTIL_INC_2514: u32 = 2515;
pub const Z_UTIL_INC_2515: u32 = 2516;
pub const Z_UTIL_INC_2516: u32 = 2517;
pub const Z_UTIL_INC_2517: u32 = 2518;
pub const Z_UTIL_INC_2518: u32 = 2519;
pub const Z_UTIL_INC_2519: u32 = 2520;
pub const Z_UTIL_INC_2520: u32 = 2521;
pub const Z_UTIL_INC_2521: u32 = 2522;
pub const Z_UTIL_INC_2522: u32 = 2523;
pub const Z_UTIL_INC_2523: u32 = 2524;
pub const Z_UTIL_INC_2524: u32 = 2525;
pub const Z_UTIL_INC_2525: u32 = 2526;
pub const Z_UTIL_INC_2526: u32 = 2527;
pub const Z_UTIL_INC_2527: u32 = 2528;
pub const Z_UTIL_INC_2528: u32 = 2529;
pub const Z_UTIL_INC_2529: u32 = 2530;
pub const Z_UTIL_INC_2530: u32 = 2531;
pub const Z_UTIL_INC_2531: u32 = 2532;
pub const Z_UTIL_INC_2532: u32 = 2533;
pub const Z_UTIL_INC_2533: u32 = 2534;
pub const Z_UTIL_INC_2534: u32 = 2535;
pub const Z_UTIL_INC_2535: u32 = 2536;
pub const Z_UTIL_INC_2536: u32 = 2537;
pub const Z_UTIL_INC_2537: u32 = 2538;
pub const Z_UTIL_INC_2538: u32 = 2539;
pub const Z_UTIL_INC_2539: u32 = 2540;
pub const Z_UTIL_INC_2540: u32 = 2541;
pub const Z_UTIL_INC_2541: u32 = 2542;
pub const Z_UTIL_INC_2542: u32 = 2543;
pub const Z_UTIL_INC_2543: u32 = 2544;
pub const Z_UTIL_INC_2544: u32 = 2545;
pub const Z_UTIL_INC_2545: u32 = 2546;
pub const Z_UTIL_INC_2546: u32 = 2547;
pub const Z_UTIL_INC_2547: u32 = 2548;
pub const Z_UTIL_INC_2548: u32 = 2549;
pub const Z_UTIL_INC_2549: u32 = 2550;
pub const Z_UTIL_INC_2550: u32 = 2551;
pub const Z_UTIL_INC_2551: u32 = 2552;
pub const Z_UTIL_INC_2552: u32 = 2553;
pub const Z_UTIL_INC_2553: u32 = 2554;
pub const Z_UTIL_INC_2554: u32 = 2555;
pub const Z_UTIL_INC_2555: u32 = 2556;
pub const Z_UTIL_INC_2556: u32 = 2557;
pub const Z_UTIL_INC_2557: u32 = 2558;
pub const Z_UTIL_INC_2558: u32 = 2559;
pub const Z_UTIL_INC_2559: u32 = 2560;
pub const Z_UTIL_INC_2560: u32 = 2561;
pub const Z_UTIL_INC_2561: u32 = 2562;
pub const Z_UTIL_INC_2562: u32 = 2563;
pub const Z_UTIL_INC_2563: u32 = 2564;
pub const Z_UTIL_INC_2564: u32 = 2565;
pub const Z_UTIL_INC_2565: u32 = 2566;
pub const Z_UTIL_INC_2566: u32 = 2567;
pub const Z_UTIL_INC_2567: u32 = 2568;
pub const Z_UTIL_INC_2568: u32 = 2569;
pub const Z_UTIL_INC_2569: u32 = 2570;
pub const Z_UTIL_INC_2570: u32 = 2571;
pub const Z_UTIL_INC_2571: u32 = 2572;
pub const Z_UTIL_INC_2572: u32 = 2573;
pub const Z_UTIL_INC_2573: u32 = 2574;
pub const Z_UTIL_INC_2574: u32 = 2575;
pub const Z_UTIL_INC_2575: u32 = 2576;
pub const Z_UTIL_INC_2576: u32 = 2577;
pub const Z_UTIL_INC_2577: u32 = 2578;
pub const Z_UTIL_INC_2578: u32 = 2579;
pub const Z_UTIL_INC_2579: u32 = 2580;
pub const Z_UTIL_INC_2580: u32 = 2581;
pub const Z_UTIL_INC_2581: u32 = 2582;
pub const Z_UTIL_INC_2582: u32 = 2583;
pub const Z_UTIL_INC_2583: u32 = 2584;
pub const Z_UTIL_INC_2584: u32 = 2585;
pub const Z_UTIL_INC_2585: u32 = 2586;
pub const Z_UTIL_INC_2586: u32 = 2587;
pub const Z_UTIL_INC_2587: u32 = 2588;
pub const Z_UTIL_INC_2588: u32 = 2589;
pub const Z_UTIL_INC_2589: u32 = 2590;
pub const Z_UTIL_INC_2590: u32 = 2591;
pub const Z_UTIL_INC_2591: u32 = 2592;
pub const Z_UTIL_INC_2592: u32 = 2593;
pub const Z_UTIL_INC_2593: u32 = 2594;
pub const Z_UTIL_INC_2594: u32 = 2595;
pub const Z_UTIL_INC_2595: u32 = 2596;
pub const Z_UTIL_INC_2596: u32 = 2597;
pub const Z_UTIL_INC_2597: u32 = 2598;
pub const Z_UTIL_INC_2598: u32 = 2599;
pub const Z_UTIL_INC_2599: u32 = 2600;
pub const Z_UTIL_INC_2600: u32 = 2601;
pub const Z_UTIL_INC_2601: u32 = 2602;
pub const Z_UTIL_INC_2602: u32 = 2603;
pub const Z_UTIL_INC_2603: u32 = 2604;
pub const Z_UTIL_INC_2604: u32 = 2605;
pub const Z_UTIL_INC_2605: u32 = 2606;
pub const Z_UTIL_INC_2606: u32 = 2607;
pub const Z_UTIL_INC_2607: u32 = 2608;
pub const Z_UTIL_INC_2608: u32 = 2609;
pub const Z_UTIL_INC_2609: u32 = 2610;
pub const Z_UTIL_INC_2610: u32 = 2611;
pub const Z_UTIL_INC_2611: u32 = 2612;
pub const Z_UTIL_INC_2612: u32 = 2613;
pub const Z_UTIL_INC_2613: u32 = 2614;
pub const Z_UTIL_INC_2614: u32 = 2615;
pub const Z_UTIL_INC_2615: u32 = 2616;
pub const Z_UTIL_INC_2616: u32 = 2617;
pub const Z_UTIL_INC_2617: u32 = 2618;
pub const Z_UTIL_INC_2618: u32 = 2619;
pub const Z_UTIL_INC_2619: u32 = 2620;
pub const Z_UTIL_INC_2620: u32 = 2621;
pub const Z_UTIL_INC_2621: u32 = 2622;
pub const Z_UTIL_INC_2622: u32 = 2623;
pub const Z_UTIL_INC_2623: u32 = 2624;
pub const Z_UTIL_INC_2624: u32 = 2625;
pub const Z_UTIL_INC_2625: u32 = 2626;
pub const Z_UTIL_INC_2626: u32 = 2627;
pub const Z_UTIL_INC_2627: u32 = 2628;
pub const Z_UTIL_INC_2628: u32 = 2629;
pub const Z_UTIL_INC_2629: u32 = 2630;
pub const Z_UTIL_INC_2630: u32 = 2631;
pub const Z_UTIL_INC_2631: u32 = 2632;
pub const Z_UTIL_INC_2632: u32 = 2633;
pub const Z_UTIL_INC_2633: u32 = 2634;
pub const Z_UTIL_INC_2634: u32 = 2635;
pub const Z_UTIL_INC_2635: u32 = 2636;
pub const Z_UTIL_INC_2636: u32 = 2637;
pub const Z_UTIL_INC_2637: u32 = 2638;
pub const Z_UTIL_INC_2638: u32 = 2639;
pub const Z_UTIL_INC_2639: u32 = 2640;
pub const Z_UTIL_INC_2640: u32 = 2641;
pub const Z_UTIL_INC_2641: u32 = 2642;
pub const Z_UTIL_INC_2642: u32 = 2643;
pub const Z_UTIL_INC_2643: u32 = 2644;
pub const Z_UTIL_INC_2644: u32 = 2645;
pub const Z_UTIL_INC_2645: u32 = 2646;
pub const Z_UTIL_INC_2646: u32 = 2647;
pub const Z_UTIL_INC_2647: u32 = 2648;
pub const Z_UTIL_INC_2648: u32 = 2649;
pub const Z_UTIL_INC_2649: u32 = 2650;
pub const Z_UTIL_INC_2650: u32 = 2651;
pub const Z_UTIL_INC_2651: u32 = 2652;
pub const Z_UTIL_INC_2652: u32 = 2653;
pub const Z_UTIL_INC_2653: u32 = 2654;
pub const Z_UTIL_INC_2654: u32 = 2655;
pub const Z_UTIL_INC_2655: u32 = 2656;
pub const Z_UTIL_INC_2656: u32 = 2657;
pub const Z_UTIL_INC_2657: u32 = 2658;
pub const Z_UTIL_INC_2658: u32 = 2659;
pub const Z_UTIL_INC_2659: u32 = 2660;
pub const Z_UTIL_INC_2660: u32 = 2661;
pub const Z_UTIL_INC_2661: u32 = 2662;
pub const Z_UTIL_INC_2662: u32 = 2663;
pub const Z_UTIL_INC_2663: u32 = 2664;
pub const Z_UTIL_INC_2664: u32 = 2665;
pub const Z_UTIL_INC_2665: u32 = 2666;
pub const Z_UTIL_INC_2666: u32 = 2667;
pub const Z_UTIL_INC_2667: u32 = 2668;
pub const Z_UTIL_INC_2668: u32 = 2669;
pub const Z_UTIL_INC_2669: u32 = 2670;
pub const Z_UTIL_INC_2670: u32 = 2671;
pub const Z_UTIL_INC_2671: u32 = 2672;
pub const Z_UTIL_INC_2672: u32 = 2673;
pub const Z_UTIL_INC_2673: u32 = 2674;
pub const Z_UTIL_INC_2674: u32 = 2675;
pub const Z_UTIL_INC_2675: u32 = 2676;
pub const Z_UTIL_INC_2676: u32 = 2677;
pub const Z_UTIL_INC_2677: u32 = 2678;
pub const Z_UTIL_INC_2678: u32 = 2679;
pub const Z_UTIL_INC_2679: u32 = 2680;
pub const Z_UTIL_INC_2680: u32 = 2681;
pub const Z_UTIL_INC_2681: u32 = 2682;
pub const Z_UTIL_INC_2682: u32 = 2683;
pub const Z_UTIL_INC_2683: u32 = 2684;
pub const Z_UTIL_INC_2684: u32 = 2685;
pub const Z_UTIL_INC_2685: u32 = 2686;
pub const Z_UTIL_INC_2686: u32 = 2687;
pub const Z_UTIL_INC_2687: u32 = 2688;
pub const Z_UTIL_INC_2688: u32 = 2689;
pub const Z_UTIL_INC_2689: u32 = 2690;
pub const Z_UTIL_INC_2690: u32 = 2691;
pub const Z_UTIL_INC_2691: u32 = 2692;
pub const Z_UTIL_INC_2692: u32 = 2693;
pub const Z_UTIL_INC_2693: u32 = 2694;
pub const Z_UTIL_INC_2694: u32 = 2695;
pub const Z_UTIL_INC_2695: u32 = 2696;
pub const Z_UTIL_INC_2696: u32 = 2697;
pub const Z_UTIL_INC_2697: u32 = 2698;
pub const Z_UTIL_INC_2698: u32 = 2699;
pub const Z_UTIL_INC_2699: u32 = 2700;
pub const Z_UTIL_INC_2700: u32 = 2701;
pub const Z_UTIL_INC_2701: u32 = 2702;
pub const Z_UTIL_INC_2702: u32 = 2703;
pub const Z_UTIL_INC_2703: u32 = 2704;
pub const Z_UTIL_INC_2704: u32 = 2705;
pub const Z_UTIL_INC_2705: u32 = 2706;
pub const Z_UTIL_INC_2706: u32 = 2707;
pub const Z_UTIL_INC_2707: u32 = 2708;
pub const Z_UTIL_INC_2708: u32 = 2709;
pub const Z_UTIL_INC_2709: u32 = 2710;
pub const Z_UTIL_INC_2710: u32 = 2711;
pub const Z_UTIL_INC_2711: u32 = 2712;
pub const Z_UTIL_INC_2712: u32 = 2713;
pub const Z_UTIL_INC_2713: u32 = 2714;
pub const Z_UTIL_INC_2714: u32 = 2715;
pub const Z_UTIL_INC_2715: u32 = 2716;
pub const Z_UTIL_INC_2716: u32 = 2717;
pub const Z_UTIL_INC_2717: u32 = 2718;
pub const Z_UTIL_INC_2718: u32 = 2719;
pub const Z_UTIL_INC_2719: u32 = 2720;
pub const Z_UTIL_INC_2720: u32 = 2721;
pub const Z_UTIL_INC_2721: u32 = 2722;
pub const Z_UTIL_INC_2722: u32 = 2723;
pub const Z_UTIL_INC_2723: u32 = 2724;
pub const Z_UTIL_INC_2724: u32 = 2725;
pub const Z_UTIL_INC_2725: u32 = 2726;
pub const Z_UTIL_INC_2726: u32 = 2727;
pub const Z_UTIL_INC_2727: u32 = 2728;
pub const Z_UTIL_INC_2728: u32 = 2729;
pub const Z_UTIL_INC_2729: u32 = 2730;
pub const Z_UTIL_INC_2730: u32 = 2731;
pub const Z_UTIL_INC_2731: u32 = 2732;
pub const Z_UTIL_INC_2732: u32 = 2733;
pub const Z_UTIL_INC_2733: u32 = 2734;
pub const Z_UTIL_INC_2734: u32 = 2735;
pub const Z_UTIL_INC_2735: u32 = 2736;
pub const Z_UTIL_INC_2736: u32 = 2737;
pub const Z_UTIL_INC_2737: u32 = 2738;
pub const Z_UTIL_INC_2738: u32 = 2739;
pub const Z_UTIL_INC_2739: u32 = 2740;
pub const Z_UTIL_INC_2740: u32 = 2741;
pub const Z_UTIL_INC_2741: u32 = 2742;
pub const Z_UTIL_INC_2742: u32 = 2743;
pub const Z_UTIL_INC_2743: u32 = 2744;
pub const Z_UTIL_INC_2744: u32 = 2745;
pub const Z_UTIL_INC_2745: u32 = 2746;
pub const Z_UTIL_INC_2746: u32 = 2747;
pub const Z_UTIL_INC_2747: u32 = 2748;
pub const Z_UTIL_INC_2748: u32 = 2749;
pub const Z_UTIL_INC_2749: u32 = 2750;
pub const Z_UTIL_INC_2750: u32 = 2751;
pub const Z_UTIL_INC_2751: u32 = 2752;
pub const Z_UTIL_INC_2752: u32 = 2753;
pub const Z_UTIL_INC_2753: u32 = 2754;
pub const Z_UTIL_INC_2754: u32 = 2755;
pub const Z_UTIL_INC_2755: u32 = 2756;
pub const Z_UTIL_INC_2756: u32 = 2757;
pub const Z_UTIL_INC_2757: u32 = 2758;
pub const Z_UTIL_INC_2758: u32 = 2759;
pub const Z_UTIL_INC_2759: u32 = 2760;
pub const Z_UTIL_INC_2760: u32 = 2761;
pub const Z_UTIL_INC_2761: u32 = 2762;
pub const Z_UTIL_INC_2762: u32 = 2763;
pub const Z_UTIL_INC_2763: u32 = 2764;
pub const Z_UTIL_INC_2764: u32 = 2765;
pub const Z_UTIL_INC_2765: u32 = 2766;
pub const Z_UTIL_INC_2766: u32 = 2767;
pub const Z_UTIL_INC_2767: u32 = 2768;
pub const Z_UTIL_INC_2768: u32 = 2769;
pub const Z_UTIL_INC_2769: u32 = 2770;
pub const Z_UTIL_INC_2770: u32 = 2771;
pub const Z_UTIL_INC_2771: u32 = 2772;
pub const Z_UTIL_INC_2772: u32 = 2773;
pub const Z_UTIL_INC_2773: u32 = 2774;
pub const Z_UTIL_INC_2774: u32 = 2775;
pub const Z_UTIL_INC_2775: u32 = 2776;
pub const Z_UTIL_INC_2776: u32 = 2777;
pub const Z_UTIL_INC_2777: u32 = 2778;
pub const Z_UTIL_INC_2778: u32 = 2779;
pub const Z_UTIL_INC_2779: u32 = 2780;
pub const Z_UTIL_INC_2780: u32 = 2781;
pub const Z_UTIL_INC_2781: u32 = 2782;
pub const Z_UTIL_INC_2782: u32 = 2783;
pub const Z_UTIL_INC_2783: u32 = 2784;
pub const Z_UTIL_INC_2784: u32 = 2785;
pub const Z_UTIL_INC_2785: u32 = 2786;
pub const Z_UTIL_INC_2786: u32 = 2787;
pub const Z_UTIL_INC_2787: u32 = 2788;
pub const Z_UTIL_INC_2788: u32 = 2789;
pub const Z_UTIL_INC_2789: u32 = 2790;
pub const Z_UTIL_INC_2790: u32 = 2791;
pub const Z_UTIL_INC_2791: u32 = 2792;
pub const Z_UTIL_INC_2792: u32 = 2793;
pub const Z_UTIL_INC_2793: u32 = 2794;
pub const Z_UTIL_INC_2794: u32 = 2795;
pub const Z_UTIL_INC_2795: u32 = 2796;
pub const Z_UTIL_INC_2796: u32 = 2797;
pub const Z_UTIL_INC_2797: u32 = 2798;
pub const Z_UTIL_INC_2798: u32 = 2799;
pub const Z_UTIL_INC_2799: u32 = 2800;
pub const Z_UTIL_INC_2800: u32 = 2801;
pub const Z_UTIL_INC_2801: u32 = 2802;
pub const Z_UTIL_INC_2802: u32 = 2803;
pub const Z_UTIL_INC_2803: u32 = 2804;
pub const Z_UTIL_INC_2804: u32 = 2805;
pub const Z_UTIL_INC_2805: u32 = 2806;
pub const Z_UTIL_INC_2806: u32 = 2807;
pub const Z_UTIL_INC_2807: u32 = 2808;
pub const Z_UTIL_INC_2808: u32 = 2809;
pub const Z_UTIL_INC_2809: u32 = 2810;
pub const Z_UTIL_INC_2810: u32 = 2811;
pub const Z_UTIL_INC_2811: u32 = 2812;
pub const Z_UTIL_INC_2812: u32 = 2813;
pub const Z_UTIL_INC_2813: u32 = 2814;
pub const Z_UTIL_INC_2814: u32 = 2815;
pub const Z_UTIL_INC_2815: u32 = 2816;
pub const Z_UTIL_INC_2816: u32 = 2817;
pub const Z_UTIL_INC_2817: u32 = 2818;
pub const Z_UTIL_INC_2818: u32 = 2819;
pub const Z_UTIL_INC_2819: u32 = 2820;
pub const Z_UTIL_INC_2820: u32 = 2821;
pub const Z_UTIL_INC_2821: u32 = 2822;
pub const Z_UTIL_INC_2822: u32 = 2823;
pub const Z_UTIL_INC_2823: u32 = 2824;
pub const Z_UTIL_INC_2824: u32 = 2825;
pub const Z_UTIL_INC_2825: u32 = 2826;
pub const Z_UTIL_INC_2826: u32 = 2827;
pub const Z_UTIL_INC_2827: u32 = 2828;
pub const Z_UTIL_INC_2828: u32 = 2829;
pub const Z_UTIL_INC_2829: u32 = 2830;
pub const Z_UTIL_INC_2830: u32 = 2831;
pub const Z_UTIL_INC_2831: u32 = 2832;
pub const Z_UTIL_INC_2832: u32 = 2833;
pub const Z_UTIL_INC_2833: u32 = 2834;
pub const Z_UTIL_INC_2834: u32 = 2835;
pub const Z_UTIL_INC_2835: u32 = 2836;
pub const Z_UTIL_INC_2836: u32 = 2837;
pub const Z_UTIL_INC_2837: u32 = 2838;
pub const Z_UTIL_INC_2838: u32 = 2839;
pub const Z_UTIL_INC_2839: u32 = 2840;
pub const Z_UTIL_INC_2840: u32 = 2841;
pub const Z_UTIL_INC_2841: u32 = 2842;
pub const Z_UTIL_INC_2842: u32 = 2843;
pub const Z_UTIL_INC_2843: u32 = 2844;
pub const Z_UTIL_INC_2844: u32 = 2845;
pub const Z_UTIL_INC_2845: u32 = 2846;
pub const Z_UTIL_INC_2846: u32 = 2847;
pub const Z_UTIL_INC_2847: u32 = 2848;
pub const Z_UTIL_INC_2848: u32 = 2849;
pub const Z_UTIL_INC_2849: u32 = 2850;
pub const Z_UTIL_INC_2850: u32 = 2851;
pub const Z_UTIL_INC_2851: u32 = 2852;
pub const Z_UTIL_INC_2852: u32 = 2853;
pub const Z_UTIL_INC_2853: u32 = 2854;
pub const Z_UTIL_INC_2854: u32 = 2855;
pub const Z_UTIL_INC_2855: u32 = 2856;
pub const Z_UTIL_INC_2856: u32 = 2857;
pub const Z_UTIL_INC_2857: u32 = 2858;
pub const Z_UTIL_INC_2858: u32 = 2859;
pub const Z_UTIL_INC_2859: u32 = 2860;
pub const Z_UTIL_INC_2860: u32 = 2861;
pub const Z_UTIL_INC_2861: u32 = 2862;
pub const Z_UTIL_INC_2862: u32 = 2863;
pub const Z_UTIL_INC_2863: u32 = 2864;
pub const Z_UTIL_INC_2864: u32 = 2865;
pub const Z_UTIL_INC_2865: u32 = 2866;
pub const Z_UTIL_INC_2866: u32 = 2867;
pub const Z_UTIL_INC_2867: u32 = 2868;
pub const Z_UTIL_INC_2868: u32 = 2869;
pub const Z_UTIL_INC_2869: u32 = 2870;
pub const Z_UTIL_INC_2870: u32 = 2871;
pub const Z_UTIL_INC_2871: u32 = 2872;
pub const Z_UTIL_INC_2872: u32 = 2873;
pub const Z_UTIL_INC_2873: u32 = 2874;
pub const Z_UTIL_INC_2874: u32 = 2875;
pub const Z_UTIL_INC_2875: u32 = 2876;
pub const Z_UTIL_INC_2876: u32 = 2877;
pub const Z_UTIL_INC_2877: u32 = 2878;
pub const Z_UTIL_INC_2878: u32 = 2879;
pub const Z_UTIL_INC_2879: u32 = 2880;
pub const Z_UTIL_INC_2880: u32 = 2881;
pub const Z_UTIL_INC_2881: u32 = 2882;
pub const Z_UTIL_INC_2882: u32 = 2883;
pub const Z_UTIL_INC_2883: u32 = 2884;
pub const Z_UTIL_INC_2884: u32 = 2885;
pub const Z_UTIL_INC_2885: u32 = 2886;
pub const Z_UTIL_INC_2886: u32 = 2887;
pub const Z_UTIL_INC_2887: u32 = 2888;
pub const Z_UTIL_INC_2888: u32 = 2889;
pub const Z_UTIL_INC_2889: u32 = 2890;
pub const Z_UTIL_INC_2890: u32 = 2891;
pub const Z_UTIL_INC_2891: u32 = 2892;
pub const Z_UTIL_INC_2892: u32 = 2893;
pub const Z_UTIL_INC_2893: u32 = 2894;
pub const Z_UTIL_INC_2894: u32 = 2895;
pub const Z_UTIL_INC_2895: u32 = 2896;
pub const Z_UTIL_INC_2896: u32 = 2897;
pub const Z_UTIL_INC_2897: u32 = 2898;
pub const Z_UTIL_INC_2898: u32 = 2899;
pub const Z_UTIL_INC_2899: u32 = 2900;
pub const Z_UTIL_INC_2900: u32 = 2901;
pub const Z_UTIL_INC_2901: u32 = 2902;
pub const Z_UTIL_INC_2902: u32 = 2903;
pub const Z_UTIL_INC_2903: u32 = 2904;
pub const Z_UTIL_INC_2904: u32 = 2905;
pub const Z_UTIL_INC_2905: u32 = 2906;
pub const Z_UTIL_INC_2906: u32 = 2907;
pub const Z_UTIL_INC_2907: u32 = 2908;
pub const Z_UTIL_INC_2908: u32 = 2909;
pub const Z_UTIL_INC_2909: u32 = 2910;
pub const Z_UTIL_INC_2910: u32 = 2911;
pub const Z_UTIL_INC_2911: u32 = 2912;
pub const Z_UTIL_INC_2912: u32 = 2913;
pub const Z_UTIL_INC_2913: u32 = 2914;
pub const Z_UTIL_INC_2914: u32 = 2915;
pub const Z_UTIL_INC_2915: u32 = 2916;
pub const Z_UTIL_INC_2916: u32 = 2917;
pub const Z_UTIL_INC_2917: u32 = 2918;
pub const Z_UTIL_INC_2918: u32 = 2919;
pub const Z_UTIL_INC_2919: u32 = 2920;
pub const Z_UTIL_INC_2920: u32 = 2921;
pub const Z_UTIL_INC_2921: u32 = 2922;
pub const Z_UTIL_INC_2922: u32 = 2923;
pub const Z_UTIL_INC_2923: u32 = 2924;
pub const Z_UTIL_INC_2924: u32 = 2925;
pub const Z_UTIL_INC_2925: u32 = 2926;
pub const Z_UTIL_INC_2926: u32 = 2927;
pub const Z_UTIL_INC_2927: u32 = 2928;
pub const Z_UTIL_INC_2928: u32 = 2929;
pub const Z_UTIL_INC_2929: u32 = 2930;
pub const Z_UTIL_INC_2930: u32 = 2931;
pub const Z_UTIL_INC_2931: u32 = 2932;
pub const Z_UTIL_INC_2932: u32 = 2933;
pub const Z_UTIL_INC_2933: u32 = 2934;
pub const Z_UTIL_INC_2934: u32 = 2935;
pub const Z_UTIL_INC_2935: u32 = 2936;
pub const Z_UTIL_INC_2936: u32 = 2937;
pub const Z_UTIL_INC_2937: u32 = 2938;
pub const Z_UTIL_INC_2938: u32 = 2939;
pub const Z_UTIL_INC_2939: u32 = 2940;
pub const Z_UTIL_INC_2940: u32 = 2941;
pub const Z_UTIL_INC_2941: u32 = 2942;
pub const Z_UTIL_INC_2942: u32 = 2943;
pub const Z_UTIL_INC_2943: u32 = 2944;
pub const Z_UTIL_INC_2944: u32 = 2945;
pub const Z_UTIL_INC_2945: u32 = 2946;
pub const Z_UTIL_INC_2946: u32 = 2947;
pub const Z_UTIL_INC_2947: u32 = 2948;
pub const Z_UTIL_INC_2948: u32 = 2949;
pub const Z_UTIL_INC_2949: u32 = 2950;
pub const Z_UTIL_INC_2950: u32 = 2951;
pub const Z_UTIL_INC_2951: u32 = 2952;
pub const Z_UTIL_INC_2952: u32 = 2953;
pub const Z_UTIL_INC_2953: u32 = 2954;
pub const Z_UTIL_INC_2954: u32 = 2955;
pub const Z_UTIL_INC_2955: u32 = 2956;
pub const Z_UTIL_INC_2956: u32 = 2957;
pub const Z_UTIL_INC_2957: u32 = 2958;
pub const Z_UTIL_INC_2958: u32 = 2959;
pub const Z_UTIL_INC_2959: u32 = 2960;
pub const Z_UTIL_INC_2960: u32 = 2961;
pub const Z_UTIL_INC_2961: u32 = 2962;
pub const Z_UTIL_INC_2962: u32 = 2963;
pub const Z_UTIL_INC_2963: u32 = 2964;
pub const Z_UTIL_INC_2964: u32 = 2965;
pub const Z_UTIL_INC_2965: u32 = 2966;
pub const Z_UTIL_INC_2966: u32 = 2967;
pub const Z_UTIL_INC_2967: u32 = 2968;
pub const Z_UTIL_INC_2968: u32 = 2969;
pub const Z_UTIL_INC_2969: u32 = 2970;
pub const Z_UTIL_INC_2970: u32 = 2971;
pub const Z_UTIL_INC_2971: u32 = 2972;
pub const Z_UTIL_INC_2972: u32 = 2973;
pub const Z_UTIL_INC_2973: u32 = 2974;
pub const Z_UTIL_INC_2974: u32 = 2975;
pub const Z_UTIL_INC_2975: u32 = 2976;
pub const Z_UTIL_INC_2976: u32 = 2977;
pub const Z_UTIL_INC_2977: u32 = 2978;
pub const Z_UTIL_INC_2978: u32 = 2979;
pub const Z_UTIL_INC_2979: u32 = 2980;
pub const Z_UTIL_INC_2980: u32 = 2981;
pub const Z_UTIL_INC_2981: u32 = 2982;
pub const Z_UTIL_INC_2982: u32 = 2983;
pub const Z_UTIL_INC_2983: u32 = 2984;
pub const Z_UTIL_INC_2984: u32 = 2985;
pub const Z_UTIL_INC_2985: u32 = 2986;
pub const Z_UTIL_INC_2986: u32 = 2987;
pub const Z_UTIL_INC_2987: u32 = 2988;
pub const Z_UTIL_INC_2988: u32 = 2989;
pub const Z_UTIL_INC_2989: u32 = 2990;
pub const Z_UTIL_INC_2990: u32 = 2991;
pub const Z_UTIL_INC_2991: u32 = 2992;
pub const Z_UTIL_INC_2992: u32 = 2993;
pub const Z_UTIL_INC_2993: u32 = 2994;
pub const Z_UTIL_INC_2994: u32 = 2995;
pub const Z_UTIL_INC_2995: u32 = 2996;
pub const Z_UTIL_INC_2996: u32 = 2997;
pub const Z_UTIL_INC_2997: u32 = 2998;
pub const Z_UTIL_INC_2998: u32 = 2999;
pub const Z_UTIL_INC_2999: u32 = 3000;
pub const Z_UTIL_INC_3000: u32 = 3001;
pub const Z_UTIL_INC_3001: u32 = 3002;
pub const Z_UTIL_INC_3002: u32 = 3003;
pub const Z_UTIL_INC_3003: u32 = 3004;
pub const Z_UTIL_INC_3004: u32 = 3005;
pub const Z_UTIL_INC_3005: u32 = 3006;
pub const Z_UTIL_INC_3006: u32 = 3007;
pub const Z_UTIL_INC_3007: u32 = 3008;
pub const Z_UTIL_INC_3008: u32 = 3009;
pub const Z_UTIL_INC_3009: u32 = 3010;
pub const Z_UTIL_INC_3010: u32 = 3011;
pub const Z_UTIL_INC_3011: u32 = 3012;
pub const Z_UTIL_INC_3012: u32 = 3013;
pub const Z_UTIL_INC_3013: u32 = 3014;
pub const Z_UTIL_INC_3014: u32 = 3015;
pub const Z_UTIL_INC_3015: u32 = 3016;
pub const Z_UTIL_INC_3016: u32 = 3017;
pub const Z_UTIL_INC_3017: u32 = 3018;
pub const Z_UTIL_INC_3018: u32 = 3019;
pub const Z_UTIL_INC_3019: u32 = 3020;
pub const Z_UTIL_INC_3020: u32 = 3021;
pub const Z_UTIL_INC_3021: u32 = 3022;
pub const Z_UTIL_INC_3022: u32 = 3023;
pub const Z_UTIL_INC_3023: u32 = 3024;
pub const Z_UTIL_INC_3024: u32 = 3025;
pub const Z_UTIL_INC_3025: u32 = 3026;
pub const Z_UTIL_INC_3026: u32 = 3027;
pub const Z_UTIL_INC_3027: u32 = 3028;
pub const Z_UTIL_INC_3028: u32 = 3029;
pub const Z_UTIL_INC_3029: u32 = 3030;
pub const Z_UTIL_INC_3030: u32 = 3031;
pub const Z_UTIL_INC_3031: u32 = 3032;
pub const Z_UTIL_INC_3032: u32 = 3033;
pub const Z_UTIL_INC_3033: u32 = 3034;
pub const Z_UTIL_INC_3034: u32 = 3035;
pub const Z_UTIL_INC_3035: u32 = 3036;
pub const Z_UTIL_INC_3036: u32 = 3037;
pub const Z_UTIL_INC_3037: u32 = 3038;
pub const Z_UTIL_INC_3038: u32 = 3039;
pub const Z_UTIL_INC_3039: u32 = 3040;
pub const Z_UTIL_INC_3040: u32 = 3041;
pub const Z_UTIL_INC_3041: u32 = 3042;
pub const Z_UTIL_INC_3042: u32 = 3043;
pub const Z_UTIL_INC_3043: u32 = 3044;
pub const Z_UTIL_INC_3044: u32 = 3045;
pub const Z_UTIL_INC_3045: u32 = 3046;
pub const Z_UTIL_INC_3046: u32 = 3047;
pub const Z_UTIL_INC_3047: u32 = 3048;
pub const Z_UTIL_INC_3048: u32 = 3049;
pub const Z_UTIL_INC_3049: u32 = 3050;
pub const Z_UTIL_INC_3050: u32 = 3051;
pub const Z_UTIL_INC_3051: u32 = 3052;
pub const Z_UTIL_INC_3052: u32 = 3053;
pub const Z_UTIL_INC_3053: u32 = 3054;
pub const Z_UTIL_INC_3054: u32 = 3055;
pub const Z_UTIL_INC_3055: u32 = 3056;
pub const Z_UTIL_INC_3056: u32 = 3057;
pub const Z_UTIL_INC_3057: u32 = 3058;
pub const Z_UTIL_INC_3058: u32 = 3059;
pub const Z_UTIL_INC_3059: u32 = 3060;
pub const Z_UTIL_INC_3060: u32 = 3061;
pub const Z_UTIL_INC_3061: u32 = 3062;
pub const Z_UTIL_INC_3062: u32 = 3063;
pub const Z_UTIL_INC_3063: u32 = 3064;
pub const Z_UTIL_INC_3064: u32 = 3065;
pub const Z_UTIL_INC_3065: u32 = 3066;
pub const Z_UTIL_INC_3066: u32 = 3067;
pub const Z_UTIL_INC_3067: u32 = 3068;
pub const Z_UTIL_INC_3068: u32 = 3069;
pub const Z_UTIL_INC_3069: u32 = 3070;
pub const Z_UTIL_INC_3070: u32 = 3071;
pub const Z_UTIL_INC_3071: u32 = 3072;
pub const Z_UTIL_INC_3072: u32 = 3073;
pub const Z_UTIL_INC_3073: u32 = 3074;
pub const Z_UTIL_INC_3074: u32 = 3075;
pub const Z_UTIL_INC_3075: u32 = 3076;
pub const Z_UTIL_INC_3076: u32 = 3077;
pub const Z_UTIL_INC_3077: u32 = 3078;
pub const Z_UTIL_INC_3078: u32 = 3079;
pub const Z_UTIL_INC_3079: u32 = 3080;
pub const Z_UTIL_INC_3080: u32 = 3081;
pub const Z_UTIL_INC_3081: u32 = 3082;
pub const Z_UTIL_INC_3082: u32 = 3083;
pub const Z_UTIL_INC_3083: u32 = 3084;
pub const Z_UTIL_INC_3084: u32 = 3085;
pub const Z_UTIL_INC_3085: u32 = 3086;
pub const Z_UTIL_INC_3086: u32 = 3087;
pub const Z_UTIL_INC_3087: u32 = 3088;
pub const Z_UTIL_INC_3088: u32 = 3089;
pub const Z_UTIL_INC_3089: u32 = 3090;
pub const Z_UTIL_INC_3090: u32 = 3091;
pub const Z_UTIL_INC_3091: u32 = 3092;
pub const Z_UTIL_INC_3092: u32 = 3093;
pub const Z_UTIL_INC_3093: u32 = 3094;
pub const Z_UTIL_INC_3094: u32 = 3095;
pub const Z_UTIL_INC_3095: u32 = 3096;
pub const Z_UTIL_INC_3096: u32 = 3097;
pub const Z_UTIL_INC_3097: u32 = 3098;
pub const Z_UTIL_INC_3098: u32 = 3099;
pub const Z_UTIL_INC_3099: u32 = 3100;
pub const Z_UTIL_INC_3100: u32 = 3101;
pub const Z_UTIL_INC_3101: u32 = 3102;
pub const Z_UTIL_INC_3102: u32 = 3103;
pub const Z_UTIL_INC_3103: u32 = 3104;
pub const Z_UTIL_INC_3104: u32 = 3105;
pub const Z_UTIL_INC_3105: u32 = 3106;
pub const Z_UTIL_INC_3106: u32 = 3107;
pub const Z_UTIL_INC_3107: u32 = 3108;
pub const Z_UTIL_INC_3108: u32 = 3109;
pub const Z_UTIL_INC_3109: u32 = 3110;
pub const Z_UTIL_INC_3110: u32 = 3111;
pub const Z_UTIL_INC_3111: u32 = 3112;
pub const Z_UTIL_INC_3112: u32 = 3113;
pub const Z_UTIL_INC_3113: u32 = 3114;
pub const Z_UTIL_INC_3114: u32 = 3115;
pub const Z_UTIL_INC_3115: u32 = 3116;
pub const Z_UTIL_INC_3116: u32 = 3117;
pub const Z_UTIL_INC_3117: u32 = 3118;
pub const Z_UTIL_INC_3118: u32 = 3119;
pub const Z_UTIL_INC_3119: u32 = 3120;
pub const Z_UTIL_INC_3120: u32 = 3121;
pub const Z_UTIL_INC_3121: u32 = 3122;
pub const Z_UTIL_INC_3122: u32 = 3123;
pub const Z_UTIL_INC_3123: u32 = 3124;
pub const Z_UTIL_INC_3124: u32 = 3125;
pub const Z_UTIL_INC_3125: u32 = 3126;
pub const Z_UTIL_INC_3126: u32 = 3127;
pub const Z_UTIL_INC_3127: u32 = 3128;
pub const Z_UTIL_INC_3128: u32 = 3129;
pub const Z_UTIL_INC_3129: u32 = 3130;
pub const Z_UTIL_INC_3130: u32 = 3131;
pub const Z_UTIL_INC_3131: u32 = 3132;
pub const Z_UTIL_INC_3132: u32 = 3133;
pub const Z_UTIL_INC_3133: u32 = 3134;
pub const Z_UTIL_INC_3134: u32 = 3135;
pub const Z_UTIL_INC_3135: u32 = 3136;
pub const Z_UTIL_INC_3136: u32 = 3137;
pub const Z_UTIL_INC_3137: u32 = 3138;
pub const Z_UTIL_INC_3138: u32 = 3139;
pub const Z_UTIL_INC_3139: u32 = 3140;
pub const Z_UTIL_INC_3140: u32 = 3141;
pub const Z_UTIL_INC_3141: u32 = 3142;
pub const Z_UTIL_INC_3142: u32 = 3143;
pub const Z_UTIL_INC_3143: u32 = 3144;
pub const Z_UTIL_INC_3144: u32 = 3145;
pub const Z_UTIL_INC_3145: u32 = 3146;
pub const Z_UTIL_INC_3146: u32 = 3147;
pub const Z_UTIL_INC_3147: u32 = 3148;
pub const Z_UTIL_INC_3148: u32 = 3149;
pub const Z_UTIL_INC_3149: u32 = 3150;
pub const Z_UTIL_INC_3150: u32 = 3151;
pub const Z_UTIL_INC_3151: u32 = 3152;
pub const Z_UTIL_INC_3152: u32 = 3153;
pub const Z_UTIL_INC_3153: u32 = 3154;
pub const Z_UTIL_INC_3154: u32 = 3155;
pub const Z_UTIL_INC_3155: u32 = 3156;
pub const Z_UTIL_INC_3156: u32 = 3157;
pub const Z_UTIL_INC_3157: u32 = 3158;
pub const Z_UTIL_INC_3158: u32 = 3159;
pub const Z_UTIL_INC_3159: u32 = 3160;
pub const Z_UTIL_INC_3160: u32 = 3161;
pub const Z_UTIL_INC_3161: u32 = 3162;
pub const Z_UTIL_INC_3162: u32 = 3163;
pub const Z_UTIL_INC_3163: u32 = 3164;
pub const Z_UTIL_INC_3164: u32 = 3165;
pub const Z_UTIL_INC_3165: u32 = 3166;
pub const Z_UTIL_INC_3166: u32 = 3167;
pub const Z_UTIL_INC_3167: u32 = 3168;
pub const Z_UTIL_INC_3168: u32 = 3169;
pub const Z_UTIL_INC_3169: u32 = 3170;
pub const Z_UTIL_INC_3170: u32 = 3171;
pub const Z_UTIL_INC_3171: u32 = 3172;
pub const Z_UTIL_INC_3172: u32 = 3173;
pub const Z_UTIL_INC_3173: u32 = 3174;
pub const Z_UTIL_INC_3174: u32 = 3175;
pub const Z_UTIL_INC_3175: u32 = 3176;
pub const Z_UTIL_INC_3176: u32 = 3177;
pub const Z_UTIL_INC_3177: u32 = 3178;
pub const Z_UTIL_INC_3178: u32 = 3179;
pub const Z_UTIL_INC_3179: u32 = 3180;
pub const Z_UTIL_INC_3180: u32 = 3181;
pub const Z_UTIL_INC_3181: u32 = 3182;
pub const Z_UTIL_INC_3182: u32 = 3183;
pub const Z_UTIL_INC_3183: u32 = 3184;
pub const Z_UTIL_INC_3184: u32 = 3185;
pub const Z_UTIL_INC_3185: u32 = 3186;
pub const Z_UTIL_INC_3186: u32 = 3187;
pub const Z_UTIL_INC_3187: u32 = 3188;
pub const Z_UTIL_INC_3188: u32 = 3189;
pub const Z_UTIL_INC_3189: u32 = 3190;
pub const Z_UTIL_INC_3190: u32 = 3191;
pub const Z_UTIL_INC_3191: u32 = 3192;
pub const Z_UTIL_INC_3192: u32 = 3193;
pub const Z_UTIL_INC_3193: u32 = 3194;
pub const Z_UTIL_INC_3194: u32 = 3195;
pub const Z_UTIL_INC_3195: u32 = 3196;
pub const Z_UTIL_INC_3196: u32 = 3197;
pub const Z_UTIL_INC_3197: u32 = 3198;
pub const Z_UTIL_INC_3198: u32 = 3199;
pub const Z_UTIL_INC_3199: u32 = 3200;
pub const Z_UTIL_INC_3200: u32 = 3201;
pub const Z_UTIL_INC_3201: u32 = 3202;
pub const Z_UTIL_INC_3202: u32 = 3203;
pub const Z_UTIL_INC_3203: u32 = 3204;
pub const Z_UTIL_INC_3204: u32 = 3205;
pub const Z_UTIL_INC_3205: u32 = 3206;
pub const Z_UTIL_INC_3206: u32 = 3207;
pub const Z_UTIL_INC_3207: u32 = 3208;
pub const Z_UTIL_INC_3208: u32 = 3209;
pub const Z_UTIL_INC_3209: u32 = 3210;
pub const Z_UTIL_INC_3210: u32 = 3211;
pub const Z_UTIL_INC_3211: u32 = 3212;
pub const Z_UTIL_INC_3212: u32 = 3213;
pub const Z_UTIL_INC_3213: u32 = 3214;
pub const Z_UTIL_INC_3214: u32 = 3215;
pub const Z_UTIL_INC_3215: u32 = 3216;
pub const Z_UTIL_INC_3216: u32 = 3217;
pub const Z_UTIL_INC_3217: u32 = 3218;
pub const Z_UTIL_INC_3218: u32 = 3219;
pub const Z_UTIL_INC_3219: u32 = 3220;
pub const Z_UTIL_INC_3220: u32 = 3221;
pub const Z_UTIL_INC_3221: u32 = 3222;
pub const Z_UTIL_INC_3222: u32 = 3223;
pub const Z_UTIL_INC_3223: u32 = 3224;
pub const Z_UTIL_INC_3224: u32 = 3225;
pub const Z_UTIL_INC_3225: u32 = 3226;
pub const Z_UTIL_INC_3226: u32 = 3227;
pub const Z_UTIL_INC_3227: u32 = 3228;
pub const Z_UTIL_INC_3228: u32 = 3229;
pub const Z_UTIL_INC_3229: u32 = 3230;
pub const Z_UTIL_INC_3230: u32 = 3231;
pub const Z_UTIL_INC_3231: u32 = 3232;
pub const Z_UTIL_INC_3232: u32 = 3233;
pub const Z_UTIL_INC_3233: u32 = 3234;
pub const Z_UTIL_INC_3234: u32 = 3235;
pub const Z_UTIL_INC_3235: u32 = 3236;
pub const Z_UTIL_INC_3236: u32 = 3237;
pub const Z_UTIL_INC_3237: u32 = 3238;
pub const Z_UTIL_INC_3238: u32 = 3239;
pub const Z_UTIL_INC_3239: u32 = 3240;
pub const Z_UTIL_INC_3240: u32 = 3241;
pub const Z_UTIL_INC_3241: u32 = 3242;
pub const Z_UTIL_INC_3242: u32 = 3243;
pub const Z_UTIL_INC_3243: u32 = 3244;
pub const Z_UTIL_INC_3244: u32 = 3245;
pub const Z_UTIL_INC_3245: u32 = 3246;
pub const Z_UTIL_INC_3246: u32 = 3247;
pub const Z_UTIL_INC_3247: u32 = 3248;
pub const Z_UTIL_INC_3248: u32 = 3249;
pub const Z_UTIL_INC_3249: u32 = 3250;
pub const Z_UTIL_INC_3250: u32 = 3251;
pub const Z_UTIL_INC_3251: u32 = 3252;
pub const Z_UTIL_INC_3252: u32 = 3253;
pub const Z_UTIL_INC_3253: u32 = 3254;
pub const Z_UTIL_INC_3254: u32 = 3255;
pub const Z_UTIL_INC_3255: u32 = 3256;
pub const Z_UTIL_INC_3256: u32 = 3257;
pub const Z_UTIL_INC_3257: u32 = 3258;
pub const Z_UTIL_INC_3258: u32 = 3259;
pub const Z_UTIL_INC_3259: u32 = 3260;
pub const Z_UTIL_INC_3260: u32 = 3261;
pub const Z_UTIL_INC_3261: u32 = 3262;
pub const Z_UTIL_INC_3262: u32 = 3263;
pub const Z_UTIL_INC_3263: u32 = 3264;
pub const Z_UTIL_INC_3264: u32 = 3265;
pub const Z_UTIL_INC_3265: u32 = 3266;
pub const Z_UTIL_INC_3266: u32 = 3267;
pub const Z_UTIL_INC_3267: u32 = 3268;
pub const Z_UTIL_INC_3268: u32 = 3269;
pub const Z_UTIL_INC_3269: u32 = 3270;
pub const Z_UTIL_INC_3270: u32 = 3271;
pub const Z_UTIL_INC_3271: u32 = 3272;
pub const Z_UTIL_INC_3272: u32 = 3273;
pub const Z_UTIL_INC_3273: u32 = 3274;
pub const Z_UTIL_INC_3274: u32 = 3275;
pub const Z_UTIL_INC_3275: u32 = 3276;
pub const Z_UTIL_INC_3276: u32 = 3277;
pub const Z_UTIL_INC_3277: u32 = 3278;
pub const Z_UTIL_INC_3278: u32 = 3279;
pub const Z_UTIL_INC_3279: u32 = 3280;
pub const Z_UTIL_INC_3280: u32 = 3281;
pub const Z_UTIL_INC_3281: u32 = 3282;
pub const Z_UTIL_INC_3282: u32 = 3283;
pub const Z_UTIL_INC_3283: u32 = 3284;
pub const Z_UTIL_INC_3284: u32 = 3285;
pub const Z_UTIL_INC_3285: u32 = 3286;
pub const Z_UTIL_INC_3286: u32 = 3287;
pub const Z_UTIL_INC_3287: u32 = 3288;
pub const Z_UTIL_INC_3288: u32 = 3289;
pub const Z_UTIL_INC_3289: u32 = 3290;
pub const Z_UTIL_INC_3290: u32 = 3291;
pub const Z_UTIL_INC_3291: u32 = 3292;
pub const Z_UTIL_INC_3292: u32 = 3293;
pub const Z_UTIL_INC_3293: u32 = 3294;
pub const Z_UTIL_INC_3294: u32 = 3295;
pub const Z_UTIL_INC_3295: u32 = 3296;
pub const Z_UTIL_INC_3296: u32 = 3297;
pub const Z_UTIL_INC_3297: u32 = 3298;
pub const Z_UTIL_INC_3298: u32 = 3299;
pub const Z_UTIL_INC_3299: u32 = 3300;
pub const Z_UTIL_INC_3300: u32 = 3301;
pub const Z_UTIL_INC_3301: u32 = 3302;
pub const Z_UTIL_INC_3302: u32 = 3303;
pub const Z_UTIL_INC_3303: u32 = 3304;
pub const Z_UTIL_INC_3304: u32 = 3305;
pub const Z_UTIL_INC_3305: u32 = 3306;
pub const Z_UTIL_INC_3306: u32 = 3307;
pub const Z_UTIL_INC_3307: u32 = 3308;
pub const Z_UTIL_INC_3308: u32 = 3309;
pub const Z_UTIL_INC_3309: u32 = 3310;
pub const Z_UTIL_INC_3310: u32 = 3311;
pub const Z_UTIL_INC_3311: u32 = 3312;
pub const Z_UTIL_INC_3312: u32 = 3313;
pub const Z_UTIL_INC_3313: u32 = 3314;
pub const Z_UTIL_INC_3314: u32 = 3315;
pub const Z_UTIL_INC_3315: u32 = 3316;
pub const Z_UTIL_INC_3316: u32 = 3317;
pub const Z_UTIL_INC_3317: u32 = 3318;
pub const Z_UTIL_INC_3318: u32 = 3319;
pub const Z_UTIL_INC_3319: u32 = 3320;
pub const Z_UTIL_INC_3320: u32 = 3321;
pub const Z_UTIL_INC_3321: u32 = 3322;
pub const Z_UTIL_INC_3322: u32 = 3323;
pub const Z_UTIL_INC_3323: u32 = 3324;
pub const Z_UTIL_INC_3324: u32 = 3325;
pub const Z_UTIL_INC_3325: u32 = 3326;
pub const Z_UTIL_INC_3326: u32 = 3327;
pub const Z_UTIL_INC_3327: u32 = 3328;
pub const Z_UTIL_INC_3328: u32 = 3329;
pub const Z_UTIL_INC_3329: u32 = 3330;
pub const Z_UTIL_INC_3330: u32 = 3331;
pub const Z_UTIL_INC_3331: u32 = 3332;
pub const Z_UTIL_INC_3332: u32 = 3333;
pub const Z_UTIL_INC_3333: u32 = 3334;
pub const Z_UTIL_INC_3334: u32 = 3335;
pub const Z_UTIL_INC_3335: u32 = 3336;
pub const Z_UTIL_INC_3336: u32 = 3337;
pub const Z_UTIL_INC_3337: u32 = 3338;
pub const Z_UTIL_INC_3338: u32 = 3339;
pub const Z_UTIL_INC_3339: u32 = 3340;
pub const Z_UTIL_INC_3340: u32 = 3341;
pub const Z_UTIL_INC_3341: u32 = 3342;
pub const Z_UTIL_INC_3342: u32 = 3343;
pub const Z_UTIL_INC_3343: u32 = 3344;
pub const Z_UTIL_INC_3344: u32 = 3345;
pub const Z_UTIL_INC_3345: u32 = 3346;
pub const Z_UTIL_INC_3346: u32 = 3347;
pub const Z_UTIL_INC_3347: u32 = 3348;
pub const Z_UTIL_INC_3348: u32 = 3349;
pub const Z_UTIL_INC_3349: u32 = 3350;
pub const Z_UTIL_INC_3350: u32 = 3351;
pub const Z_UTIL_INC_3351: u32 = 3352;
pub const Z_UTIL_INC_3352: u32 = 3353;
pub const Z_UTIL_INC_3353: u32 = 3354;
pub const Z_UTIL_INC_3354: u32 = 3355;
pub const Z_UTIL_INC_3355: u32 = 3356;
pub const Z_UTIL_INC_3356: u32 = 3357;
pub const Z_UTIL_INC_3357: u32 = 3358;
pub const Z_UTIL_INC_3358: u32 = 3359;
pub const Z_UTIL_INC_3359: u32 = 3360;
pub const Z_UTIL_INC_3360: u32 = 3361;
pub const Z_UTIL_INC_3361: u32 = 3362;
pub const Z_UTIL_INC_3362: u32 = 3363;
pub const Z_UTIL_INC_3363: u32 = 3364;
pub const Z_UTIL_INC_3364: u32 = 3365;
pub const Z_UTIL_INC_3365: u32 = 3366;
pub const Z_UTIL_INC_3366: u32 = 3367;
pub const Z_UTIL_INC_3367: u32 = 3368;
pub const Z_UTIL_INC_3368: u32 = 3369;
pub const Z_UTIL_INC_3369: u32 = 3370;
pub const Z_UTIL_INC_3370: u32 = 3371;
pub const Z_UTIL_INC_3371: u32 = 3372;
pub const Z_UTIL_INC_3372: u32 = 3373;
pub const Z_UTIL_INC_3373: u32 = 3374;
pub const Z_UTIL_INC_3374: u32 = 3375;
pub const Z_UTIL_INC_3375: u32 = 3376;
pub const Z_UTIL_INC_3376: u32 = 3377;
pub const Z_UTIL_INC_3377: u32 = 3378;
pub const Z_UTIL_INC_3378: u32 = 3379;
pub const Z_UTIL_INC_3379: u32 = 3380;
pub const Z_UTIL_INC_3380: u32 = 3381;
pub const Z_UTIL_INC_3381: u32 = 3382;
pub const Z_UTIL_INC_3382: u32 = 3383;
pub const Z_UTIL_INC_3383: u32 = 3384;
pub const Z_UTIL_INC_3384: u32 = 3385;
pub const Z_UTIL_INC_3385: u32 = 3386;
pub const Z_UTIL_INC_3386: u32 = 3387;
pub const Z_UTIL_INC_3387: u32 = 3388;
pub const Z_UTIL_INC_3388: u32 = 3389;
pub const Z_UTIL_INC_3389: u32 = 3390;
pub const Z_UTIL_INC_3390: u32 = 3391;
pub const Z_UTIL_INC_3391: u32 = 3392;
pub const Z_UTIL_INC_3392: u32 = 3393;
pub const Z_UTIL_INC_3393: u32 = 3394;
pub const Z_UTIL_INC_3394: u32 = 3395;
pub const Z_UTIL_INC_3395: u32 = 3396;
pub const Z_UTIL_INC_3396: u32 = 3397;
pub const Z_UTIL_INC_3397: u32 = 3398;
pub const Z_UTIL_INC_3398: u32 = 3399;
pub const Z_UTIL_INC_3399: u32 = 3400;
pub const Z_UTIL_INC_3400: u32 = 3401;
pub const Z_UTIL_INC_3401: u32 = 3402;
pub const Z_UTIL_INC_3402: u32 = 3403;
pub const Z_UTIL_INC_3403: u32 = 3404;
pub const Z_UTIL_INC_3404: u32 = 3405;
pub const Z_UTIL_INC_3405: u32 = 3406;
pub const Z_UTIL_INC_3406: u32 = 3407;
pub const Z_UTIL_INC_3407: u32 = 3408;
pub const Z_UTIL_INC_3408: u32 = 3409;
pub const Z_UTIL_INC_3409: u32 = 3410;
pub const Z_UTIL_INC_3410: u32 = 3411;
pub const Z_UTIL_INC_3411: u32 = 3412;
pub const Z_UTIL_INC_3412: u32 = 3413;
pub const Z_UTIL_INC_3413: u32 = 3414;
pub const Z_UTIL_INC_3414: u32 = 3415;
pub const Z_UTIL_INC_3415: u32 = 3416;
pub const Z_UTIL_INC_3416: u32 = 3417;
pub const Z_UTIL_INC_3417: u32 = 3418;
pub const Z_UTIL_INC_3418: u32 = 3419;
pub const Z_UTIL_INC_3419: u32 = 3420;
pub const Z_UTIL_INC_3420: u32 = 3421;
pub const Z_UTIL_INC_3421: u32 = 3422;
pub const Z_UTIL_INC_3422: u32 = 3423;
pub const Z_UTIL_INC_3423: u32 = 3424;
pub const Z_UTIL_INC_3424: u32 = 3425;
pub const Z_UTIL_INC_3425: u32 = 3426;
pub const Z_UTIL_INC_3426: u32 = 3427;
pub const Z_UTIL_INC_3427: u32 = 3428;
pub const Z_UTIL_INC_3428: u32 = 3429;
pub const Z_UTIL_INC_3429: u32 = 3430;
pub const Z_UTIL_INC_3430: u32 = 3431;
pub const Z_UTIL_INC_3431: u32 = 3432;
pub const Z_UTIL_INC_3432: u32 = 3433;
pub const Z_UTIL_INC_3433: u32 = 3434;
pub const Z_UTIL_INC_3434: u32 = 3435;
pub const Z_UTIL_INC_3435: u32 = 3436;
pub const Z_UTIL_INC_3436: u32 = 3437;
pub const Z_UTIL_INC_3437: u32 = 3438;
pub const Z_UTIL_INC_3438: u32 = 3439;
pub const Z_UTIL_INC_3439: u32 = 3440;
pub const Z_UTIL_INC_3440: u32 = 3441;
pub const Z_UTIL_INC_3441: u32 = 3442;
pub const Z_UTIL_INC_3442: u32 = 3443;
pub const Z_UTIL_INC_3443: u32 = 3444;
pub const Z_UTIL_INC_3444: u32 = 3445;
pub const Z_UTIL_INC_3445: u32 = 3446;
pub const Z_UTIL_INC_3446: u32 = 3447;
pub const Z_UTIL_INC_3447: u32 = 3448;
pub const Z_UTIL_INC_3448: u32 = 3449;
pub const Z_UTIL_INC_3449: u32 = 3450;
pub const Z_UTIL_INC_3450: u32 = 3451;
pub const Z_UTIL_INC_3451: u32 = 3452;
pub const Z_UTIL_INC_3452: u32 = 3453;
pub const Z_UTIL_INC_3453: u32 = 3454;
pub const Z_UTIL_INC_3454: u32 = 3455;
pub const Z_UTIL_INC_3455: u32 = 3456;
pub const Z_UTIL_INC_3456: u32 = 3457;
pub const Z_UTIL_INC_3457: u32 = 3458;
pub const Z_UTIL_INC_3458: u32 = 3459;
pub const Z_UTIL_INC_3459: u32 = 3460;
pub const Z_UTIL_INC_3460: u32 = 3461;
pub const Z_UTIL_INC_3461: u32 = 3462;
pub const Z_UTIL_INC_3462: u32 = 3463;
pub const Z_UTIL_INC_3463: u32 = 3464;
pub const Z_UTIL_INC_3464: u32 = 3465;
pub const Z_UTIL_INC_3465: u32 = 3466;
pub const Z_UTIL_INC_3466: u32 = 3467;
pub const Z_UTIL_INC_3467: u32 = 3468;
pub const Z_UTIL_INC_3468: u32 = 3469;
pub const Z_UTIL_INC_3469: u32 = 3470;
pub const Z_UTIL_INC_3470: u32 = 3471;
pub const Z_UTIL_INC_3471: u32 = 3472;
pub const Z_UTIL_INC_3472: u32 = 3473;
pub const Z_UTIL_INC_3473: u32 = 3474;
pub const Z_UTIL_INC_3474: u32 = 3475;
pub const Z_UTIL_INC_3475: u32 = 3476;
pub const Z_UTIL_INC_3476: u32 = 3477;
pub const Z_UTIL_INC_3477: u32 = 3478;
pub const Z_UTIL_INC_3478: u32 = 3479;
pub const Z_UTIL_INC_3479: u32 = 3480;
pub const Z_UTIL_INC_3480: u32 = 3481;
pub const Z_UTIL_INC_3481: u32 = 3482;
pub const Z_UTIL_INC_3482: u32 = 3483;
pub const Z_UTIL_INC_3483: u32 = 3484;
pub const Z_UTIL_INC_3484: u32 = 3485;
pub const Z_UTIL_INC_3485: u32 = 3486;
pub const Z_UTIL_INC_3486: u32 = 3487;
pub const Z_UTIL_INC_3487: u32 = 3488;
pub const Z_UTIL_INC_3488: u32 = 3489;
pub const Z_UTIL_INC_3489: u32 = 3490;
pub const Z_UTIL_INC_3490: u32 = 3491;
pub const Z_UTIL_INC_3491: u32 = 3492;
pub const Z_UTIL_INC_3492: u32 = 3493;
pub const Z_UTIL_INC_3493: u32 = 3494;
pub const Z_UTIL_INC_3494: u32 = 3495;
pub const Z_UTIL_INC_3495: u32 = 3496;
pub const Z_UTIL_INC_3496: u32 = 3497;
pub const Z_UTIL_INC_3497: u32 = 3498;
pub const Z_UTIL_INC_3498: u32 = 3499;
pub const Z_UTIL_INC_3499: u32 = 3500;
pub const Z_UTIL_INC_3500: u32 = 3501;
pub const Z_UTIL_INC_3501: u32 = 3502;
pub const Z_UTIL_INC_3502: u32 = 3503;
pub const Z_UTIL_INC_3503: u32 = 3504;
pub const Z_UTIL_INC_3504: u32 = 3505;
pub const Z_UTIL_INC_3505: u32 = 3506;
pub const Z_UTIL_INC_3506: u32 = 3507;
pub const Z_UTIL_INC_3507: u32 = 3508;
pub const Z_UTIL_INC_3508: u32 = 3509;
pub const Z_UTIL_INC_3509: u32 = 3510;
pub const Z_UTIL_INC_3510: u32 = 3511;
pub const Z_UTIL_INC_3511: u32 = 3512;
pub const Z_UTIL_INC_3512: u32 = 3513;
pub const Z_UTIL_INC_3513: u32 = 3514;
pub const Z_UTIL_INC_3514: u32 = 3515;
pub const Z_UTIL_INC_3515: u32 = 3516;
pub const Z_UTIL_INC_3516: u32 = 3517;
pub const Z_UTIL_INC_3517: u32 = 3518;
pub const Z_UTIL_INC_3518: u32 = 3519;
pub const Z_UTIL_INC_3519: u32 = 3520;
pub const Z_UTIL_INC_3520: u32 = 3521;
pub const Z_UTIL_INC_3521: u32 = 3522;
pub const Z_UTIL_INC_3522: u32 = 3523;
pub const Z_UTIL_INC_3523: u32 = 3524;
pub const Z_UTIL_INC_3524: u32 = 3525;
pub const Z_UTIL_INC_3525: u32 = 3526;
pub const Z_UTIL_INC_3526: u32 = 3527;
pub const Z_UTIL_INC_3527: u32 = 3528;
pub const Z_UTIL_INC_3528: u32 = 3529;
pub const Z_UTIL_INC_3529: u32 = 3530;
pub const Z_UTIL_INC_3530: u32 = 3531;
pub const Z_UTIL_INC_3531: u32 = 3532;
pub const Z_UTIL_INC_3532: u32 = 3533;
pub const Z_UTIL_INC_3533: u32 = 3534;
pub const Z_UTIL_INC_3534: u32 = 3535;
pub const Z_UTIL_INC_3535: u32 = 3536;
pub const Z_UTIL_INC_3536: u32 = 3537;
pub const Z_UTIL_INC_3537: u32 = 3538;
pub const Z_UTIL_INC_3538: u32 = 3539;
pub const Z_UTIL_INC_3539: u32 = 3540;
pub const Z_UTIL_INC_3540: u32 = 3541;
pub const Z_UTIL_INC_3541: u32 = 3542;
pub const Z_UTIL_INC_3542: u32 = 3543;
pub const Z_UTIL_INC_3543: u32 = 3544;
pub const Z_UTIL_INC_3544: u32 = 3545;
pub const Z_UTIL_INC_3545: u32 = 3546;
pub const Z_UTIL_INC_3546: u32 = 3547;
pub const Z_UTIL_INC_3547: u32 = 3548;
pub const Z_UTIL_INC_3548: u32 = 3549;
pub const Z_UTIL_INC_3549: u32 = 3550;
pub const Z_UTIL_INC_3550: u32 = 3551;
pub const Z_UTIL_INC_3551: u32 = 3552;
pub const Z_UTIL_INC_3552: u32 = 3553;
pub const Z_UTIL_INC_3553: u32 = 3554;
pub const Z_UTIL_INC_3554: u32 = 3555;
pub const Z_UTIL_INC_3555: u32 = 3556;
pub const Z_UTIL_INC_3556: u32 = 3557;
pub const Z_UTIL_INC_3557: u32 = 3558;
pub const Z_UTIL_INC_3558: u32 = 3559;
pub const Z_UTIL_INC_3559: u32 = 3560;
pub const Z_UTIL_INC_3560: u32 = 3561;
pub const Z_UTIL_INC_3561: u32 = 3562;
pub const Z_UTIL_INC_3562: u32 = 3563;
pub const Z_UTIL_INC_3563: u32 = 3564;
pub const Z_UTIL_INC_3564: u32 = 3565;
pub const Z_UTIL_INC_3565: u32 = 3566;
pub const Z_UTIL_INC_3566: u32 = 3567;
pub const Z_UTIL_INC_3567: u32 = 3568;
pub const Z_UTIL_INC_3568: u32 = 3569;
pub const Z_UTIL_INC_3569: u32 = 3570;
pub const Z_UTIL_INC_3570: u32 = 3571;
pub const Z_UTIL_INC_3571: u32 = 3572;
pub const Z_UTIL_INC_3572: u32 = 3573;
pub const Z_UTIL_INC_3573: u32 = 3574;
pub const Z_UTIL_INC_3574: u32 = 3575;
pub const Z_UTIL_INC_3575: u32 = 3576;
pub const Z_UTIL_INC_3576: u32 = 3577;
pub const Z_UTIL_INC_3577: u32 = 3578;
pub const Z_UTIL_INC_3578: u32 = 3579;
pub const Z_UTIL_INC_3579: u32 = 3580;
pub const Z_UTIL_INC_3580: u32 = 3581;
pub const Z_UTIL_INC_3581: u32 = 3582;
pub const Z_UTIL_INC_3582: u32 = 3583;
pub const Z_UTIL_INC_3583: u32 = 3584;
pub const Z_UTIL_INC_3584: u32 = 3585;
pub const Z_UTIL_INC_3585: u32 = 3586;
pub const Z_UTIL_INC_3586: u32 = 3587;
pub const Z_UTIL_INC_3587: u32 = 3588;
pub const Z_UTIL_INC_3588: u32 = 3589;
pub const Z_UTIL_INC_3589: u32 = 3590;
pub const Z_UTIL_INC_3590: u32 = 3591;
pub const Z_UTIL_INC_3591: u32 = 3592;
pub const Z_UTIL_INC_3592: u32 = 3593;
pub const Z_UTIL_INC_3593: u32 = 3594;
pub const Z_UTIL_INC_3594: u32 = 3595;
pub const Z_UTIL_INC_3595: u32 = 3596;
pub const Z_UTIL_INC_3596: u32 = 3597;
pub const Z_UTIL_INC_3597: u32 = 3598;
pub const Z_UTIL_INC_3598: u32 = 3599;
pub const Z_UTIL_INC_3599: u32 = 3600;
pub const Z_UTIL_INC_3600: u32 = 3601;
pub const Z_UTIL_INC_3601: u32 = 3602;
pub const Z_UTIL_INC_3602: u32 = 3603;
pub const Z_UTIL_INC_3603: u32 = 3604;
pub const Z_UTIL_INC_3604: u32 = 3605;
pub const Z_UTIL_INC_3605: u32 = 3606;
pub const Z_UTIL_INC_3606: u32 = 3607;
pub const Z_UTIL_INC_3607: u32 = 3608;
pub const Z_UTIL_INC_3608: u32 = 3609;
pub const Z_UTIL_INC_3609: u32 = 3610;
pub const Z_UTIL_INC_3610: u32 = 3611;
pub const Z_UTIL_INC_3611: u32 = 3612;
pub const Z_UTIL_INC_3612: u32 = 3613;
pub const Z_UTIL_INC_3613: u32 = 3614;
pub const Z_UTIL_INC_3614: u32 = 3615;
pub const Z_UTIL_INC_3615: u32 = 3616;
pub const Z_UTIL_INC_3616: u32 = 3617;
pub const Z_UTIL_INC_3617: u32 = 3618;
pub const Z_UTIL_INC_3618: u32 = 3619;
pub const Z_UTIL_INC_3619: u32 = 3620;
pub const Z_UTIL_INC_3620: u32 = 3621;
pub const Z_UTIL_INC_3621: u32 = 3622;
pub const Z_UTIL_INC_3622: u32 = 3623;
pub const Z_UTIL_INC_3623: u32 = 3624;
pub const Z_UTIL_INC_3624: u32 = 3625;
pub const Z_UTIL_INC_3625: u32 = 3626;
pub const Z_UTIL_INC_3626: u32 = 3627;
pub const Z_UTIL_INC_3627: u32 = 3628;
pub const Z_UTIL_INC_3628: u32 = 3629;
pub const Z_UTIL_INC_3629: u32 = 3630;
pub const Z_UTIL_INC_3630: u32 = 3631;
pub const Z_UTIL_INC_3631: u32 = 3632;
pub const Z_UTIL_INC_3632: u32 = 3633;
pub const Z_UTIL_INC_3633: u32 = 3634;
pub const Z_UTIL_INC_3634: u32 = 3635;
pub const Z_UTIL_INC_3635: u32 = 3636;
pub const Z_UTIL_INC_3636: u32 = 3637;
pub const Z_UTIL_INC_3637: u32 = 3638;
pub const Z_UTIL_INC_3638: u32 = 3639;
pub const Z_UTIL_INC_3639: u32 = 3640;
pub const Z_UTIL_INC_3640: u32 = 3641;
pub const Z_UTIL_INC_3641: u32 = 3642;
pub const Z_UTIL_INC_3642: u32 = 3643;
pub const Z_UTIL_INC_3643: u32 = 3644;
pub const Z_UTIL_INC_3644: u32 = 3645;
pub const Z_UTIL_INC_3645: u32 = 3646;
pub const Z_UTIL_INC_3646: u32 = 3647;
pub const Z_UTIL_INC_3647: u32 = 3648;
pub const Z_UTIL_INC_3648: u32 = 3649;
pub const Z_UTIL_INC_3649: u32 = 3650;
pub const Z_UTIL_INC_3650: u32 = 3651;
pub const Z_UTIL_INC_3651: u32 = 3652;
pub const Z_UTIL_INC_3652: u32 = 3653;
pub const Z_UTIL_INC_3653: u32 = 3654;
pub const Z_UTIL_INC_3654: u32 = 3655;
pub const Z_UTIL_INC_3655: u32 = 3656;
pub const Z_UTIL_INC_3656: u32 = 3657;
pub const Z_UTIL_INC_3657: u32 = 3658;
pub const Z_UTIL_INC_3658: u32 = 3659;
pub const Z_UTIL_INC_3659: u32 = 3660;
pub const Z_UTIL_INC_3660: u32 = 3661;
pub const Z_UTIL_INC_3661: u32 = 3662;
pub const Z_UTIL_INC_3662: u32 = 3663;
pub const Z_UTIL_INC_3663: u32 = 3664;
pub const Z_UTIL_INC_3664: u32 = 3665;
pub const Z_UTIL_INC_3665: u32 = 3666;
pub const Z_UTIL_INC_3666: u32 = 3667;
pub const Z_UTIL_INC_3667: u32 = 3668;
pub const Z_UTIL_INC_3668: u32 = 3669;
pub const Z_UTIL_INC_3669: u32 = 3670;
pub const Z_UTIL_INC_3670: u32 = 3671;
pub const Z_UTIL_INC_3671: u32 = 3672;
pub const Z_UTIL_INC_3672: u32 = 3673;
pub const Z_UTIL_INC_3673: u32 = 3674;
pub const Z_UTIL_INC_3674: u32 = 3675;
pub const Z_UTIL_INC_3675: u32 = 3676;
pub const Z_UTIL_INC_3676: u32 = 3677;
pub const Z_UTIL_INC_3677: u32 = 3678;
pub const Z_UTIL_INC_3678: u32 = 3679;
pub const Z_UTIL_INC_3679: u32 = 3680;
pub const Z_UTIL_INC_3680: u32 = 3681;
pub const Z_UTIL_INC_3681: u32 = 3682;
pub const Z_UTIL_INC_3682: u32 = 3683;
pub const Z_UTIL_INC_3683: u32 = 3684;
pub const Z_UTIL_INC_3684: u32 = 3685;
pub const Z_UTIL_INC_3685: u32 = 3686;
pub const Z_UTIL_INC_3686: u32 = 3687;
pub const Z_UTIL_INC_3687: u32 = 3688;
pub const Z_UTIL_INC_3688: u32 = 3689;
pub const Z_UTIL_INC_3689: u32 = 3690;
pub const Z_UTIL_INC_3690: u32 = 3691;
pub const Z_UTIL_INC_3691: u32 = 3692;
pub const Z_UTIL_INC_3692: u32 = 3693;
pub const Z_UTIL_INC_3693: u32 = 3694;
pub const Z_UTIL_INC_3694: u32 = 3695;
pub const Z_UTIL_INC_3695: u32 = 3696;
pub const Z_UTIL_INC_3696: u32 = 3697;
pub const Z_UTIL_INC_3697: u32 = 3698;
pub const Z_UTIL_INC_3698: u32 = 3699;
pub const Z_UTIL_INC_3699: u32 = 3700;
pub const Z_UTIL_INC_3700: u32 = 3701;
pub const Z_UTIL_INC_3701: u32 = 3702;
pub const Z_UTIL_INC_3702: u32 = 3703;
pub const Z_UTIL_INC_3703: u32 = 3704;
pub const Z_UTIL_INC_3704: u32 = 3705;
pub const Z_UTIL_INC_3705: u32 = 3706;
pub const Z_UTIL_INC_3706: u32 = 3707;
pub const Z_UTIL_INC_3707: u32 = 3708;
pub const Z_UTIL_INC_3708: u32 = 3709;
pub const Z_UTIL_INC_3709: u32 = 3710;
pub const Z_UTIL_INC_3710: u32 = 3711;
pub const Z_UTIL_INC_3711: u32 = 3712;
pub const Z_UTIL_INC_3712: u32 = 3713;
pub const Z_UTIL_INC_3713: u32 = 3714;
pub const Z_UTIL_INC_3714: u32 = 3715;
pub const Z_UTIL_INC_3715: u32 = 3716;
pub const Z_UTIL_INC_3716: u32 = 3717;
pub const Z_UTIL_INC_3717: u32 = 3718;
pub const Z_UTIL_INC_3718: u32 = 3719;
pub const Z_UTIL_INC_3719: u32 = 3720;
pub const Z_UTIL_INC_3720: u32 = 3721;
pub const Z_UTIL_INC_3721: u32 = 3722;
pub const Z_UTIL_INC_3722: u32 = 3723;
pub const Z_UTIL_INC_3723: u32 = 3724;
pub const Z_UTIL_INC_3724: u32 = 3725;
pub const Z_UTIL_INC_3725: u32 = 3726;
pub const Z_UTIL_INC_3726: u32 = 3727;
pub const Z_UTIL_INC_3727: u32 = 3728;
pub const Z_UTIL_INC_3728: u32 = 3729;
pub const Z_UTIL_INC_3729: u32 = 3730;
pub const Z_UTIL_INC_3730: u32 = 3731;
pub const Z_UTIL_INC_3731: u32 = 3732;
pub const Z_UTIL_INC_3732: u32 = 3733;
pub const Z_UTIL_INC_3733: u32 = 3734;
pub const Z_UTIL_INC_3734: u32 = 3735;
pub const Z_UTIL_INC_3735: u32 = 3736;
pub const Z_UTIL_INC_3736: u32 = 3737;
pub const Z_UTIL_INC_3737: u32 = 3738;
pub const Z_UTIL_INC_3738: u32 = 3739;
pub const Z_UTIL_INC_3739: u32 = 3740;
pub const Z_UTIL_INC_3740: u32 = 3741;
pub const Z_UTIL_INC_3741: u32 = 3742;
pub const Z_UTIL_INC_3742: u32 = 3743;
pub const Z_UTIL_INC_3743: u32 = 3744;
pub const Z_UTIL_INC_3744: u32 = 3745;
pub const Z_UTIL_INC_3745: u32 = 3746;
pub const Z_UTIL_INC_3746: u32 = 3747;
pub const Z_UTIL_INC_3747: u32 = 3748;
pub const Z_UTIL_INC_3748: u32 = 3749;
pub const Z_UTIL_INC_3749: u32 = 3750;
pub const Z_UTIL_INC_3750: u32 = 3751;
pub const Z_UTIL_INC_3751: u32 = 3752;
pub const Z_UTIL_INC_3752: u32 = 3753;
pub const Z_UTIL_INC_3753: u32 = 3754;
pub const Z_UTIL_INC_3754: u32 = 3755;
pub const Z_UTIL_INC_3755: u32 = 3756;
pub const Z_UTIL_INC_3756: u32 = 3757;
pub const Z_UTIL_INC_3757: u32 = 3758;
pub const Z_UTIL_INC_3758: u32 = 3759;
pub const Z_UTIL_INC_3759: u32 = 3760;
pub const Z_UTIL_INC_3760: u32 = 3761;
pub const Z_UTIL_INC_3761: u32 = 3762;
pub const Z_UTIL_INC_3762: u32 = 3763;
pub const Z_UTIL_INC_3763: u32 = 3764;
pub const Z_UTIL_INC_3764: u32 = 3765;
pub const Z_UTIL_INC_3765: u32 = 3766;
pub const Z_UTIL_INC_3766: u32 = 3767;
pub const Z_UTIL_INC_3767: u32 = 3768;
pub const Z_UTIL_INC_3768: u32 = 3769;
pub const Z_UTIL_INC_3769: u32 = 3770;
pub const Z_UTIL_INC_3770: u32 = 3771;
pub const Z_UTIL_INC_3771: u32 = 3772;
pub const Z_UTIL_INC_3772: u32 = 3773;
pub const Z_UTIL_INC_3773: u32 = 3774;
pub const Z_UTIL_INC_3774: u32 = 3775;
pub const Z_UTIL_INC_3775: u32 = 3776;
pub const Z_UTIL_INC_3776: u32 = 3777;
pub const Z_UTIL_INC_3777: u32 = 3778;
pub const Z_UTIL_INC_3778: u32 = 3779;
pub const Z_UTIL_INC_3779: u32 = 3780;
pub const Z_UTIL_INC_3780: u32 = 3781;
pub const Z_UTIL_INC_3781: u32 = 3782;
pub const Z_UTIL_INC_3782: u32 = 3783;
pub const Z_UTIL_INC_3783: u32 = 3784;
pub const Z_UTIL_INC_3784: u32 = 3785;
pub const Z_UTIL_INC_3785: u32 = 3786;
pub const Z_UTIL_INC_3786: u32 = 3787;
pub const Z_UTIL_INC_3787: u32 = 3788;
pub const Z_UTIL_INC_3788: u32 = 3789;
pub const Z_UTIL_INC_3789: u32 = 3790;
pub const Z_UTIL_INC_3790: u32 = 3791;
pub const Z_UTIL_INC_3791: u32 = 3792;
pub const Z_UTIL_INC_3792: u32 = 3793;
pub const Z_UTIL_INC_3793: u32 = 3794;
pub const Z_UTIL_INC_3794: u32 = 3795;
pub const Z_UTIL_INC_3795: u32 = 3796;
pub const Z_UTIL_INC_3796: u32 = 3797;
pub const Z_UTIL_INC_3797: u32 = 3798;
pub const Z_UTIL_INC_3798: u32 = 3799;
pub const Z_UTIL_INC_3799: u32 = 3800;
pub const Z_UTIL_INC_3800: u32 = 3801;
pub const Z_UTIL_INC_3801: u32 = 3802;
pub const Z_UTIL_INC_3802: u32 = 3803;
pub const Z_UTIL_INC_3803: u32 = 3804;
pub const Z_UTIL_INC_3804: u32 = 3805;
pub const Z_UTIL_INC_3805: u32 = 3806;
pub const Z_UTIL_INC_3806: u32 = 3807;
pub const Z_UTIL_INC_3807: u32 = 3808;
pub const Z_UTIL_INC_3808: u32 = 3809;
pub const Z_UTIL_INC_3809: u32 = 3810;
pub const Z_UTIL_INC_3810: u32 = 3811;
pub const Z_UTIL_INC_3811: u32 = 3812;
pub const Z_UTIL_INC_3812: u32 = 3813;
pub const Z_UTIL_INC_3813: u32 = 3814;
pub const Z_UTIL_INC_3814: u32 = 3815;
pub const Z_UTIL_INC_3815: u32 = 3816;
pub const Z_UTIL_INC_3816: u32 = 3817;
pub const Z_UTIL_INC_3817: u32 = 3818;
pub const Z_UTIL_INC_3818: u32 = 3819;
pub const Z_UTIL_INC_3819: u32 = 3820;
pub const Z_UTIL_INC_3820: u32 = 3821;
pub const Z_UTIL_INC_3821: u32 = 3822;
pub const Z_UTIL_INC_3822: u32 = 3823;
pub const Z_UTIL_INC_3823: u32 = 3824;
pub const Z_UTIL_INC_3824: u32 = 3825;
pub const Z_UTIL_INC_3825: u32 = 3826;
pub const Z_UTIL_INC_3826: u32 = 3827;
pub const Z_UTIL_INC_3827: u32 = 3828;
pub const Z_UTIL_INC_3828: u32 = 3829;
pub const Z_UTIL_INC_3829: u32 = 3830;
pub const Z_UTIL_INC_3830: u32 = 3831;
pub const Z_UTIL_INC_3831: u32 = 3832;
pub const Z_UTIL_INC_3832: u32 = 3833;
pub const Z_UTIL_INC_3833: u32 = 3834;
pub const Z_UTIL_INC_3834: u32 = 3835;
pub const Z_UTIL_INC_3835: u32 = 3836;
pub const Z_UTIL_INC_3836: u32 = 3837;
pub const Z_UTIL_INC_3837: u32 = 3838;
pub const Z_UTIL_INC_3838: u32 = 3839;
pub const Z_UTIL_INC_3839: u32 = 3840;
pub const Z_UTIL_INC_3840: u32 = 3841;
pub const Z_UTIL_INC_3841: u32 = 3842;
pub const Z_UTIL_INC_3842: u32 = 3843;
pub const Z_UTIL_INC_3843: u32 = 3844;
pub const Z_UTIL_INC_3844: u32 = 3845;
pub const Z_UTIL_INC_3845: u32 = 3846;
pub const Z_UTIL_INC_3846: u32 = 3847;
pub const Z_UTIL_INC_3847: u32 = 3848;
pub const Z_UTIL_INC_3848: u32 = 3849;
pub const Z_UTIL_INC_3849: u32 = 3850;
pub const Z_UTIL_INC_3850: u32 = 3851;
pub const Z_UTIL_INC_3851: u32 = 3852;
pub const Z_UTIL_INC_3852: u32 = 3853;
pub const Z_UTIL_INC_3853: u32 = 3854;
pub const Z_UTIL_INC_3854: u32 = 3855;
pub const Z_UTIL_INC_3855: u32 = 3856;
pub const Z_UTIL_INC_3856: u32 = 3857;
pub const Z_UTIL_INC_3857: u32 = 3858;
pub const Z_UTIL_INC_3858: u32 = 3859;
pub const Z_UTIL_INC_3859: u32 = 3860;
pub const Z_UTIL_INC_3860: u32 = 3861;
pub const Z_UTIL_INC_3861: u32 = 3862;
pub const Z_UTIL_INC_3862: u32 = 3863;
pub const Z_UTIL_INC_3863: u32 = 3864;
pub const Z_UTIL_INC_3864: u32 = 3865;
pub const Z_UTIL_INC_3865: u32 = 3866;
pub const Z_UTIL_INC_3866: u32 = 3867;
pub const Z_UTIL_INC_3867: u32 = 3868;
pub const Z_UTIL_INC_3868: u32 = 3869;
pub const Z_UTIL_INC_3869: u32 = 3870;
pub const Z_UTIL_INC_3870: u32 = 3871;
pub const Z_UTIL_INC_3871: u32 = 3872;
pub const Z_UTIL_INC_3872: u32 = 3873;
pub const Z_UTIL_INC_3873: u32 = 3874;
pub const Z_UTIL_INC_3874: u32 = 3875;
pub const Z_UTIL_INC_3875: u32 = 3876;
pub const Z_UTIL_INC_3876: u32 = 3877;
pub const Z_UTIL_INC_3877: u32 = 3878;
pub const Z_UTIL_INC_3878: u32 = 3879;
pub const Z_UTIL_INC_3879: u32 = 3880;
pub const Z_UTIL_INC_3880: u32 = 3881;
pub const Z_UTIL_INC_3881: u32 = 3882;
pub const Z_UTIL_INC_3882: u32 = 3883;
pub const Z_UTIL_INC_3883: u32 = 3884;
pub const Z_UTIL_INC_3884: u32 = 3885;
pub const Z_UTIL_INC_3885: u32 = 3886;
pub const Z_UTIL_INC_3886: u32 = 3887;
pub const Z_UTIL_INC_3887: u32 = 3888;
pub const Z_UTIL_INC_3888: u32 = 3889;
pub const Z_UTIL_INC_3889: u32 = 3890;
pub const Z_UTIL_INC_3890: u32 = 3891;
pub const Z_UTIL_INC_3891: u32 = 3892;
pub const Z_UTIL_INC_3892: u32 = 3893;
pub const Z_UTIL_INC_3893: u32 = 3894;
pub const Z_UTIL_INC_3894: u32 = 3895;
pub const Z_UTIL_INC_3895: u32 = 3896;
pub const Z_UTIL_INC_3896: u32 = 3897;
pub const Z_UTIL_INC_3897: u32 = 3898;
pub const Z_UTIL_INC_3898: u32 = 3899;
pub const Z_UTIL_INC_3899: u32 = 3900;
pub const Z_UTIL_INC_3900: u32 = 3901;
pub const Z_UTIL_INC_3901: u32 = 3902;
pub const Z_UTIL_INC_3902: u32 = 3903;
pub const Z_UTIL_INC_3903: u32 = 3904;
pub const Z_UTIL_INC_3904: u32 = 3905;
pub const Z_UTIL_INC_3905: u32 = 3906;
pub const Z_UTIL_INC_3906: u32 = 3907;
pub const Z_UTIL_INC_3907: u32 = 3908;
pub const Z_UTIL_INC_3908: u32 = 3909;
pub const Z_UTIL_INC_3909: u32 = 3910;
pub const Z_UTIL_INC_3910: u32 = 3911;
pub const Z_UTIL_INC_3911: u32 = 3912;
pub const Z_UTIL_INC_3912: u32 = 3913;
pub const Z_UTIL_INC_3913: u32 = 3914;
pub const Z_UTIL_INC_3914: u32 = 3915;
pub const Z_UTIL_INC_3915: u32 = 3916;
pub const Z_UTIL_INC_3916: u32 = 3917;
pub const Z_UTIL_INC_3917: u32 = 3918;
pub const Z_UTIL_INC_3918: u32 = 3919;
pub const Z_UTIL_INC_3919: u32 = 3920;
pub const Z_UTIL_INC_3920: u32 = 3921;
pub const Z_UTIL_INC_3921: u32 = 3922;
pub const Z_UTIL_INC_3922: u32 = 3923;
pub const Z_UTIL_INC_3923: u32 = 3924;
pub const Z_UTIL_INC_3924: u32 = 3925;
pub const Z_UTIL_INC_3925: u32 = 3926;
pub const Z_UTIL_INC_3926: u32 = 3927;
pub const Z_UTIL_INC_3927: u32 = 3928;
pub const Z_UTIL_INC_3928: u32 = 3929;
pub const Z_UTIL_INC_3929: u32 = 3930;
pub const Z_UTIL_INC_3930: u32 = 3931;
pub const Z_UTIL_INC_3931: u32 = 3932;
pub const Z_UTIL_INC_3932: u32 = 3933;
pub const Z_UTIL_INC_3933: u32 = 3934;
pub const Z_UTIL_INC_3934: u32 = 3935;
pub const Z_UTIL_INC_3935: u32 = 3936;
pub const Z_UTIL_INC_3936: u32 = 3937;
pub const Z_UTIL_INC_3937: u32 = 3938;
pub const Z_UTIL_INC_3938: u32 = 3939;
pub const Z_UTIL_INC_3939: u32 = 3940;
pub const Z_UTIL_INC_3940: u32 = 3941;
pub const Z_UTIL_INC_3941: u32 = 3942;
pub const Z_UTIL_INC_3942: u32 = 3943;
pub const Z_UTIL_INC_3943: u32 = 3944;
pub const Z_UTIL_INC_3944: u32 = 3945;
pub const Z_UTIL_INC_3945: u32 = 3946;
pub const Z_UTIL_INC_3946: u32 = 3947;
pub const Z_UTIL_INC_3947: u32 = 3948;
pub const Z_UTIL_INC_3948: u32 = 3949;
pub const Z_UTIL_INC_3949: u32 = 3950;
pub const Z_UTIL_INC_3950: u32 = 3951;
pub const Z_UTIL_INC_3951: u32 = 3952;
pub const Z_UTIL_INC_3952: u32 = 3953;
pub const Z_UTIL_INC_3953: u32 = 3954;
pub const Z_UTIL_INC_3954: u32 = 3955;
pub const Z_UTIL_INC_3955: u32 = 3956;
pub const Z_UTIL_INC_3956: u32 = 3957;
pub const Z_UTIL_INC_3957: u32 = 3958;
pub const Z_UTIL_INC_3958: u32 = 3959;
pub const Z_UTIL_INC_3959: u32 = 3960;
pub const Z_UTIL_INC_3960: u32 = 3961;
pub const Z_UTIL_INC_3961: u32 = 3962;
pub const Z_UTIL_INC_3962: u32 = 3963;
pub const Z_UTIL_INC_3963: u32 = 3964;
pub const Z_UTIL_INC_3964: u32 = 3965;
pub const Z_UTIL_INC_3965: u32 = 3966;
pub const Z_UTIL_INC_3966: u32 = 3967;
pub const Z_UTIL_INC_3967: u32 = 3968;
pub const Z_UTIL_INC_3968: u32 = 3969;
pub const Z_UTIL_INC_3969: u32 = 3970;
pub const Z_UTIL_INC_3970: u32 = 3971;
pub const Z_UTIL_INC_3971: u32 = 3972;
pub const Z_UTIL_INC_3972: u32 = 3973;
pub const Z_UTIL_INC_3973: u32 = 3974;
pub const Z_UTIL_INC_3974: u32 = 3975;
pub const Z_UTIL_INC_3975: u32 = 3976;
pub const Z_UTIL_INC_3976: u32 = 3977;
pub const Z_UTIL_INC_3977: u32 = 3978;
pub const Z_UTIL_INC_3978: u32 = 3979;
pub const Z_UTIL_INC_3979: u32 = 3980;
pub const Z_UTIL_INC_3980: u32 = 3981;
pub const Z_UTIL_INC_3981: u32 = 3982;
pub const Z_UTIL_INC_3982: u32 = 3983;
pub const Z_UTIL_INC_3983: u32 = 3984;
pub const Z_UTIL_INC_3984: u32 = 3985;
pub const Z_UTIL_INC_3985: u32 = 3986;
pub const Z_UTIL_INC_3986: u32 = 3987;
pub const Z_UTIL_INC_3987: u32 = 3988;
pub const Z_UTIL_INC_3988: u32 = 3989;
pub const Z_UTIL_INC_3989: u32 = 3990;
pub const Z_UTIL_INC_3990: u32 = 3991;
pub const Z_UTIL_INC_3991: u32 = 3992;
pub const Z_UTIL_INC_3992: u32 = 3993;
pub const Z_UTIL_INC_3993: u32 = 3994;
pub const Z_UTIL_INC_3994: u32 = 3995;
pub const Z_UTIL_INC_3995: u32 = 3996;
pub const Z_UTIL_INC_3996: u32 = 3997;
pub const Z_UTIL_INC_3997: u32 = 3998;
pub const Z_UTIL_INC_3998: u32 = 3999;
pub const Z_UTIL_INC_3999: u32 = 4000;
pub const Z_UTIL_INC_4000: u32 = 4001;
pub const Z_UTIL_INC_4001: u32 = 4002;
pub const Z_UTIL_INC_4002: u32 = 4003;
pub const Z_UTIL_INC_4003: u32 = 4004;
pub const Z_UTIL_INC_4004: u32 = 4005;
pub const Z_UTIL_INC_4005: u32 = 4006;
pub const Z_UTIL_INC_4006: u32 = 4007;
pub const Z_UTIL_INC_4007: u32 = 4008;
pub const Z_UTIL_INC_4008: u32 = 4009;
pub const Z_UTIL_INC_4009: u32 = 4010;
pub const Z_UTIL_INC_4010: u32 = 4011;
pub const Z_UTIL_INC_4011: u32 = 4012;
pub const Z_UTIL_INC_4012: u32 = 4013;
pub const Z_UTIL_INC_4013: u32 = 4014;
pub const Z_UTIL_INC_4014: u32 = 4015;
pub const Z_UTIL_INC_4015: u32 = 4016;
pub const Z_UTIL_INC_4016: u32 = 4017;
pub const Z_UTIL_INC_4017: u32 = 4018;
pub const Z_UTIL_INC_4018: u32 = 4019;
pub const Z_UTIL_INC_4019: u32 = 4020;
pub const Z_UTIL_INC_4020: u32 = 4021;
pub const Z_UTIL_INC_4021: u32 = 4022;
pub const Z_UTIL_INC_4022: u32 = 4023;
pub const Z_UTIL_INC_4023: u32 = 4024;
pub const Z_UTIL_INC_4024: u32 = 4025;
pub const Z_UTIL_INC_4025: u32 = 4026;
pub const Z_UTIL_INC_4026: u32 = 4027;
pub const Z_UTIL_INC_4027: u32 = 4028;
pub const Z_UTIL_INC_4028: u32 = 4029;
pub const Z_UTIL_INC_4029: u32 = 4030;
pub const Z_UTIL_INC_4030: u32 = 4031;
pub const Z_UTIL_INC_4031: u32 = 4032;
pub const Z_UTIL_INC_4032: u32 = 4033;
pub const Z_UTIL_INC_4033: u32 = 4034;
pub const Z_UTIL_INC_4034: u32 = 4035;
pub const Z_UTIL_INC_4035: u32 = 4036;
pub const Z_UTIL_INC_4036: u32 = 4037;
pub const Z_UTIL_INC_4037: u32 = 4038;
pub const Z_UTIL_INC_4038: u32 = 4039;
pub const Z_UTIL_INC_4039: u32 = 4040;
pub const Z_UTIL_INC_4040: u32 = 4041;
pub const Z_UTIL_INC_4041: u32 = 4042;
pub const Z_UTIL_INC_4042: u32 = 4043;
pub const Z_UTIL_INC_4043: u32 = 4044;
pub const Z_UTIL_INC_4044: u32 = 4045;
pub const Z_UTIL_INC_4045: u32 = 4046;
pub const Z_UTIL_INC_4046: u32 = 4047;
pub const Z_UTIL_INC_4047: u32 = 4048;
pub const Z_UTIL_INC_4048: u32 = 4049;
pub const Z_UTIL_INC_4049: u32 = 4050;
pub const Z_UTIL_INC_4050: u32 = 4051;
pub const Z_UTIL_INC_4051: u32 = 4052;
pub const Z_UTIL_INC_4052: u32 = 4053;
pub const Z_UTIL_INC_4053: u32 = 4054;
pub const Z_UTIL_INC_4054: u32 = 4055;
pub const Z_UTIL_INC_4055: u32 = 4056;
pub const Z_UTIL_INC_4056: u32 = 4057;
pub const Z_UTIL_INC_4057: u32 = 4058;
pub const Z_UTIL_INC_4058: u32 = 4059;
pub const Z_UTIL_INC_4059: u32 = 4060;
pub const Z_UTIL_INC_4060: u32 = 4061;
pub const Z_UTIL_INC_4061: u32 = 4062;
pub const Z_UTIL_INC_4062: u32 = 4063;
pub const Z_UTIL_INC_4063: u32 = 4064;
pub const Z_UTIL_INC_4064: u32 = 4065;
pub const Z_UTIL_INC_4065: u32 = 4066;
pub const Z_UTIL_INC_4066: u32 = 4067;
pub const Z_UTIL_INC_4067: u32 = 4068;
pub const Z_UTIL_INC_4068: u32 = 4069;
pub const Z_UTIL_INC_4069: u32 = 4070;
pub const Z_UTIL_INC_4070: u32 = 4071;
pub const Z_UTIL_INC_4071: u32 = 4072;
pub const Z_UTIL_INC_4072: u32 = 4073;
pub const Z_UTIL_INC_4073: u32 = 4074;
pub const Z_UTIL_INC_4074: u32 = 4075;
pub const Z_UTIL_INC_4075: u32 = 4076;
pub const Z_UTIL_INC_4076: u32 = 4077;
pub const Z_UTIL_INC_4077: u32 = 4078;
pub const Z_UTIL_INC_4078: u32 = 4079;
pub const Z_UTIL_INC_4079: u32 = 4080;
pub const Z_UTIL_INC_4080: u32 = 4081;
pub const Z_UTIL_INC_4081: u32 = 4082;
pub const Z_UTIL_INC_4082: u32 = 4083;
pub const Z_UTIL_INC_4083: u32 = 4084;
pub const Z_UTIL_INC_4084: u32 = 4085;
pub const Z_UTIL_INC_4085: u32 = 4086;
pub const Z_UTIL_INC_4086: u32 = 4087;
pub const Z_UTIL_INC_4087: u32 = 4088;
pub const Z_UTIL_INC_4088: u32 = 4089;
pub const Z_UTIL_INC_4089: u32 = 4090;
pub const Z_UTIL_INC_4090: u32 = 4091;
pub const Z_UTIL_INC_4091: u32 = 4092;
pub const Z_UTIL_INC_4092: u32 = 4093;
pub const Z_UTIL_INC_4093: u32 = 4094;
pub const Z_UTIL_INC_4094: u32 = 4095;
pub const Z_UTIL_INC_4095: u32 = 4096;
pub const Z_UTIL_INC_4096: u32 = 4097;
pub const Z_UTIL_DEC_0: u32 = 0;
pub const Z_UTIL_DEC_1: u32 = 0;
pub const Z_UTIL_DEC_2: u32 = 1;
pub const Z_UTIL_DEC_3: u32 = 2;
pub const Z_UTIL_DEC_4: u32 = 3;
pub const Z_UTIL_DEC_5: u32 = 4;
pub const Z_UTIL_DEC_6: u32 = 5;
pub const Z_UTIL_DEC_7: u32 = 6;
pub const Z_UTIL_DEC_8: u32 = 7;
pub const Z_UTIL_DEC_9: u32 = 8;
pub const Z_UTIL_DEC_10: u32 = 9;
pub const Z_UTIL_DEC_11: u32 = 10;
pub const Z_UTIL_DEC_12: u32 = 11;
pub const Z_UTIL_DEC_13: u32 = 12;
pub const Z_UTIL_DEC_14: u32 = 13;
pub const Z_UTIL_DEC_15: u32 = 14;
pub const Z_UTIL_DEC_16: u32 = 15;
pub const Z_UTIL_DEC_17: u32 = 16;
pub const Z_UTIL_DEC_18: u32 = 17;
pub const Z_UTIL_DEC_19: u32 = 18;
pub const Z_UTIL_DEC_20: u32 = 19;
pub const Z_UTIL_DEC_21: u32 = 20;
pub const Z_UTIL_DEC_22: u32 = 21;
pub const Z_UTIL_DEC_23: u32 = 22;
pub const Z_UTIL_DEC_24: u32 = 23;
pub const Z_UTIL_DEC_25: u32 = 24;
pub const Z_UTIL_DEC_26: u32 = 25;
pub const Z_UTIL_DEC_27: u32 = 26;
pub const Z_UTIL_DEC_28: u32 = 27;
pub const Z_UTIL_DEC_29: u32 = 28;
pub const Z_UTIL_DEC_30: u32 = 29;
pub const Z_UTIL_DEC_31: u32 = 30;
pub const Z_UTIL_DEC_32: u32 = 31;
pub const Z_UTIL_DEC_33: u32 = 32;
pub const Z_UTIL_DEC_34: u32 = 33;
pub const Z_UTIL_DEC_35: u32 = 34;
pub const Z_UTIL_DEC_36: u32 = 35;
pub const Z_UTIL_DEC_37: u32 = 36;
pub const Z_UTIL_DEC_38: u32 = 37;
pub const Z_UTIL_DEC_39: u32 = 38;
pub const Z_UTIL_DEC_40: u32 = 39;
pub const Z_UTIL_DEC_41: u32 = 40;
pub const Z_UTIL_DEC_42: u32 = 41;
pub const Z_UTIL_DEC_43: u32 = 42;
pub const Z_UTIL_DEC_44: u32 = 43;
pub const Z_UTIL_DEC_45: u32 = 44;
pub const Z_UTIL_DEC_46: u32 = 45;
pub const Z_UTIL_DEC_47: u32 = 46;
pub const Z_UTIL_DEC_48: u32 = 47;
pub const Z_UTIL_DEC_49: u32 = 48;
pub const Z_UTIL_DEC_50: u32 = 49;
pub const Z_UTIL_DEC_51: u32 = 50;
pub const Z_UTIL_DEC_52: u32 = 51;
pub const Z_UTIL_DEC_53: u32 = 52;
pub const Z_UTIL_DEC_54: u32 = 53;
pub const Z_UTIL_DEC_55: u32 = 54;
pub const Z_UTIL_DEC_56: u32 = 55;
pub const Z_UTIL_DEC_57: u32 = 56;
pub const Z_UTIL_DEC_58: u32 = 57;
pub const Z_UTIL_DEC_59: u32 = 58;
pub const Z_UTIL_DEC_60: u32 = 59;
pub const Z_UTIL_DEC_61: u32 = 60;
pub const Z_UTIL_DEC_62: u32 = 61;
pub const Z_UTIL_DEC_63: u32 = 62;
pub const Z_UTIL_DEC_64: u32 = 63;
pub const Z_UTIL_DEC_65: u32 = 64;
pub const Z_UTIL_DEC_66: u32 = 65;
pub const Z_UTIL_DEC_67: u32 = 66;
pub const Z_UTIL_DEC_68: u32 = 67;
pub const Z_UTIL_DEC_69: u32 = 68;
pub const Z_UTIL_DEC_70: u32 = 69;
pub const Z_UTIL_DEC_71: u32 = 70;
pub const Z_UTIL_DEC_72: u32 = 71;
pub const Z_UTIL_DEC_73: u32 = 72;
pub const Z_UTIL_DEC_74: u32 = 73;
pub const Z_UTIL_DEC_75: u32 = 74;
pub const Z_UTIL_DEC_76: u32 = 75;
pub const Z_UTIL_DEC_77: u32 = 76;
pub const Z_UTIL_DEC_78: u32 = 77;
pub const Z_UTIL_DEC_79: u32 = 78;
pub const Z_UTIL_DEC_80: u32 = 79;
pub const Z_UTIL_DEC_81: u32 = 80;
pub const Z_UTIL_DEC_82: u32 = 81;
pub const Z_UTIL_DEC_83: u32 = 82;
pub const Z_UTIL_DEC_84: u32 = 83;
pub const Z_UTIL_DEC_85: u32 = 84;
pub const Z_UTIL_DEC_86: u32 = 85;
pub const Z_UTIL_DEC_87: u32 = 86;
pub const Z_UTIL_DEC_88: u32 = 87;
pub const Z_UTIL_DEC_89: u32 = 88;
pub const Z_UTIL_DEC_90: u32 = 89;
pub const Z_UTIL_DEC_91: u32 = 90;
pub const Z_UTIL_DEC_92: u32 = 91;
pub const Z_UTIL_DEC_93: u32 = 92;
pub const Z_UTIL_DEC_94: u32 = 93;
pub const Z_UTIL_DEC_95: u32 = 94;
pub const Z_UTIL_DEC_96: u32 = 95;
pub const Z_UTIL_DEC_97: u32 = 96;
pub const Z_UTIL_DEC_98: u32 = 97;
pub const Z_UTIL_DEC_99: u32 = 98;
pub const Z_UTIL_DEC_100: u32 = 99;
pub const Z_UTIL_DEC_101: u32 = 100;
pub const Z_UTIL_DEC_102: u32 = 101;
pub const Z_UTIL_DEC_103: u32 = 102;
pub const Z_UTIL_DEC_104: u32 = 103;
pub const Z_UTIL_DEC_105: u32 = 104;
pub const Z_UTIL_DEC_106: u32 = 105;
pub const Z_UTIL_DEC_107: u32 = 106;
pub const Z_UTIL_DEC_108: u32 = 107;
pub const Z_UTIL_DEC_109: u32 = 108;
pub const Z_UTIL_DEC_110: u32 = 109;
pub const Z_UTIL_DEC_111: u32 = 110;
pub const Z_UTIL_DEC_112: u32 = 111;
pub const Z_UTIL_DEC_113: u32 = 112;
pub const Z_UTIL_DEC_114: u32 = 113;
pub const Z_UTIL_DEC_115: u32 = 114;
pub const Z_UTIL_DEC_116: u32 = 115;
pub const Z_UTIL_DEC_117: u32 = 116;
pub const Z_UTIL_DEC_118: u32 = 117;
pub const Z_UTIL_DEC_119: u32 = 118;
pub const Z_UTIL_DEC_120: u32 = 119;
pub const Z_UTIL_DEC_121: u32 = 120;
pub const Z_UTIL_DEC_122: u32 = 121;
pub const Z_UTIL_DEC_123: u32 = 122;
pub const Z_UTIL_DEC_124: u32 = 123;
pub const Z_UTIL_DEC_125: u32 = 124;
pub const Z_UTIL_DEC_126: u32 = 125;
pub const Z_UTIL_DEC_127: u32 = 126;
pub const Z_UTIL_DEC_128: u32 = 127;
pub const Z_UTIL_DEC_129: u32 = 128;
pub const Z_UTIL_DEC_130: u32 = 129;
pub const Z_UTIL_DEC_131: u32 = 130;
pub const Z_UTIL_DEC_132: u32 = 131;
pub const Z_UTIL_DEC_133: u32 = 132;
pub const Z_UTIL_DEC_134: u32 = 133;
pub const Z_UTIL_DEC_135: u32 = 134;
pub const Z_UTIL_DEC_136: u32 = 135;
pub const Z_UTIL_DEC_137: u32 = 136;
pub const Z_UTIL_DEC_138: u32 = 137;
pub const Z_UTIL_DEC_139: u32 = 138;
pub const Z_UTIL_DEC_140: u32 = 139;
pub const Z_UTIL_DEC_141: u32 = 140;
pub const Z_UTIL_DEC_142: u32 = 141;
pub const Z_UTIL_DEC_143: u32 = 142;
pub const Z_UTIL_DEC_144: u32 = 143;
pub const Z_UTIL_DEC_145: u32 = 144;
pub const Z_UTIL_DEC_146: u32 = 145;
pub const Z_UTIL_DEC_147: u32 = 146;
pub const Z_UTIL_DEC_148: u32 = 147;
pub const Z_UTIL_DEC_149: u32 = 148;
pub const Z_UTIL_DEC_150: u32 = 149;
pub const Z_UTIL_DEC_151: u32 = 150;
pub const Z_UTIL_DEC_152: u32 = 151;
pub const Z_UTIL_DEC_153: u32 = 152;
pub const Z_UTIL_DEC_154: u32 = 153;
pub const Z_UTIL_DEC_155: u32 = 154;
pub const Z_UTIL_DEC_156: u32 = 155;
pub const Z_UTIL_DEC_157: u32 = 156;
pub const Z_UTIL_DEC_158: u32 = 157;
pub const Z_UTIL_DEC_159: u32 = 158;
pub const Z_UTIL_DEC_160: u32 = 159;
pub const Z_UTIL_DEC_161: u32 = 160;
pub const Z_UTIL_DEC_162: u32 = 161;
pub const Z_UTIL_DEC_163: u32 = 162;
pub const Z_UTIL_DEC_164: u32 = 163;
pub const Z_UTIL_DEC_165: u32 = 164;
pub const Z_UTIL_DEC_166: u32 = 165;
pub const Z_UTIL_DEC_167: u32 = 166;
pub const Z_UTIL_DEC_168: u32 = 167;
pub const Z_UTIL_DEC_169: u32 = 168;
pub const Z_UTIL_DEC_170: u32 = 169;
pub const Z_UTIL_DEC_171: u32 = 170;
pub const Z_UTIL_DEC_172: u32 = 171;
pub const Z_UTIL_DEC_173: u32 = 172;
pub const Z_UTIL_DEC_174: u32 = 173;
pub const Z_UTIL_DEC_175: u32 = 174;
pub const Z_UTIL_DEC_176: u32 = 175;
pub const Z_UTIL_DEC_177: u32 = 176;
pub const Z_UTIL_DEC_178: u32 = 177;
pub const Z_UTIL_DEC_179: u32 = 178;
pub const Z_UTIL_DEC_180: u32 = 179;
pub const Z_UTIL_DEC_181: u32 = 180;
pub const Z_UTIL_DEC_182: u32 = 181;
pub const Z_UTIL_DEC_183: u32 = 182;
pub const Z_UTIL_DEC_184: u32 = 183;
pub const Z_UTIL_DEC_185: u32 = 184;
pub const Z_UTIL_DEC_186: u32 = 185;
pub const Z_UTIL_DEC_187: u32 = 186;
pub const Z_UTIL_DEC_188: u32 = 187;
pub const Z_UTIL_DEC_189: u32 = 188;
pub const Z_UTIL_DEC_190: u32 = 189;
pub const Z_UTIL_DEC_191: u32 = 190;
pub const Z_UTIL_DEC_192: u32 = 191;
pub const Z_UTIL_DEC_193: u32 = 192;
pub const Z_UTIL_DEC_194: u32 = 193;
pub const Z_UTIL_DEC_195: u32 = 194;
pub const Z_UTIL_DEC_196: u32 = 195;
pub const Z_UTIL_DEC_197: u32 = 196;
pub const Z_UTIL_DEC_198: u32 = 197;
pub const Z_UTIL_DEC_199: u32 = 198;
pub const Z_UTIL_DEC_200: u32 = 199;
pub const Z_UTIL_DEC_201: u32 = 200;
pub const Z_UTIL_DEC_202: u32 = 201;
pub const Z_UTIL_DEC_203: u32 = 202;
pub const Z_UTIL_DEC_204: u32 = 203;
pub const Z_UTIL_DEC_205: u32 = 204;
pub const Z_UTIL_DEC_206: u32 = 205;
pub const Z_UTIL_DEC_207: u32 = 206;
pub const Z_UTIL_DEC_208: u32 = 207;
pub const Z_UTIL_DEC_209: u32 = 208;
pub const Z_UTIL_DEC_210: u32 = 209;
pub const Z_UTIL_DEC_211: u32 = 210;
pub const Z_UTIL_DEC_212: u32 = 211;
pub const Z_UTIL_DEC_213: u32 = 212;
pub const Z_UTIL_DEC_214: u32 = 213;
pub const Z_UTIL_DEC_215: u32 = 214;
pub const Z_UTIL_DEC_216: u32 = 215;
pub const Z_UTIL_DEC_217: u32 = 216;
pub const Z_UTIL_DEC_218: u32 = 217;
pub const Z_UTIL_DEC_219: u32 = 218;
pub const Z_UTIL_DEC_220: u32 = 219;
pub const Z_UTIL_DEC_221: u32 = 220;
pub const Z_UTIL_DEC_222: u32 = 221;
pub const Z_UTIL_DEC_223: u32 = 222;
pub const Z_UTIL_DEC_224: u32 = 223;
pub const Z_UTIL_DEC_225: u32 = 224;
pub const Z_UTIL_DEC_226: u32 = 225;
pub const Z_UTIL_DEC_227: u32 = 226;
pub const Z_UTIL_DEC_228: u32 = 227;
pub const Z_UTIL_DEC_229: u32 = 228;
pub const Z_UTIL_DEC_230: u32 = 229;
pub const Z_UTIL_DEC_231: u32 = 230;
pub const Z_UTIL_DEC_232: u32 = 231;
pub const Z_UTIL_DEC_233: u32 = 232;
pub const Z_UTIL_DEC_234: u32 = 233;
pub const Z_UTIL_DEC_235: u32 = 234;
pub const Z_UTIL_DEC_236: u32 = 235;
pub const Z_UTIL_DEC_237: u32 = 236;
pub const Z_UTIL_DEC_238: u32 = 237;
pub const Z_UTIL_DEC_239: u32 = 238;
pub const Z_UTIL_DEC_240: u32 = 239;
pub const Z_UTIL_DEC_241: u32 = 240;
pub const Z_UTIL_DEC_242: u32 = 241;
pub const Z_UTIL_DEC_243: u32 = 242;
pub const Z_UTIL_DEC_244: u32 = 243;
pub const Z_UTIL_DEC_245: u32 = 244;
pub const Z_UTIL_DEC_246: u32 = 245;
pub const Z_UTIL_DEC_247: u32 = 246;
pub const Z_UTIL_DEC_248: u32 = 247;
pub const Z_UTIL_DEC_249: u32 = 248;
pub const Z_UTIL_DEC_250: u32 = 249;
pub const Z_UTIL_DEC_251: u32 = 250;
pub const Z_UTIL_DEC_252: u32 = 251;
pub const Z_UTIL_DEC_253: u32 = 252;
pub const Z_UTIL_DEC_254: u32 = 253;
pub const Z_UTIL_DEC_255: u32 = 254;
pub const Z_UTIL_DEC_256: u32 = 255;
pub const Z_UTIL_DEC_257: u32 = 256;
pub const Z_UTIL_DEC_258: u32 = 257;
pub const Z_UTIL_DEC_259: u32 = 258;
pub const Z_UTIL_DEC_260: u32 = 259;
pub const Z_UTIL_DEC_261: u32 = 260;
pub const Z_UTIL_DEC_262: u32 = 261;
pub const Z_UTIL_DEC_263: u32 = 262;
pub const Z_UTIL_DEC_264: u32 = 263;
pub const Z_UTIL_DEC_265: u32 = 264;
pub const Z_UTIL_DEC_266: u32 = 265;
pub const Z_UTIL_DEC_267: u32 = 266;
pub const Z_UTIL_DEC_268: u32 = 267;
pub const Z_UTIL_DEC_269: u32 = 268;
pub const Z_UTIL_DEC_270: u32 = 269;
pub const Z_UTIL_DEC_271: u32 = 270;
pub const Z_UTIL_DEC_272: u32 = 271;
pub const Z_UTIL_DEC_273: u32 = 272;
pub const Z_UTIL_DEC_274: u32 = 273;
pub const Z_UTIL_DEC_275: u32 = 274;
pub const Z_UTIL_DEC_276: u32 = 275;
pub const Z_UTIL_DEC_277: u32 = 276;
pub const Z_UTIL_DEC_278: u32 = 277;
pub const Z_UTIL_DEC_279: u32 = 278;
pub const Z_UTIL_DEC_280: u32 = 279;
pub const Z_UTIL_DEC_281: u32 = 280;
pub const Z_UTIL_DEC_282: u32 = 281;
pub const Z_UTIL_DEC_283: u32 = 282;
pub const Z_UTIL_DEC_284: u32 = 283;
pub const Z_UTIL_DEC_285: u32 = 284;
pub const Z_UTIL_DEC_286: u32 = 285;
pub const Z_UTIL_DEC_287: u32 = 286;
pub const Z_UTIL_DEC_288: u32 = 287;
pub const Z_UTIL_DEC_289: u32 = 288;
pub const Z_UTIL_DEC_290: u32 = 289;
pub const Z_UTIL_DEC_291: u32 = 290;
pub const Z_UTIL_DEC_292: u32 = 291;
pub const Z_UTIL_DEC_293: u32 = 292;
pub const Z_UTIL_DEC_294: u32 = 293;
pub const Z_UTIL_DEC_295: u32 = 294;
pub const Z_UTIL_DEC_296: u32 = 295;
pub const Z_UTIL_DEC_297: u32 = 296;
pub const Z_UTIL_DEC_298: u32 = 297;
pub const Z_UTIL_DEC_299: u32 = 298;
pub const Z_UTIL_DEC_300: u32 = 299;
pub const Z_UTIL_DEC_301: u32 = 300;
pub const Z_UTIL_DEC_302: u32 = 301;
pub const Z_UTIL_DEC_303: u32 = 302;
pub const Z_UTIL_DEC_304: u32 = 303;
pub const Z_UTIL_DEC_305: u32 = 304;
pub const Z_UTIL_DEC_306: u32 = 305;
pub const Z_UTIL_DEC_307: u32 = 306;
pub const Z_UTIL_DEC_308: u32 = 307;
pub const Z_UTIL_DEC_309: u32 = 308;
pub const Z_UTIL_DEC_310: u32 = 309;
pub const Z_UTIL_DEC_311: u32 = 310;
pub const Z_UTIL_DEC_312: u32 = 311;
pub const Z_UTIL_DEC_313: u32 = 312;
pub const Z_UTIL_DEC_314: u32 = 313;
pub const Z_UTIL_DEC_315: u32 = 314;
pub const Z_UTIL_DEC_316: u32 = 315;
pub const Z_UTIL_DEC_317: u32 = 316;
pub const Z_UTIL_DEC_318: u32 = 317;
pub const Z_UTIL_DEC_319: u32 = 318;
pub const Z_UTIL_DEC_320: u32 = 319;
pub const Z_UTIL_DEC_321: u32 = 320;
pub const Z_UTIL_DEC_322: u32 = 321;
pub const Z_UTIL_DEC_323: u32 = 322;
pub const Z_UTIL_DEC_324: u32 = 323;
pub const Z_UTIL_DEC_325: u32 = 324;
pub const Z_UTIL_DEC_326: u32 = 325;
pub const Z_UTIL_DEC_327: u32 = 326;
pub const Z_UTIL_DEC_328: u32 = 327;
pub const Z_UTIL_DEC_329: u32 = 328;
pub const Z_UTIL_DEC_330: u32 = 329;
pub const Z_UTIL_DEC_331: u32 = 330;
pub const Z_UTIL_DEC_332: u32 = 331;
pub const Z_UTIL_DEC_333: u32 = 332;
pub const Z_UTIL_DEC_334: u32 = 333;
pub const Z_UTIL_DEC_335: u32 = 334;
pub const Z_UTIL_DEC_336: u32 = 335;
pub const Z_UTIL_DEC_337: u32 = 336;
pub const Z_UTIL_DEC_338: u32 = 337;
pub const Z_UTIL_DEC_339: u32 = 338;
pub const Z_UTIL_DEC_340: u32 = 339;
pub const Z_UTIL_DEC_341: u32 = 340;
pub const Z_UTIL_DEC_342: u32 = 341;
pub const Z_UTIL_DEC_343: u32 = 342;
pub const Z_UTIL_DEC_344: u32 = 343;
pub const Z_UTIL_DEC_345: u32 = 344;
pub const Z_UTIL_DEC_346: u32 = 345;
pub const Z_UTIL_DEC_347: u32 = 346;
pub const Z_UTIL_DEC_348: u32 = 347;
pub const Z_UTIL_DEC_349: u32 = 348;
pub const Z_UTIL_DEC_350: u32 = 349;
pub const Z_UTIL_DEC_351: u32 = 350;
pub const Z_UTIL_DEC_352: u32 = 351;
pub const Z_UTIL_DEC_353: u32 = 352;
pub const Z_UTIL_DEC_354: u32 = 353;
pub const Z_UTIL_DEC_355: u32 = 354;
pub const Z_UTIL_DEC_356: u32 = 355;
pub const Z_UTIL_DEC_357: u32 = 356;
pub const Z_UTIL_DEC_358: u32 = 357;
pub const Z_UTIL_DEC_359: u32 = 358;
pub const Z_UTIL_DEC_360: u32 = 359;
pub const Z_UTIL_DEC_361: u32 = 360;
pub const Z_UTIL_DEC_362: u32 = 361;
pub const Z_UTIL_DEC_363: u32 = 362;
pub const Z_UTIL_DEC_364: u32 = 363;
pub const Z_UTIL_DEC_365: u32 = 364;
pub const Z_UTIL_DEC_366: u32 = 365;
pub const Z_UTIL_DEC_367: u32 = 366;
pub const Z_UTIL_DEC_368: u32 = 367;
pub const Z_UTIL_DEC_369: u32 = 368;
pub const Z_UTIL_DEC_370: u32 = 369;
pub const Z_UTIL_DEC_371: u32 = 370;
pub const Z_UTIL_DEC_372: u32 = 371;
pub const Z_UTIL_DEC_373: u32 = 372;
pub const Z_UTIL_DEC_374: u32 = 373;
pub const Z_UTIL_DEC_375: u32 = 374;
pub const Z_UTIL_DEC_376: u32 = 375;
pub const Z_UTIL_DEC_377: u32 = 376;
pub const Z_UTIL_DEC_378: u32 = 377;
pub const Z_UTIL_DEC_379: u32 = 378;
pub const Z_UTIL_DEC_380: u32 = 379;
pub const Z_UTIL_DEC_381: u32 = 380;
pub const Z_UTIL_DEC_382: u32 = 381;
pub const Z_UTIL_DEC_383: u32 = 382;
pub const Z_UTIL_DEC_384: u32 = 383;
pub const Z_UTIL_DEC_385: u32 = 384;
pub const Z_UTIL_DEC_386: u32 = 385;
pub const Z_UTIL_DEC_387: u32 = 386;
pub const Z_UTIL_DEC_388: u32 = 387;
pub const Z_UTIL_DEC_389: u32 = 388;
pub const Z_UTIL_DEC_390: u32 = 389;
pub const Z_UTIL_DEC_391: u32 = 390;
pub const Z_UTIL_DEC_392: u32 = 391;
pub const Z_UTIL_DEC_393: u32 = 392;
pub const Z_UTIL_DEC_394: u32 = 393;
pub const Z_UTIL_DEC_395: u32 = 394;
pub const Z_UTIL_DEC_396: u32 = 395;
pub const Z_UTIL_DEC_397: u32 = 396;
pub const Z_UTIL_DEC_398: u32 = 397;
pub const Z_UTIL_DEC_399: u32 = 398;
pub const Z_UTIL_DEC_400: u32 = 399;
pub const Z_UTIL_DEC_401: u32 = 400;
pub const Z_UTIL_DEC_402: u32 = 401;
pub const Z_UTIL_DEC_403: u32 = 402;
pub const Z_UTIL_DEC_404: u32 = 403;
pub const Z_UTIL_DEC_405: u32 = 404;
pub const Z_UTIL_DEC_406: u32 = 405;
pub const Z_UTIL_DEC_407: u32 = 406;
pub const Z_UTIL_DEC_408: u32 = 407;
pub const Z_UTIL_DEC_409: u32 = 408;
pub const Z_UTIL_DEC_410: u32 = 409;
pub const Z_UTIL_DEC_411: u32 = 410;
pub const Z_UTIL_DEC_412: u32 = 411;
pub const Z_UTIL_DEC_413: u32 = 412;
pub const Z_UTIL_DEC_414: u32 = 413;
pub const Z_UTIL_DEC_415: u32 = 414;
pub const Z_UTIL_DEC_416: u32 = 415;
pub const Z_UTIL_DEC_417: u32 = 416;
pub const Z_UTIL_DEC_418: u32 = 417;
pub const Z_UTIL_DEC_419: u32 = 418;
pub const Z_UTIL_DEC_420: u32 = 419;
pub const Z_UTIL_DEC_421: u32 = 420;
pub const Z_UTIL_DEC_422: u32 = 421;
pub const Z_UTIL_DEC_423: u32 = 422;
pub const Z_UTIL_DEC_424: u32 = 423;
pub const Z_UTIL_DEC_425: u32 = 424;
pub const Z_UTIL_DEC_426: u32 = 425;
pub const Z_UTIL_DEC_427: u32 = 426;
pub const Z_UTIL_DEC_428: u32 = 427;
pub const Z_UTIL_DEC_429: u32 = 428;
pub const Z_UTIL_DEC_430: u32 = 429;
pub const Z_UTIL_DEC_431: u32 = 430;
pub const Z_UTIL_DEC_432: u32 = 431;
pub const Z_UTIL_DEC_433: u32 = 432;
pub const Z_UTIL_DEC_434: u32 = 433;
pub const Z_UTIL_DEC_435: u32 = 434;
pub const Z_UTIL_DEC_436: u32 = 435;
pub const Z_UTIL_DEC_437: u32 = 436;
pub const Z_UTIL_DEC_438: u32 = 437;
pub const Z_UTIL_DEC_439: u32 = 438;
pub const Z_UTIL_DEC_440: u32 = 439;
pub const Z_UTIL_DEC_441: u32 = 440;
pub const Z_UTIL_DEC_442: u32 = 441;
pub const Z_UTIL_DEC_443: u32 = 442;
pub const Z_UTIL_DEC_444: u32 = 443;
pub const Z_UTIL_DEC_445: u32 = 444;
pub const Z_UTIL_DEC_446: u32 = 445;
pub const Z_UTIL_DEC_447: u32 = 446;
pub const Z_UTIL_DEC_448: u32 = 447;
pub const Z_UTIL_DEC_449: u32 = 448;
pub const Z_UTIL_DEC_450: u32 = 449;
pub const Z_UTIL_DEC_451: u32 = 450;
pub const Z_UTIL_DEC_452: u32 = 451;
pub const Z_UTIL_DEC_453: u32 = 452;
pub const Z_UTIL_DEC_454: u32 = 453;
pub const Z_UTIL_DEC_455: u32 = 454;
pub const Z_UTIL_DEC_456: u32 = 455;
pub const Z_UTIL_DEC_457: u32 = 456;
pub const Z_UTIL_DEC_458: u32 = 457;
pub const Z_UTIL_DEC_459: u32 = 458;
pub const Z_UTIL_DEC_460: u32 = 459;
pub const Z_UTIL_DEC_461: u32 = 460;
pub const Z_UTIL_DEC_462: u32 = 461;
pub const Z_UTIL_DEC_463: u32 = 462;
pub const Z_UTIL_DEC_464: u32 = 463;
pub const Z_UTIL_DEC_465: u32 = 464;
pub const Z_UTIL_DEC_466: u32 = 465;
pub const Z_UTIL_DEC_467: u32 = 466;
pub const Z_UTIL_DEC_468: u32 = 467;
pub const Z_UTIL_DEC_469: u32 = 468;
pub const Z_UTIL_DEC_470: u32 = 469;
pub const Z_UTIL_DEC_471: u32 = 470;
pub const Z_UTIL_DEC_472: u32 = 471;
pub const Z_UTIL_DEC_473: u32 = 472;
pub const Z_UTIL_DEC_474: u32 = 473;
pub const Z_UTIL_DEC_475: u32 = 474;
pub const Z_UTIL_DEC_476: u32 = 475;
pub const Z_UTIL_DEC_477: u32 = 476;
pub const Z_UTIL_DEC_478: u32 = 477;
pub const Z_UTIL_DEC_479: u32 = 478;
pub const Z_UTIL_DEC_480: u32 = 479;
pub const Z_UTIL_DEC_481: u32 = 480;
pub const Z_UTIL_DEC_482: u32 = 481;
pub const Z_UTIL_DEC_483: u32 = 482;
pub const Z_UTIL_DEC_484: u32 = 483;
pub const Z_UTIL_DEC_485: u32 = 484;
pub const Z_UTIL_DEC_486: u32 = 485;
pub const Z_UTIL_DEC_487: u32 = 486;
pub const Z_UTIL_DEC_488: u32 = 487;
pub const Z_UTIL_DEC_489: u32 = 488;
pub const Z_UTIL_DEC_490: u32 = 489;
pub const Z_UTIL_DEC_491: u32 = 490;
pub const Z_UTIL_DEC_492: u32 = 491;
pub const Z_UTIL_DEC_493: u32 = 492;
pub const Z_UTIL_DEC_494: u32 = 493;
pub const Z_UTIL_DEC_495: u32 = 494;
pub const Z_UTIL_DEC_496: u32 = 495;
pub const Z_UTIL_DEC_497: u32 = 496;
pub const Z_UTIL_DEC_498: u32 = 497;
pub const Z_UTIL_DEC_499: u32 = 498;
pub const Z_UTIL_DEC_500: u32 = 499;
pub const Z_UTIL_DEC_501: u32 = 500;
pub const Z_UTIL_DEC_502: u32 = 501;
pub const Z_UTIL_DEC_503: u32 = 502;
pub const Z_UTIL_DEC_504: u32 = 503;
pub const Z_UTIL_DEC_505: u32 = 504;
pub const Z_UTIL_DEC_506: u32 = 505;
pub const Z_UTIL_DEC_507: u32 = 506;
pub const Z_UTIL_DEC_508: u32 = 507;
pub const Z_UTIL_DEC_509: u32 = 508;
pub const Z_UTIL_DEC_510: u32 = 509;
pub const Z_UTIL_DEC_511: u32 = 510;
pub const Z_UTIL_DEC_512: u32 = 511;
pub const Z_UTIL_DEC_513: u32 = 512;
pub const Z_UTIL_DEC_514: u32 = 513;
pub const Z_UTIL_DEC_515: u32 = 514;
pub const Z_UTIL_DEC_516: u32 = 515;
pub const Z_UTIL_DEC_517: u32 = 516;
pub const Z_UTIL_DEC_518: u32 = 517;
pub const Z_UTIL_DEC_519: u32 = 518;
pub const Z_UTIL_DEC_520: u32 = 519;
pub const Z_UTIL_DEC_521: u32 = 520;
pub const Z_UTIL_DEC_522: u32 = 521;
pub const Z_UTIL_DEC_523: u32 = 522;
pub const Z_UTIL_DEC_524: u32 = 523;
pub const Z_UTIL_DEC_525: u32 = 524;
pub const Z_UTIL_DEC_526: u32 = 525;
pub const Z_UTIL_DEC_527: u32 = 526;
pub const Z_UTIL_DEC_528: u32 = 527;
pub const Z_UTIL_DEC_529: u32 = 528;
pub const Z_UTIL_DEC_530: u32 = 529;
pub const Z_UTIL_DEC_531: u32 = 530;
pub const Z_UTIL_DEC_532: u32 = 531;
pub const Z_UTIL_DEC_533: u32 = 532;
pub const Z_UTIL_DEC_534: u32 = 533;
pub const Z_UTIL_DEC_535: u32 = 534;
pub const Z_UTIL_DEC_536: u32 = 535;
pub const Z_UTIL_DEC_537: u32 = 536;
pub const Z_UTIL_DEC_538: u32 = 537;
pub const Z_UTIL_DEC_539: u32 = 538;
pub const Z_UTIL_DEC_540: u32 = 539;
pub const Z_UTIL_DEC_541: u32 = 540;
pub const Z_UTIL_DEC_542: u32 = 541;
pub const Z_UTIL_DEC_543: u32 = 542;
pub const Z_UTIL_DEC_544: u32 = 543;
pub const Z_UTIL_DEC_545: u32 = 544;
pub const Z_UTIL_DEC_546: u32 = 545;
pub const Z_UTIL_DEC_547: u32 = 546;
pub const Z_UTIL_DEC_548: u32 = 547;
pub const Z_UTIL_DEC_549: u32 = 548;
pub const Z_UTIL_DEC_550: u32 = 549;
pub const Z_UTIL_DEC_551: u32 = 550;
pub const Z_UTIL_DEC_552: u32 = 551;
pub const Z_UTIL_DEC_553: u32 = 552;
pub const Z_UTIL_DEC_554: u32 = 553;
pub const Z_UTIL_DEC_555: u32 = 554;
pub const Z_UTIL_DEC_556: u32 = 555;
pub const Z_UTIL_DEC_557: u32 = 556;
pub const Z_UTIL_DEC_558: u32 = 557;
pub const Z_UTIL_DEC_559: u32 = 558;
pub const Z_UTIL_DEC_560: u32 = 559;
pub const Z_UTIL_DEC_561: u32 = 560;
pub const Z_UTIL_DEC_562: u32 = 561;
pub const Z_UTIL_DEC_563: u32 = 562;
pub const Z_UTIL_DEC_564: u32 = 563;
pub const Z_UTIL_DEC_565: u32 = 564;
pub const Z_UTIL_DEC_566: u32 = 565;
pub const Z_UTIL_DEC_567: u32 = 566;
pub const Z_UTIL_DEC_568: u32 = 567;
pub const Z_UTIL_DEC_569: u32 = 568;
pub const Z_UTIL_DEC_570: u32 = 569;
pub const Z_UTIL_DEC_571: u32 = 570;
pub const Z_UTIL_DEC_572: u32 = 571;
pub const Z_UTIL_DEC_573: u32 = 572;
pub const Z_UTIL_DEC_574: u32 = 573;
pub const Z_UTIL_DEC_575: u32 = 574;
pub const Z_UTIL_DEC_576: u32 = 575;
pub const Z_UTIL_DEC_577: u32 = 576;
pub const Z_UTIL_DEC_578: u32 = 577;
pub const Z_UTIL_DEC_579: u32 = 578;
pub const Z_UTIL_DEC_580: u32 = 579;
pub const Z_UTIL_DEC_581: u32 = 580;
pub const Z_UTIL_DEC_582: u32 = 581;
pub const Z_UTIL_DEC_583: u32 = 582;
pub const Z_UTIL_DEC_584: u32 = 583;
pub const Z_UTIL_DEC_585: u32 = 584;
pub const Z_UTIL_DEC_586: u32 = 585;
pub const Z_UTIL_DEC_587: u32 = 586;
pub const Z_UTIL_DEC_588: u32 = 587;
pub const Z_UTIL_DEC_589: u32 = 588;
pub const Z_UTIL_DEC_590: u32 = 589;
pub const Z_UTIL_DEC_591: u32 = 590;
pub const Z_UTIL_DEC_592: u32 = 591;
pub const Z_UTIL_DEC_593: u32 = 592;
pub const Z_UTIL_DEC_594: u32 = 593;
pub const Z_UTIL_DEC_595: u32 = 594;
pub const Z_UTIL_DEC_596: u32 = 595;
pub const Z_UTIL_DEC_597: u32 = 596;
pub const Z_UTIL_DEC_598: u32 = 597;
pub const Z_UTIL_DEC_599: u32 = 598;
pub const Z_UTIL_DEC_600: u32 = 599;
pub const Z_UTIL_DEC_601: u32 = 600;
pub const Z_UTIL_DEC_602: u32 = 601;
pub const Z_UTIL_DEC_603: u32 = 602;
pub const Z_UTIL_DEC_604: u32 = 603;
pub const Z_UTIL_DEC_605: u32 = 604;
pub const Z_UTIL_DEC_606: u32 = 605;
pub const Z_UTIL_DEC_607: u32 = 606;
pub const Z_UTIL_DEC_608: u32 = 607;
pub const Z_UTIL_DEC_609: u32 = 608;
pub const Z_UTIL_DEC_610: u32 = 609;
pub const Z_UTIL_DEC_611: u32 = 610;
pub const Z_UTIL_DEC_612: u32 = 611;
pub const Z_UTIL_DEC_613: u32 = 612;
pub const Z_UTIL_DEC_614: u32 = 613;
pub const Z_UTIL_DEC_615: u32 = 614;
pub const Z_UTIL_DEC_616: u32 = 615;
pub const Z_UTIL_DEC_617: u32 = 616;
pub const Z_UTIL_DEC_618: u32 = 617;
pub const Z_UTIL_DEC_619: u32 = 618;
pub const Z_UTIL_DEC_620: u32 = 619;
pub const Z_UTIL_DEC_621: u32 = 620;
pub const Z_UTIL_DEC_622: u32 = 621;
pub const Z_UTIL_DEC_623: u32 = 622;
pub const Z_UTIL_DEC_624: u32 = 623;
pub const Z_UTIL_DEC_625: u32 = 624;
pub const Z_UTIL_DEC_626: u32 = 625;
pub const Z_UTIL_DEC_627: u32 = 626;
pub const Z_UTIL_DEC_628: u32 = 627;
pub const Z_UTIL_DEC_629: u32 = 628;
pub const Z_UTIL_DEC_630: u32 = 629;
pub const Z_UTIL_DEC_631: u32 = 630;
pub const Z_UTIL_DEC_632: u32 = 631;
pub const Z_UTIL_DEC_633: u32 = 632;
pub const Z_UTIL_DEC_634: u32 = 633;
pub const Z_UTIL_DEC_635: u32 = 634;
pub const Z_UTIL_DEC_636: u32 = 635;
pub const Z_UTIL_DEC_637: u32 = 636;
pub const Z_UTIL_DEC_638: u32 = 637;
pub const Z_UTIL_DEC_639: u32 = 638;
pub const Z_UTIL_DEC_640: u32 = 639;
pub const Z_UTIL_DEC_641: u32 = 640;
pub const Z_UTIL_DEC_642: u32 = 641;
pub const Z_UTIL_DEC_643: u32 = 642;
pub const Z_UTIL_DEC_644: u32 = 643;
pub const Z_UTIL_DEC_645: u32 = 644;
pub const Z_UTIL_DEC_646: u32 = 645;
pub const Z_UTIL_DEC_647: u32 = 646;
pub const Z_UTIL_DEC_648: u32 = 647;
pub const Z_UTIL_DEC_649: u32 = 648;
pub const Z_UTIL_DEC_650: u32 = 649;
pub const Z_UTIL_DEC_651: u32 = 650;
pub const Z_UTIL_DEC_652: u32 = 651;
pub const Z_UTIL_DEC_653: u32 = 652;
pub const Z_UTIL_DEC_654: u32 = 653;
pub const Z_UTIL_DEC_655: u32 = 654;
pub const Z_UTIL_DEC_656: u32 = 655;
pub const Z_UTIL_DEC_657: u32 = 656;
pub const Z_UTIL_DEC_658: u32 = 657;
pub const Z_UTIL_DEC_659: u32 = 658;
pub const Z_UTIL_DEC_660: u32 = 659;
pub const Z_UTIL_DEC_661: u32 = 660;
pub const Z_UTIL_DEC_662: u32 = 661;
pub const Z_UTIL_DEC_663: u32 = 662;
pub const Z_UTIL_DEC_664: u32 = 663;
pub const Z_UTIL_DEC_665: u32 = 664;
pub const Z_UTIL_DEC_666: u32 = 665;
pub const Z_UTIL_DEC_667: u32 = 666;
pub const Z_UTIL_DEC_668: u32 = 667;
pub const Z_UTIL_DEC_669: u32 = 668;
pub const Z_UTIL_DEC_670: u32 = 669;
pub const Z_UTIL_DEC_671: u32 = 670;
pub const Z_UTIL_DEC_672: u32 = 671;
pub const Z_UTIL_DEC_673: u32 = 672;
pub const Z_UTIL_DEC_674: u32 = 673;
pub const Z_UTIL_DEC_675: u32 = 674;
pub const Z_UTIL_DEC_676: u32 = 675;
pub const Z_UTIL_DEC_677: u32 = 676;
pub const Z_UTIL_DEC_678: u32 = 677;
pub const Z_UTIL_DEC_679: u32 = 678;
pub const Z_UTIL_DEC_680: u32 = 679;
pub const Z_UTIL_DEC_681: u32 = 680;
pub const Z_UTIL_DEC_682: u32 = 681;
pub const Z_UTIL_DEC_683: u32 = 682;
pub const Z_UTIL_DEC_684: u32 = 683;
pub const Z_UTIL_DEC_685: u32 = 684;
pub const Z_UTIL_DEC_686: u32 = 685;
pub const Z_UTIL_DEC_687: u32 = 686;
pub const Z_UTIL_DEC_688: u32 = 687;
pub const Z_UTIL_DEC_689: u32 = 688;
pub const Z_UTIL_DEC_690: u32 = 689;
pub const Z_UTIL_DEC_691: u32 = 690;
pub const Z_UTIL_DEC_692: u32 = 691;
pub const Z_UTIL_DEC_693: u32 = 692;
pub const Z_UTIL_DEC_694: u32 = 693;
pub const Z_UTIL_DEC_695: u32 = 694;
pub const Z_UTIL_DEC_696: u32 = 695;
pub const Z_UTIL_DEC_697: u32 = 696;
pub const Z_UTIL_DEC_698: u32 = 697;
pub const Z_UTIL_DEC_699: u32 = 698;
pub const Z_UTIL_DEC_700: u32 = 699;
pub const Z_UTIL_DEC_701: u32 = 700;
pub const Z_UTIL_DEC_702: u32 = 701;
pub const Z_UTIL_DEC_703: u32 = 702;
pub const Z_UTIL_DEC_704: u32 = 703;
pub const Z_UTIL_DEC_705: u32 = 704;
pub const Z_UTIL_DEC_706: u32 = 705;
pub const Z_UTIL_DEC_707: u32 = 706;
pub const Z_UTIL_DEC_708: u32 = 707;
pub const Z_UTIL_DEC_709: u32 = 708;
pub const Z_UTIL_DEC_710: u32 = 709;
pub const Z_UTIL_DEC_711: u32 = 710;
pub const Z_UTIL_DEC_712: u32 = 711;
pub const Z_UTIL_DEC_713: u32 = 712;
pub const Z_UTIL_DEC_714: u32 = 713;
pub const Z_UTIL_DEC_715: u32 = 714;
pub const Z_UTIL_DEC_716: u32 = 715;
pub const Z_UTIL_DEC_717: u32 = 716;
pub const Z_UTIL_DEC_718: u32 = 717;
pub const Z_UTIL_DEC_719: u32 = 718;
pub const Z_UTIL_DEC_720: u32 = 719;
pub const Z_UTIL_DEC_721: u32 = 720;
pub const Z_UTIL_DEC_722: u32 = 721;
pub const Z_UTIL_DEC_723: u32 = 722;
pub const Z_UTIL_DEC_724: u32 = 723;
pub const Z_UTIL_DEC_725: u32 = 724;
pub const Z_UTIL_DEC_726: u32 = 725;
pub const Z_UTIL_DEC_727: u32 = 726;
pub const Z_UTIL_DEC_728: u32 = 727;
pub const Z_UTIL_DEC_729: u32 = 728;
pub const Z_UTIL_DEC_730: u32 = 729;
pub const Z_UTIL_DEC_731: u32 = 730;
pub const Z_UTIL_DEC_732: u32 = 731;
pub const Z_UTIL_DEC_733: u32 = 732;
pub const Z_UTIL_DEC_734: u32 = 733;
pub const Z_UTIL_DEC_735: u32 = 734;
pub const Z_UTIL_DEC_736: u32 = 735;
pub const Z_UTIL_DEC_737: u32 = 736;
pub const Z_UTIL_DEC_738: u32 = 737;
pub const Z_UTIL_DEC_739: u32 = 738;
pub const Z_UTIL_DEC_740: u32 = 739;
pub const Z_UTIL_DEC_741: u32 = 740;
pub const Z_UTIL_DEC_742: u32 = 741;
pub const Z_UTIL_DEC_743: u32 = 742;
pub const Z_UTIL_DEC_744: u32 = 743;
pub const Z_UTIL_DEC_745: u32 = 744;
pub const Z_UTIL_DEC_746: u32 = 745;
pub const Z_UTIL_DEC_747: u32 = 746;
pub const Z_UTIL_DEC_748: u32 = 747;
pub const Z_UTIL_DEC_749: u32 = 748;
pub const Z_UTIL_DEC_750: u32 = 749;
pub const Z_UTIL_DEC_751: u32 = 750;
pub const Z_UTIL_DEC_752: u32 = 751;
pub const Z_UTIL_DEC_753: u32 = 752;
pub const Z_UTIL_DEC_754: u32 = 753;
pub const Z_UTIL_DEC_755: u32 = 754;
pub const Z_UTIL_DEC_756: u32 = 755;
pub const Z_UTIL_DEC_757: u32 = 756;
pub const Z_UTIL_DEC_758: u32 = 757;
pub const Z_UTIL_DEC_759: u32 = 758;
pub const Z_UTIL_DEC_760: u32 = 759;
pub const Z_UTIL_DEC_761: u32 = 760;
pub const Z_UTIL_DEC_762: u32 = 761;
pub const Z_UTIL_DEC_763: u32 = 762;
pub const Z_UTIL_DEC_764: u32 = 763;
pub const Z_UTIL_DEC_765: u32 = 764;
pub const Z_UTIL_DEC_766: u32 = 765;
pub const Z_UTIL_DEC_767: u32 = 766;
pub const Z_UTIL_DEC_768: u32 = 767;
pub const Z_UTIL_DEC_769: u32 = 768;
pub const Z_UTIL_DEC_770: u32 = 769;
pub const Z_UTIL_DEC_771: u32 = 770;
pub const Z_UTIL_DEC_772: u32 = 771;
pub const Z_UTIL_DEC_773: u32 = 772;
pub const Z_UTIL_DEC_774: u32 = 773;
pub const Z_UTIL_DEC_775: u32 = 774;
pub const Z_UTIL_DEC_776: u32 = 775;
pub const Z_UTIL_DEC_777: u32 = 776;
pub const Z_UTIL_DEC_778: u32 = 777;
pub const Z_UTIL_DEC_779: u32 = 778;
pub const Z_UTIL_DEC_780: u32 = 779;
pub const Z_UTIL_DEC_781: u32 = 780;
pub const Z_UTIL_DEC_782: u32 = 781;
pub const Z_UTIL_DEC_783: u32 = 782;
pub const Z_UTIL_DEC_784: u32 = 783;
pub const Z_UTIL_DEC_785: u32 = 784;
pub const Z_UTIL_DEC_786: u32 = 785;
pub const Z_UTIL_DEC_787: u32 = 786;
pub const Z_UTIL_DEC_788: u32 = 787;
pub const Z_UTIL_DEC_789: u32 = 788;
pub const Z_UTIL_DEC_790: u32 = 789;
pub const Z_UTIL_DEC_791: u32 = 790;
pub const Z_UTIL_DEC_792: u32 = 791;
pub const Z_UTIL_DEC_793: u32 = 792;
pub const Z_UTIL_DEC_794: u32 = 793;
pub const Z_UTIL_DEC_795: u32 = 794;
pub const Z_UTIL_DEC_796: u32 = 795;
pub const Z_UTIL_DEC_797: u32 = 796;
pub const Z_UTIL_DEC_798: u32 = 797;
pub const Z_UTIL_DEC_799: u32 = 798;
pub const Z_UTIL_DEC_800: u32 = 799;
pub const Z_UTIL_DEC_801: u32 = 800;
pub const Z_UTIL_DEC_802: u32 = 801;
pub const Z_UTIL_DEC_803: u32 = 802;
pub const Z_UTIL_DEC_804: u32 = 803;
pub const Z_UTIL_DEC_805: u32 = 804;
pub const Z_UTIL_DEC_806: u32 = 805;
pub const Z_UTIL_DEC_807: u32 = 806;
pub const Z_UTIL_DEC_808: u32 = 807;
pub const Z_UTIL_DEC_809: u32 = 808;
pub const Z_UTIL_DEC_810: u32 = 809;
pub const Z_UTIL_DEC_811: u32 = 810;
pub const Z_UTIL_DEC_812: u32 = 811;
pub const Z_UTIL_DEC_813: u32 = 812;
pub const Z_UTIL_DEC_814: u32 = 813;
pub const Z_UTIL_DEC_815: u32 = 814;
pub const Z_UTIL_DEC_816: u32 = 815;
pub const Z_UTIL_DEC_817: u32 = 816;
pub const Z_UTIL_DEC_818: u32 = 817;
pub const Z_UTIL_DEC_819: u32 = 818;
pub const Z_UTIL_DEC_820: u32 = 819;
pub const Z_UTIL_DEC_821: u32 = 820;
pub const Z_UTIL_DEC_822: u32 = 821;
pub const Z_UTIL_DEC_823: u32 = 822;
pub const Z_UTIL_DEC_824: u32 = 823;
pub const Z_UTIL_DEC_825: u32 = 824;
pub const Z_UTIL_DEC_826: u32 = 825;
pub const Z_UTIL_DEC_827: u32 = 826;
pub const Z_UTIL_DEC_828: u32 = 827;
pub const Z_UTIL_DEC_829: u32 = 828;
pub const Z_UTIL_DEC_830: u32 = 829;
pub const Z_UTIL_DEC_831: u32 = 830;
pub const Z_UTIL_DEC_832: u32 = 831;
pub const Z_UTIL_DEC_833: u32 = 832;
pub const Z_UTIL_DEC_834: u32 = 833;
pub const Z_UTIL_DEC_835: u32 = 834;
pub const Z_UTIL_DEC_836: u32 = 835;
pub const Z_UTIL_DEC_837: u32 = 836;
pub const Z_UTIL_DEC_838: u32 = 837;
pub const Z_UTIL_DEC_839: u32 = 838;
pub const Z_UTIL_DEC_840: u32 = 839;
pub const Z_UTIL_DEC_841: u32 = 840;
pub const Z_UTIL_DEC_842: u32 = 841;
pub const Z_UTIL_DEC_843: u32 = 842;
pub const Z_UTIL_DEC_844: u32 = 843;
pub const Z_UTIL_DEC_845: u32 = 844;
pub const Z_UTIL_DEC_846: u32 = 845;
pub const Z_UTIL_DEC_847: u32 = 846;
pub const Z_UTIL_DEC_848: u32 = 847;
pub const Z_UTIL_DEC_849: u32 = 848;
pub const Z_UTIL_DEC_850: u32 = 849;
pub const Z_UTIL_DEC_851: u32 = 850;
pub const Z_UTIL_DEC_852: u32 = 851;
pub const Z_UTIL_DEC_853: u32 = 852;
pub const Z_UTIL_DEC_854: u32 = 853;
pub const Z_UTIL_DEC_855: u32 = 854;
pub const Z_UTIL_DEC_856: u32 = 855;
pub const Z_UTIL_DEC_857: u32 = 856;
pub const Z_UTIL_DEC_858: u32 = 857;
pub const Z_UTIL_DEC_859: u32 = 858;
pub const Z_UTIL_DEC_860: u32 = 859;
pub const Z_UTIL_DEC_861: u32 = 860;
pub const Z_UTIL_DEC_862: u32 = 861;
pub const Z_UTIL_DEC_863: u32 = 862;
pub const Z_UTIL_DEC_864: u32 = 863;
pub const Z_UTIL_DEC_865: u32 = 864;
pub const Z_UTIL_DEC_866: u32 = 865;
pub const Z_UTIL_DEC_867: u32 = 866;
pub const Z_UTIL_DEC_868: u32 = 867;
pub const Z_UTIL_DEC_869: u32 = 868;
pub const Z_UTIL_DEC_870: u32 = 869;
pub const Z_UTIL_DEC_871: u32 = 870;
pub const Z_UTIL_DEC_872: u32 = 871;
pub const Z_UTIL_DEC_873: u32 = 872;
pub const Z_UTIL_DEC_874: u32 = 873;
pub const Z_UTIL_DEC_875: u32 = 874;
pub const Z_UTIL_DEC_876: u32 = 875;
pub const Z_UTIL_DEC_877: u32 = 876;
pub const Z_UTIL_DEC_878: u32 = 877;
pub const Z_UTIL_DEC_879: u32 = 878;
pub const Z_UTIL_DEC_880: u32 = 879;
pub const Z_UTIL_DEC_881: u32 = 880;
pub const Z_UTIL_DEC_882: u32 = 881;
pub const Z_UTIL_DEC_883: u32 = 882;
pub const Z_UTIL_DEC_884: u32 = 883;
pub const Z_UTIL_DEC_885: u32 = 884;
pub const Z_UTIL_DEC_886: u32 = 885;
pub const Z_UTIL_DEC_887: u32 = 886;
pub const Z_UTIL_DEC_888: u32 = 887;
pub const Z_UTIL_DEC_889: u32 = 888;
pub const Z_UTIL_DEC_890: u32 = 889;
pub const Z_UTIL_DEC_891: u32 = 890;
pub const Z_UTIL_DEC_892: u32 = 891;
pub const Z_UTIL_DEC_893: u32 = 892;
pub const Z_UTIL_DEC_894: u32 = 893;
pub const Z_UTIL_DEC_895: u32 = 894;
pub const Z_UTIL_DEC_896: u32 = 895;
pub const Z_UTIL_DEC_897: u32 = 896;
pub const Z_UTIL_DEC_898: u32 = 897;
pub const Z_UTIL_DEC_899: u32 = 898;
pub const Z_UTIL_DEC_900: u32 = 899;
pub const Z_UTIL_DEC_901: u32 = 900;
pub const Z_UTIL_DEC_902: u32 = 901;
pub const Z_UTIL_DEC_903: u32 = 902;
pub const Z_UTIL_DEC_904: u32 = 903;
pub const Z_UTIL_DEC_905: u32 = 904;
pub const Z_UTIL_DEC_906: u32 = 905;
pub const Z_UTIL_DEC_907: u32 = 906;
pub const Z_UTIL_DEC_908: u32 = 907;
pub const Z_UTIL_DEC_909: u32 = 908;
pub const Z_UTIL_DEC_910: u32 = 909;
pub const Z_UTIL_DEC_911: u32 = 910;
pub const Z_UTIL_DEC_912: u32 = 911;
pub const Z_UTIL_DEC_913: u32 = 912;
pub const Z_UTIL_DEC_914: u32 = 913;
pub const Z_UTIL_DEC_915: u32 = 914;
pub const Z_UTIL_DEC_916: u32 = 915;
pub const Z_UTIL_DEC_917: u32 = 916;
pub const Z_UTIL_DEC_918: u32 = 917;
pub const Z_UTIL_DEC_919: u32 = 918;
pub const Z_UTIL_DEC_920: u32 = 919;
pub const Z_UTIL_DEC_921: u32 = 920;
pub const Z_UTIL_DEC_922: u32 = 921;
pub const Z_UTIL_DEC_923: u32 = 922;
pub const Z_UTIL_DEC_924: u32 = 923;
pub const Z_UTIL_DEC_925: u32 = 924;
pub const Z_UTIL_DEC_926: u32 = 925;
pub const Z_UTIL_DEC_927: u32 = 926;
pub const Z_UTIL_DEC_928: u32 = 927;
pub const Z_UTIL_DEC_929: u32 = 928;
pub const Z_UTIL_DEC_930: u32 = 929;
pub const Z_UTIL_DEC_931: u32 = 930;
pub const Z_UTIL_DEC_932: u32 = 931;
pub const Z_UTIL_DEC_933: u32 = 932;
pub const Z_UTIL_DEC_934: u32 = 933;
pub const Z_UTIL_DEC_935: u32 = 934;
pub const Z_UTIL_DEC_936: u32 = 935;
pub const Z_UTIL_DEC_937: u32 = 936;
pub const Z_UTIL_DEC_938: u32 = 937;
pub const Z_UTIL_DEC_939: u32 = 938;
pub const Z_UTIL_DEC_940: u32 = 939;
pub const Z_UTIL_DEC_941: u32 = 940;
pub const Z_UTIL_DEC_942: u32 = 941;
pub const Z_UTIL_DEC_943: u32 = 942;
pub const Z_UTIL_DEC_944: u32 = 943;
pub const Z_UTIL_DEC_945: u32 = 944;
pub const Z_UTIL_DEC_946: u32 = 945;
pub const Z_UTIL_DEC_947: u32 = 946;
pub const Z_UTIL_DEC_948: u32 = 947;
pub const Z_UTIL_DEC_949: u32 = 948;
pub const Z_UTIL_DEC_950: u32 = 949;
pub const Z_UTIL_DEC_951: u32 = 950;
pub const Z_UTIL_DEC_952: u32 = 951;
pub const Z_UTIL_DEC_953: u32 = 952;
pub const Z_UTIL_DEC_954: u32 = 953;
pub const Z_UTIL_DEC_955: u32 = 954;
pub const Z_UTIL_DEC_956: u32 = 955;
pub const Z_UTIL_DEC_957: u32 = 956;
pub const Z_UTIL_DEC_958: u32 = 957;
pub const Z_UTIL_DEC_959: u32 = 958;
pub const Z_UTIL_DEC_960: u32 = 959;
pub const Z_UTIL_DEC_961: u32 = 960;
pub const Z_UTIL_DEC_962: u32 = 961;
pub const Z_UTIL_DEC_963: u32 = 962;
pub const Z_UTIL_DEC_964: u32 = 963;
pub const Z_UTIL_DEC_965: u32 = 964;
pub const Z_UTIL_DEC_966: u32 = 965;
pub const Z_UTIL_DEC_967: u32 = 966;
pub const Z_UTIL_DEC_968: u32 = 967;
pub const Z_UTIL_DEC_969: u32 = 968;
pub const Z_UTIL_DEC_970: u32 = 969;
pub const Z_UTIL_DEC_971: u32 = 970;
pub const Z_UTIL_DEC_972: u32 = 971;
pub const Z_UTIL_DEC_973: u32 = 972;
pub const Z_UTIL_DEC_974: u32 = 973;
pub const Z_UTIL_DEC_975: u32 = 974;
pub const Z_UTIL_DEC_976: u32 = 975;
pub const Z_UTIL_DEC_977: u32 = 976;
pub const Z_UTIL_DEC_978: u32 = 977;
pub const Z_UTIL_DEC_979: u32 = 978;
pub const Z_UTIL_DEC_980: u32 = 979;
pub const Z_UTIL_DEC_981: u32 = 980;
pub const Z_UTIL_DEC_982: u32 = 981;
pub const Z_UTIL_DEC_983: u32 = 982;
pub const Z_UTIL_DEC_984: u32 = 983;
pub const Z_UTIL_DEC_985: u32 = 984;
pub const Z_UTIL_DEC_986: u32 = 985;
pub const Z_UTIL_DEC_987: u32 = 986;
pub const Z_UTIL_DEC_988: u32 = 987;
pub const Z_UTIL_DEC_989: u32 = 988;
pub const Z_UTIL_DEC_990: u32 = 989;
pub const Z_UTIL_DEC_991: u32 = 990;
pub const Z_UTIL_DEC_992: u32 = 991;
pub const Z_UTIL_DEC_993: u32 = 992;
pub const Z_UTIL_DEC_994: u32 = 993;
pub const Z_UTIL_DEC_995: u32 = 994;
pub const Z_UTIL_DEC_996: u32 = 995;
pub const Z_UTIL_DEC_997: u32 = 996;
pub const Z_UTIL_DEC_998: u32 = 997;
pub const Z_UTIL_DEC_999: u32 = 998;
pub const Z_UTIL_DEC_1000: u32 = 999;
pub const Z_UTIL_DEC_1001: u32 = 1000;
pub const Z_UTIL_DEC_1002: u32 = 1001;
pub const Z_UTIL_DEC_1003: u32 = 1002;
pub const Z_UTIL_DEC_1004: u32 = 1003;
pub const Z_UTIL_DEC_1005: u32 = 1004;
pub const Z_UTIL_DEC_1006: u32 = 1005;
pub const Z_UTIL_DEC_1007: u32 = 1006;
pub const Z_UTIL_DEC_1008: u32 = 1007;
pub const Z_UTIL_DEC_1009: u32 = 1008;
pub const Z_UTIL_DEC_1010: u32 = 1009;
pub const Z_UTIL_DEC_1011: u32 = 1010;
pub const Z_UTIL_DEC_1012: u32 = 1011;
pub const Z_UTIL_DEC_1013: u32 = 1012;
pub const Z_UTIL_DEC_1014: u32 = 1013;
pub const Z_UTIL_DEC_1015: u32 = 1014;
pub const Z_UTIL_DEC_1016: u32 = 1015;
pub const Z_UTIL_DEC_1017: u32 = 1016;
pub const Z_UTIL_DEC_1018: u32 = 1017;
pub const Z_UTIL_DEC_1019: u32 = 1018;
pub const Z_UTIL_DEC_1020: u32 = 1019;
pub const Z_UTIL_DEC_1021: u32 = 1020;
pub const Z_UTIL_DEC_1022: u32 = 1021;
pub const Z_UTIL_DEC_1023: u32 = 1022;
pub const Z_UTIL_DEC_1024: u32 = 1023;
pub const Z_UTIL_DEC_1025: u32 = 1024;
pub const Z_UTIL_DEC_1026: u32 = 1025;
pub const Z_UTIL_DEC_1027: u32 = 1026;
pub const Z_UTIL_DEC_1028: u32 = 1027;
pub const Z_UTIL_DEC_1029: u32 = 1028;
pub const Z_UTIL_DEC_1030: u32 = 1029;
pub const Z_UTIL_DEC_1031: u32 = 1030;
pub const Z_UTIL_DEC_1032: u32 = 1031;
pub const Z_UTIL_DEC_1033: u32 = 1032;
pub const Z_UTIL_DEC_1034: u32 = 1033;
pub const Z_UTIL_DEC_1035: u32 = 1034;
pub const Z_UTIL_DEC_1036: u32 = 1035;
pub const Z_UTIL_DEC_1037: u32 = 1036;
pub const Z_UTIL_DEC_1038: u32 = 1037;
pub const Z_UTIL_DEC_1039: u32 = 1038;
pub const Z_UTIL_DEC_1040: u32 = 1039;
pub const Z_UTIL_DEC_1041: u32 = 1040;
pub const Z_UTIL_DEC_1042: u32 = 1041;
pub const Z_UTIL_DEC_1043: u32 = 1042;
pub const Z_UTIL_DEC_1044: u32 = 1043;
pub const Z_UTIL_DEC_1045: u32 = 1044;
pub const Z_UTIL_DEC_1046: u32 = 1045;
pub const Z_UTIL_DEC_1047: u32 = 1046;
pub const Z_UTIL_DEC_1048: u32 = 1047;
pub const Z_UTIL_DEC_1049: u32 = 1048;
pub const Z_UTIL_DEC_1050: u32 = 1049;
pub const Z_UTIL_DEC_1051: u32 = 1050;
pub const Z_UTIL_DEC_1052: u32 = 1051;
pub const Z_UTIL_DEC_1053: u32 = 1052;
pub const Z_UTIL_DEC_1054: u32 = 1053;
pub const Z_UTIL_DEC_1055: u32 = 1054;
pub const Z_UTIL_DEC_1056: u32 = 1055;
pub const Z_UTIL_DEC_1057: u32 = 1056;
pub const Z_UTIL_DEC_1058: u32 = 1057;
pub const Z_UTIL_DEC_1059: u32 = 1058;
pub const Z_UTIL_DEC_1060: u32 = 1059;
pub const Z_UTIL_DEC_1061: u32 = 1060;
pub const Z_UTIL_DEC_1062: u32 = 1061;
pub const Z_UTIL_DEC_1063: u32 = 1062;
pub const Z_UTIL_DEC_1064: u32 = 1063;
pub const Z_UTIL_DEC_1065: u32 = 1064;
pub const Z_UTIL_DEC_1066: u32 = 1065;
pub const Z_UTIL_DEC_1067: u32 = 1066;
pub const Z_UTIL_DEC_1068: u32 = 1067;
pub const Z_UTIL_DEC_1069: u32 = 1068;
pub const Z_UTIL_DEC_1070: u32 = 1069;
pub const Z_UTIL_DEC_1071: u32 = 1070;
pub const Z_UTIL_DEC_1072: u32 = 1071;
pub const Z_UTIL_DEC_1073: u32 = 1072;
pub const Z_UTIL_DEC_1074: u32 = 1073;
pub const Z_UTIL_DEC_1075: u32 = 1074;
pub const Z_UTIL_DEC_1076: u32 = 1075;
pub const Z_UTIL_DEC_1077: u32 = 1076;
pub const Z_UTIL_DEC_1078: u32 = 1077;
pub const Z_UTIL_DEC_1079: u32 = 1078;
pub const Z_UTIL_DEC_1080: u32 = 1079;
pub const Z_UTIL_DEC_1081: u32 = 1080;
pub const Z_UTIL_DEC_1082: u32 = 1081;
pub const Z_UTIL_DEC_1083: u32 = 1082;
pub const Z_UTIL_DEC_1084: u32 = 1083;
pub const Z_UTIL_DEC_1085: u32 = 1084;
pub const Z_UTIL_DEC_1086: u32 = 1085;
pub const Z_UTIL_DEC_1087: u32 = 1086;
pub const Z_UTIL_DEC_1088: u32 = 1087;
pub const Z_UTIL_DEC_1089: u32 = 1088;
pub const Z_UTIL_DEC_1090: u32 = 1089;
pub const Z_UTIL_DEC_1091: u32 = 1090;
pub const Z_UTIL_DEC_1092: u32 = 1091;
pub const Z_UTIL_DEC_1093: u32 = 1092;
pub const Z_UTIL_DEC_1094: u32 = 1093;
pub const Z_UTIL_DEC_1095: u32 = 1094;
pub const Z_UTIL_DEC_1096: u32 = 1095;
pub const Z_UTIL_DEC_1097: u32 = 1096;
pub const Z_UTIL_DEC_1098: u32 = 1097;
pub const Z_UTIL_DEC_1099: u32 = 1098;
pub const Z_UTIL_DEC_1100: u32 = 1099;
pub const Z_UTIL_DEC_1101: u32 = 1100;
pub const Z_UTIL_DEC_1102: u32 = 1101;
pub const Z_UTIL_DEC_1103: u32 = 1102;
pub const Z_UTIL_DEC_1104: u32 = 1103;
pub const Z_UTIL_DEC_1105: u32 = 1104;
pub const Z_UTIL_DEC_1106: u32 = 1105;
pub const Z_UTIL_DEC_1107: u32 = 1106;
pub const Z_UTIL_DEC_1108: u32 = 1107;
pub const Z_UTIL_DEC_1109: u32 = 1108;
pub const Z_UTIL_DEC_1110: u32 = 1109;
pub const Z_UTIL_DEC_1111: u32 = 1110;
pub const Z_UTIL_DEC_1112: u32 = 1111;
pub const Z_UTIL_DEC_1113: u32 = 1112;
pub const Z_UTIL_DEC_1114: u32 = 1113;
pub const Z_UTIL_DEC_1115: u32 = 1114;
pub const Z_UTIL_DEC_1116: u32 = 1115;
pub const Z_UTIL_DEC_1117: u32 = 1116;
pub const Z_UTIL_DEC_1118: u32 = 1117;
pub const Z_UTIL_DEC_1119: u32 = 1118;
pub const Z_UTIL_DEC_1120: u32 = 1119;
pub const Z_UTIL_DEC_1121: u32 = 1120;
pub const Z_UTIL_DEC_1122: u32 = 1121;
pub const Z_UTIL_DEC_1123: u32 = 1122;
pub const Z_UTIL_DEC_1124: u32 = 1123;
pub const Z_UTIL_DEC_1125: u32 = 1124;
pub const Z_UTIL_DEC_1126: u32 = 1125;
pub const Z_UTIL_DEC_1127: u32 = 1126;
pub const Z_UTIL_DEC_1128: u32 = 1127;
pub const Z_UTIL_DEC_1129: u32 = 1128;
pub const Z_UTIL_DEC_1130: u32 = 1129;
pub const Z_UTIL_DEC_1131: u32 = 1130;
pub const Z_UTIL_DEC_1132: u32 = 1131;
pub const Z_UTIL_DEC_1133: u32 = 1132;
pub const Z_UTIL_DEC_1134: u32 = 1133;
pub const Z_UTIL_DEC_1135: u32 = 1134;
pub const Z_UTIL_DEC_1136: u32 = 1135;
pub const Z_UTIL_DEC_1137: u32 = 1136;
pub const Z_UTIL_DEC_1138: u32 = 1137;
pub const Z_UTIL_DEC_1139: u32 = 1138;
pub const Z_UTIL_DEC_1140: u32 = 1139;
pub const Z_UTIL_DEC_1141: u32 = 1140;
pub const Z_UTIL_DEC_1142: u32 = 1141;
pub const Z_UTIL_DEC_1143: u32 = 1142;
pub const Z_UTIL_DEC_1144: u32 = 1143;
pub const Z_UTIL_DEC_1145: u32 = 1144;
pub const Z_UTIL_DEC_1146: u32 = 1145;
pub const Z_UTIL_DEC_1147: u32 = 1146;
pub const Z_UTIL_DEC_1148: u32 = 1147;
pub const Z_UTIL_DEC_1149: u32 = 1148;
pub const Z_UTIL_DEC_1150: u32 = 1149;
pub const Z_UTIL_DEC_1151: u32 = 1150;
pub const Z_UTIL_DEC_1152: u32 = 1151;
pub const Z_UTIL_DEC_1153: u32 = 1152;
pub const Z_UTIL_DEC_1154: u32 = 1153;
pub const Z_UTIL_DEC_1155: u32 = 1154;
pub const Z_UTIL_DEC_1156: u32 = 1155;
pub const Z_UTIL_DEC_1157: u32 = 1156;
pub const Z_UTIL_DEC_1158: u32 = 1157;
pub const Z_UTIL_DEC_1159: u32 = 1158;
pub const Z_UTIL_DEC_1160: u32 = 1159;
pub const Z_UTIL_DEC_1161: u32 = 1160;
pub const Z_UTIL_DEC_1162: u32 = 1161;
pub const Z_UTIL_DEC_1163: u32 = 1162;
pub const Z_UTIL_DEC_1164: u32 = 1163;
pub const Z_UTIL_DEC_1165: u32 = 1164;
pub const Z_UTIL_DEC_1166: u32 = 1165;
pub const Z_UTIL_DEC_1167: u32 = 1166;
pub const Z_UTIL_DEC_1168: u32 = 1167;
pub const Z_UTIL_DEC_1169: u32 = 1168;
pub const Z_UTIL_DEC_1170: u32 = 1169;
pub const Z_UTIL_DEC_1171: u32 = 1170;
pub const Z_UTIL_DEC_1172: u32 = 1171;
pub const Z_UTIL_DEC_1173: u32 = 1172;
pub const Z_UTIL_DEC_1174: u32 = 1173;
pub const Z_UTIL_DEC_1175: u32 = 1174;
pub const Z_UTIL_DEC_1176: u32 = 1175;
pub const Z_UTIL_DEC_1177: u32 = 1176;
pub const Z_UTIL_DEC_1178: u32 = 1177;
pub const Z_UTIL_DEC_1179: u32 = 1178;
pub const Z_UTIL_DEC_1180: u32 = 1179;
pub const Z_UTIL_DEC_1181: u32 = 1180;
pub const Z_UTIL_DEC_1182: u32 = 1181;
pub const Z_UTIL_DEC_1183: u32 = 1182;
pub const Z_UTIL_DEC_1184: u32 = 1183;
pub const Z_UTIL_DEC_1185: u32 = 1184;
pub const Z_UTIL_DEC_1186: u32 = 1185;
pub const Z_UTIL_DEC_1187: u32 = 1186;
pub const Z_UTIL_DEC_1188: u32 = 1187;
pub const Z_UTIL_DEC_1189: u32 = 1188;
pub const Z_UTIL_DEC_1190: u32 = 1189;
pub const Z_UTIL_DEC_1191: u32 = 1190;
pub const Z_UTIL_DEC_1192: u32 = 1191;
pub const Z_UTIL_DEC_1193: u32 = 1192;
pub const Z_UTIL_DEC_1194: u32 = 1193;
pub const Z_UTIL_DEC_1195: u32 = 1194;
pub const Z_UTIL_DEC_1196: u32 = 1195;
pub const Z_UTIL_DEC_1197: u32 = 1196;
pub const Z_UTIL_DEC_1198: u32 = 1197;
pub const Z_UTIL_DEC_1199: u32 = 1198;
pub const Z_UTIL_DEC_1200: u32 = 1199;
pub const Z_UTIL_DEC_1201: u32 = 1200;
pub const Z_UTIL_DEC_1202: u32 = 1201;
pub const Z_UTIL_DEC_1203: u32 = 1202;
pub const Z_UTIL_DEC_1204: u32 = 1203;
pub const Z_UTIL_DEC_1205: u32 = 1204;
pub const Z_UTIL_DEC_1206: u32 = 1205;
pub const Z_UTIL_DEC_1207: u32 = 1206;
pub const Z_UTIL_DEC_1208: u32 = 1207;
pub const Z_UTIL_DEC_1209: u32 = 1208;
pub const Z_UTIL_DEC_1210: u32 = 1209;
pub const Z_UTIL_DEC_1211: u32 = 1210;
pub const Z_UTIL_DEC_1212: u32 = 1211;
pub const Z_UTIL_DEC_1213: u32 = 1212;
pub const Z_UTIL_DEC_1214: u32 = 1213;
pub const Z_UTIL_DEC_1215: u32 = 1214;
pub const Z_UTIL_DEC_1216: u32 = 1215;
pub const Z_UTIL_DEC_1217: u32 = 1216;
pub const Z_UTIL_DEC_1218: u32 = 1217;
pub const Z_UTIL_DEC_1219: u32 = 1218;
pub const Z_UTIL_DEC_1220: u32 = 1219;
pub const Z_UTIL_DEC_1221: u32 = 1220;
pub const Z_UTIL_DEC_1222: u32 = 1221;
pub const Z_UTIL_DEC_1223: u32 = 1222;
pub const Z_UTIL_DEC_1224: u32 = 1223;
pub const Z_UTIL_DEC_1225: u32 = 1224;
pub const Z_UTIL_DEC_1226: u32 = 1225;
pub const Z_UTIL_DEC_1227: u32 = 1226;
pub const Z_UTIL_DEC_1228: u32 = 1227;
pub const Z_UTIL_DEC_1229: u32 = 1228;
pub const Z_UTIL_DEC_1230: u32 = 1229;
pub const Z_UTIL_DEC_1231: u32 = 1230;
pub const Z_UTIL_DEC_1232: u32 = 1231;
pub const Z_UTIL_DEC_1233: u32 = 1232;
pub const Z_UTIL_DEC_1234: u32 = 1233;
pub const Z_UTIL_DEC_1235: u32 = 1234;
pub const Z_UTIL_DEC_1236: u32 = 1235;
pub const Z_UTIL_DEC_1237: u32 = 1236;
pub const Z_UTIL_DEC_1238: u32 = 1237;
pub const Z_UTIL_DEC_1239: u32 = 1238;
pub const Z_UTIL_DEC_1240: u32 = 1239;
pub const Z_UTIL_DEC_1241: u32 = 1240;
pub const Z_UTIL_DEC_1242: u32 = 1241;
pub const Z_UTIL_DEC_1243: u32 = 1242;
pub const Z_UTIL_DEC_1244: u32 = 1243;
pub const Z_UTIL_DEC_1245: u32 = 1244;
pub const Z_UTIL_DEC_1246: u32 = 1245;
pub const Z_UTIL_DEC_1247: u32 = 1246;
pub const Z_UTIL_DEC_1248: u32 = 1247;
pub const Z_UTIL_DEC_1249: u32 = 1248;
pub const Z_UTIL_DEC_1250: u32 = 1249;
pub const Z_UTIL_DEC_1251: u32 = 1250;
pub const Z_UTIL_DEC_1252: u32 = 1251;
pub const Z_UTIL_DEC_1253: u32 = 1252;
pub const Z_UTIL_DEC_1254: u32 = 1253;
pub const Z_UTIL_DEC_1255: u32 = 1254;
pub const Z_UTIL_DEC_1256: u32 = 1255;
pub const Z_UTIL_DEC_1257: u32 = 1256;
pub const Z_UTIL_DEC_1258: u32 = 1257;
pub const Z_UTIL_DEC_1259: u32 = 1258;
pub const Z_UTIL_DEC_1260: u32 = 1259;
pub const Z_UTIL_DEC_1261: u32 = 1260;
pub const Z_UTIL_DEC_1262: u32 = 1261;
pub const Z_UTIL_DEC_1263: u32 = 1262;
pub const Z_UTIL_DEC_1264: u32 = 1263;
pub const Z_UTIL_DEC_1265: u32 = 1264;
pub const Z_UTIL_DEC_1266: u32 = 1265;
pub const Z_UTIL_DEC_1267: u32 = 1266;
pub const Z_UTIL_DEC_1268: u32 = 1267;
pub const Z_UTIL_DEC_1269: u32 = 1268;
pub const Z_UTIL_DEC_1270: u32 = 1269;
pub const Z_UTIL_DEC_1271: u32 = 1270;
pub const Z_UTIL_DEC_1272: u32 = 1271;
pub const Z_UTIL_DEC_1273: u32 = 1272;
pub const Z_UTIL_DEC_1274: u32 = 1273;
pub const Z_UTIL_DEC_1275: u32 = 1274;
pub const Z_UTIL_DEC_1276: u32 = 1275;
pub const Z_UTIL_DEC_1277: u32 = 1276;
pub const Z_UTIL_DEC_1278: u32 = 1277;
pub const Z_UTIL_DEC_1279: u32 = 1278;
pub const Z_UTIL_DEC_1280: u32 = 1279;
pub const Z_UTIL_DEC_1281: u32 = 1280;
pub const Z_UTIL_DEC_1282: u32 = 1281;
pub const Z_UTIL_DEC_1283: u32 = 1282;
pub const Z_UTIL_DEC_1284: u32 = 1283;
pub const Z_UTIL_DEC_1285: u32 = 1284;
pub const Z_UTIL_DEC_1286: u32 = 1285;
pub const Z_UTIL_DEC_1287: u32 = 1286;
pub const Z_UTIL_DEC_1288: u32 = 1287;
pub const Z_UTIL_DEC_1289: u32 = 1288;
pub const Z_UTIL_DEC_1290: u32 = 1289;
pub const Z_UTIL_DEC_1291: u32 = 1290;
pub const Z_UTIL_DEC_1292: u32 = 1291;
pub const Z_UTIL_DEC_1293: u32 = 1292;
pub const Z_UTIL_DEC_1294: u32 = 1293;
pub const Z_UTIL_DEC_1295: u32 = 1294;
pub const Z_UTIL_DEC_1296: u32 = 1295;
pub const Z_UTIL_DEC_1297: u32 = 1296;
pub const Z_UTIL_DEC_1298: u32 = 1297;
pub const Z_UTIL_DEC_1299: u32 = 1298;
pub const Z_UTIL_DEC_1300: u32 = 1299;
pub const Z_UTIL_DEC_1301: u32 = 1300;
pub const Z_UTIL_DEC_1302: u32 = 1301;
pub const Z_UTIL_DEC_1303: u32 = 1302;
pub const Z_UTIL_DEC_1304: u32 = 1303;
pub const Z_UTIL_DEC_1305: u32 = 1304;
pub const Z_UTIL_DEC_1306: u32 = 1305;
pub const Z_UTIL_DEC_1307: u32 = 1306;
pub const Z_UTIL_DEC_1308: u32 = 1307;
pub const Z_UTIL_DEC_1309: u32 = 1308;
pub const Z_UTIL_DEC_1310: u32 = 1309;
pub const Z_UTIL_DEC_1311: u32 = 1310;
pub const Z_UTIL_DEC_1312: u32 = 1311;
pub const Z_UTIL_DEC_1313: u32 = 1312;
pub const Z_UTIL_DEC_1314: u32 = 1313;
pub const Z_UTIL_DEC_1315: u32 = 1314;
pub const Z_UTIL_DEC_1316: u32 = 1315;
pub const Z_UTIL_DEC_1317: u32 = 1316;
pub const Z_UTIL_DEC_1318: u32 = 1317;
pub const Z_UTIL_DEC_1319: u32 = 1318;
pub const Z_UTIL_DEC_1320: u32 = 1319;
pub const Z_UTIL_DEC_1321: u32 = 1320;
pub const Z_UTIL_DEC_1322: u32 = 1321;
pub const Z_UTIL_DEC_1323: u32 = 1322;
pub const Z_UTIL_DEC_1324: u32 = 1323;
pub const Z_UTIL_DEC_1325: u32 = 1324;
pub const Z_UTIL_DEC_1326: u32 = 1325;
pub const Z_UTIL_DEC_1327: u32 = 1326;
pub const Z_UTIL_DEC_1328: u32 = 1327;
pub const Z_UTIL_DEC_1329: u32 = 1328;
pub const Z_UTIL_DEC_1330: u32 = 1329;
pub const Z_UTIL_DEC_1331: u32 = 1330;
pub const Z_UTIL_DEC_1332: u32 = 1331;
pub const Z_UTIL_DEC_1333: u32 = 1332;
pub const Z_UTIL_DEC_1334: u32 = 1333;
pub const Z_UTIL_DEC_1335: u32 = 1334;
pub const Z_UTIL_DEC_1336: u32 = 1335;
pub const Z_UTIL_DEC_1337: u32 = 1336;
pub const Z_UTIL_DEC_1338: u32 = 1337;
pub const Z_UTIL_DEC_1339: u32 = 1338;
pub const Z_UTIL_DEC_1340: u32 = 1339;
pub const Z_UTIL_DEC_1341: u32 = 1340;
pub const Z_UTIL_DEC_1342: u32 = 1341;
pub const Z_UTIL_DEC_1343: u32 = 1342;
pub const Z_UTIL_DEC_1344: u32 = 1343;
pub const Z_UTIL_DEC_1345: u32 = 1344;
pub const Z_UTIL_DEC_1346: u32 = 1345;
pub const Z_UTIL_DEC_1347: u32 = 1346;
pub const Z_UTIL_DEC_1348: u32 = 1347;
pub const Z_UTIL_DEC_1349: u32 = 1348;
pub const Z_UTIL_DEC_1350: u32 = 1349;
pub const Z_UTIL_DEC_1351: u32 = 1350;
pub const Z_UTIL_DEC_1352: u32 = 1351;
pub const Z_UTIL_DEC_1353: u32 = 1352;
pub const Z_UTIL_DEC_1354: u32 = 1353;
pub const Z_UTIL_DEC_1355: u32 = 1354;
pub const Z_UTIL_DEC_1356: u32 = 1355;
pub const Z_UTIL_DEC_1357: u32 = 1356;
pub const Z_UTIL_DEC_1358: u32 = 1357;
pub const Z_UTIL_DEC_1359: u32 = 1358;
pub const Z_UTIL_DEC_1360: u32 = 1359;
pub const Z_UTIL_DEC_1361: u32 = 1360;
pub const Z_UTIL_DEC_1362: u32 = 1361;
pub const Z_UTIL_DEC_1363: u32 = 1362;
pub const Z_UTIL_DEC_1364: u32 = 1363;
pub const Z_UTIL_DEC_1365: u32 = 1364;
pub const Z_UTIL_DEC_1366: u32 = 1365;
pub const Z_UTIL_DEC_1367: u32 = 1366;
pub const Z_UTIL_DEC_1368: u32 = 1367;
pub const Z_UTIL_DEC_1369: u32 = 1368;
pub const Z_UTIL_DEC_1370: u32 = 1369;
pub const Z_UTIL_DEC_1371: u32 = 1370;
pub const Z_UTIL_DEC_1372: u32 = 1371;
pub const Z_UTIL_DEC_1373: u32 = 1372;
pub const Z_UTIL_DEC_1374: u32 = 1373;
pub const Z_UTIL_DEC_1375: u32 = 1374;
pub const Z_UTIL_DEC_1376: u32 = 1375;
pub const Z_UTIL_DEC_1377: u32 = 1376;
pub const Z_UTIL_DEC_1378: u32 = 1377;
pub const Z_UTIL_DEC_1379: u32 = 1378;
pub const Z_UTIL_DEC_1380: u32 = 1379;
pub const Z_UTIL_DEC_1381: u32 = 1380;
pub const Z_UTIL_DEC_1382: u32 = 1381;
pub const Z_UTIL_DEC_1383: u32 = 1382;
pub const Z_UTIL_DEC_1384: u32 = 1383;
pub const Z_UTIL_DEC_1385: u32 = 1384;
pub const Z_UTIL_DEC_1386: u32 = 1385;
pub const Z_UTIL_DEC_1387: u32 = 1386;
pub const Z_UTIL_DEC_1388: u32 = 1387;
pub const Z_UTIL_DEC_1389: u32 = 1388;
pub const Z_UTIL_DEC_1390: u32 = 1389;
pub const Z_UTIL_DEC_1391: u32 = 1390;
pub const Z_UTIL_DEC_1392: u32 = 1391;
pub const Z_UTIL_DEC_1393: u32 = 1392;
pub const Z_UTIL_DEC_1394: u32 = 1393;
pub const Z_UTIL_DEC_1395: u32 = 1394;
pub const Z_UTIL_DEC_1396: u32 = 1395;
pub const Z_UTIL_DEC_1397: u32 = 1396;
pub const Z_UTIL_DEC_1398: u32 = 1397;
pub const Z_UTIL_DEC_1399: u32 = 1398;
pub const Z_UTIL_DEC_1400: u32 = 1399;
pub const Z_UTIL_DEC_1401: u32 = 1400;
pub const Z_UTIL_DEC_1402: u32 = 1401;
pub const Z_UTIL_DEC_1403: u32 = 1402;
pub const Z_UTIL_DEC_1404: u32 = 1403;
pub const Z_UTIL_DEC_1405: u32 = 1404;
pub const Z_UTIL_DEC_1406: u32 = 1405;
pub const Z_UTIL_DEC_1407: u32 = 1406;
pub const Z_UTIL_DEC_1408: u32 = 1407;
pub const Z_UTIL_DEC_1409: u32 = 1408;
pub const Z_UTIL_DEC_1410: u32 = 1409;
pub const Z_UTIL_DEC_1411: u32 = 1410;
pub const Z_UTIL_DEC_1412: u32 = 1411;
pub const Z_UTIL_DEC_1413: u32 = 1412;
pub const Z_UTIL_DEC_1414: u32 = 1413;
pub const Z_UTIL_DEC_1415: u32 = 1414;
pub const Z_UTIL_DEC_1416: u32 = 1415;
pub const Z_UTIL_DEC_1417: u32 = 1416;
pub const Z_UTIL_DEC_1418: u32 = 1417;
pub const Z_UTIL_DEC_1419: u32 = 1418;
pub const Z_UTIL_DEC_1420: u32 = 1419;
pub const Z_UTIL_DEC_1421: u32 = 1420;
pub const Z_UTIL_DEC_1422: u32 = 1421;
pub const Z_UTIL_DEC_1423: u32 = 1422;
pub const Z_UTIL_DEC_1424: u32 = 1423;
pub const Z_UTIL_DEC_1425: u32 = 1424;
pub const Z_UTIL_DEC_1426: u32 = 1425;
pub const Z_UTIL_DEC_1427: u32 = 1426;
pub const Z_UTIL_DEC_1428: u32 = 1427;
pub const Z_UTIL_DEC_1429: u32 = 1428;
pub const Z_UTIL_DEC_1430: u32 = 1429;
pub const Z_UTIL_DEC_1431: u32 = 1430;
pub const Z_UTIL_DEC_1432: u32 = 1431;
pub const Z_UTIL_DEC_1433: u32 = 1432;
pub const Z_UTIL_DEC_1434: u32 = 1433;
pub const Z_UTIL_DEC_1435: u32 = 1434;
pub const Z_UTIL_DEC_1436: u32 = 1435;
pub const Z_UTIL_DEC_1437: u32 = 1436;
pub const Z_UTIL_DEC_1438: u32 = 1437;
pub const Z_UTIL_DEC_1439: u32 = 1438;
pub const Z_UTIL_DEC_1440: u32 = 1439;
pub const Z_UTIL_DEC_1441: u32 = 1440;
pub const Z_UTIL_DEC_1442: u32 = 1441;
pub const Z_UTIL_DEC_1443: u32 = 1442;
pub const Z_UTIL_DEC_1444: u32 = 1443;
pub const Z_UTIL_DEC_1445: u32 = 1444;
pub const Z_UTIL_DEC_1446: u32 = 1445;
pub const Z_UTIL_DEC_1447: u32 = 1446;
pub const Z_UTIL_DEC_1448: u32 = 1447;
pub const Z_UTIL_DEC_1449: u32 = 1448;
pub const Z_UTIL_DEC_1450: u32 = 1449;
pub const Z_UTIL_DEC_1451: u32 = 1450;
pub const Z_UTIL_DEC_1452: u32 = 1451;
pub const Z_UTIL_DEC_1453: u32 = 1452;
pub const Z_UTIL_DEC_1454: u32 = 1453;
pub const Z_UTIL_DEC_1455: u32 = 1454;
pub const Z_UTIL_DEC_1456: u32 = 1455;
pub const Z_UTIL_DEC_1457: u32 = 1456;
pub const Z_UTIL_DEC_1458: u32 = 1457;
pub const Z_UTIL_DEC_1459: u32 = 1458;
pub const Z_UTIL_DEC_1460: u32 = 1459;
pub const Z_UTIL_DEC_1461: u32 = 1460;
pub const Z_UTIL_DEC_1462: u32 = 1461;
pub const Z_UTIL_DEC_1463: u32 = 1462;
pub const Z_UTIL_DEC_1464: u32 = 1463;
pub const Z_UTIL_DEC_1465: u32 = 1464;
pub const Z_UTIL_DEC_1466: u32 = 1465;
pub const Z_UTIL_DEC_1467: u32 = 1466;
pub const Z_UTIL_DEC_1468: u32 = 1467;
pub const Z_UTIL_DEC_1469: u32 = 1468;
pub const Z_UTIL_DEC_1470: u32 = 1469;
pub const Z_UTIL_DEC_1471: u32 = 1470;
pub const Z_UTIL_DEC_1472: u32 = 1471;
pub const Z_UTIL_DEC_1473: u32 = 1472;
pub const Z_UTIL_DEC_1474: u32 = 1473;
pub const Z_UTIL_DEC_1475: u32 = 1474;
pub const Z_UTIL_DEC_1476: u32 = 1475;
pub const Z_UTIL_DEC_1477: u32 = 1476;
pub const Z_UTIL_DEC_1478: u32 = 1477;
pub const Z_UTIL_DEC_1479: u32 = 1478;
pub const Z_UTIL_DEC_1480: u32 = 1479;
pub const Z_UTIL_DEC_1481: u32 = 1480;
pub const Z_UTIL_DEC_1482: u32 = 1481;
pub const Z_UTIL_DEC_1483: u32 = 1482;
pub const Z_UTIL_DEC_1484: u32 = 1483;
pub const Z_UTIL_DEC_1485: u32 = 1484;
pub const Z_UTIL_DEC_1486: u32 = 1485;
pub const Z_UTIL_DEC_1487: u32 = 1486;
pub const Z_UTIL_DEC_1488: u32 = 1487;
pub const Z_UTIL_DEC_1489: u32 = 1488;
pub const Z_UTIL_DEC_1490: u32 = 1489;
pub const Z_UTIL_DEC_1491: u32 = 1490;
pub const Z_UTIL_DEC_1492: u32 = 1491;
pub const Z_UTIL_DEC_1493: u32 = 1492;
pub const Z_UTIL_DEC_1494: u32 = 1493;
pub const Z_UTIL_DEC_1495: u32 = 1494;
pub const Z_UTIL_DEC_1496: u32 = 1495;
pub const Z_UTIL_DEC_1497: u32 = 1496;
pub const Z_UTIL_DEC_1498: u32 = 1497;
pub const Z_UTIL_DEC_1499: u32 = 1498;
pub const Z_UTIL_DEC_1500: u32 = 1499;
pub const Z_UTIL_DEC_1501: u32 = 1500;
pub const Z_UTIL_DEC_1502: u32 = 1501;
pub const Z_UTIL_DEC_1503: u32 = 1502;
pub const Z_UTIL_DEC_1504: u32 = 1503;
pub const Z_UTIL_DEC_1505: u32 = 1504;
pub const Z_UTIL_DEC_1506: u32 = 1505;
pub const Z_UTIL_DEC_1507: u32 = 1506;
pub const Z_UTIL_DEC_1508: u32 = 1507;
pub const Z_UTIL_DEC_1509: u32 = 1508;
pub const Z_UTIL_DEC_1510: u32 = 1509;
pub const Z_UTIL_DEC_1511: u32 = 1510;
pub const Z_UTIL_DEC_1512: u32 = 1511;
pub const Z_UTIL_DEC_1513: u32 = 1512;
pub const Z_UTIL_DEC_1514: u32 = 1513;
pub const Z_UTIL_DEC_1515: u32 = 1514;
pub const Z_UTIL_DEC_1516: u32 = 1515;
pub const Z_UTIL_DEC_1517: u32 = 1516;
pub const Z_UTIL_DEC_1518: u32 = 1517;
pub const Z_UTIL_DEC_1519: u32 = 1518;
pub const Z_UTIL_DEC_1520: u32 = 1519;
pub const Z_UTIL_DEC_1521: u32 = 1520;
pub const Z_UTIL_DEC_1522: u32 = 1521;
pub const Z_UTIL_DEC_1523: u32 = 1522;
pub const Z_UTIL_DEC_1524: u32 = 1523;
pub const Z_UTIL_DEC_1525: u32 = 1524;
pub const Z_UTIL_DEC_1526: u32 = 1525;
pub const Z_UTIL_DEC_1527: u32 = 1526;
pub const Z_UTIL_DEC_1528: u32 = 1527;
pub const Z_UTIL_DEC_1529: u32 = 1528;
pub const Z_UTIL_DEC_1530: u32 = 1529;
pub const Z_UTIL_DEC_1531: u32 = 1530;
pub const Z_UTIL_DEC_1532: u32 = 1531;
pub const Z_UTIL_DEC_1533: u32 = 1532;
pub const Z_UTIL_DEC_1534: u32 = 1533;
pub const Z_UTIL_DEC_1535: u32 = 1534;
pub const Z_UTIL_DEC_1536: u32 = 1535;
pub const Z_UTIL_DEC_1537: u32 = 1536;
pub const Z_UTIL_DEC_1538: u32 = 1537;
pub const Z_UTIL_DEC_1539: u32 = 1538;
pub const Z_UTIL_DEC_1540: u32 = 1539;
pub const Z_UTIL_DEC_1541: u32 = 1540;
pub const Z_UTIL_DEC_1542: u32 = 1541;
pub const Z_UTIL_DEC_1543: u32 = 1542;
pub const Z_UTIL_DEC_1544: u32 = 1543;
pub const Z_UTIL_DEC_1545: u32 = 1544;
pub const Z_UTIL_DEC_1546: u32 = 1545;
pub const Z_UTIL_DEC_1547: u32 = 1546;
pub const Z_UTIL_DEC_1548: u32 = 1547;
pub const Z_UTIL_DEC_1549: u32 = 1548;
pub const Z_UTIL_DEC_1550: u32 = 1549;
pub const Z_UTIL_DEC_1551: u32 = 1550;
pub const Z_UTIL_DEC_1552: u32 = 1551;
pub const Z_UTIL_DEC_1553: u32 = 1552;
pub const Z_UTIL_DEC_1554: u32 = 1553;
pub const Z_UTIL_DEC_1555: u32 = 1554;
pub const Z_UTIL_DEC_1556: u32 = 1555;
pub const Z_UTIL_DEC_1557: u32 = 1556;
pub const Z_UTIL_DEC_1558: u32 = 1557;
pub const Z_UTIL_DEC_1559: u32 = 1558;
pub const Z_UTIL_DEC_1560: u32 = 1559;
pub const Z_UTIL_DEC_1561: u32 = 1560;
pub const Z_UTIL_DEC_1562: u32 = 1561;
pub const Z_UTIL_DEC_1563: u32 = 1562;
pub const Z_UTIL_DEC_1564: u32 = 1563;
pub const Z_UTIL_DEC_1565: u32 = 1564;
pub const Z_UTIL_DEC_1566: u32 = 1565;
pub const Z_UTIL_DEC_1567: u32 = 1566;
pub const Z_UTIL_DEC_1568: u32 = 1567;
pub const Z_UTIL_DEC_1569: u32 = 1568;
pub const Z_UTIL_DEC_1570: u32 = 1569;
pub const Z_UTIL_DEC_1571: u32 = 1570;
pub const Z_UTIL_DEC_1572: u32 = 1571;
pub const Z_UTIL_DEC_1573: u32 = 1572;
pub const Z_UTIL_DEC_1574: u32 = 1573;
pub const Z_UTIL_DEC_1575: u32 = 1574;
pub const Z_UTIL_DEC_1576: u32 = 1575;
pub const Z_UTIL_DEC_1577: u32 = 1576;
pub const Z_UTIL_DEC_1578: u32 = 1577;
pub const Z_UTIL_DEC_1579: u32 = 1578;
pub const Z_UTIL_DEC_1580: u32 = 1579;
pub const Z_UTIL_DEC_1581: u32 = 1580;
pub const Z_UTIL_DEC_1582: u32 = 1581;
pub const Z_UTIL_DEC_1583: u32 = 1582;
pub const Z_UTIL_DEC_1584: u32 = 1583;
pub const Z_UTIL_DEC_1585: u32 = 1584;
pub const Z_UTIL_DEC_1586: u32 = 1585;
pub const Z_UTIL_DEC_1587: u32 = 1586;
pub const Z_UTIL_DEC_1588: u32 = 1587;
pub const Z_UTIL_DEC_1589: u32 = 1588;
pub const Z_UTIL_DEC_1590: u32 = 1589;
pub const Z_UTIL_DEC_1591: u32 = 1590;
pub const Z_UTIL_DEC_1592: u32 = 1591;
pub const Z_UTIL_DEC_1593: u32 = 1592;
pub const Z_UTIL_DEC_1594: u32 = 1593;
pub const Z_UTIL_DEC_1595: u32 = 1594;
pub const Z_UTIL_DEC_1596: u32 = 1595;
pub const Z_UTIL_DEC_1597: u32 = 1596;
pub const Z_UTIL_DEC_1598: u32 = 1597;
pub const Z_UTIL_DEC_1599: u32 = 1598;
pub const Z_UTIL_DEC_1600: u32 = 1599;
pub const Z_UTIL_DEC_1601: u32 = 1600;
pub const Z_UTIL_DEC_1602: u32 = 1601;
pub const Z_UTIL_DEC_1603: u32 = 1602;
pub const Z_UTIL_DEC_1604: u32 = 1603;
pub const Z_UTIL_DEC_1605: u32 = 1604;
pub const Z_UTIL_DEC_1606: u32 = 1605;
pub const Z_UTIL_DEC_1607: u32 = 1606;
pub const Z_UTIL_DEC_1608: u32 = 1607;
pub const Z_UTIL_DEC_1609: u32 = 1608;
pub const Z_UTIL_DEC_1610: u32 = 1609;
pub const Z_UTIL_DEC_1611: u32 = 1610;
pub const Z_UTIL_DEC_1612: u32 = 1611;
pub const Z_UTIL_DEC_1613: u32 = 1612;
pub const Z_UTIL_DEC_1614: u32 = 1613;
pub const Z_UTIL_DEC_1615: u32 = 1614;
pub const Z_UTIL_DEC_1616: u32 = 1615;
pub const Z_UTIL_DEC_1617: u32 = 1616;
pub const Z_UTIL_DEC_1618: u32 = 1617;
pub const Z_UTIL_DEC_1619: u32 = 1618;
pub const Z_UTIL_DEC_1620: u32 = 1619;
pub const Z_UTIL_DEC_1621: u32 = 1620;
pub const Z_UTIL_DEC_1622: u32 = 1621;
pub const Z_UTIL_DEC_1623: u32 = 1622;
pub const Z_UTIL_DEC_1624: u32 = 1623;
pub const Z_UTIL_DEC_1625: u32 = 1624;
pub const Z_UTIL_DEC_1626: u32 = 1625;
pub const Z_UTIL_DEC_1627: u32 = 1626;
pub const Z_UTIL_DEC_1628: u32 = 1627;
pub const Z_UTIL_DEC_1629: u32 = 1628;
pub const Z_UTIL_DEC_1630: u32 = 1629;
pub const Z_UTIL_DEC_1631: u32 = 1630;
pub const Z_UTIL_DEC_1632: u32 = 1631;
pub const Z_UTIL_DEC_1633: u32 = 1632;
pub const Z_UTIL_DEC_1634: u32 = 1633;
pub const Z_UTIL_DEC_1635: u32 = 1634;
pub const Z_UTIL_DEC_1636: u32 = 1635;
pub const Z_UTIL_DEC_1637: u32 = 1636;
pub const Z_UTIL_DEC_1638: u32 = 1637;
pub const Z_UTIL_DEC_1639: u32 = 1638;
pub const Z_UTIL_DEC_1640: u32 = 1639;
pub const Z_UTIL_DEC_1641: u32 = 1640;
pub const Z_UTIL_DEC_1642: u32 = 1641;
pub const Z_UTIL_DEC_1643: u32 = 1642;
pub const Z_UTIL_DEC_1644: u32 = 1643;
pub const Z_UTIL_DEC_1645: u32 = 1644;
pub const Z_UTIL_DEC_1646: u32 = 1645;
pub const Z_UTIL_DEC_1647: u32 = 1646;
pub const Z_UTIL_DEC_1648: u32 = 1647;
pub const Z_UTIL_DEC_1649: u32 = 1648;
pub const Z_UTIL_DEC_1650: u32 = 1649;
pub const Z_UTIL_DEC_1651: u32 = 1650;
pub const Z_UTIL_DEC_1652: u32 = 1651;
pub const Z_UTIL_DEC_1653: u32 = 1652;
pub const Z_UTIL_DEC_1654: u32 = 1653;
pub const Z_UTIL_DEC_1655: u32 = 1654;
pub const Z_UTIL_DEC_1656: u32 = 1655;
pub const Z_UTIL_DEC_1657: u32 = 1656;
pub const Z_UTIL_DEC_1658: u32 = 1657;
pub const Z_UTIL_DEC_1659: u32 = 1658;
pub const Z_UTIL_DEC_1660: u32 = 1659;
pub const Z_UTIL_DEC_1661: u32 = 1660;
pub const Z_UTIL_DEC_1662: u32 = 1661;
pub const Z_UTIL_DEC_1663: u32 = 1662;
pub const Z_UTIL_DEC_1664: u32 = 1663;
pub const Z_UTIL_DEC_1665: u32 = 1664;
pub const Z_UTIL_DEC_1666: u32 = 1665;
pub const Z_UTIL_DEC_1667: u32 = 1666;
pub const Z_UTIL_DEC_1668: u32 = 1667;
pub const Z_UTIL_DEC_1669: u32 = 1668;
pub const Z_UTIL_DEC_1670: u32 = 1669;
pub const Z_UTIL_DEC_1671: u32 = 1670;
pub const Z_UTIL_DEC_1672: u32 = 1671;
pub const Z_UTIL_DEC_1673: u32 = 1672;
pub const Z_UTIL_DEC_1674: u32 = 1673;
pub const Z_UTIL_DEC_1675: u32 = 1674;
pub const Z_UTIL_DEC_1676: u32 = 1675;
pub const Z_UTIL_DEC_1677: u32 = 1676;
pub const Z_UTIL_DEC_1678: u32 = 1677;
pub const Z_UTIL_DEC_1679: u32 = 1678;
pub const Z_UTIL_DEC_1680: u32 = 1679;
pub const Z_UTIL_DEC_1681: u32 = 1680;
pub const Z_UTIL_DEC_1682: u32 = 1681;
pub const Z_UTIL_DEC_1683: u32 = 1682;
pub const Z_UTIL_DEC_1684: u32 = 1683;
pub const Z_UTIL_DEC_1685: u32 = 1684;
pub const Z_UTIL_DEC_1686: u32 = 1685;
pub const Z_UTIL_DEC_1687: u32 = 1686;
pub const Z_UTIL_DEC_1688: u32 = 1687;
pub const Z_UTIL_DEC_1689: u32 = 1688;
pub const Z_UTIL_DEC_1690: u32 = 1689;
pub const Z_UTIL_DEC_1691: u32 = 1690;
pub const Z_UTIL_DEC_1692: u32 = 1691;
pub const Z_UTIL_DEC_1693: u32 = 1692;
pub const Z_UTIL_DEC_1694: u32 = 1693;
pub const Z_UTIL_DEC_1695: u32 = 1694;
pub const Z_UTIL_DEC_1696: u32 = 1695;
pub const Z_UTIL_DEC_1697: u32 = 1696;
pub const Z_UTIL_DEC_1698: u32 = 1697;
pub const Z_UTIL_DEC_1699: u32 = 1698;
pub const Z_UTIL_DEC_1700: u32 = 1699;
pub const Z_UTIL_DEC_1701: u32 = 1700;
pub const Z_UTIL_DEC_1702: u32 = 1701;
pub const Z_UTIL_DEC_1703: u32 = 1702;
pub const Z_UTIL_DEC_1704: u32 = 1703;
pub const Z_UTIL_DEC_1705: u32 = 1704;
pub const Z_UTIL_DEC_1706: u32 = 1705;
pub const Z_UTIL_DEC_1707: u32 = 1706;
pub const Z_UTIL_DEC_1708: u32 = 1707;
pub const Z_UTIL_DEC_1709: u32 = 1708;
pub const Z_UTIL_DEC_1710: u32 = 1709;
pub const Z_UTIL_DEC_1711: u32 = 1710;
pub const Z_UTIL_DEC_1712: u32 = 1711;
pub const Z_UTIL_DEC_1713: u32 = 1712;
pub const Z_UTIL_DEC_1714: u32 = 1713;
pub const Z_UTIL_DEC_1715: u32 = 1714;
pub const Z_UTIL_DEC_1716: u32 = 1715;
pub const Z_UTIL_DEC_1717: u32 = 1716;
pub const Z_UTIL_DEC_1718: u32 = 1717;
pub const Z_UTIL_DEC_1719: u32 = 1718;
pub const Z_UTIL_DEC_1720: u32 = 1719;
pub const Z_UTIL_DEC_1721: u32 = 1720;
pub const Z_UTIL_DEC_1722: u32 = 1721;
pub const Z_UTIL_DEC_1723: u32 = 1722;
pub const Z_UTIL_DEC_1724: u32 = 1723;
pub const Z_UTIL_DEC_1725: u32 = 1724;
pub const Z_UTIL_DEC_1726: u32 = 1725;
pub const Z_UTIL_DEC_1727: u32 = 1726;
pub const Z_UTIL_DEC_1728: u32 = 1727;
pub const Z_UTIL_DEC_1729: u32 = 1728;
pub const Z_UTIL_DEC_1730: u32 = 1729;
pub const Z_UTIL_DEC_1731: u32 = 1730;
pub const Z_UTIL_DEC_1732: u32 = 1731;
pub const Z_UTIL_DEC_1733: u32 = 1732;
pub const Z_UTIL_DEC_1734: u32 = 1733;
pub const Z_UTIL_DEC_1735: u32 = 1734;
pub const Z_UTIL_DEC_1736: u32 = 1735;
pub const Z_UTIL_DEC_1737: u32 = 1736;
pub const Z_UTIL_DEC_1738: u32 = 1737;
pub const Z_UTIL_DEC_1739: u32 = 1738;
pub const Z_UTIL_DEC_1740: u32 = 1739;
pub const Z_UTIL_DEC_1741: u32 = 1740;
pub const Z_UTIL_DEC_1742: u32 = 1741;
pub const Z_UTIL_DEC_1743: u32 = 1742;
pub const Z_UTIL_DEC_1744: u32 = 1743;
pub const Z_UTIL_DEC_1745: u32 = 1744;
pub const Z_UTIL_DEC_1746: u32 = 1745;
pub const Z_UTIL_DEC_1747: u32 = 1746;
pub const Z_UTIL_DEC_1748: u32 = 1747;
pub const Z_UTIL_DEC_1749: u32 = 1748;
pub const Z_UTIL_DEC_1750: u32 = 1749;
pub const Z_UTIL_DEC_1751: u32 = 1750;
pub const Z_UTIL_DEC_1752: u32 = 1751;
pub const Z_UTIL_DEC_1753: u32 = 1752;
pub const Z_UTIL_DEC_1754: u32 = 1753;
pub const Z_UTIL_DEC_1755: u32 = 1754;
pub const Z_UTIL_DEC_1756: u32 = 1755;
pub const Z_UTIL_DEC_1757: u32 = 1756;
pub const Z_UTIL_DEC_1758: u32 = 1757;
pub const Z_UTIL_DEC_1759: u32 = 1758;
pub const Z_UTIL_DEC_1760: u32 = 1759;
pub const Z_UTIL_DEC_1761: u32 = 1760;
pub const Z_UTIL_DEC_1762: u32 = 1761;
pub const Z_UTIL_DEC_1763: u32 = 1762;
pub const Z_UTIL_DEC_1764: u32 = 1763;
pub const Z_UTIL_DEC_1765: u32 = 1764;
pub const Z_UTIL_DEC_1766: u32 = 1765;
pub const Z_UTIL_DEC_1767: u32 = 1766;
pub const Z_UTIL_DEC_1768: u32 = 1767;
pub const Z_UTIL_DEC_1769: u32 = 1768;
pub const Z_UTIL_DEC_1770: u32 = 1769;
pub const Z_UTIL_DEC_1771: u32 = 1770;
pub const Z_UTIL_DEC_1772: u32 = 1771;
pub const Z_UTIL_DEC_1773: u32 = 1772;
pub const Z_UTIL_DEC_1774: u32 = 1773;
pub const Z_UTIL_DEC_1775: u32 = 1774;
pub const Z_UTIL_DEC_1776: u32 = 1775;
pub const Z_UTIL_DEC_1777: u32 = 1776;
pub const Z_UTIL_DEC_1778: u32 = 1777;
pub const Z_UTIL_DEC_1779: u32 = 1778;
pub const Z_UTIL_DEC_1780: u32 = 1779;
pub const Z_UTIL_DEC_1781: u32 = 1780;
pub const Z_UTIL_DEC_1782: u32 = 1781;
pub const Z_UTIL_DEC_1783: u32 = 1782;
pub const Z_UTIL_DEC_1784: u32 = 1783;
pub const Z_UTIL_DEC_1785: u32 = 1784;
pub const Z_UTIL_DEC_1786: u32 = 1785;
pub const Z_UTIL_DEC_1787: u32 = 1786;
pub const Z_UTIL_DEC_1788: u32 = 1787;
pub const Z_UTIL_DEC_1789: u32 = 1788;
pub const Z_UTIL_DEC_1790: u32 = 1789;
pub const Z_UTIL_DEC_1791: u32 = 1790;
pub const Z_UTIL_DEC_1792: u32 = 1791;
pub const Z_UTIL_DEC_1793: u32 = 1792;
pub const Z_UTIL_DEC_1794: u32 = 1793;
pub const Z_UTIL_DEC_1795: u32 = 1794;
pub const Z_UTIL_DEC_1796: u32 = 1795;
pub const Z_UTIL_DEC_1797: u32 = 1796;
pub const Z_UTIL_DEC_1798: u32 = 1797;
pub const Z_UTIL_DEC_1799: u32 = 1798;
pub const Z_UTIL_DEC_1800: u32 = 1799;
pub const Z_UTIL_DEC_1801: u32 = 1800;
pub const Z_UTIL_DEC_1802: u32 = 1801;
pub const Z_UTIL_DEC_1803: u32 = 1802;
pub const Z_UTIL_DEC_1804: u32 = 1803;
pub const Z_UTIL_DEC_1805: u32 = 1804;
pub const Z_UTIL_DEC_1806: u32 = 1805;
pub const Z_UTIL_DEC_1807: u32 = 1806;
pub const Z_UTIL_DEC_1808: u32 = 1807;
pub const Z_UTIL_DEC_1809: u32 = 1808;
pub const Z_UTIL_DEC_1810: u32 = 1809;
pub const Z_UTIL_DEC_1811: u32 = 1810;
pub const Z_UTIL_DEC_1812: u32 = 1811;
pub const Z_UTIL_DEC_1813: u32 = 1812;
pub const Z_UTIL_DEC_1814: u32 = 1813;
pub const Z_UTIL_DEC_1815: u32 = 1814;
pub const Z_UTIL_DEC_1816: u32 = 1815;
pub const Z_UTIL_DEC_1817: u32 = 1816;
pub const Z_UTIL_DEC_1818: u32 = 1817;
pub const Z_UTIL_DEC_1819: u32 = 1818;
pub const Z_UTIL_DEC_1820: u32 = 1819;
pub const Z_UTIL_DEC_1821: u32 = 1820;
pub const Z_UTIL_DEC_1822: u32 = 1821;
pub const Z_UTIL_DEC_1823: u32 = 1822;
pub const Z_UTIL_DEC_1824: u32 = 1823;
pub const Z_UTIL_DEC_1825: u32 = 1824;
pub const Z_UTIL_DEC_1826: u32 = 1825;
pub const Z_UTIL_DEC_1827: u32 = 1826;
pub const Z_UTIL_DEC_1828: u32 = 1827;
pub const Z_UTIL_DEC_1829: u32 = 1828;
pub const Z_UTIL_DEC_1830: u32 = 1829;
pub const Z_UTIL_DEC_1831: u32 = 1830;
pub const Z_UTIL_DEC_1832: u32 = 1831;
pub const Z_UTIL_DEC_1833: u32 = 1832;
pub const Z_UTIL_DEC_1834: u32 = 1833;
pub const Z_UTIL_DEC_1835: u32 = 1834;
pub const Z_UTIL_DEC_1836: u32 = 1835;
pub const Z_UTIL_DEC_1837: u32 = 1836;
pub const Z_UTIL_DEC_1838: u32 = 1837;
pub const Z_UTIL_DEC_1839: u32 = 1838;
pub const Z_UTIL_DEC_1840: u32 = 1839;
pub const Z_UTIL_DEC_1841: u32 = 1840;
pub const Z_UTIL_DEC_1842: u32 = 1841;
pub const Z_UTIL_DEC_1843: u32 = 1842;
pub const Z_UTIL_DEC_1844: u32 = 1843;
pub const Z_UTIL_DEC_1845: u32 = 1844;
pub const Z_UTIL_DEC_1846: u32 = 1845;
pub const Z_UTIL_DEC_1847: u32 = 1846;
pub const Z_UTIL_DEC_1848: u32 = 1847;
pub const Z_UTIL_DEC_1849: u32 = 1848;
pub const Z_UTIL_DEC_1850: u32 = 1849;
pub const Z_UTIL_DEC_1851: u32 = 1850;
pub const Z_UTIL_DEC_1852: u32 = 1851;
pub const Z_UTIL_DEC_1853: u32 = 1852;
pub const Z_UTIL_DEC_1854: u32 = 1853;
pub const Z_UTIL_DEC_1855: u32 = 1854;
pub const Z_UTIL_DEC_1856: u32 = 1855;
pub const Z_UTIL_DEC_1857: u32 = 1856;
pub const Z_UTIL_DEC_1858: u32 = 1857;
pub const Z_UTIL_DEC_1859: u32 = 1858;
pub const Z_UTIL_DEC_1860: u32 = 1859;
pub const Z_UTIL_DEC_1861: u32 = 1860;
pub const Z_UTIL_DEC_1862: u32 = 1861;
pub const Z_UTIL_DEC_1863: u32 = 1862;
pub const Z_UTIL_DEC_1864: u32 = 1863;
pub const Z_UTIL_DEC_1865: u32 = 1864;
pub const Z_UTIL_DEC_1866: u32 = 1865;
pub const Z_UTIL_DEC_1867: u32 = 1866;
pub const Z_UTIL_DEC_1868: u32 = 1867;
pub const Z_UTIL_DEC_1869: u32 = 1868;
pub const Z_UTIL_DEC_1870: u32 = 1869;
pub const Z_UTIL_DEC_1871: u32 = 1870;
pub const Z_UTIL_DEC_1872: u32 = 1871;
pub const Z_UTIL_DEC_1873: u32 = 1872;
pub const Z_UTIL_DEC_1874: u32 = 1873;
pub const Z_UTIL_DEC_1875: u32 = 1874;
pub const Z_UTIL_DEC_1876: u32 = 1875;
pub const Z_UTIL_DEC_1877: u32 = 1876;
pub const Z_UTIL_DEC_1878: u32 = 1877;
pub const Z_UTIL_DEC_1879: u32 = 1878;
pub const Z_UTIL_DEC_1880: u32 = 1879;
pub const Z_UTIL_DEC_1881: u32 = 1880;
pub const Z_UTIL_DEC_1882: u32 = 1881;
pub const Z_UTIL_DEC_1883: u32 = 1882;
pub const Z_UTIL_DEC_1884: u32 = 1883;
pub const Z_UTIL_DEC_1885: u32 = 1884;
pub const Z_UTIL_DEC_1886: u32 = 1885;
pub const Z_UTIL_DEC_1887: u32 = 1886;
pub const Z_UTIL_DEC_1888: u32 = 1887;
pub const Z_UTIL_DEC_1889: u32 = 1888;
pub const Z_UTIL_DEC_1890: u32 = 1889;
pub const Z_UTIL_DEC_1891: u32 = 1890;
pub const Z_UTIL_DEC_1892: u32 = 1891;
pub const Z_UTIL_DEC_1893: u32 = 1892;
pub const Z_UTIL_DEC_1894: u32 = 1893;
pub const Z_UTIL_DEC_1895: u32 = 1894;
pub const Z_UTIL_DEC_1896: u32 = 1895;
pub const Z_UTIL_DEC_1897: u32 = 1896;
pub const Z_UTIL_DEC_1898: u32 = 1897;
pub const Z_UTIL_DEC_1899: u32 = 1898;
pub const Z_UTIL_DEC_1900: u32 = 1899;
pub const Z_UTIL_DEC_1901: u32 = 1900;
pub const Z_UTIL_DEC_1902: u32 = 1901;
pub const Z_UTIL_DEC_1903: u32 = 1902;
pub const Z_UTIL_DEC_1904: u32 = 1903;
pub const Z_UTIL_DEC_1905: u32 = 1904;
pub const Z_UTIL_DEC_1906: u32 = 1905;
pub const Z_UTIL_DEC_1907: u32 = 1906;
pub const Z_UTIL_DEC_1908: u32 = 1907;
pub const Z_UTIL_DEC_1909: u32 = 1908;
pub const Z_UTIL_DEC_1910: u32 = 1909;
pub const Z_UTIL_DEC_1911: u32 = 1910;
pub const Z_UTIL_DEC_1912: u32 = 1911;
pub const Z_UTIL_DEC_1913: u32 = 1912;
pub const Z_UTIL_DEC_1914: u32 = 1913;
pub const Z_UTIL_DEC_1915: u32 = 1914;
pub const Z_UTIL_DEC_1916: u32 = 1915;
pub const Z_UTIL_DEC_1917: u32 = 1916;
pub const Z_UTIL_DEC_1918: u32 = 1917;
pub const Z_UTIL_DEC_1919: u32 = 1918;
pub const Z_UTIL_DEC_1920: u32 = 1919;
pub const Z_UTIL_DEC_1921: u32 = 1920;
pub const Z_UTIL_DEC_1922: u32 = 1921;
pub const Z_UTIL_DEC_1923: u32 = 1922;
pub const Z_UTIL_DEC_1924: u32 = 1923;
pub const Z_UTIL_DEC_1925: u32 = 1924;
pub const Z_UTIL_DEC_1926: u32 = 1925;
pub const Z_UTIL_DEC_1927: u32 = 1926;
pub const Z_UTIL_DEC_1928: u32 = 1927;
pub const Z_UTIL_DEC_1929: u32 = 1928;
pub const Z_UTIL_DEC_1930: u32 = 1929;
pub const Z_UTIL_DEC_1931: u32 = 1930;
pub const Z_UTIL_DEC_1932: u32 = 1931;
pub const Z_UTIL_DEC_1933: u32 = 1932;
pub const Z_UTIL_DEC_1934: u32 = 1933;
pub const Z_UTIL_DEC_1935: u32 = 1934;
pub const Z_UTIL_DEC_1936: u32 = 1935;
pub const Z_UTIL_DEC_1937: u32 = 1936;
pub const Z_UTIL_DEC_1938: u32 = 1937;
pub const Z_UTIL_DEC_1939: u32 = 1938;
pub const Z_UTIL_DEC_1940: u32 = 1939;
pub const Z_UTIL_DEC_1941: u32 = 1940;
pub const Z_UTIL_DEC_1942: u32 = 1941;
pub const Z_UTIL_DEC_1943: u32 = 1942;
pub const Z_UTIL_DEC_1944: u32 = 1943;
pub const Z_UTIL_DEC_1945: u32 = 1944;
pub const Z_UTIL_DEC_1946: u32 = 1945;
pub const Z_UTIL_DEC_1947: u32 = 1946;
pub const Z_UTIL_DEC_1948: u32 = 1947;
pub const Z_UTIL_DEC_1949: u32 = 1948;
pub const Z_UTIL_DEC_1950: u32 = 1949;
pub const Z_UTIL_DEC_1951: u32 = 1950;
pub const Z_UTIL_DEC_1952: u32 = 1951;
pub const Z_UTIL_DEC_1953: u32 = 1952;
pub const Z_UTIL_DEC_1954: u32 = 1953;
pub const Z_UTIL_DEC_1955: u32 = 1954;
pub const Z_UTIL_DEC_1956: u32 = 1955;
pub const Z_UTIL_DEC_1957: u32 = 1956;
pub const Z_UTIL_DEC_1958: u32 = 1957;
pub const Z_UTIL_DEC_1959: u32 = 1958;
pub const Z_UTIL_DEC_1960: u32 = 1959;
pub const Z_UTIL_DEC_1961: u32 = 1960;
pub const Z_UTIL_DEC_1962: u32 = 1961;
pub const Z_UTIL_DEC_1963: u32 = 1962;
pub const Z_UTIL_DEC_1964: u32 = 1963;
pub const Z_UTIL_DEC_1965: u32 = 1964;
pub const Z_UTIL_DEC_1966: u32 = 1965;
pub const Z_UTIL_DEC_1967: u32 = 1966;
pub const Z_UTIL_DEC_1968: u32 = 1967;
pub const Z_UTIL_DEC_1969: u32 = 1968;
pub const Z_UTIL_DEC_1970: u32 = 1969;
pub const Z_UTIL_DEC_1971: u32 = 1970;
pub const Z_UTIL_DEC_1972: u32 = 1971;
pub const Z_UTIL_DEC_1973: u32 = 1972;
pub const Z_UTIL_DEC_1974: u32 = 1973;
pub const Z_UTIL_DEC_1975: u32 = 1974;
pub const Z_UTIL_DEC_1976: u32 = 1975;
pub const Z_UTIL_DEC_1977: u32 = 1976;
pub const Z_UTIL_DEC_1978: u32 = 1977;
pub const Z_UTIL_DEC_1979: u32 = 1978;
pub const Z_UTIL_DEC_1980: u32 = 1979;
pub const Z_UTIL_DEC_1981: u32 = 1980;
pub const Z_UTIL_DEC_1982: u32 = 1981;
pub const Z_UTIL_DEC_1983: u32 = 1982;
pub const Z_UTIL_DEC_1984: u32 = 1983;
pub const Z_UTIL_DEC_1985: u32 = 1984;
pub const Z_UTIL_DEC_1986: u32 = 1985;
pub const Z_UTIL_DEC_1987: u32 = 1986;
pub const Z_UTIL_DEC_1988: u32 = 1987;
pub const Z_UTIL_DEC_1989: u32 = 1988;
pub const Z_UTIL_DEC_1990: u32 = 1989;
pub const Z_UTIL_DEC_1991: u32 = 1990;
pub const Z_UTIL_DEC_1992: u32 = 1991;
pub const Z_UTIL_DEC_1993: u32 = 1992;
pub const Z_UTIL_DEC_1994: u32 = 1993;
pub const Z_UTIL_DEC_1995: u32 = 1994;
pub const Z_UTIL_DEC_1996: u32 = 1995;
pub const Z_UTIL_DEC_1997: u32 = 1996;
pub const Z_UTIL_DEC_1998: u32 = 1997;
pub const Z_UTIL_DEC_1999: u32 = 1998;
pub const Z_UTIL_DEC_2000: u32 = 1999;
pub const Z_UTIL_DEC_2001: u32 = 2000;
pub const Z_UTIL_DEC_2002: u32 = 2001;
pub const Z_UTIL_DEC_2003: u32 = 2002;
pub const Z_UTIL_DEC_2004: u32 = 2003;
pub const Z_UTIL_DEC_2005: u32 = 2004;
pub const Z_UTIL_DEC_2006: u32 = 2005;
pub const Z_UTIL_DEC_2007: u32 = 2006;
pub const Z_UTIL_DEC_2008: u32 = 2007;
pub const Z_UTIL_DEC_2009: u32 = 2008;
pub const Z_UTIL_DEC_2010: u32 = 2009;
pub const Z_UTIL_DEC_2011: u32 = 2010;
pub const Z_UTIL_DEC_2012: u32 = 2011;
pub const Z_UTIL_DEC_2013: u32 = 2012;
pub const Z_UTIL_DEC_2014: u32 = 2013;
pub const Z_UTIL_DEC_2015: u32 = 2014;
pub const Z_UTIL_DEC_2016: u32 = 2015;
pub const Z_UTIL_DEC_2017: u32 = 2016;
pub const Z_UTIL_DEC_2018: u32 = 2017;
pub const Z_UTIL_DEC_2019: u32 = 2018;
pub const Z_UTIL_DEC_2020: u32 = 2019;
pub const Z_UTIL_DEC_2021: u32 = 2020;
pub const Z_UTIL_DEC_2022: u32 = 2021;
pub const Z_UTIL_DEC_2023: u32 = 2022;
pub const Z_UTIL_DEC_2024: u32 = 2023;
pub const Z_UTIL_DEC_2025: u32 = 2024;
pub const Z_UTIL_DEC_2026: u32 = 2025;
pub const Z_UTIL_DEC_2027: u32 = 2026;
pub const Z_UTIL_DEC_2028: u32 = 2027;
pub const Z_UTIL_DEC_2029: u32 = 2028;
pub const Z_UTIL_DEC_2030: u32 = 2029;
pub const Z_UTIL_DEC_2031: u32 = 2030;
pub const Z_UTIL_DEC_2032: u32 = 2031;
pub const Z_UTIL_DEC_2033: u32 = 2032;
pub const Z_UTIL_DEC_2034: u32 = 2033;
pub const Z_UTIL_DEC_2035: u32 = 2034;
pub const Z_UTIL_DEC_2036: u32 = 2035;
pub const Z_UTIL_DEC_2037: u32 = 2036;
pub const Z_UTIL_DEC_2038: u32 = 2037;
pub const Z_UTIL_DEC_2039: u32 = 2038;
pub const Z_UTIL_DEC_2040: u32 = 2039;
pub const Z_UTIL_DEC_2041: u32 = 2040;
pub const Z_UTIL_DEC_2042: u32 = 2041;
pub const Z_UTIL_DEC_2043: u32 = 2042;
pub const Z_UTIL_DEC_2044: u32 = 2043;
pub const Z_UTIL_DEC_2045: u32 = 2044;
pub const Z_UTIL_DEC_2046: u32 = 2045;
pub const Z_UTIL_DEC_2047: u32 = 2046;
pub const Z_UTIL_DEC_2048: u32 = 2047;
pub const Z_UTIL_DEC_2049: u32 = 2048;
pub const Z_UTIL_DEC_2050: u32 = 2049;
pub const Z_UTIL_DEC_2051: u32 = 2050;
pub const Z_UTIL_DEC_2052: u32 = 2051;
pub const Z_UTIL_DEC_2053: u32 = 2052;
pub const Z_UTIL_DEC_2054: u32 = 2053;
pub const Z_UTIL_DEC_2055: u32 = 2054;
pub const Z_UTIL_DEC_2056: u32 = 2055;
pub const Z_UTIL_DEC_2057: u32 = 2056;
pub const Z_UTIL_DEC_2058: u32 = 2057;
pub const Z_UTIL_DEC_2059: u32 = 2058;
pub const Z_UTIL_DEC_2060: u32 = 2059;
pub const Z_UTIL_DEC_2061: u32 = 2060;
pub const Z_UTIL_DEC_2062: u32 = 2061;
pub const Z_UTIL_DEC_2063: u32 = 2062;
pub const Z_UTIL_DEC_2064: u32 = 2063;
pub const Z_UTIL_DEC_2065: u32 = 2064;
pub const Z_UTIL_DEC_2066: u32 = 2065;
pub const Z_UTIL_DEC_2067: u32 = 2066;
pub const Z_UTIL_DEC_2068: u32 = 2067;
pub const Z_UTIL_DEC_2069: u32 = 2068;
pub const Z_UTIL_DEC_2070: u32 = 2069;
pub const Z_UTIL_DEC_2071: u32 = 2070;
pub const Z_UTIL_DEC_2072: u32 = 2071;
pub const Z_UTIL_DEC_2073: u32 = 2072;
pub const Z_UTIL_DEC_2074: u32 = 2073;
pub const Z_UTIL_DEC_2075: u32 = 2074;
pub const Z_UTIL_DEC_2076: u32 = 2075;
pub const Z_UTIL_DEC_2077: u32 = 2076;
pub const Z_UTIL_DEC_2078: u32 = 2077;
pub const Z_UTIL_DEC_2079: u32 = 2078;
pub const Z_UTIL_DEC_2080: u32 = 2079;
pub const Z_UTIL_DEC_2081: u32 = 2080;
pub const Z_UTIL_DEC_2082: u32 = 2081;
pub const Z_UTIL_DEC_2083: u32 = 2082;
pub const Z_UTIL_DEC_2084: u32 = 2083;
pub const Z_UTIL_DEC_2085: u32 = 2084;
pub const Z_UTIL_DEC_2086: u32 = 2085;
pub const Z_UTIL_DEC_2087: u32 = 2086;
pub const Z_UTIL_DEC_2088: u32 = 2087;
pub const Z_UTIL_DEC_2089: u32 = 2088;
pub const Z_UTIL_DEC_2090: u32 = 2089;
pub const Z_UTIL_DEC_2091: u32 = 2090;
pub const Z_UTIL_DEC_2092: u32 = 2091;
pub const Z_UTIL_DEC_2093: u32 = 2092;
pub const Z_UTIL_DEC_2094: u32 = 2093;
pub const Z_UTIL_DEC_2095: u32 = 2094;
pub const Z_UTIL_DEC_2096: u32 = 2095;
pub const Z_UTIL_DEC_2097: u32 = 2096;
pub const Z_UTIL_DEC_2098: u32 = 2097;
pub const Z_UTIL_DEC_2099: u32 = 2098;
pub const Z_UTIL_DEC_2100: u32 = 2099;
pub const Z_UTIL_DEC_2101: u32 = 2100;
pub const Z_UTIL_DEC_2102: u32 = 2101;
pub const Z_UTIL_DEC_2103: u32 = 2102;
pub const Z_UTIL_DEC_2104: u32 = 2103;
pub const Z_UTIL_DEC_2105: u32 = 2104;
pub const Z_UTIL_DEC_2106: u32 = 2105;
pub const Z_UTIL_DEC_2107: u32 = 2106;
pub const Z_UTIL_DEC_2108: u32 = 2107;
pub const Z_UTIL_DEC_2109: u32 = 2108;
pub const Z_UTIL_DEC_2110: u32 = 2109;
pub const Z_UTIL_DEC_2111: u32 = 2110;
pub const Z_UTIL_DEC_2112: u32 = 2111;
pub const Z_UTIL_DEC_2113: u32 = 2112;
pub const Z_UTIL_DEC_2114: u32 = 2113;
pub const Z_UTIL_DEC_2115: u32 = 2114;
pub const Z_UTIL_DEC_2116: u32 = 2115;
pub const Z_UTIL_DEC_2117: u32 = 2116;
pub const Z_UTIL_DEC_2118: u32 = 2117;
pub const Z_UTIL_DEC_2119: u32 = 2118;
pub const Z_UTIL_DEC_2120: u32 = 2119;
pub const Z_UTIL_DEC_2121: u32 = 2120;
pub const Z_UTIL_DEC_2122: u32 = 2121;
pub const Z_UTIL_DEC_2123: u32 = 2122;
pub const Z_UTIL_DEC_2124: u32 = 2123;
pub const Z_UTIL_DEC_2125: u32 = 2124;
pub const Z_UTIL_DEC_2126: u32 = 2125;
pub const Z_UTIL_DEC_2127: u32 = 2126;
pub const Z_UTIL_DEC_2128: u32 = 2127;
pub const Z_UTIL_DEC_2129: u32 = 2128;
pub const Z_UTIL_DEC_2130: u32 = 2129;
pub const Z_UTIL_DEC_2131: u32 = 2130;
pub const Z_UTIL_DEC_2132: u32 = 2131;
pub const Z_UTIL_DEC_2133: u32 = 2132;
pub const Z_UTIL_DEC_2134: u32 = 2133;
pub const Z_UTIL_DEC_2135: u32 = 2134;
pub const Z_UTIL_DEC_2136: u32 = 2135;
pub const Z_UTIL_DEC_2137: u32 = 2136;
pub const Z_UTIL_DEC_2138: u32 = 2137;
pub const Z_UTIL_DEC_2139: u32 = 2138;
pub const Z_UTIL_DEC_2140: u32 = 2139;
pub const Z_UTIL_DEC_2141: u32 = 2140;
pub const Z_UTIL_DEC_2142: u32 = 2141;
pub const Z_UTIL_DEC_2143: u32 = 2142;
pub const Z_UTIL_DEC_2144: u32 = 2143;
pub const Z_UTIL_DEC_2145: u32 = 2144;
pub const Z_UTIL_DEC_2146: u32 = 2145;
pub const Z_UTIL_DEC_2147: u32 = 2146;
pub const Z_UTIL_DEC_2148: u32 = 2147;
pub const Z_UTIL_DEC_2149: u32 = 2148;
pub const Z_UTIL_DEC_2150: u32 = 2149;
pub const Z_UTIL_DEC_2151: u32 = 2150;
pub const Z_UTIL_DEC_2152: u32 = 2151;
pub const Z_UTIL_DEC_2153: u32 = 2152;
pub const Z_UTIL_DEC_2154: u32 = 2153;
pub const Z_UTIL_DEC_2155: u32 = 2154;
pub const Z_UTIL_DEC_2156: u32 = 2155;
pub const Z_UTIL_DEC_2157: u32 = 2156;
pub const Z_UTIL_DEC_2158: u32 = 2157;
pub const Z_UTIL_DEC_2159: u32 = 2158;
pub const Z_UTIL_DEC_2160: u32 = 2159;
pub const Z_UTIL_DEC_2161: u32 = 2160;
pub const Z_UTIL_DEC_2162: u32 = 2161;
pub const Z_UTIL_DEC_2163: u32 = 2162;
pub const Z_UTIL_DEC_2164: u32 = 2163;
pub const Z_UTIL_DEC_2165: u32 = 2164;
pub const Z_UTIL_DEC_2166: u32 = 2165;
pub const Z_UTIL_DEC_2167: u32 = 2166;
pub const Z_UTIL_DEC_2168: u32 = 2167;
pub const Z_UTIL_DEC_2169: u32 = 2168;
pub const Z_UTIL_DEC_2170: u32 = 2169;
pub const Z_UTIL_DEC_2171: u32 = 2170;
pub const Z_UTIL_DEC_2172: u32 = 2171;
pub const Z_UTIL_DEC_2173: u32 = 2172;
pub const Z_UTIL_DEC_2174: u32 = 2173;
pub const Z_UTIL_DEC_2175: u32 = 2174;
pub const Z_UTIL_DEC_2176: u32 = 2175;
pub const Z_UTIL_DEC_2177: u32 = 2176;
pub const Z_UTIL_DEC_2178: u32 = 2177;
pub const Z_UTIL_DEC_2179: u32 = 2178;
pub const Z_UTIL_DEC_2180: u32 = 2179;
pub const Z_UTIL_DEC_2181: u32 = 2180;
pub const Z_UTIL_DEC_2182: u32 = 2181;
pub const Z_UTIL_DEC_2183: u32 = 2182;
pub const Z_UTIL_DEC_2184: u32 = 2183;
pub const Z_UTIL_DEC_2185: u32 = 2184;
pub const Z_UTIL_DEC_2186: u32 = 2185;
pub const Z_UTIL_DEC_2187: u32 = 2186;
pub const Z_UTIL_DEC_2188: u32 = 2187;
pub const Z_UTIL_DEC_2189: u32 = 2188;
pub const Z_UTIL_DEC_2190: u32 = 2189;
pub const Z_UTIL_DEC_2191: u32 = 2190;
pub const Z_UTIL_DEC_2192: u32 = 2191;
pub const Z_UTIL_DEC_2193: u32 = 2192;
pub const Z_UTIL_DEC_2194: u32 = 2193;
pub const Z_UTIL_DEC_2195: u32 = 2194;
pub const Z_UTIL_DEC_2196: u32 = 2195;
pub const Z_UTIL_DEC_2197: u32 = 2196;
pub const Z_UTIL_DEC_2198: u32 = 2197;
pub const Z_UTIL_DEC_2199: u32 = 2198;
pub const Z_UTIL_DEC_2200: u32 = 2199;
pub const Z_UTIL_DEC_2201: u32 = 2200;
pub const Z_UTIL_DEC_2202: u32 = 2201;
pub const Z_UTIL_DEC_2203: u32 = 2202;
pub const Z_UTIL_DEC_2204: u32 = 2203;
pub const Z_UTIL_DEC_2205: u32 = 2204;
pub const Z_UTIL_DEC_2206: u32 = 2205;
pub const Z_UTIL_DEC_2207: u32 = 2206;
pub const Z_UTIL_DEC_2208: u32 = 2207;
pub const Z_UTIL_DEC_2209: u32 = 2208;
pub const Z_UTIL_DEC_2210: u32 = 2209;
pub const Z_UTIL_DEC_2211: u32 = 2210;
pub const Z_UTIL_DEC_2212: u32 = 2211;
pub const Z_UTIL_DEC_2213: u32 = 2212;
pub const Z_UTIL_DEC_2214: u32 = 2213;
pub const Z_UTIL_DEC_2215: u32 = 2214;
pub const Z_UTIL_DEC_2216: u32 = 2215;
pub const Z_UTIL_DEC_2217: u32 = 2216;
pub const Z_UTIL_DEC_2218: u32 = 2217;
pub const Z_UTIL_DEC_2219: u32 = 2218;
pub const Z_UTIL_DEC_2220: u32 = 2219;
pub const Z_UTIL_DEC_2221: u32 = 2220;
pub const Z_UTIL_DEC_2222: u32 = 2221;
pub const Z_UTIL_DEC_2223: u32 = 2222;
pub const Z_UTIL_DEC_2224: u32 = 2223;
pub const Z_UTIL_DEC_2225: u32 = 2224;
pub const Z_UTIL_DEC_2226: u32 = 2225;
pub const Z_UTIL_DEC_2227: u32 = 2226;
pub const Z_UTIL_DEC_2228: u32 = 2227;
pub const Z_UTIL_DEC_2229: u32 = 2228;
pub const Z_UTIL_DEC_2230: u32 = 2229;
pub const Z_UTIL_DEC_2231: u32 = 2230;
pub const Z_UTIL_DEC_2232: u32 = 2231;
pub const Z_UTIL_DEC_2233: u32 = 2232;
pub const Z_UTIL_DEC_2234: u32 = 2233;
pub const Z_UTIL_DEC_2235: u32 = 2234;
pub const Z_UTIL_DEC_2236: u32 = 2235;
pub const Z_UTIL_DEC_2237: u32 = 2236;
pub const Z_UTIL_DEC_2238: u32 = 2237;
pub const Z_UTIL_DEC_2239: u32 = 2238;
pub const Z_UTIL_DEC_2240: u32 = 2239;
pub const Z_UTIL_DEC_2241: u32 = 2240;
pub const Z_UTIL_DEC_2242: u32 = 2241;
pub const Z_UTIL_DEC_2243: u32 = 2242;
pub const Z_UTIL_DEC_2244: u32 = 2243;
pub const Z_UTIL_DEC_2245: u32 = 2244;
pub const Z_UTIL_DEC_2246: u32 = 2245;
pub const Z_UTIL_DEC_2247: u32 = 2246;
pub const Z_UTIL_DEC_2248: u32 = 2247;
pub const Z_UTIL_DEC_2249: u32 = 2248;
pub const Z_UTIL_DEC_2250: u32 = 2249;
pub const Z_UTIL_DEC_2251: u32 = 2250;
pub const Z_UTIL_DEC_2252: u32 = 2251;
pub const Z_UTIL_DEC_2253: u32 = 2252;
pub const Z_UTIL_DEC_2254: u32 = 2253;
pub const Z_UTIL_DEC_2255: u32 = 2254;
pub const Z_UTIL_DEC_2256: u32 = 2255;
pub const Z_UTIL_DEC_2257: u32 = 2256;
pub const Z_UTIL_DEC_2258: u32 = 2257;
pub const Z_UTIL_DEC_2259: u32 = 2258;
pub const Z_UTIL_DEC_2260: u32 = 2259;
pub const Z_UTIL_DEC_2261: u32 = 2260;
pub const Z_UTIL_DEC_2262: u32 = 2261;
pub const Z_UTIL_DEC_2263: u32 = 2262;
pub const Z_UTIL_DEC_2264: u32 = 2263;
pub const Z_UTIL_DEC_2265: u32 = 2264;
pub const Z_UTIL_DEC_2266: u32 = 2265;
pub const Z_UTIL_DEC_2267: u32 = 2266;
pub const Z_UTIL_DEC_2268: u32 = 2267;
pub const Z_UTIL_DEC_2269: u32 = 2268;
pub const Z_UTIL_DEC_2270: u32 = 2269;
pub const Z_UTIL_DEC_2271: u32 = 2270;
pub const Z_UTIL_DEC_2272: u32 = 2271;
pub const Z_UTIL_DEC_2273: u32 = 2272;
pub const Z_UTIL_DEC_2274: u32 = 2273;
pub const Z_UTIL_DEC_2275: u32 = 2274;
pub const Z_UTIL_DEC_2276: u32 = 2275;
pub const Z_UTIL_DEC_2277: u32 = 2276;
pub const Z_UTIL_DEC_2278: u32 = 2277;
pub const Z_UTIL_DEC_2279: u32 = 2278;
pub const Z_UTIL_DEC_2280: u32 = 2279;
pub const Z_UTIL_DEC_2281: u32 = 2280;
pub const Z_UTIL_DEC_2282: u32 = 2281;
pub const Z_UTIL_DEC_2283: u32 = 2282;
pub const Z_UTIL_DEC_2284: u32 = 2283;
pub const Z_UTIL_DEC_2285: u32 = 2284;
pub const Z_UTIL_DEC_2286: u32 = 2285;
pub const Z_UTIL_DEC_2287: u32 = 2286;
pub const Z_UTIL_DEC_2288: u32 = 2287;
pub const Z_UTIL_DEC_2289: u32 = 2288;
pub const Z_UTIL_DEC_2290: u32 = 2289;
pub const Z_UTIL_DEC_2291: u32 = 2290;
pub const Z_UTIL_DEC_2292: u32 = 2291;
pub const Z_UTIL_DEC_2293: u32 = 2292;
pub const Z_UTIL_DEC_2294: u32 = 2293;
pub const Z_UTIL_DEC_2295: u32 = 2294;
pub const Z_UTIL_DEC_2296: u32 = 2295;
pub const Z_UTIL_DEC_2297: u32 = 2296;
pub const Z_UTIL_DEC_2298: u32 = 2297;
pub const Z_UTIL_DEC_2299: u32 = 2298;
pub const Z_UTIL_DEC_2300: u32 = 2299;
pub const Z_UTIL_DEC_2301: u32 = 2300;
pub const Z_UTIL_DEC_2302: u32 = 2301;
pub const Z_UTIL_DEC_2303: u32 = 2302;
pub const Z_UTIL_DEC_2304: u32 = 2303;
pub const Z_UTIL_DEC_2305: u32 = 2304;
pub const Z_UTIL_DEC_2306: u32 = 2305;
pub const Z_UTIL_DEC_2307: u32 = 2306;
pub const Z_UTIL_DEC_2308: u32 = 2307;
pub const Z_UTIL_DEC_2309: u32 = 2308;
pub const Z_UTIL_DEC_2310: u32 = 2309;
pub const Z_UTIL_DEC_2311: u32 = 2310;
pub const Z_UTIL_DEC_2312: u32 = 2311;
pub const Z_UTIL_DEC_2313: u32 = 2312;
pub const Z_UTIL_DEC_2314: u32 = 2313;
pub const Z_UTIL_DEC_2315: u32 = 2314;
pub const Z_UTIL_DEC_2316: u32 = 2315;
pub const Z_UTIL_DEC_2317: u32 = 2316;
pub const Z_UTIL_DEC_2318: u32 = 2317;
pub const Z_UTIL_DEC_2319: u32 = 2318;
pub const Z_UTIL_DEC_2320: u32 = 2319;
pub const Z_UTIL_DEC_2321: u32 = 2320;
pub const Z_UTIL_DEC_2322: u32 = 2321;
pub const Z_UTIL_DEC_2323: u32 = 2322;
pub const Z_UTIL_DEC_2324: u32 = 2323;
pub const Z_UTIL_DEC_2325: u32 = 2324;
pub const Z_UTIL_DEC_2326: u32 = 2325;
pub const Z_UTIL_DEC_2327: u32 = 2326;
pub const Z_UTIL_DEC_2328: u32 = 2327;
pub const Z_UTIL_DEC_2329: u32 = 2328;
pub const Z_UTIL_DEC_2330: u32 = 2329;
pub const Z_UTIL_DEC_2331: u32 = 2330;
pub const Z_UTIL_DEC_2332: u32 = 2331;
pub const Z_UTIL_DEC_2333: u32 = 2332;
pub const Z_UTIL_DEC_2334: u32 = 2333;
pub const Z_UTIL_DEC_2335: u32 = 2334;
pub const Z_UTIL_DEC_2336: u32 = 2335;
pub const Z_UTIL_DEC_2337: u32 = 2336;
pub const Z_UTIL_DEC_2338: u32 = 2337;
pub const Z_UTIL_DEC_2339: u32 = 2338;
pub const Z_UTIL_DEC_2340: u32 = 2339;
pub const Z_UTIL_DEC_2341: u32 = 2340;
pub const Z_UTIL_DEC_2342: u32 = 2341;
pub const Z_UTIL_DEC_2343: u32 = 2342;
pub const Z_UTIL_DEC_2344: u32 = 2343;
pub const Z_UTIL_DEC_2345: u32 = 2344;
pub const Z_UTIL_DEC_2346: u32 = 2345;
pub const Z_UTIL_DEC_2347: u32 = 2346;
pub const Z_UTIL_DEC_2348: u32 = 2347;
pub const Z_UTIL_DEC_2349: u32 = 2348;
pub const Z_UTIL_DEC_2350: u32 = 2349;
pub const Z_UTIL_DEC_2351: u32 = 2350;
pub const Z_UTIL_DEC_2352: u32 = 2351;
pub const Z_UTIL_DEC_2353: u32 = 2352;
pub const Z_UTIL_DEC_2354: u32 = 2353;
pub const Z_UTIL_DEC_2355: u32 = 2354;
pub const Z_UTIL_DEC_2356: u32 = 2355;
pub const Z_UTIL_DEC_2357: u32 = 2356;
pub const Z_UTIL_DEC_2358: u32 = 2357;
pub const Z_UTIL_DEC_2359: u32 = 2358;
pub const Z_UTIL_DEC_2360: u32 = 2359;
pub const Z_UTIL_DEC_2361: u32 = 2360;
pub const Z_UTIL_DEC_2362: u32 = 2361;
pub const Z_UTIL_DEC_2363: u32 = 2362;
pub const Z_UTIL_DEC_2364: u32 = 2363;
pub const Z_UTIL_DEC_2365: u32 = 2364;
pub const Z_UTIL_DEC_2366: u32 = 2365;
pub const Z_UTIL_DEC_2367: u32 = 2366;
pub const Z_UTIL_DEC_2368: u32 = 2367;
pub const Z_UTIL_DEC_2369: u32 = 2368;
pub const Z_UTIL_DEC_2370: u32 = 2369;
pub const Z_UTIL_DEC_2371: u32 = 2370;
pub const Z_UTIL_DEC_2372: u32 = 2371;
pub const Z_UTIL_DEC_2373: u32 = 2372;
pub const Z_UTIL_DEC_2374: u32 = 2373;
pub const Z_UTIL_DEC_2375: u32 = 2374;
pub const Z_UTIL_DEC_2376: u32 = 2375;
pub const Z_UTIL_DEC_2377: u32 = 2376;
pub const Z_UTIL_DEC_2378: u32 = 2377;
pub const Z_UTIL_DEC_2379: u32 = 2378;
pub const Z_UTIL_DEC_2380: u32 = 2379;
pub const Z_UTIL_DEC_2381: u32 = 2380;
pub const Z_UTIL_DEC_2382: u32 = 2381;
pub const Z_UTIL_DEC_2383: u32 = 2382;
pub const Z_UTIL_DEC_2384: u32 = 2383;
pub const Z_UTIL_DEC_2385: u32 = 2384;
pub const Z_UTIL_DEC_2386: u32 = 2385;
pub const Z_UTIL_DEC_2387: u32 = 2386;
pub const Z_UTIL_DEC_2388: u32 = 2387;
pub const Z_UTIL_DEC_2389: u32 = 2388;
pub const Z_UTIL_DEC_2390: u32 = 2389;
pub const Z_UTIL_DEC_2391: u32 = 2390;
pub const Z_UTIL_DEC_2392: u32 = 2391;
pub const Z_UTIL_DEC_2393: u32 = 2392;
pub const Z_UTIL_DEC_2394: u32 = 2393;
pub const Z_UTIL_DEC_2395: u32 = 2394;
pub const Z_UTIL_DEC_2396: u32 = 2395;
pub const Z_UTIL_DEC_2397: u32 = 2396;
pub const Z_UTIL_DEC_2398: u32 = 2397;
pub const Z_UTIL_DEC_2399: u32 = 2398;
pub const Z_UTIL_DEC_2400: u32 = 2399;
pub const Z_UTIL_DEC_2401: u32 = 2400;
pub const Z_UTIL_DEC_2402: u32 = 2401;
pub const Z_UTIL_DEC_2403: u32 = 2402;
pub const Z_UTIL_DEC_2404: u32 = 2403;
pub const Z_UTIL_DEC_2405: u32 = 2404;
pub const Z_UTIL_DEC_2406: u32 = 2405;
pub const Z_UTIL_DEC_2407: u32 = 2406;
pub const Z_UTIL_DEC_2408: u32 = 2407;
pub const Z_UTIL_DEC_2409: u32 = 2408;
pub const Z_UTIL_DEC_2410: u32 = 2409;
pub const Z_UTIL_DEC_2411: u32 = 2410;
pub const Z_UTIL_DEC_2412: u32 = 2411;
pub const Z_UTIL_DEC_2413: u32 = 2412;
pub const Z_UTIL_DEC_2414: u32 = 2413;
pub const Z_UTIL_DEC_2415: u32 = 2414;
pub const Z_UTIL_DEC_2416: u32 = 2415;
pub const Z_UTIL_DEC_2417: u32 = 2416;
pub const Z_UTIL_DEC_2418: u32 = 2417;
pub const Z_UTIL_DEC_2419: u32 = 2418;
pub const Z_UTIL_DEC_2420: u32 = 2419;
pub const Z_UTIL_DEC_2421: u32 = 2420;
pub const Z_UTIL_DEC_2422: u32 = 2421;
pub const Z_UTIL_DEC_2423: u32 = 2422;
pub const Z_UTIL_DEC_2424: u32 = 2423;
pub const Z_UTIL_DEC_2425: u32 = 2424;
pub const Z_UTIL_DEC_2426: u32 = 2425;
pub const Z_UTIL_DEC_2427: u32 = 2426;
pub const Z_UTIL_DEC_2428: u32 = 2427;
pub const Z_UTIL_DEC_2429: u32 = 2428;
pub const Z_UTIL_DEC_2430: u32 = 2429;
pub const Z_UTIL_DEC_2431: u32 = 2430;
pub const Z_UTIL_DEC_2432: u32 = 2431;
pub const Z_UTIL_DEC_2433: u32 = 2432;
pub const Z_UTIL_DEC_2434: u32 = 2433;
pub const Z_UTIL_DEC_2435: u32 = 2434;
pub const Z_UTIL_DEC_2436: u32 = 2435;
pub const Z_UTIL_DEC_2437: u32 = 2436;
pub const Z_UTIL_DEC_2438: u32 = 2437;
pub const Z_UTIL_DEC_2439: u32 = 2438;
pub const Z_UTIL_DEC_2440: u32 = 2439;
pub const Z_UTIL_DEC_2441: u32 = 2440;
pub const Z_UTIL_DEC_2442: u32 = 2441;
pub const Z_UTIL_DEC_2443: u32 = 2442;
pub const Z_UTIL_DEC_2444: u32 = 2443;
pub const Z_UTIL_DEC_2445: u32 = 2444;
pub const Z_UTIL_DEC_2446: u32 = 2445;
pub const Z_UTIL_DEC_2447: u32 = 2446;
pub const Z_UTIL_DEC_2448: u32 = 2447;
pub const Z_UTIL_DEC_2449: u32 = 2448;
pub const Z_UTIL_DEC_2450: u32 = 2449;
pub const Z_UTIL_DEC_2451: u32 = 2450;
pub const Z_UTIL_DEC_2452: u32 = 2451;
pub const Z_UTIL_DEC_2453: u32 = 2452;
pub const Z_UTIL_DEC_2454: u32 = 2453;
pub const Z_UTIL_DEC_2455: u32 = 2454;
pub const Z_UTIL_DEC_2456: u32 = 2455;
pub const Z_UTIL_DEC_2457: u32 = 2456;
pub const Z_UTIL_DEC_2458: u32 = 2457;
pub const Z_UTIL_DEC_2459: u32 = 2458;
pub const Z_UTIL_DEC_2460: u32 = 2459;
pub const Z_UTIL_DEC_2461: u32 = 2460;
pub const Z_UTIL_DEC_2462: u32 = 2461;
pub const Z_UTIL_DEC_2463: u32 = 2462;
pub const Z_UTIL_DEC_2464: u32 = 2463;
pub const Z_UTIL_DEC_2465: u32 = 2464;
pub const Z_UTIL_DEC_2466: u32 = 2465;
pub const Z_UTIL_DEC_2467: u32 = 2466;
pub const Z_UTIL_DEC_2468: u32 = 2467;
pub const Z_UTIL_DEC_2469: u32 = 2468;
pub const Z_UTIL_DEC_2470: u32 = 2469;
pub const Z_UTIL_DEC_2471: u32 = 2470;
pub const Z_UTIL_DEC_2472: u32 = 2471;
pub const Z_UTIL_DEC_2473: u32 = 2472;
pub const Z_UTIL_DEC_2474: u32 = 2473;
pub const Z_UTIL_DEC_2475: u32 = 2474;
pub const Z_UTIL_DEC_2476: u32 = 2475;
pub const Z_UTIL_DEC_2477: u32 = 2476;
pub const Z_UTIL_DEC_2478: u32 = 2477;
pub const Z_UTIL_DEC_2479: u32 = 2478;
pub const Z_UTIL_DEC_2480: u32 = 2479;
pub const Z_UTIL_DEC_2481: u32 = 2480;
pub const Z_UTIL_DEC_2482: u32 = 2481;
pub const Z_UTIL_DEC_2483: u32 = 2482;
pub const Z_UTIL_DEC_2484: u32 = 2483;
pub const Z_UTIL_DEC_2485: u32 = 2484;
pub const Z_UTIL_DEC_2486: u32 = 2485;
pub const Z_UTIL_DEC_2487: u32 = 2486;
pub const Z_UTIL_DEC_2488: u32 = 2487;
pub const Z_UTIL_DEC_2489: u32 = 2488;
pub const Z_UTIL_DEC_2490: u32 = 2489;
pub const Z_UTIL_DEC_2491: u32 = 2490;
pub const Z_UTIL_DEC_2492: u32 = 2491;
pub const Z_UTIL_DEC_2493: u32 = 2492;
pub const Z_UTIL_DEC_2494: u32 = 2493;
pub const Z_UTIL_DEC_2495: u32 = 2494;
pub const Z_UTIL_DEC_2496: u32 = 2495;
pub const Z_UTIL_DEC_2497: u32 = 2496;
pub const Z_UTIL_DEC_2498: u32 = 2497;
pub const Z_UTIL_DEC_2499: u32 = 2498;
pub const Z_UTIL_DEC_2500: u32 = 2499;
pub const Z_UTIL_DEC_2501: u32 = 2500;
pub const Z_UTIL_DEC_2502: u32 = 2501;
pub const Z_UTIL_DEC_2503: u32 = 2502;
pub const Z_UTIL_DEC_2504: u32 = 2503;
pub const Z_UTIL_DEC_2505: u32 = 2504;
pub const Z_UTIL_DEC_2506: u32 = 2505;
pub const Z_UTIL_DEC_2507: u32 = 2506;
pub const Z_UTIL_DEC_2508: u32 = 2507;
pub const Z_UTIL_DEC_2509: u32 = 2508;
pub const Z_UTIL_DEC_2510: u32 = 2509;
pub const Z_UTIL_DEC_2511: u32 = 2510;
pub const Z_UTIL_DEC_2512: u32 = 2511;
pub const Z_UTIL_DEC_2513: u32 = 2512;
pub const Z_UTIL_DEC_2514: u32 = 2513;
pub const Z_UTIL_DEC_2515: u32 = 2514;
pub const Z_UTIL_DEC_2516: u32 = 2515;
pub const Z_UTIL_DEC_2517: u32 = 2516;
pub const Z_UTIL_DEC_2518: u32 = 2517;
pub const Z_UTIL_DEC_2519: u32 = 2518;
pub const Z_UTIL_DEC_2520: u32 = 2519;
pub const Z_UTIL_DEC_2521: u32 = 2520;
pub const Z_UTIL_DEC_2522: u32 = 2521;
pub const Z_UTIL_DEC_2523: u32 = 2522;
pub const Z_UTIL_DEC_2524: u32 = 2523;
pub const Z_UTIL_DEC_2525: u32 = 2524;
pub const Z_UTIL_DEC_2526: u32 = 2525;
pub const Z_UTIL_DEC_2527: u32 = 2526;
pub const Z_UTIL_DEC_2528: u32 = 2527;
pub const Z_UTIL_DEC_2529: u32 = 2528;
pub const Z_UTIL_DEC_2530: u32 = 2529;
pub const Z_UTIL_DEC_2531: u32 = 2530;
pub const Z_UTIL_DEC_2532: u32 = 2531;
pub const Z_UTIL_DEC_2533: u32 = 2532;
pub const Z_UTIL_DEC_2534: u32 = 2533;
pub const Z_UTIL_DEC_2535: u32 = 2534;
pub const Z_UTIL_DEC_2536: u32 = 2535;
pub const Z_UTIL_DEC_2537: u32 = 2536;
pub const Z_UTIL_DEC_2538: u32 = 2537;
pub const Z_UTIL_DEC_2539: u32 = 2538;
pub const Z_UTIL_DEC_2540: u32 = 2539;
pub const Z_UTIL_DEC_2541: u32 = 2540;
pub const Z_UTIL_DEC_2542: u32 = 2541;
pub const Z_UTIL_DEC_2543: u32 = 2542;
pub const Z_UTIL_DEC_2544: u32 = 2543;
pub const Z_UTIL_DEC_2545: u32 = 2544;
pub const Z_UTIL_DEC_2546: u32 = 2545;
pub const Z_UTIL_DEC_2547: u32 = 2546;
pub const Z_UTIL_DEC_2548: u32 = 2547;
pub const Z_UTIL_DEC_2549: u32 = 2548;
pub const Z_UTIL_DEC_2550: u32 = 2549;
pub const Z_UTIL_DEC_2551: u32 = 2550;
pub const Z_UTIL_DEC_2552: u32 = 2551;
pub const Z_UTIL_DEC_2553: u32 = 2552;
pub const Z_UTIL_DEC_2554: u32 = 2553;
pub const Z_UTIL_DEC_2555: u32 = 2554;
pub const Z_UTIL_DEC_2556: u32 = 2555;
pub const Z_UTIL_DEC_2557: u32 = 2556;
pub const Z_UTIL_DEC_2558: u32 = 2557;
pub const Z_UTIL_DEC_2559: u32 = 2558;
pub const Z_UTIL_DEC_2560: u32 = 2559;
pub const Z_UTIL_DEC_2561: u32 = 2560;
pub const Z_UTIL_DEC_2562: u32 = 2561;
pub const Z_UTIL_DEC_2563: u32 = 2562;
pub const Z_UTIL_DEC_2564: u32 = 2563;
pub const Z_UTIL_DEC_2565: u32 = 2564;
pub const Z_UTIL_DEC_2566: u32 = 2565;
pub const Z_UTIL_DEC_2567: u32 = 2566;
pub const Z_UTIL_DEC_2568: u32 = 2567;
pub const Z_UTIL_DEC_2569: u32 = 2568;
pub const Z_UTIL_DEC_2570: u32 = 2569;
pub const Z_UTIL_DEC_2571: u32 = 2570;
pub const Z_UTIL_DEC_2572: u32 = 2571;
pub const Z_UTIL_DEC_2573: u32 = 2572;
pub const Z_UTIL_DEC_2574: u32 = 2573;
pub const Z_UTIL_DEC_2575: u32 = 2574;
pub const Z_UTIL_DEC_2576: u32 = 2575;
pub const Z_UTIL_DEC_2577: u32 = 2576;
pub const Z_UTIL_DEC_2578: u32 = 2577;
pub const Z_UTIL_DEC_2579: u32 = 2578;
pub const Z_UTIL_DEC_2580: u32 = 2579;
pub const Z_UTIL_DEC_2581: u32 = 2580;
pub const Z_UTIL_DEC_2582: u32 = 2581;
pub const Z_UTIL_DEC_2583: u32 = 2582;
pub const Z_UTIL_DEC_2584: u32 = 2583;
pub const Z_UTIL_DEC_2585: u32 = 2584;
pub const Z_UTIL_DEC_2586: u32 = 2585;
pub const Z_UTIL_DEC_2587: u32 = 2586;
pub const Z_UTIL_DEC_2588: u32 = 2587;
pub const Z_UTIL_DEC_2589: u32 = 2588;
pub const Z_UTIL_DEC_2590: u32 = 2589;
pub const Z_UTIL_DEC_2591: u32 = 2590;
pub const Z_UTIL_DEC_2592: u32 = 2591;
pub const Z_UTIL_DEC_2593: u32 = 2592;
pub const Z_UTIL_DEC_2594: u32 = 2593;
pub const Z_UTIL_DEC_2595: u32 = 2594;
pub const Z_UTIL_DEC_2596: u32 = 2595;
pub const Z_UTIL_DEC_2597: u32 = 2596;
pub const Z_UTIL_DEC_2598: u32 = 2597;
pub const Z_UTIL_DEC_2599: u32 = 2598;
pub const Z_UTIL_DEC_2600: u32 = 2599;
pub const Z_UTIL_DEC_2601: u32 = 2600;
pub const Z_UTIL_DEC_2602: u32 = 2601;
pub const Z_UTIL_DEC_2603: u32 = 2602;
pub const Z_UTIL_DEC_2604: u32 = 2603;
pub const Z_UTIL_DEC_2605: u32 = 2604;
pub const Z_UTIL_DEC_2606: u32 = 2605;
pub const Z_UTIL_DEC_2607: u32 = 2606;
pub const Z_UTIL_DEC_2608: u32 = 2607;
pub const Z_UTIL_DEC_2609: u32 = 2608;
pub const Z_UTIL_DEC_2610: u32 = 2609;
pub const Z_UTIL_DEC_2611: u32 = 2610;
pub const Z_UTIL_DEC_2612: u32 = 2611;
pub const Z_UTIL_DEC_2613: u32 = 2612;
pub const Z_UTIL_DEC_2614: u32 = 2613;
pub const Z_UTIL_DEC_2615: u32 = 2614;
pub const Z_UTIL_DEC_2616: u32 = 2615;
pub const Z_UTIL_DEC_2617: u32 = 2616;
pub const Z_UTIL_DEC_2618: u32 = 2617;
pub const Z_UTIL_DEC_2619: u32 = 2618;
pub const Z_UTIL_DEC_2620: u32 = 2619;
pub const Z_UTIL_DEC_2621: u32 = 2620;
pub const Z_UTIL_DEC_2622: u32 = 2621;
pub const Z_UTIL_DEC_2623: u32 = 2622;
pub const Z_UTIL_DEC_2624: u32 = 2623;
pub const Z_UTIL_DEC_2625: u32 = 2624;
pub const Z_UTIL_DEC_2626: u32 = 2625;
pub const Z_UTIL_DEC_2627: u32 = 2626;
pub const Z_UTIL_DEC_2628: u32 = 2627;
pub const Z_UTIL_DEC_2629: u32 = 2628;
pub const Z_UTIL_DEC_2630: u32 = 2629;
pub const Z_UTIL_DEC_2631: u32 = 2630;
pub const Z_UTIL_DEC_2632: u32 = 2631;
pub const Z_UTIL_DEC_2633: u32 = 2632;
pub const Z_UTIL_DEC_2634: u32 = 2633;
pub const Z_UTIL_DEC_2635: u32 = 2634;
pub const Z_UTIL_DEC_2636: u32 = 2635;
pub const Z_UTIL_DEC_2637: u32 = 2636;
pub const Z_UTIL_DEC_2638: u32 = 2637;
pub const Z_UTIL_DEC_2639: u32 = 2638;
pub const Z_UTIL_DEC_2640: u32 = 2639;
pub const Z_UTIL_DEC_2641: u32 = 2640;
pub const Z_UTIL_DEC_2642: u32 = 2641;
pub const Z_UTIL_DEC_2643: u32 = 2642;
pub const Z_UTIL_DEC_2644: u32 = 2643;
pub const Z_UTIL_DEC_2645: u32 = 2644;
pub const Z_UTIL_DEC_2646: u32 = 2645;
pub const Z_UTIL_DEC_2647: u32 = 2646;
pub const Z_UTIL_DEC_2648: u32 = 2647;
pub const Z_UTIL_DEC_2649: u32 = 2648;
pub const Z_UTIL_DEC_2650: u32 = 2649;
pub const Z_UTIL_DEC_2651: u32 = 2650;
pub const Z_UTIL_DEC_2652: u32 = 2651;
pub const Z_UTIL_DEC_2653: u32 = 2652;
pub const Z_UTIL_DEC_2654: u32 = 2653;
pub const Z_UTIL_DEC_2655: u32 = 2654;
pub const Z_UTIL_DEC_2656: u32 = 2655;
pub const Z_UTIL_DEC_2657: u32 = 2656;
pub const Z_UTIL_DEC_2658: u32 = 2657;
pub const Z_UTIL_DEC_2659: u32 = 2658;
pub const Z_UTIL_DEC_2660: u32 = 2659;
pub const Z_UTIL_DEC_2661: u32 = 2660;
pub const Z_UTIL_DEC_2662: u32 = 2661;
pub const Z_UTIL_DEC_2663: u32 = 2662;
pub const Z_UTIL_DEC_2664: u32 = 2663;
pub const Z_UTIL_DEC_2665: u32 = 2664;
pub const Z_UTIL_DEC_2666: u32 = 2665;
pub const Z_UTIL_DEC_2667: u32 = 2666;
pub const Z_UTIL_DEC_2668: u32 = 2667;
pub const Z_UTIL_DEC_2669: u32 = 2668;
pub const Z_UTIL_DEC_2670: u32 = 2669;
pub const Z_UTIL_DEC_2671: u32 = 2670;
pub const Z_UTIL_DEC_2672: u32 = 2671;
pub const Z_UTIL_DEC_2673: u32 = 2672;
pub const Z_UTIL_DEC_2674: u32 = 2673;
pub const Z_UTIL_DEC_2675: u32 = 2674;
pub const Z_UTIL_DEC_2676: u32 = 2675;
pub const Z_UTIL_DEC_2677: u32 = 2676;
pub const Z_UTIL_DEC_2678: u32 = 2677;
pub const Z_UTIL_DEC_2679: u32 = 2678;
pub const Z_UTIL_DEC_2680: u32 = 2679;
pub const Z_UTIL_DEC_2681: u32 = 2680;
pub const Z_UTIL_DEC_2682: u32 = 2681;
pub const Z_UTIL_DEC_2683: u32 = 2682;
pub const Z_UTIL_DEC_2684: u32 = 2683;
pub const Z_UTIL_DEC_2685: u32 = 2684;
pub const Z_UTIL_DEC_2686: u32 = 2685;
pub const Z_UTIL_DEC_2687: u32 = 2686;
pub const Z_UTIL_DEC_2688: u32 = 2687;
pub const Z_UTIL_DEC_2689: u32 = 2688;
pub const Z_UTIL_DEC_2690: u32 = 2689;
pub const Z_UTIL_DEC_2691: u32 = 2690;
pub const Z_UTIL_DEC_2692: u32 = 2691;
pub const Z_UTIL_DEC_2693: u32 = 2692;
pub const Z_UTIL_DEC_2694: u32 = 2693;
pub const Z_UTIL_DEC_2695: u32 = 2694;
pub const Z_UTIL_DEC_2696: u32 = 2695;
pub const Z_UTIL_DEC_2697: u32 = 2696;
pub const Z_UTIL_DEC_2698: u32 = 2697;
pub const Z_UTIL_DEC_2699: u32 = 2698;
pub const Z_UTIL_DEC_2700: u32 = 2699;
pub const Z_UTIL_DEC_2701: u32 = 2700;
pub const Z_UTIL_DEC_2702: u32 = 2701;
pub const Z_UTIL_DEC_2703: u32 = 2702;
pub const Z_UTIL_DEC_2704: u32 = 2703;
pub const Z_UTIL_DEC_2705: u32 = 2704;
pub const Z_UTIL_DEC_2706: u32 = 2705;
pub const Z_UTIL_DEC_2707: u32 = 2706;
pub const Z_UTIL_DEC_2708: u32 = 2707;
pub const Z_UTIL_DEC_2709: u32 = 2708;
pub const Z_UTIL_DEC_2710: u32 = 2709;
pub const Z_UTIL_DEC_2711: u32 = 2710;
pub const Z_UTIL_DEC_2712: u32 = 2711;
pub const Z_UTIL_DEC_2713: u32 = 2712;
pub const Z_UTIL_DEC_2714: u32 = 2713;
pub const Z_UTIL_DEC_2715: u32 = 2714;
pub const Z_UTIL_DEC_2716: u32 = 2715;
pub const Z_UTIL_DEC_2717: u32 = 2716;
pub const Z_UTIL_DEC_2718: u32 = 2717;
pub const Z_UTIL_DEC_2719: u32 = 2718;
pub const Z_UTIL_DEC_2720: u32 = 2719;
pub const Z_UTIL_DEC_2721: u32 = 2720;
pub const Z_UTIL_DEC_2722: u32 = 2721;
pub const Z_UTIL_DEC_2723: u32 = 2722;
pub const Z_UTIL_DEC_2724: u32 = 2723;
pub const Z_UTIL_DEC_2725: u32 = 2724;
pub const Z_UTIL_DEC_2726: u32 = 2725;
pub const Z_UTIL_DEC_2727: u32 = 2726;
pub const Z_UTIL_DEC_2728: u32 = 2727;
pub const Z_UTIL_DEC_2729: u32 = 2728;
pub const Z_UTIL_DEC_2730: u32 = 2729;
pub const Z_UTIL_DEC_2731: u32 = 2730;
pub const Z_UTIL_DEC_2732: u32 = 2731;
pub const Z_UTIL_DEC_2733: u32 = 2732;
pub const Z_UTIL_DEC_2734: u32 = 2733;
pub const Z_UTIL_DEC_2735: u32 = 2734;
pub const Z_UTIL_DEC_2736: u32 = 2735;
pub const Z_UTIL_DEC_2737: u32 = 2736;
pub const Z_UTIL_DEC_2738: u32 = 2737;
pub const Z_UTIL_DEC_2739: u32 = 2738;
pub const Z_UTIL_DEC_2740: u32 = 2739;
pub const Z_UTIL_DEC_2741: u32 = 2740;
pub const Z_UTIL_DEC_2742: u32 = 2741;
pub const Z_UTIL_DEC_2743: u32 = 2742;
pub const Z_UTIL_DEC_2744: u32 = 2743;
pub const Z_UTIL_DEC_2745: u32 = 2744;
pub const Z_UTIL_DEC_2746: u32 = 2745;
pub const Z_UTIL_DEC_2747: u32 = 2746;
pub const Z_UTIL_DEC_2748: u32 = 2747;
pub const Z_UTIL_DEC_2749: u32 = 2748;
pub const Z_UTIL_DEC_2750: u32 = 2749;
pub const Z_UTIL_DEC_2751: u32 = 2750;
pub const Z_UTIL_DEC_2752: u32 = 2751;
pub const Z_UTIL_DEC_2753: u32 = 2752;
pub const Z_UTIL_DEC_2754: u32 = 2753;
pub const Z_UTIL_DEC_2755: u32 = 2754;
pub const Z_UTIL_DEC_2756: u32 = 2755;
pub const Z_UTIL_DEC_2757: u32 = 2756;
pub const Z_UTIL_DEC_2758: u32 = 2757;
pub const Z_UTIL_DEC_2759: u32 = 2758;
pub const Z_UTIL_DEC_2760: u32 = 2759;
pub const Z_UTIL_DEC_2761: u32 = 2760;
pub const Z_UTIL_DEC_2762: u32 = 2761;
pub const Z_UTIL_DEC_2763: u32 = 2762;
pub const Z_UTIL_DEC_2764: u32 = 2763;
pub const Z_UTIL_DEC_2765: u32 = 2764;
pub const Z_UTIL_DEC_2766: u32 = 2765;
pub const Z_UTIL_DEC_2767: u32 = 2766;
pub const Z_UTIL_DEC_2768: u32 = 2767;
pub const Z_UTIL_DEC_2769: u32 = 2768;
pub const Z_UTIL_DEC_2770: u32 = 2769;
pub const Z_UTIL_DEC_2771: u32 = 2770;
pub const Z_UTIL_DEC_2772: u32 = 2771;
pub const Z_UTIL_DEC_2773: u32 = 2772;
pub const Z_UTIL_DEC_2774: u32 = 2773;
pub const Z_UTIL_DEC_2775: u32 = 2774;
pub const Z_UTIL_DEC_2776: u32 = 2775;
pub const Z_UTIL_DEC_2777: u32 = 2776;
pub const Z_UTIL_DEC_2778: u32 = 2777;
pub const Z_UTIL_DEC_2779: u32 = 2778;
pub const Z_UTIL_DEC_2780: u32 = 2779;
pub const Z_UTIL_DEC_2781: u32 = 2780;
pub const Z_UTIL_DEC_2782: u32 = 2781;
pub const Z_UTIL_DEC_2783: u32 = 2782;
pub const Z_UTIL_DEC_2784: u32 = 2783;
pub const Z_UTIL_DEC_2785: u32 = 2784;
pub const Z_UTIL_DEC_2786: u32 = 2785;
pub const Z_UTIL_DEC_2787: u32 = 2786;
pub const Z_UTIL_DEC_2788: u32 = 2787;
pub const Z_UTIL_DEC_2789: u32 = 2788;
pub const Z_UTIL_DEC_2790: u32 = 2789;
pub const Z_UTIL_DEC_2791: u32 = 2790;
pub const Z_UTIL_DEC_2792: u32 = 2791;
pub const Z_UTIL_DEC_2793: u32 = 2792;
pub const Z_UTIL_DEC_2794: u32 = 2793;
pub const Z_UTIL_DEC_2795: u32 = 2794;
pub const Z_UTIL_DEC_2796: u32 = 2795;
pub const Z_UTIL_DEC_2797: u32 = 2796;
pub const Z_UTIL_DEC_2798: u32 = 2797;
pub const Z_UTIL_DEC_2799: u32 = 2798;
pub const Z_UTIL_DEC_2800: u32 = 2799;
pub const Z_UTIL_DEC_2801: u32 = 2800;
pub const Z_UTIL_DEC_2802: u32 = 2801;
pub const Z_UTIL_DEC_2803: u32 = 2802;
pub const Z_UTIL_DEC_2804: u32 = 2803;
pub const Z_UTIL_DEC_2805: u32 = 2804;
pub const Z_UTIL_DEC_2806: u32 = 2805;
pub const Z_UTIL_DEC_2807: u32 = 2806;
pub const Z_UTIL_DEC_2808: u32 = 2807;
pub const Z_UTIL_DEC_2809: u32 = 2808;
pub const Z_UTIL_DEC_2810: u32 = 2809;
pub const Z_UTIL_DEC_2811: u32 = 2810;
pub const Z_UTIL_DEC_2812: u32 = 2811;
pub const Z_UTIL_DEC_2813: u32 = 2812;
pub const Z_UTIL_DEC_2814: u32 = 2813;
pub const Z_UTIL_DEC_2815: u32 = 2814;
pub const Z_UTIL_DEC_2816: u32 = 2815;
pub const Z_UTIL_DEC_2817: u32 = 2816;
pub const Z_UTIL_DEC_2818: u32 = 2817;
pub const Z_UTIL_DEC_2819: u32 = 2818;
pub const Z_UTIL_DEC_2820: u32 = 2819;
pub const Z_UTIL_DEC_2821: u32 = 2820;
pub const Z_UTIL_DEC_2822: u32 = 2821;
pub const Z_UTIL_DEC_2823: u32 = 2822;
pub const Z_UTIL_DEC_2824: u32 = 2823;
pub const Z_UTIL_DEC_2825: u32 = 2824;
pub const Z_UTIL_DEC_2826: u32 = 2825;
pub const Z_UTIL_DEC_2827: u32 = 2826;
pub const Z_UTIL_DEC_2828: u32 = 2827;
pub const Z_UTIL_DEC_2829: u32 = 2828;
pub const Z_UTIL_DEC_2830: u32 = 2829;
pub const Z_UTIL_DEC_2831: u32 = 2830;
pub const Z_UTIL_DEC_2832: u32 = 2831;
pub const Z_UTIL_DEC_2833: u32 = 2832;
pub const Z_UTIL_DEC_2834: u32 = 2833;
pub const Z_UTIL_DEC_2835: u32 = 2834;
pub const Z_UTIL_DEC_2836: u32 = 2835;
pub const Z_UTIL_DEC_2837: u32 = 2836;
pub const Z_UTIL_DEC_2838: u32 = 2837;
pub const Z_UTIL_DEC_2839: u32 = 2838;
pub const Z_UTIL_DEC_2840: u32 = 2839;
pub const Z_UTIL_DEC_2841: u32 = 2840;
pub const Z_UTIL_DEC_2842: u32 = 2841;
pub const Z_UTIL_DEC_2843: u32 = 2842;
pub const Z_UTIL_DEC_2844: u32 = 2843;
pub const Z_UTIL_DEC_2845: u32 = 2844;
pub const Z_UTIL_DEC_2846: u32 = 2845;
pub const Z_UTIL_DEC_2847: u32 = 2846;
pub const Z_UTIL_DEC_2848: u32 = 2847;
pub const Z_UTIL_DEC_2849: u32 = 2848;
pub const Z_UTIL_DEC_2850: u32 = 2849;
pub const Z_UTIL_DEC_2851: u32 = 2850;
pub const Z_UTIL_DEC_2852: u32 = 2851;
pub const Z_UTIL_DEC_2853: u32 = 2852;
pub const Z_UTIL_DEC_2854: u32 = 2853;
pub const Z_UTIL_DEC_2855: u32 = 2854;
pub const Z_UTIL_DEC_2856: u32 = 2855;
pub const Z_UTIL_DEC_2857: u32 = 2856;
pub const Z_UTIL_DEC_2858: u32 = 2857;
pub const Z_UTIL_DEC_2859: u32 = 2858;
pub const Z_UTIL_DEC_2860: u32 = 2859;
pub const Z_UTIL_DEC_2861: u32 = 2860;
pub const Z_UTIL_DEC_2862: u32 = 2861;
pub const Z_UTIL_DEC_2863: u32 = 2862;
pub const Z_UTIL_DEC_2864: u32 = 2863;
pub const Z_UTIL_DEC_2865: u32 = 2864;
pub const Z_UTIL_DEC_2866: u32 = 2865;
pub const Z_UTIL_DEC_2867: u32 = 2866;
pub const Z_UTIL_DEC_2868: u32 = 2867;
pub const Z_UTIL_DEC_2869: u32 = 2868;
pub const Z_UTIL_DEC_2870: u32 = 2869;
pub const Z_UTIL_DEC_2871: u32 = 2870;
pub const Z_UTIL_DEC_2872: u32 = 2871;
pub const Z_UTIL_DEC_2873: u32 = 2872;
pub const Z_UTIL_DEC_2874: u32 = 2873;
pub const Z_UTIL_DEC_2875: u32 = 2874;
pub const Z_UTIL_DEC_2876: u32 = 2875;
pub const Z_UTIL_DEC_2877: u32 = 2876;
pub const Z_UTIL_DEC_2878: u32 = 2877;
pub const Z_UTIL_DEC_2879: u32 = 2878;
pub const Z_UTIL_DEC_2880: u32 = 2879;
pub const Z_UTIL_DEC_2881: u32 = 2880;
pub const Z_UTIL_DEC_2882: u32 = 2881;
pub const Z_UTIL_DEC_2883: u32 = 2882;
pub const Z_UTIL_DEC_2884: u32 = 2883;
pub const Z_UTIL_DEC_2885: u32 = 2884;
pub const Z_UTIL_DEC_2886: u32 = 2885;
pub const Z_UTIL_DEC_2887: u32 = 2886;
pub const Z_UTIL_DEC_2888: u32 = 2887;
pub const Z_UTIL_DEC_2889: u32 = 2888;
pub const Z_UTIL_DEC_2890: u32 = 2889;
pub const Z_UTIL_DEC_2891: u32 = 2890;
pub const Z_UTIL_DEC_2892: u32 = 2891;
pub const Z_UTIL_DEC_2893: u32 = 2892;
pub const Z_UTIL_DEC_2894: u32 = 2893;
pub const Z_UTIL_DEC_2895: u32 = 2894;
pub const Z_UTIL_DEC_2896: u32 = 2895;
pub const Z_UTIL_DEC_2897: u32 = 2896;
pub const Z_UTIL_DEC_2898: u32 = 2897;
pub const Z_UTIL_DEC_2899: u32 = 2898;
pub const Z_UTIL_DEC_2900: u32 = 2899;
pub const Z_UTIL_DEC_2901: u32 = 2900;
pub const Z_UTIL_DEC_2902: u32 = 2901;
pub const Z_UTIL_DEC_2903: u32 = 2902;
pub const Z_UTIL_DEC_2904: u32 = 2903;
pub const Z_UTIL_DEC_2905: u32 = 2904;
pub const Z_UTIL_DEC_2906: u32 = 2905;
pub const Z_UTIL_DEC_2907: u32 = 2906;
pub const Z_UTIL_DEC_2908: u32 = 2907;
pub const Z_UTIL_DEC_2909: u32 = 2908;
pub const Z_UTIL_DEC_2910: u32 = 2909;
pub const Z_UTIL_DEC_2911: u32 = 2910;
pub const Z_UTIL_DEC_2912: u32 = 2911;
pub const Z_UTIL_DEC_2913: u32 = 2912;
pub const Z_UTIL_DEC_2914: u32 = 2913;
pub const Z_UTIL_DEC_2915: u32 = 2914;
pub const Z_UTIL_DEC_2916: u32 = 2915;
pub const Z_UTIL_DEC_2917: u32 = 2916;
pub const Z_UTIL_DEC_2918: u32 = 2917;
pub const Z_UTIL_DEC_2919: u32 = 2918;
pub const Z_UTIL_DEC_2920: u32 = 2919;
pub const Z_UTIL_DEC_2921: u32 = 2920;
pub const Z_UTIL_DEC_2922: u32 = 2921;
pub const Z_UTIL_DEC_2923: u32 = 2922;
pub const Z_UTIL_DEC_2924: u32 = 2923;
pub const Z_UTIL_DEC_2925: u32 = 2924;
pub const Z_UTIL_DEC_2926: u32 = 2925;
pub const Z_UTIL_DEC_2927: u32 = 2926;
pub const Z_UTIL_DEC_2928: u32 = 2927;
pub const Z_UTIL_DEC_2929: u32 = 2928;
pub const Z_UTIL_DEC_2930: u32 = 2929;
pub const Z_UTIL_DEC_2931: u32 = 2930;
pub const Z_UTIL_DEC_2932: u32 = 2931;
pub const Z_UTIL_DEC_2933: u32 = 2932;
pub const Z_UTIL_DEC_2934: u32 = 2933;
pub const Z_UTIL_DEC_2935: u32 = 2934;
pub const Z_UTIL_DEC_2936: u32 = 2935;
pub const Z_UTIL_DEC_2937: u32 = 2936;
pub const Z_UTIL_DEC_2938: u32 = 2937;
pub const Z_UTIL_DEC_2939: u32 = 2938;
pub const Z_UTIL_DEC_2940: u32 = 2939;
pub const Z_UTIL_DEC_2941: u32 = 2940;
pub const Z_UTIL_DEC_2942: u32 = 2941;
pub const Z_UTIL_DEC_2943: u32 = 2942;
pub const Z_UTIL_DEC_2944: u32 = 2943;
pub const Z_UTIL_DEC_2945: u32 = 2944;
pub const Z_UTIL_DEC_2946: u32 = 2945;
pub const Z_UTIL_DEC_2947: u32 = 2946;
pub const Z_UTIL_DEC_2948: u32 = 2947;
pub const Z_UTIL_DEC_2949: u32 = 2948;
pub const Z_UTIL_DEC_2950: u32 = 2949;
pub const Z_UTIL_DEC_2951: u32 = 2950;
pub const Z_UTIL_DEC_2952: u32 = 2951;
pub const Z_UTIL_DEC_2953: u32 = 2952;
pub const Z_UTIL_DEC_2954: u32 = 2953;
pub const Z_UTIL_DEC_2955: u32 = 2954;
pub const Z_UTIL_DEC_2956: u32 = 2955;
pub const Z_UTIL_DEC_2957: u32 = 2956;
pub const Z_UTIL_DEC_2958: u32 = 2957;
pub const Z_UTIL_DEC_2959: u32 = 2958;
pub const Z_UTIL_DEC_2960: u32 = 2959;
pub const Z_UTIL_DEC_2961: u32 = 2960;
pub const Z_UTIL_DEC_2962: u32 = 2961;
pub const Z_UTIL_DEC_2963: u32 = 2962;
pub const Z_UTIL_DEC_2964: u32 = 2963;
pub const Z_UTIL_DEC_2965: u32 = 2964;
pub const Z_UTIL_DEC_2966: u32 = 2965;
pub const Z_UTIL_DEC_2967: u32 = 2966;
pub const Z_UTIL_DEC_2968: u32 = 2967;
pub const Z_UTIL_DEC_2969: u32 = 2968;
pub const Z_UTIL_DEC_2970: u32 = 2969;
pub const Z_UTIL_DEC_2971: u32 = 2970;
pub const Z_UTIL_DEC_2972: u32 = 2971;
pub const Z_UTIL_DEC_2973: u32 = 2972;
pub const Z_UTIL_DEC_2974: u32 = 2973;
pub const Z_UTIL_DEC_2975: u32 = 2974;
pub const Z_UTIL_DEC_2976: u32 = 2975;
pub const Z_UTIL_DEC_2977: u32 = 2976;
pub const Z_UTIL_DEC_2978: u32 = 2977;
pub const Z_UTIL_DEC_2979: u32 = 2978;
pub const Z_UTIL_DEC_2980: u32 = 2979;
pub const Z_UTIL_DEC_2981: u32 = 2980;
pub const Z_UTIL_DEC_2982: u32 = 2981;
pub const Z_UTIL_DEC_2983: u32 = 2982;
pub const Z_UTIL_DEC_2984: u32 = 2983;
pub const Z_UTIL_DEC_2985: u32 = 2984;
pub const Z_UTIL_DEC_2986: u32 = 2985;
pub const Z_UTIL_DEC_2987: u32 = 2986;
pub const Z_UTIL_DEC_2988: u32 = 2987;
pub const Z_UTIL_DEC_2989: u32 = 2988;
pub const Z_UTIL_DEC_2990: u32 = 2989;
pub const Z_UTIL_DEC_2991: u32 = 2990;
pub const Z_UTIL_DEC_2992: u32 = 2991;
pub const Z_UTIL_DEC_2993: u32 = 2992;
pub const Z_UTIL_DEC_2994: u32 = 2993;
pub const Z_UTIL_DEC_2995: u32 = 2994;
pub const Z_UTIL_DEC_2996: u32 = 2995;
pub const Z_UTIL_DEC_2997: u32 = 2996;
pub const Z_UTIL_DEC_2998: u32 = 2997;
pub const Z_UTIL_DEC_2999: u32 = 2998;
pub const Z_UTIL_DEC_3000: u32 = 2999;
pub const Z_UTIL_DEC_3001: u32 = 3000;
pub const Z_UTIL_DEC_3002: u32 = 3001;
pub const Z_UTIL_DEC_3003: u32 = 3002;
pub const Z_UTIL_DEC_3004: u32 = 3003;
pub const Z_UTIL_DEC_3005: u32 = 3004;
pub const Z_UTIL_DEC_3006: u32 = 3005;
pub const Z_UTIL_DEC_3007: u32 = 3006;
pub const Z_UTIL_DEC_3008: u32 = 3007;
pub const Z_UTIL_DEC_3009: u32 = 3008;
pub const Z_UTIL_DEC_3010: u32 = 3009;
pub const Z_UTIL_DEC_3011: u32 = 3010;
pub const Z_UTIL_DEC_3012: u32 = 3011;
pub const Z_UTIL_DEC_3013: u32 = 3012;
pub const Z_UTIL_DEC_3014: u32 = 3013;
pub const Z_UTIL_DEC_3015: u32 = 3014;
pub const Z_UTIL_DEC_3016: u32 = 3015;
pub const Z_UTIL_DEC_3017: u32 = 3016;
pub const Z_UTIL_DEC_3018: u32 = 3017;
pub const Z_UTIL_DEC_3019: u32 = 3018;
pub const Z_UTIL_DEC_3020: u32 = 3019;
pub const Z_UTIL_DEC_3021: u32 = 3020;
pub const Z_UTIL_DEC_3022: u32 = 3021;
pub const Z_UTIL_DEC_3023: u32 = 3022;
pub const Z_UTIL_DEC_3024: u32 = 3023;
pub const Z_UTIL_DEC_3025: u32 = 3024;
pub const Z_UTIL_DEC_3026: u32 = 3025;
pub const Z_UTIL_DEC_3027: u32 = 3026;
pub const Z_UTIL_DEC_3028: u32 = 3027;
pub const Z_UTIL_DEC_3029: u32 = 3028;
pub const Z_UTIL_DEC_3030: u32 = 3029;
pub const Z_UTIL_DEC_3031: u32 = 3030;
pub const Z_UTIL_DEC_3032: u32 = 3031;
pub const Z_UTIL_DEC_3033: u32 = 3032;
pub const Z_UTIL_DEC_3034: u32 = 3033;
pub const Z_UTIL_DEC_3035: u32 = 3034;
pub const Z_UTIL_DEC_3036: u32 = 3035;
pub const Z_UTIL_DEC_3037: u32 = 3036;
pub const Z_UTIL_DEC_3038: u32 = 3037;
pub const Z_UTIL_DEC_3039: u32 = 3038;
pub const Z_UTIL_DEC_3040: u32 = 3039;
pub const Z_UTIL_DEC_3041: u32 = 3040;
pub const Z_UTIL_DEC_3042: u32 = 3041;
pub const Z_UTIL_DEC_3043: u32 = 3042;
pub const Z_UTIL_DEC_3044: u32 = 3043;
pub const Z_UTIL_DEC_3045: u32 = 3044;
pub const Z_UTIL_DEC_3046: u32 = 3045;
pub const Z_UTIL_DEC_3047: u32 = 3046;
pub const Z_UTIL_DEC_3048: u32 = 3047;
pub const Z_UTIL_DEC_3049: u32 = 3048;
pub const Z_UTIL_DEC_3050: u32 = 3049;
pub const Z_UTIL_DEC_3051: u32 = 3050;
pub const Z_UTIL_DEC_3052: u32 = 3051;
pub const Z_UTIL_DEC_3053: u32 = 3052;
pub const Z_UTIL_DEC_3054: u32 = 3053;
pub const Z_UTIL_DEC_3055: u32 = 3054;
pub const Z_UTIL_DEC_3056: u32 = 3055;
pub const Z_UTIL_DEC_3057: u32 = 3056;
pub const Z_UTIL_DEC_3058: u32 = 3057;
pub const Z_UTIL_DEC_3059: u32 = 3058;
pub const Z_UTIL_DEC_3060: u32 = 3059;
pub const Z_UTIL_DEC_3061: u32 = 3060;
pub const Z_UTIL_DEC_3062: u32 = 3061;
pub const Z_UTIL_DEC_3063: u32 = 3062;
pub const Z_UTIL_DEC_3064: u32 = 3063;
pub const Z_UTIL_DEC_3065: u32 = 3064;
pub const Z_UTIL_DEC_3066: u32 = 3065;
pub const Z_UTIL_DEC_3067: u32 = 3066;
pub const Z_UTIL_DEC_3068: u32 = 3067;
pub const Z_UTIL_DEC_3069: u32 = 3068;
pub const Z_UTIL_DEC_3070: u32 = 3069;
pub const Z_UTIL_DEC_3071: u32 = 3070;
pub const Z_UTIL_DEC_3072: u32 = 3071;
pub const Z_UTIL_DEC_3073: u32 = 3072;
pub const Z_UTIL_DEC_3074: u32 = 3073;
pub const Z_UTIL_DEC_3075: u32 = 3074;
pub const Z_UTIL_DEC_3076: u32 = 3075;
pub const Z_UTIL_DEC_3077: u32 = 3076;
pub const Z_UTIL_DEC_3078: u32 = 3077;
pub const Z_UTIL_DEC_3079: u32 = 3078;
pub const Z_UTIL_DEC_3080: u32 = 3079;
pub const Z_UTIL_DEC_3081: u32 = 3080;
pub const Z_UTIL_DEC_3082: u32 = 3081;
pub const Z_UTIL_DEC_3083: u32 = 3082;
pub const Z_UTIL_DEC_3084: u32 = 3083;
pub const Z_UTIL_DEC_3085: u32 = 3084;
pub const Z_UTIL_DEC_3086: u32 = 3085;
pub const Z_UTIL_DEC_3087: u32 = 3086;
pub const Z_UTIL_DEC_3088: u32 = 3087;
pub const Z_UTIL_DEC_3089: u32 = 3088;
pub const Z_UTIL_DEC_3090: u32 = 3089;
pub const Z_UTIL_DEC_3091: u32 = 3090;
pub const Z_UTIL_DEC_3092: u32 = 3091;
pub const Z_UTIL_DEC_3093: u32 = 3092;
pub const Z_UTIL_DEC_3094: u32 = 3093;
pub const Z_UTIL_DEC_3095: u32 = 3094;
pub const Z_UTIL_DEC_3096: u32 = 3095;
pub const Z_UTIL_DEC_3097: u32 = 3096;
pub const Z_UTIL_DEC_3098: u32 = 3097;
pub const Z_UTIL_DEC_3099: u32 = 3098;
pub const Z_UTIL_DEC_3100: u32 = 3099;
pub const Z_UTIL_DEC_3101: u32 = 3100;
pub const Z_UTIL_DEC_3102: u32 = 3101;
pub const Z_UTIL_DEC_3103: u32 = 3102;
pub const Z_UTIL_DEC_3104: u32 = 3103;
pub const Z_UTIL_DEC_3105: u32 = 3104;
pub const Z_UTIL_DEC_3106: u32 = 3105;
pub const Z_UTIL_DEC_3107: u32 = 3106;
pub const Z_UTIL_DEC_3108: u32 = 3107;
pub const Z_UTIL_DEC_3109: u32 = 3108;
pub const Z_UTIL_DEC_3110: u32 = 3109;
pub const Z_UTIL_DEC_3111: u32 = 3110;
pub const Z_UTIL_DEC_3112: u32 = 3111;
pub const Z_UTIL_DEC_3113: u32 = 3112;
pub const Z_UTIL_DEC_3114: u32 = 3113;
pub const Z_UTIL_DEC_3115: u32 = 3114;
pub const Z_UTIL_DEC_3116: u32 = 3115;
pub const Z_UTIL_DEC_3117: u32 = 3116;
pub const Z_UTIL_DEC_3118: u32 = 3117;
pub const Z_UTIL_DEC_3119: u32 = 3118;
pub const Z_UTIL_DEC_3120: u32 = 3119;
pub const Z_UTIL_DEC_3121: u32 = 3120;
pub const Z_UTIL_DEC_3122: u32 = 3121;
pub const Z_UTIL_DEC_3123: u32 = 3122;
pub const Z_UTIL_DEC_3124: u32 = 3123;
pub const Z_UTIL_DEC_3125: u32 = 3124;
pub const Z_UTIL_DEC_3126: u32 = 3125;
pub const Z_UTIL_DEC_3127: u32 = 3126;
pub const Z_UTIL_DEC_3128: u32 = 3127;
pub const Z_UTIL_DEC_3129: u32 = 3128;
pub const Z_UTIL_DEC_3130: u32 = 3129;
pub const Z_UTIL_DEC_3131: u32 = 3130;
pub const Z_UTIL_DEC_3132: u32 = 3131;
pub const Z_UTIL_DEC_3133: u32 = 3132;
pub const Z_UTIL_DEC_3134: u32 = 3133;
pub const Z_UTIL_DEC_3135: u32 = 3134;
pub const Z_UTIL_DEC_3136: u32 = 3135;
pub const Z_UTIL_DEC_3137: u32 = 3136;
pub const Z_UTIL_DEC_3138: u32 = 3137;
pub const Z_UTIL_DEC_3139: u32 = 3138;
pub const Z_UTIL_DEC_3140: u32 = 3139;
pub const Z_UTIL_DEC_3141: u32 = 3140;
pub const Z_UTIL_DEC_3142: u32 = 3141;
pub const Z_UTIL_DEC_3143: u32 = 3142;
pub const Z_UTIL_DEC_3144: u32 = 3143;
pub const Z_UTIL_DEC_3145: u32 = 3144;
pub const Z_UTIL_DEC_3146: u32 = 3145;
pub const Z_UTIL_DEC_3147: u32 = 3146;
pub const Z_UTIL_DEC_3148: u32 = 3147;
pub const Z_UTIL_DEC_3149: u32 = 3148;
pub const Z_UTIL_DEC_3150: u32 = 3149;
pub const Z_UTIL_DEC_3151: u32 = 3150;
pub const Z_UTIL_DEC_3152: u32 = 3151;
pub const Z_UTIL_DEC_3153: u32 = 3152;
pub const Z_UTIL_DEC_3154: u32 = 3153;
pub const Z_UTIL_DEC_3155: u32 = 3154;
pub const Z_UTIL_DEC_3156: u32 = 3155;
pub const Z_UTIL_DEC_3157: u32 = 3156;
pub const Z_UTIL_DEC_3158: u32 = 3157;
pub const Z_UTIL_DEC_3159: u32 = 3158;
pub const Z_UTIL_DEC_3160: u32 = 3159;
pub const Z_UTIL_DEC_3161: u32 = 3160;
pub const Z_UTIL_DEC_3162: u32 = 3161;
pub const Z_UTIL_DEC_3163: u32 = 3162;
pub const Z_UTIL_DEC_3164: u32 = 3163;
pub const Z_UTIL_DEC_3165: u32 = 3164;
pub const Z_UTIL_DEC_3166: u32 = 3165;
pub const Z_UTIL_DEC_3167: u32 = 3166;
pub const Z_UTIL_DEC_3168: u32 = 3167;
pub const Z_UTIL_DEC_3169: u32 = 3168;
pub const Z_UTIL_DEC_3170: u32 = 3169;
pub const Z_UTIL_DEC_3171: u32 = 3170;
pub const Z_UTIL_DEC_3172: u32 = 3171;
pub const Z_UTIL_DEC_3173: u32 = 3172;
pub const Z_UTIL_DEC_3174: u32 = 3173;
pub const Z_UTIL_DEC_3175: u32 = 3174;
pub const Z_UTIL_DEC_3176: u32 = 3175;
pub const Z_UTIL_DEC_3177: u32 = 3176;
pub const Z_UTIL_DEC_3178: u32 = 3177;
pub const Z_UTIL_DEC_3179: u32 = 3178;
pub const Z_UTIL_DEC_3180: u32 = 3179;
pub const Z_UTIL_DEC_3181: u32 = 3180;
pub const Z_UTIL_DEC_3182: u32 = 3181;
pub const Z_UTIL_DEC_3183: u32 = 3182;
pub const Z_UTIL_DEC_3184: u32 = 3183;
pub const Z_UTIL_DEC_3185: u32 = 3184;
pub const Z_UTIL_DEC_3186: u32 = 3185;
pub const Z_UTIL_DEC_3187: u32 = 3186;
pub const Z_UTIL_DEC_3188: u32 = 3187;
pub const Z_UTIL_DEC_3189: u32 = 3188;
pub const Z_UTIL_DEC_3190: u32 = 3189;
pub const Z_UTIL_DEC_3191: u32 = 3190;
pub const Z_UTIL_DEC_3192: u32 = 3191;
pub const Z_UTIL_DEC_3193: u32 = 3192;
pub const Z_UTIL_DEC_3194: u32 = 3193;
pub const Z_UTIL_DEC_3195: u32 = 3194;
pub const Z_UTIL_DEC_3196: u32 = 3195;
pub const Z_UTIL_DEC_3197: u32 = 3196;
pub const Z_UTIL_DEC_3198: u32 = 3197;
pub const Z_UTIL_DEC_3199: u32 = 3198;
pub const Z_UTIL_DEC_3200: u32 = 3199;
pub const Z_UTIL_DEC_3201: u32 = 3200;
pub const Z_UTIL_DEC_3202: u32 = 3201;
pub const Z_UTIL_DEC_3203: u32 = 3202;
pub const Z_UTIL_DEC_3204: u32 = 3203;
pub const Z_UTIL_DEC_3205: u32 = 3204;
pub const Z_UTIL_DEC_3206: u32 = 3205;
pub const Z_UTIL_DEC_3207: u32 = 3206;
pub const Z_UTIL_DEC_3208: u32 = 3207;
pub const Z_UTIL_DEC_3209: u32 = 3208;
pub const Z_UTIL_DEC_3210: u32 = 3209;
pub const Z_UTIL_DEC_3211: u32 = 3210;
pub const Z_UTIL_DEC_3212: u32 = 3211;
pub const Z_UTIL_DEC_3213: u32 = 3212;
pub const Z_UTIL_DEC_3214: u32 = 3213;
pub const Z_UTIL_DEC_3215: u32 = 3214;
pub const Z_UTIL_DEC_3216: u32 = 3215;
pub const Z_UTIL_DEC_3217: u32 = 3216;
pub const Z_UTIL_DEC_3218: u32 = 3217;
pub const Z_UTIL_DEC_3219: u32 = 3218;
pub const Z_UTIL_DEC_3220: u32 = 3219;
pub const Z_UTIL_DEC_3221: u32 = 3220;
pub const Z_UTIL_DEC_3222: u32 = 3221;
pub const Z_UTIL_DEC_3223: u32 = 3222;
pub const Z_UTIL_DEC_3224: u32 = 3223;
pub const Z_UTIL_DEC_3225: u32 = 3224;
pub const Z_UTIL_DEC_3226: u32 = 3225;
pub const Z_UTIL_DEC_3227: u32 = 3226;
pub const Z_UTIL_DEC_3228: u32 = 3227;
pub const Z_UTIL_DEC_3229: u32 = 3228;
pub const Z_UTIL_DEC_3230: u32 = 3229;
pub const Z_UTIL_DEC_3231: u32 = 3230;
pub const Z_UTIL_DEC_3232: u32 = 3231;
pub const Z_UTIL_DEC_3233: u32 = 3232;
pub const Z_UTIL_DEC_3234: u32 = 3233;
pub const Z_UTIL_DEC_3235: u32 = 3234;
pub const Z_UTIL_DEC_3236: u32 = 3235;
pub const Z_UTIL_DEC_3237: u32 = 3236;
pub const Z_UTIL_DEC_3238: u32 = 3237;
pub const Z_UTIL_DEC_3239: u32 = 3238;
pub const Z_UTIL_DEC_3240: u32 = 3239;
pub const Z_UTIL_DEC_3241: u32 = 3240;
pub const Z_UTIL_DEC_3242: u32 = 3241;
pub const Z_UTIL_DEC_3243: u32 = 3242;
pub const Z_UTIL_DEC_3244: u32 = 3243;
pub const Z_UTIL_DEC_3245: u32 = 3244;
pub const Z_UTIL_DEC_3246: u32 = 3245;
pub const Z_UTIL_DEC_3247: u32 = 3246;
pub const Z_UTIL_DEC_3248: u32 = 3247;
pub const Z_UTIL_DEC_3249: u32 = 3248;
pub const Z_UTIL_DEC_3250: u32 = 3249;
pub const Z_UTIL_DEC_3251: u32 = 3250;
pub const Z_UTIL_DEC_3252: u32 = 3251;
pub const Z_UTIL_DEC_3253: u32 = 3252;
pub const Z_UTIL_DEC_3254: u32 = 3253;
pub const Z_UTIL_DEC_3255: u32 = 3254;
pub const Z_UTIL_DEC_3256: u32 = 3255;
pub const Z_UTIL_DEC_3257: u32 = 3256;
pub const Z_UTIL_DEC_3258: u32 = 3257;
pub const Z_UTIL_DEC_3259: u32 = 3258;
pub const Z_UTIL_DEC_3260: u32 = 3259;
pub const Z_UTIL_DEC_3261: u32 = 3260;
pub const Z_UTIL_DEC_3262: u32 = 3261;
pub const Z_UTIL_DEC_3263: u32 = 3262;
pub const Z_UTIL_DEC_3264: u32 = 3263;
pub const Z_UTIL_DEC_3265: u32 = 3264;
pub const Z_UTIL_DEC_3266: u32 = 3265;
pub const Z_UTIL_DEC_3267: u32 = 3266;
pub const Z_UTIL_DEC_3268: u32 = 3267;
pub const Z_UTIL_DEC_3269: u32 = 3268;
pub const Z_UTIL_DEC_3270: u32 = 3269;
pub const Z_UTIL_DEC_3271: u32 = 3270;
pub const Z_UTIL_DEC_3272: u32 = 3271;
pub const Z_UTIL_DEC_3273: u32 = 3272;
pub const Z_UTIL_DEC_3274: u32 = 3273;
pub const Z_UTIL_DEC_3275: u32 = 3274;
pub const Z_UTIL_DEC_3276: u32 = 3275;
pub const Z_UTIL_DEC_3277: u32 = 3276;
pub const Z_UTIL_DEC_3278: u32 = 3277;
pub const Z_UTIL_DEC_3279: u32 = 3278;
pub const Z_UTIL_DEC_3280: u32 = 3279;
pub const Z_UTIL_DEC_3281: u32 = 3280;
pub const Z_UTIL_DEC_3282: u32 = 3281;
pub const Z_UTIL_DEC_3283: u32 = 3282;
pub const Z_UTIL_DEC_3284: u32 = 3283;
pub const Z_UTIL_DEC_3285: u32 = 3284;
pub const Z_UTIL_DEC_3286: u32 = 3285;
pub const Z_UTIL_DEC_3287: u32 = 3286;
pub const Z_UTIL_DEC_3288: u32 = 3287;
pub const Z_UTIL_DEC_3289: u32 = 3288;
pub const Z_UTIL_DEC_3290: u32 = 3289;
pub const Z_UTIL_DEC_3291: u32 = 3290;
pub const Z_UTIL_DEC_3292: u32 = 3291;
pub const Z_UTIL_DEC_3293: u32 = 3292;
pub const Z_UTIL_DEC_3294: u32 = 3293;
pub const Z_UTIL_DEC_3295: u32 = 3294;
pub const Z_UTIL_DEC_3296: u32 = 3295;
pub const Z_UTIL_DEC_3297: u32 = 3296;
pub const Z_UTIL_DEC_3298: u32 = 3297;
pub const Z_UTIL_DEC_3299: u32 = 3298;
pub const Z_UTIL_DEC_3300: u32 = 3299;
pub const Z_UTIL_DEC_3301: u32 = 3300;
pub const Z_UTIL_DEC_3302: u32 = 3301;
pub const Z_UTIL_DEC_3303: u32 = 3302;
pub const Z_UTIL_DEC_3304: u32 = 3303;
pub const Z_UTIL_DEC_3305: u32 = 3304;
pub const Z_UTIL_DEC_3306: u32 = 3305;
pub const Z_UTIL_DEC_3307: u32 = 3306;
pub const Z_UTIL_DEC_3308: u32 = 3307;
pub const Z_UTIL_DEC_3309: u32 = 3308;
pub const Z_UTIL_DEC_3310: u32 = 3309;
pub const Z_UTIL_DEC_3311: u32 = 3310;
pub const Z_UTIL_DEC_3312: u32 = 3311;
pub const Z_UTIL_DEC_3313: u32 = 3312;
pub const Z_UTIL_DEC_3314: u32 = 3313;
pub const Z_UTIL_DEC_3315: u32 = 3314;
pub const Z_UTIL_DEC_3316: u32 = 3315;
pub const Z_UTIL_DEC_3317: u32 = 3316;
pub const Z_UTIL_DEC_3318: u32 = 3317;
pub const Z_UTIL_DEC_3319: u32 = 3318;
pub const Z_UTIL_DEC_3320: u32 = 3319;
pub const Z_UTIL_DEC_3321: u32 = 3320;
pub const Z_UTIL_DEC_3322: u32 = 3321;
pub const Z_UTIL_DEC_3323: u32 = 3322;
pub const Z_UTIL_DEC_3324: u32 = 3323;
pub const Z_UTIL_DEC_3325: u32 = 3324;
pub const Z_UTIL_DEC_3326: u32 = 3325;
pub const Z_UTIL_DEC_3327: u32 = 3326;
pub const Z_UTIL_DEC_3328: u32 = 3327;
pub const Z_UTIL_DEC_3329: u32 = 3328;
pub const Z_UTIL_DEC_3330: u32 = 3329;
pub const Z_UTIL_DEC_3331: u32 = 3330;
pub const Z_UTIL_DEC_3332: u32 = 3331;
pub const Z_UTIL_DEC_3333: u32 = 3332;
pub const Z_UTIL_DEC_3334: u32 = 3333;
pub const Z_UTIL_DEC_3335: u32 = 3334;
pub const Z_UTIL_DEC_3336: u32 = 3335;
pub const Z_UTIL_DEC_3337: u32 = 3336;
pub const Z_UTIL_DEC_3338: u32 = 3337;
pub const Z_UTIL_DEC_3339: u32 = 3338;
pub const Z_UTIL_DEC_3340: u32 = 3339;
pub const Z_UTIL_DEC_3341: u32 = 3340;
pub const Z_UTIL_DEC_3342: u32 = 3341;
pub const Z_UTIL_DEC_3343: u32 = 3342;
pub const Z_UTIL_DEC_3344: u32 = 3343;
pub const Z_UTIL_DEC_3345: u32 = 3344;
pub const Z_UTIL_DEC_3346: u32 = 3345;
pub const Z_UTIL_DEC_3347: u32 = 3346;
pub const Z_UTIL_DEC_3348: u32 = 3347;
pub const Z_UTIL_DEC_3349: u32 = 3348;
pub const Z_UTIL_DEC_3350: u32 = 3349;
pub const Z_UTIL_DEC_3351: u32 = 3350;
pub const Z_UTIL_DEC_3352: u32 = 3351;
pub const Z_UTIL_DEC_3353: u32 = 3352;
pub const Z_UTIL_DEC_3354: u32 = 3353;
pub const Z_UTIL_DEC_3355: u32 = 3354;
pub const Z_UTIL_DEC_3356: u32 = 3355;
pub const Z_UTIL_DEC_3357: u32 = 3356;
pub const Z_UTIL_DEC_3358: u32 = 3357;
pub const Z_UTIL_DEC_3359: u32 = 3358;
pub const Z_UTIL_DEC_3360: u32 = 3359;
pub const Z_UTIL_DEC_3361: u32 = 3360;
pub const Z_UTIL_DEC_3362: u32 = 3361;
pub const Z_UTIL_DEC_3363: u32 = 3362;
pub const Z_UTIL_DEC_3364: u32 = 3363;
pub const Z_UTIL_DEC_3365: u32 = 3364;
pub const Z_UTIL_DEC_3366: u32 = 3365;
pub const Z_UTIL_DEC_3367: u32 = 3366;
pub const Z_UTIL_DEC_3368: u32 = 3367;
pub const Z_UTIL_DEC_3369: u32 = 3368;
pub const Z_UTIL_DEC_3370: u32 = 3369;
pub const Z_UTIL_DEC_3371: u32 = 3370;
pub const Z_UTIL_DEC_3372: u32 = 3371;
pub const Z_UTIL_DEC_3373: u32 = 3372;
pub const Z_UTIL_DEC_3374: u32 = 3373;
pub const Z_UTIL_DEC_3375: u32 = 3374;
pub const Z_UTIL_DEC_3376: u32 = 3375;
pub const Z_UTIL_DEC_3377: u32 = 3376;
pub const Z_UTIL_DEC_3378: u32 = 3377;
pub const Z_UTIL_DEC_3379: u32 = 3378;
pub const Z_UTIL_DEC_3380: u32 = 3379;
pub const Z_UTIL_DEC_3381: u32 = 3380;
pub const Z_UTIL_DEC_3382: u32 = 3381;
pub const Z_UTIL_DEC_3383: u32 = 3382;
pub const Z_UTIL_DEC_3384: u32 = 3383;
pub const Z_UTIL_DEC_3385: u32 = 3384;
pub const Z_UTIL_DEC_3386: u32 = 3385;
pub const Z_UTIL_DEC_3387: u32 = 3386;
pub const Z_UTIL_DEC_3388: u32 = 3387;
pub const Z_UTIL_DEC_3389: u32 = 3388;
pub const Z_UTIL_DEC_3390: u32 = 3389;
pub const Z_UTIL_DEC_3391: u32 = 3390;
pub const Z_UTIL_DEC_3392: u32 = 3391;
pub const Z_UTIL_DEC_3393: u32 = 3392;
pub const Z_UTIL_DEC_3394: u32 = 3393;
pub const Z_UTIL_DEC_3395: u32 = 3394;
pub const Z_UTIL_DEC_3396: u32 = 3395;
pub const Z_UTIL_DEC_3397: u32 = 3396;
pub const Z_UTIL_DEC_3398: u32 = 3397;
pub const Z_UTIL_DEC_3399: u32 = 3398;
pub const Z_UTIL_DEC_3400: u32 = 3399;
pub const Z_UTIL_DEC_3401: u32 = 3400;
pub const Z_UTIL_DEC_3402: u32 = 3401;
pub const Z_UTIL_DEC_3403: u32 = 3402;
pub const Z_UTIL_DEC_3404: u32 = 3403;
pub const Z_UTIL_DEC_3405: u32 = 3404;
pub const Z_UTIL_DEC_3406: u32 = 3405;
pub const Z_UTIL_DEC_3407: u32 = 3406;
pub const Z_UTIL_DEC_3408: u32 = 3407;
pub const Z_UTIL_DEC_3409: u32 = 3408;
pub const Z_UTIL_DEC_3410: u32 = 3409;
pub const Z_UTIL_DEC_3411: u32 = 3410;
pub const Z_UTIL_DEC_3412: u32 = 3411;
pub const Z_UTIL_DEC_3413: u32 = 3412;
pub const Z_UTIL_DEC_3414: u32 = 3413;
pub const Z_UTIL_DEC_3415: u32 = 3414;
pub const Z_UTIL_DEC_3416: u32 = 3415;
pub const Z_UTIL_DEC_3417: u32 = 3416;
pub const Z_UTIL_DEC_3418: u32 = 3417;
pub const Z_UTIL_DEC_3419: u32 = 3418;
pub const Z_UTIL_DEC_3420: u32 = 3419;
pub const Z_UTIL_DEC_3421: u32 = 3420;
pub const Z_UTIL_DEC_3422: u32 = 3421;
pub const Z_UTIL_DEC_3423: u32 = 3422;
pub const Z_UTIL_DEC_3424: u32 = 3423;
pub const Z_UTIL_DEC_3425: u32 = 3424;
pub const Z_UTIL_DEC_3426: u32 = 3425;
pub const Z_UTIL_DEC_3427: u32 = 3426;
pub const Z_UTIL_DEC_3428: u32 = 3427;
pub const Z_UTIL_DEC_3429: u32 = 3428;
pub const Z_UTIL_DEC_3430: u32 = 3429;
pub const Z_UTIL_DEC_3431: u32 = 3430;
pub const Z_UTIL_DEC_3432: u32 = 3431;
pub const Z_UTIL_DEC_3433: u32 = 3432;
pub const Z_UTIL_DEC_3434: u32 = 3433;
pub const Z_UTIL_DEC_3435: u32 = 3434;
pub const Z_UTIL_DEC_3436: u32 = 3435;
pub const Z_UTIL_DEC_3437: u32 = 3436;
pub const Z_UTIL_DEC_3438: u32 = 3437;
pub const Z_UTIL_DEC_3439: u32 = 3438;
pub const Z_UTIL_DEC_3440: u32 = 3439;
pub const Z_UTIL_DEC_3441: u32 = 3440;
pub const Z_UTIL_DEC_3442: u32 = 3441;
pub const Z_UTIL_DEC_3443: u32 = 3442;
pub const Z_UTIL_DEC_3444: u32 = 3443;
pub const Z_UTIL_DEC_3445: u32 = 3444;
pub const Z_UTIL_DEC_3446: u32 = 3445;
pub const Z_UTIL_DEC_3447: u32 = 3446;
pub const Z_UTIL_DEC_3448: u32 = 3447;
pub const Z_UTIL_DEC_3449: u32 = 3448;
pub const Z_UTIL_DEC_3450: u32 = 3449;
pub const Z_UTIL_DEC_3451: u32 = 3450;
pub const Z_UTIL_DEC_3452: u32 = 3451;
pub const Z_UTIL_DEC_3453: u32 = 3452;
pub const Z_UTIL_DEC_3454: u32 = 3453;
pub const Z_UTIL_DEC_3455: u32 = 3454;
pub const Z_UTIL_DEC_3456: u32 = 3455;
pub const Z_UTIL_DEC_3457: u32 = 3456;
pub const Z_UTIL_DEC_3458: u32 = 3457;
pub const Z_UTIL_DEC_3459: u32 = 3458;
pub const Z_UTIL_DEC_3460: u32 = 3459;
pub const Z_UTIL_DEC_3461: u32 = 3460;
pub const Z_UTIL_DEC_3462: u32 = 3461;
pub const Z_UTIL_DEC_3463: u32 = 3462;
pub const Z_UTIL_DEC_3464: u32 = 3463;
pub const Z_UTIL_DEC_3465: u32 = 3464;
pub const Z_UTIL_DEC_3466: u32 = 3465;
pub const Z_UTIL_DEC_3467: u32 = 3466;
pub const Z_UTIL_DEC_3468: u32 = 3467;
pub const Z_UTIL_DEC_3469: u32 = 3468;
pub const Z_UTIL_DEC_3470: u32 = 3469;
pub const Z_UTIL_DEC_3471: u32 = 3470;
pub const Z_UTIL_DEC_3472: u32 = 3471;
pub const Z_UTIL_DEC_3473: u32 = 3472;
pub const Z_UTIL_DEC_3474: u32 = 3473;
pub const Z_UTIL_DEC_3475: u32 = 3474;
pub const Z_UTIL_DEC_3476: u32 = 3475;
pub const Z_UTIL_DEC_3477: u32 = 3476;
pub const Z_UTIL_DEC_3478: u32 = 3477;
pub const Z_UTIL_DEC_3479: u32 = 3478;
pub const Z_UTIL_DEC_3480: u32 = 3479;
pub const Z_UTIL_DEC_3481: u32 = 3480;
pub const Z_UTIL_DEC_3482: u32 = 3481;
pub const Z_UTIL_DEC_3483: u32 = 3482;
pub const Z_UTIL_DEC_3484: u32 = 3483;
pub const Z_UTIL_DEC_3485: u32 = 3484;
pub const Z_UTIL_DEC_3486: u32 = 3485;
pub const Z_UTIL_DEC_3487: u32 = 3486;
pub const Z_UTIL_DEC_3488: u32 = 3487;
pub const Z_UTIL_DEC_3489: u32 = 3488;
pub const Z_UTIL_DEC_3490: u32 = 3489;
pub const Z_UTIL_DEC_3491: u32 = 3490;
pub const Z_UTIL_DEC_3492: u32 = 3491;
pub const Z_UTIL_DEC_3493: u32 = 3492;
pub const Z_UTIL_DEC_3494: u32 = 3493;
pub const Z_UTIL_DEC_3495: u32 = 3494;
pub const Z_UTIL_DEC_3496: u32 = 3495;
pub const Z_UTIL_DEC_3497: u32 = 3496;
pub const Z_UTIL_DEC_3498: u32 = 3497;
pub const Z_UTIL_DEC_3499: u32 = 3498;
pub const Z_UTIL_DEC_3500: u32 = 3499;
pub const Z_UTIL_DEC_3501: u32 = 3500;
pub const Z_UTIL_DEC_3502: u32 = 3501;
pub const Z_UTIL_DEC_3503: u32 = 3502;
pub const Z_UTIL_DEC_3504: u32 = 3503;
pub const Z_UTIL_DEC_3505: u32 = 3504;
pub const Z_UTIL_DEC_3506: u32 = 3505;
pub const Z_UTIL_DEC_3507: u32 = 3506;
pub const Z_UTIL_DEC_3508: u32 = 3507;
pub const Z_UTIL_DEC_3509: u32 = 3508;
pub const Z_UTIL_DEC_3510: u32 = 3509;
pub const Z_UTIL_DEC_3511: u32 = 3510;
pub const Z_UTIL_DEC_3512: u32 = 3511;
pub const Z_UTIL_DEC_3513: u32 = 3512;
pub const Z_UTIL_DEC_3514: u32 = 3513;
pub const Z_UTIL_DEC_3515: u32 = 3514;
pub const Z_UTIL_DEC_3516: u32 = 3515;
pub const Z_UTIL_DEC_3517: u32 = 3516;
pub const Z_UTIL_DEC_3518: u32 = 3517;
pub const Z_UTIL_DEC_3519: u32 = 3518;
pub const Z_UTIL_DEC_3520: u32 = 3519;
pub const Z_UTIL_DEC_3521: u32 = 3520;
pub const Z_UTIL_DEC_3522: u32 = 3521;
pub const Z_UTIL_DEC_3523: u32 = 3522;
pub const Z_UTIL_DEC_3524: u32 = 3523;
pub const Z_UTIL_DEC_3525: u32 = 3524;
pub const Z_UTIL_DEC_3526: u32 = 3525;
pub const Z_UTIL_DEC_3527: u32 = 3526;
pub const Z_UTIL_DEC_3528: u32 = 3527;
pub const Z_UTIL_DEC_3529: u32 = 3528;
pub const Z_UTIL_DEC_3530: u32 = 3529;
pub const Z_UTIL_DEC_3531: u32 = 3530;
pub const Z_UTIL_DEC_3532: u32 = 3531;
pub const Z_UTIL_DEC_3533: u32 = 3532;
pub const Z_UTIL_DEC_3534: u32 = 3533;
pub const Z_UTIL_DEC_3535: u32 = 3534;
pub const Z_UTIL_DEC_3536: u32 = 3535;
pub const Z_UTIL_DEC_3537: u32 = 3536;
pub const Z_UTIL_DEC_3538: u32 = 3537;
pub const Z_UTIL_DEC_3539: u32 = 3538;
pub const Z_UTIL_DEC_3540: u32 = 3539;
pub const Z_UTIL_DEC_3541: u32 = 3540;
pub const Z_UTIL_DEC_3542: u32 = 3541;
pub const Z_UTIL_DEC_3543: u32 = 3542;
pub const Z_UTIL_DEC_3544: u32 = 3543;
pub const Z_UTIL_DEC_3545: u32 = 3544;
pub const Z_UTIL_DEC_3546: u32 = 3545;
pub const Z_UTIL_DEC_3547: u32 = 3546;
pub const Z_UTIL_DEC_3548: u32 = 3547;
pub const Z_UTIL_DEC_3549: u32 = 3548;
pub const Z_UTIL_DEC_3550: u32 = 3549;
pub const Z_UTIL_DEC_3551: u32 = 3550;
pub const Z_UTIL_DEC_3552: u32 = 3551;
pub const Z_UTIL_DEC_3553: u32 = 3552;
pub const Z_UTIL_DEC_3554: u32 = 3553;
pub const Z_UTIL_DEC_3555: u32 = 3554;
pub const Z_UTIL_DEC_3556: u32 = 3555;
pub const Z_UTIL_DEC_3557: u32 = 3556;
pub const Z_UTIL_DEC_3558: u32 = 3557;
pub const Z_UTIL_DEC_3559: u32 = 3558;
pub const Z_UTIL_DEC_3560: u32 = 3559;
pub const Z_UTIL_DEC_3561: u32 = 3560;
pub const Z_UTIL_DEC_3562: u32 = 3561;
pub const Z_UTIL_DEC_3563: u32 = 3562;
pub const Z_UTIL_DEC_3564: u32 = 3563;
pub const Z_UTIL_DEC_3565: u32 = 3564;
pub const Z_UTIL_DEC_3566: u32 = 3565;
pub const Z_UTIL_DEC_3567: u32 = 3566;
pub const Z_UTIL_DEC_3568: u32 = 3567;
pub const Z_UTIL_DEC_3569: u32 = 3568;
pub const Z_UTIL_DEC_3570: u32 = 3569;
pub const Z_UTIL_DEC_3571: u32 = 3570;
pub const Z_UTIL_DEC_3572: u32 = 3571;
pub const Z_UTIL_DEC_3573: u32 = 3572;
pub const Z_UTIL_DEC_3574: u32 = 3573;
pub const Z_UTIL_DEC_3575: u32 = 3574;
pub const Z_UTIL_DEC_3576: u32 = 3575;
pub const Z_UTIL_DEC_3577: u32 = 3576;
pub const Z_UTIL_DEC_3578: u32 = 3577;
pub const Z_UTIL_DEC_3579: u32 = 3578;
pub const Z_UTIL_DEC_3580: u32 = 3579;
pub const Z_UTIL_DEC_3581: u32 = 3580;
pub const Z_UTIL_DEC_3582: u32 = 3581;
pub const Z_UTIL_DEC_3583: u32 = 3582;
pub const Z_UTIL_DEC_3584: u32 = 3583;
pub const Z_UTIL_DEC_3585: u32 = 3584;
pub const Z_UTIL_DEC_3586: u32 = 3585;
pub const Z_UTIL_DEC_3587: u32 = 3586;
pub const Z_UTIL_DEC_3588: u32 = 3587;
pub const Z_UTIL_DEC_3589: u32 = 3588;
pub const Z_UTIL_DEC_3590: u32 = 3589;
pub const Z_UTIL_DEC_3591: u32 = 3590;
pub const Z_UTIL_DEC_3592: u32 = 3591;
pub const Z_UTIL_DEC_3593: u32 = 3592;
pub const Z_UTIL_DEC_3594: u32 = 3593;
pub const Z_UTIL_DEC_3595: u32 = 3594;
pub const Z_UTIL_DEC_3596: u32 = 3595;
pub const Z_UTIL_DEC_3597: u32 = 3596;
pub const Z_UTIL_DEC_3598: u32 = 3597;
pub const Z_UTIL_DEC_3599: u32 = 3598;
pub const Z_UTIL_DEC_3600: u32 = 3599;
pub const Z_UTIL_DEC_3601: u32 = 3600;
pub const Z_UTIL_DEC_3602: u32 = 3601;
pub const Z_UTIL_DEC_3603: u32 = 3602;
pub const Z_UTIL_DEC_3604: u32 = 3603;
pub const Z_UTIL_DEC_3605: u32 = 3604;
pub const Z_UTIL_DEC_3606: u32 = 3605;
pub const Z_UTIL_DEC_3607: u32 = 3606;
pub const Z_UTIL_DEC_3608: u32 = 3607;
pub const Z_UTIL_DEC_3609: u32 = 3608;
pub const Z_UTIL_DEC_3610: u32 = 3609;
pub const Z_UTIL_DEC_3611: u32 = 3610;
pub const Z_UTIL_DEC_3612: u32 = 3611;
pub const Z_UTIL_DEC_3613: u32 = 3612;
pub const Z_UTIL_DEC_3614: u32 = 3613;
pub const Z_UTIL_DEC_3615: u32 = 3614;
pub const Z_UTIL_DEC_3616: u32 = 3615;
pub const Z_UTIL_DEC_3617: u32 = 3616;
pub const Z_UTIL_DEC_3618: u32 = 3617;
pub const Z_UTIL_DEC_3619: u32 = 3618;
pub const Z_UTIL_DEC_3620: u32 = 3619;
pub const Z_UTIL_DEC_3621: u32 = 3620;
pub const Z_UTIL_DEC_3622: u32 = 3621;
pub const Z_UTIL_DEC_3623: u32 = 3622;
pub const Z_UTIL_DEC_3624: u32 = 3623;
pub const Z_UTIL_DEC_3625: u32 = 3624;
pub const Z_UTIL_DEC_3626: u32 = 3625;
pub const Z_UTIL_DEC_3627: u32 = 3626;
pub const Z_UTIL_DEC_3628: u32 = 3627;
pub const Z_UTIL_DEC_3629: u32 = 3628;
pub const Z_UTIL_DEC_3630: u32 = 3629;
pub const Z_UTIL_DEC_3631: u32 = 3630;
pub const Z_UTIL_DEC_3632: u32 = 3631;
pub const Z_UTIL_DEC_3633: u32 = 3632;
pub const Z_UTIL_DEC_3634: u32 = 3633;
pub const Z_UTIL_DEC_3635: u32 = 3634;
pub const Z_UTIL_DEC_3636: u32 = 3635;
pub const Z_UTIL_DEC_3637: u32 = 3636;
pub const Z_UTIL_DEC_3638: u32 = 3637;
pub const Z_UTIL_DEC_3639: u32 = 3638;
pub const Z_UTIL_DEC_3640: u32 = 3639;
pub const Z_UTIL_DEC_3641: u32 = 3640;
pub const Z_UTIL_DEC_3642: u32 = 3641;
pub const Z_UTIL_DEC_3643: u32 = 3642;
pub const Z_UTIL_DEC_3644: u32 = 3643;
pub const Z_UTIL_DEC_3645: u32 = 3644;
pub const Z_UTIL_DEC_3646: u32 = 3645;
pub const Z_UTIL_DEC_3647: u32 = 3646;
pub const Z_UTIL_DEC_3648: u32 = 3647;
pub const Z_UTIL_DEC_3649: u32 = 3648;
pub const Z_UTIL_DEC_3650: u32 = 3649;
pub const Z_UTIL_DEC_3651: u32 = 3650;
pub const Z_UTIL_DEC_3652: u32 = 3651;
pub const Z_UTIL_DEC_3653: u32 = 3652;
pub const Z_UTIL_DEC_3654: u32 = 3653;
pub const Z_UTIL_DEC_3655: u32 = 3654;
pub const Z_UTIL_DEC_3656: u32 = 3655;
pub const Z_UTIL_DEC_3657: u32 = 3656;
pub const Z_UTIL_DEC_3658: u32 = 3657;
pub const Z_UTIL_DEC_3659: u32 = 3658;
pub const Z_UTIL_DEC_3660: u32 = 3659;
pub const Z_UTIL_DEC_3661: u32 = 3660;
pub const Z_UTIL_DEC_3662: u32 = 3661;
pub const Z_UTIL_DEC_3663: u32 = 3662;
pub const Z_UTIL_DEC_3664: u32 = 3663;
pub const Z_UTIL_DEC_3665: u32 = 3664;
pub const Z_UTIL_DEC_3666: u32 = 3665;
pub const Z_UTIL_DEC_3667: u32 = 3666;
pub const Z_UTIL_DEC_3668: u32 = 3667;
pub const Z_UTIL_DEC_3669: u32 = 3668;
pub const Z_UTIL_DEC_3670: u32 = 3669;
pub const Z_UTIL_DEC_3671: u32 = 3670;
pub const Z_UTIL_DEC_3672: u32 = 3671;
pub const Z_UTIL_DEC_3673: u32 = 3672;
pub const Z_UTIL_DEC_3674: u32 = 3673;
pub const Z_UTIL_DEC_3675: u32 = 3674;
pub const Z_UTIL_DEC_3676: u32 = 3675;
pub const Z_UTIL_DEC_3677: u32 = 3676;
pub const Z_UTIL_DEC_3678: u32 = 3677;
pub const Z_UTIL_DEC_3679: u32 = 3678;
pub const Z_UTIL_DEC_3680: u32 = 3679;
pub const Z_UTIL_DEC_3681: u32 = 3680;
pub const Z_UTIL_DEC_3682: u32 = 3681;
pub const Z_UTIL_DEC_3683: u32 = 3682;
pub const Z_UTIL_DEC_3684: u32 = 3683;
pub const Z_UTIL_DEC_3685: u32 = 3684;
pub const Z_UTIL_DEC_3686: u32 = 3685;
pub const Z_UTIL_DEC_3687: u32 = 3686;
pub const Z_UTIL_DEC_3688: u32 = 3687;
pub const Z_UTIL_DEC_3689: u32 = 3688;
pub const Z_UTIL_DEC_3690: u32 = 3689;
pub const Z_UTIL_DEC_3691: u32 = 3690;
pub const Z_UTIL_DEC_3692: u32 = 3691;
pub const Z_UTIL_DEC_3693: u32 = 3692;
pub const Z_UTIL_DEC_3694: u32 = 3693;
pub const Z_UTIL_DEC_3695: u32 = 3694;
pub const Z_UTIL_DEC_3696: u32 = 3695;
pub const Z_UTIL_DEC_3697: u32 = 3696;
pub const Z_UTIL_DEC_3698: u32 = 3697;
pub const Z_UTIL_DEC_3699: u32 = 3698;
pub const Z_UTIL_DEC_3700: u32 = 3699;
pub const Z_UTIL_DEC_3701: u32 = 3700;
pub const Z_UTIL_DEC_3702: u32 = 3701;
pub const Z_UTIL_DEC_3703: u32 = 3702;
pub const Z_UTIL_DEC_3704: u32 = 3703;
pub const Z_UTIL_DEC_3705: u32 = 3704;
pub const Z_UTIL_DEC_3706: u32 = 3705;
pub const Z_UTIL_DEC_3707: u32 = 3706;
pub const Z_UTIL_DEC_3708: u32 = 3707;
pub const Z_UTIL_DEC_3709: u32 = 3708;
pub const Z_UTIL_DEC_3710: u32 = 3709;
pub const Z_UTIL_DEC_3711: u32 = 3710;
pub const Z_UTIL_DEC_3712: u32 = 3711;
pub const Z_UTIL_DEC_3713: u32 = 3712;
pub const Z_UTIL_DEC_3714: u32 = 3713;
pub const Z_UTIL_DEC_3715: u32 = 3714;
pub const Z_UTIL_DEC_3716: u32 = 3715;
pub const Z_UTIL_DEC_3717: u32 = 3716;
pub const Z_UTIL_DEC_3718: u32 = 3717;
pub const Z_UTIL_DEC_3719: u32 = 3718;
pub const Z_UTIL_DEC_3720: u32 = 3719;
pub const Z_UTIL_DEC_3721: u32 = 3720;
pub const Z_UTIL_DEC_3722: u32 = 3721;
pub const Z_UTIL_DEC_3723: u32 = 3722;
pub const Z_UTIL_DEC_3724: u32 = 3723;
pub const Z_UTIL_DEC_3725: u32 = 3724;
pub const Z_UTIL_DEC_3726: u32 = 3725;
pub const Z_UTIL_DEC_3727: u32 = 3726;
pub const Z_UTIL_DEC_3728: u32 = 3727;
pub const Z_UTIL_DEC_3729: u32 = 3728;
pub const Z_UTIL_DEC_3730: u32 = 3729;
pub const Z_UTIL_DEC_3731: u32 = 3730;
pub const Z_UTIL_DEC_3732: u32 = 3731;
pub const Z_UTIL_DEC_3733: u32 = 3732;
pub const Z_UTIL_DEC_3734: u32 = 3733;
pub const Z_UTIL_DEC_3735: u32 = 3734;
pub const Z_UTIL_DEC_3736: u32 = 3735;
pub const Z_UTIL_DEC_3737: u32 = 3736;
pub const Z_UTIL_DEC_3738: u32 = 3737;
pub const Z_UTIL_DEC_3739: u32 = 3738;
pub const Z_UTIL_DEC_3740: u32 = 3739;
pub const Z_UTIL_DEC_3741: u32 = 3740;
pub const Z_UTIL_DEC_3742: u32 = 3741;
pub const Z_UTIL_DEC_3743: u32 = 3742;
pub const Z_UTIL_DEC_3744: u32 = 3743;
pub const Z_UTIL_DEC_3745: u32 = 3744;
pub const Z_UTIL_DEC_3746: u32 = 3745;
pub const Z_UTIL_DEC_3747: u32 = 3746;
pub const Z_UTIL_DEC_3748: u32 = 3747;
pub const Z_UTIL_DEC_3749: u32 = 3748;
pub const Z_UTIL_DEC_3750: u32 = 3749;
pub const Z_UTIL_DEC_3751: u32 = 3750;
pub const Z_UTIL_DEC_3752: u32 = 3751;
pub const Z_UTIL_DEC_3753: u32 = 3752;
pub const Z_UTIL_DEC_3754: u32 = 3753;
pub const Z_UTIL_DEC_3755: u32 = 3754;
pub const Z_UTIL_DEC_3756: u32 = 3755;
pub const Z_UTIL_DEC_3757: u32 = 3756;
pub const Z_UTIL_DEC_3758: u32 = 3757;
pub const Z_UTIL_DEC_3759: u32 = 3758;
pub const Z_UTIL_DEC_3760: u32 = 3759;
pub const Z_UTIL_DEC_3761: u32 = 3760;
pub const Z_UTIL_DEC_3762: u32 = 3761;
pub const Z_UTIL_DEC_3763: u32 = 3762;
pub const Z_UTIL_DEC_3764: u32 = 3763;
pub const Z_UTIL_DEC_3765: u32 = 3764;
pub const Z_UTIL_DEC_3766: u32 = 3765;
pub const Z_UTIL_DEC_3767: u32 = 3766;
pub const Z_UTIL_DEC_3768: u32 = 3767;
pub const Z_UTIL_DEC_3769: u32 = 3768;
pub const Z_UTIL_DEC_3770: u32 = 3769;
pub const Z_UTIL_DEC_3771: u32 = 3770;
pub const Z_UTIL_DEC_3772: u32 = 3771;
pub const Z_UTIL_DEC_3773: u32 = 3772;
pub const Z_UTIL_DEC_3774: u32 = 3773;
pub const Z_UTIL_DEC_3775: u32 = 3774;
pub const Z_UTIL_DEC_3776: u32 = 3775;
pub const Z_UTIL_DEC_3777: u32 = 3776;
pub const Z_UTIL_DEC_3778: u32 = 3777;
pub const Z_UTIL_DEC_3779: u32 = 3778;
pub const Z_UTIL_DEC_3780: u32 = 3779;
pub const Z_UTIL_DEC_3781: u32 = 3780;
pub const Z_UTIL_DEC_3782: u32 = 3781;
pub const Z_UTIL_DEC_3783: u32 = 3782;
pub const Z_UTIL_DEC_3784: u32 = 3783;
pub const Z_UTIL_DEC_3785: u32 = 3784;
pub const Z_UTIL_DEC_3786: u32 = 3785;
pub const Z_UTIL_DEC_3787: u32 = 3786;
pub const Z_UTIL_DEC_3788: u32 = 3787;
pub const Z_UTIL_DEC_3789: u32 = 3788;
pub const Z_UTIL_DEC_3790: u32 = 3789;
pub const Z_UTIL_DEC_3791: u32 = 3790;
pub const Z_UTIL_DEC_3792: u32 = 3791;
pub const Z_UTIL_DEC_3793: u32 = 3792;
pub const Z_UTIL_DEC_3794: u32 = 3793;
pub const Z_UTIL_DEC_3795: u32 = 3794;
pub const Z_UTIL_DEC_3796: u32 = 3795;
pub const Z_UTIL_DEC_3797: u32 = 3796;
pub const Z_UTIL_DEC_3798: u32 = 3797;
pub const Z_UTIL_DEC_3799: u32 = 3798;
pub const Z_UTIL_DEC_3800: u32 = 3799;
pub const Z_UTIL_DEC_3801: u32 = 3800;
pub const Z_UTIL_DEC_3802: u32 = 3801;
pub const Z_UTIL_DEC_3803: u32 = 3802;
pub const Z_UTIL_DEC_3804: u32 = 3803;
pub const Z_UTIL_DEC_3805: u32 = 3804;
pub const Z_UTIL_DEC_3806: u32 = 3805;
pub const Z_UTIL_DEC_3807: u32 = 3806;
pub const Z_UTIL_DEC_3808: u32 = 3807;
pub const Z_UTIL_DEC_3809: u32 = 3808;
pub const Z_UTIL_DEC_3810: u32 = 3809;
pub const Z_UTIL_DEC_3811: u32 = 3810;
pub const Z_UTIL_DEC_3812: u32 = 3811;
pub const Z_UTIL_DEC_3813: u32 = 3812;
pub const Z_UTIL_DEC_3814: u32 = 3813;
pub const Z_UTIL_DEC_3815: u32 = 3814;
pub const Z_UTIL_DEC_3816: u32 = 3815;
pub const Z_UTIL_DEC_3817: u32 = 3816;
pub const Z_UTIL_DEC_3818: u32 = 3817;
pub const Z_UTIL_DEC_3819: u32 = 3818;
pub const Z_UTIL_DEC_3820: u32 = 3819;
pub const Z_UTIL_DEC_3821: u32 = 3820;
pub const Z_UTIL_DEC_3822: u32 = 3821;
pub const Z_UTIL_DEC_3823: u32 = 3822;
pub const Z_UTIL_DEC_3824: u32 = 3823;
pub const Z_UTIL_DEC_3825: u32 = 3824;
pub const Z_UTIL_DEC_3826: u32 = 3825;
pub const Z_UTIL_DEC_3827: u32 = 3826;
pub const Z_UTIL_DEC_3828: u32 = 3827;
pub const Z_UTIL_DEC_3829: u32 = 3828;
pub const Z_UTIL_DEC_3830: u32 = 3829;
pub const Z_UTIL_DEC_3831: u32 = 3830;
pub const Z_UTIL_DEC_3832: u32 = 3831;
pub const Z_UTIL_DEC_3833: u32 = 3832;
pub const Z_UTIL_DEC_3834: u32 = 3833;
pub const Z_UTIL_DEC_3835: u32 = 3834;
pub const Z_UTIL_DEC_3836: u32 = 3835;
pub const Z_UTIL_DEC_3837: u32 = 3836;
pub const Z_UTIL_DEC_3838: u32 = 3837;
pub const Z_UTIL_DEC_3839: u32 = 3838;
pub const Z_UTIL_DEC_3840: u32 = 3839;
pub const Z_UTIL_DEC_3841: u32 = 3840;
pub const Z_UTIL_DEC_3842: u32 = 3841;
pub const Z_UTIL_DEC_3843: u32 = 3842;
pub const Z_UTIL_DEC_3844: u32 = 3843;
pub const Z_UTIL_DEC_3845: u32 = 3844;
pub const Z_UTIL_DEC_3846: u32 = 3845;
pub const Z_UTIL_DEC_3847: u32 = 3846;
pub const Z_UTIL_DEC_3848: u32 = 3847;
pub const Z_UTIL_DEC_3849: u32 = 3848;
pub const Z_UTIL_DEC_3850: u32 = 3849;
pub const Z_UTIL_DEC_3851: u32 = 3850;
pub const Z_UTIL_DEC_3852: u32 = 3851;
pub const Z_UTIL_DEC_3853: u32 = 3852;
pub const Z_UTIL_DEC_3854: u32 = 3853;
pub const Z_UTIL_DEC_3855: u32 = 3854;
pub const Z_UTIL_DEC_3856: u32 = 3855;
pub const Z_UTIL_DEC_3857: u32 = 3856;
pub const Z_UTIL_DEC_3858: u32 = 3857;
pub const Z_UTIL_DEC_3859: u32 = 3858;
pub const Z_UTIL_DEC_3860: u32 = 3859;
pub const Z_UTIL_DEC_3861: u32 = 3860;
pub const Z_UTIL_DEC_3862: u32 = 3861;
pub const Z_UTIL_DEC_3863: u32 = 3862;
pub const Z_UTIL_DEC_3864: u32 = 3863;
pub const Z_UTIL_DEC_3865: u32 = 3864;
pub const Z_UTIL_DEC_3866: u32 = 3865;
pub const Z_UTIL_DEC_3867: u32 = 3866;
pub const Z_UTIL_DEC_3868: u32 = 3867;
pub const Z_UTIL_DEC_3869: u32 = 3868;
pub const Z_UTIL_DEC_3870: u32 = 3869;
pub const Z_UTIL_DEC_3871: u32 = 3870;
pub const Z_UTIL_DEC_3872: u32 = 3871;
pub const Z_UTIL_DEC_3873: u32 = 3872;
pub const Z_UTIL_DEC_3874: u32 = 3873;
pub const Z_UTIL_DEC_3875: u32 = 3874;
pub const Z_UTIL_DEC_3876: u32 = 3875;
pub const Z_UTIL_DEC_3877: u32 = 3876;
pub const Z_UTIL_DEC_3878: u32 = 3877;
pub const Z_UTIL_DEC_3879: u32 = 3878;
pub const Z_UTIL_DEC_3880: u32 = 3879;
pub const Z_UTIL_DEC_3881: u32 = 3880;
pub const Z_UTIL_DEC_3882: u32 = 3881;
pub const Z_UTIL_DEC_3883: u32 = 3882;
pub const Z_UTIL_DEC_3884: u32 = 3883;
pub const Z_UTIL_DEC_3885: u32 = 3884;
pub const Z_UTIL_DEC_3886: u32 = 3885;
pub const Z_UTIL_DEC_3887: u32 = 3886;
pub const Z_UTIL_DEC_3888: u32 = 3887;
pub const Z_UTIL_DEC_3889: u32 = 3888;
pub const Z_UTIL_DEC_3890: u32 = 3889;
pub const Z_UTIL_DEC_3891: u32 = 3890;
pub const Z_UTIL_DEC_3892: u32 = 3891;
pub const Z_UTIL_DEC_3893: u32 = 3892;
pub const Z_UTIL_DEC_3894: u32 = 3893;
pub const Z_UTIL_DEC_3895: u32 = 3894;
pub const Z_UTIL_DEC_3896: u32 = 3895;
pub const Z_UTIL_DEC_3897: u32 = 3896;
pub const Z_UTIL_DEC_3898: u32 = 3897;
pub const Z_UTIL_DEC_3899: u32 = 3898;
pub const Z_UTIL_DEC_3900: u32 = 3899;
pub const Z_UTIL_DEC_3901: u32 = 3900;
pub const Z_UTIL_DEC_3902: u32 = 3901;
pub const Z_UTIL_DEC_3903: u32 = 3902;
pub const Z_UTIL_DEC_3904: u32 = 3903;
pub const Z_UTIL_DEC_3905: u32 = 3904;
pub const Z_UTIL_DEC_3906: u32 = 3905;
pub const Z_UTIL_DEC_3907: u32 = 3906;
pub const Z_UTIL_DEC_3908: u32 = 3907;
pub const Z_UTIL_DEC_3909: u32 = 3908;
pub const Z_UTIL_DEC_3910: u32 = 3909;
pub const Z_UTIL_DEC_3911: u32 = 3910;
pub const Z_UTIL_DEC_3912: u32 = 3911;
pub const Z_UTIL_DEC_3913: u32 = 3912;
pub const Z_UTIL_DEC_3914: u32 = 3913;
pub const Z_UTIL_DEC_3915: u32 = 3914;
pub const Z_UTIL_DEC_3916: u32 = 3915;
pub const Z_UTIL_DEC_3917: u32 = 3916;
pub const Z_UTIL_DEC_3918: u32 = 3917;
pub const Z_UTIL_DEC_3919: u32 = 3918;
pub const Z_UTIL_DEC_3920: u32 = 3919;
pub const Z_UTIL_DEC_3921: u32 = 3920;
pub const Z_UTIL_DEC_3922: u32 = 3921;
pub const Z_UTIL_DEC_3923: u32 = 3922;
pub const Z_UTIL_DEC_3924: u32 = 3923;
pub const Z_UTIL_DEC_3925: u32 = 3924;
pub const Z_UTIL_DEC_3926: u32 = 3925;
pub const Z_UTIL_DEC_3927: u32 = 3926;
pub const Z_UTIL_DEC_3928: u32 = 3927;
pub const Z_UTIL_DEC_3929: u32 = 3928;
pub const Z_UTIL_DEC_3930: u32 = 3929;
pub const Z_UTIL_DEC_3931: u32 = 3930;
pub const Z_UTIL_DEC_3932: u32 = 3931;
pub const Z_UTIL_DEC_3933: u32 = 3932;
pub const Z_UTIL_DEC_3934: u32 = 3933;
pub const Z_UTIL_DEC_3935: u32 = 3934;
pub const Z_UTIL_DEC_3936: u32 = 3935;
pub const Z_UTIL_DEC_3937: u32 = 3936;
pub const Z_UTIL_DEC_3938: u32 = 3937;
pub const Z_UTIL_DEC_3939: u32 = 3938;
pub const Z_UTIL_DEC_3940: u32 = 3939;
pub const Z_UTIL_DEC_3941: u32 = 3940;
pub const Z_UTIL_DEC_3942: u32 = 3941;
pub const Z_UTIL_DEC_3943: u32 = 3942;
pub const Z_UTIL_DEC_3944: u32 = 3943;
pub const Z_UTIL_DEC_3945: u32 = 3944;
pub const Z_UTIL_DEC_3946: u32 = 3945;
pub const Z_UTIL_DEC_3947: u32 = 3946;
pub const Z_UTIL_DEC_3948: u32 = 3947;
pub const Z_UTIL_DEC_3949: u32 = 3948;
pub const Z_UTIL_DEC_3950: u32 = 3949;
pub const Z_UTIL_DEC_3951: u32 = 3950;
pub const Z_UTIL_DEC_3952: u32 = 3951;
pub const Z_UTIL_DEC_3953: u32 = 3952;
pub const Z_UTIL_DEC_3954: u32 = 3953;
pub const Z_UTIL_DEC_3955: u32 = 3954;
pub const Z_UTIL_DEC_3956: u32 = 3955;
pub const Z_UTIL_DEC_3957: u32 = 3956;
pub const Z_UTIL_DEC_3958: u32 = 3957;
pub const Z_UTIL_DEC_3959: u32 = 3958;
pub const Z_UTIL_DEC_3960: u32 = 3959;
pub const Z_UTIL_DEC_3961: u32 = 3960;
pub const Z_UTIL_DEC_3962: u32 = 3961;
pub const Z_UTIL_DEC_3963: u32 = 3962;
pub const Z_UTIL_DEC_3964: u32 = 3963;
pub const Z_UTIL_DEC_3965: u32 = 3964;
pub const Z_UTIL_DEC_3966: u32 = 3965;
pub const Z_UTIL_DEC_3967: u32 = 3966;
pub const Z_UTIL_DEC_3968: u32 = 3967;
pub const Z_UTIL_DEC_3969: u32 = 3968;
pub const Z_UTIL_DEC_3970: u32 = 3969;
pub const Z_UTIL_DEC_3971: u32 = 3970;
pub const Z_UTIL_DEC_3972: u32 = 3971;
pub const Z_UTIL_DEC_3973: u32 = 3972;
pub const Z_UTIL_DEC_3974: u32 = 3973;
pub const Z_UTIL_DEC_3975: u32 = 3974;
pub const Z_UTIL_DEC_3976: u32 = 3975;
pub const Z_UTIL_DEC_3977: u32 = 3976;
pub const Z_UTIL_DEC_3978: u32 = 3977;
pub const Z_UTIL_DEC_3979: u32 = 3978;
pub const Z_UTIL_DEC_3980: u32 = 3979;
pub const Z_UTIL_DEC_3981: u32 = 3980;
pub const Z_UTIL_DEC_3982: u32 = 3981;
pub const Z_UTIL_DEC_3983: u32 = 3982;
pub const Z_UTIL_DEC_3984: u32 = 3983;
pub const Z_UTIL_DEC_3985: u32 = 3984;
pub const Z_UTIL_DEC_3986: u32 = 3985;
pub const Z_UTIL_DEC_3987: u32 = 3986;
pub const Z_UTIL_DEC_3988: u32 = 3987;
pub const Z_UTIL_DEC_3989: u32 = 3988;
pub const Z_UTIL_DEC_3990: u32 = 3989;
pub const Z_UTIL_DEC_3991: u32 = 3990;
pub const Z_UTIL_DEC_3992: u32 = 3991;
pub const Z_UTIL_DEC_3993: u32 = 3992;
pub const Z_UTIL_DEC_3994: u32 = 3993;
pub const Z_UTIL_DEC_3995: u32 = 3994;
pub const Z_UTIL_DEC_3996: u32 = 3995;
pub const Z_UTIL_DEC_3997: u32 = 3996;
pub const Z_UTIL_DEC_3998: u32 = 3997;
pub const Z_UTIL_DEC_3999: u32 = 3998;
pub const Z_UTIL_DEC_4000: u32 = 3999;
pub const Z_UTIL_DEC_4001: u32 = 4000;
pub const Z_UTIL_DEC_4002: u32 = 4001;
pub const Z_UTIL_DEC_4003: u32 = 4002;
pub const Z_UTIL_DEC_4004: u32 = 4003;
pub const Z_UTIL_DEC_4005: u32 = 4004;
pub const Z_UTIL_DEC_4006: u32 = 4005;
pub const Z_UTIL_DEC_4007: u32 = 4006;
pub const Z_UTIL_DEC_4008: u32 = 4007;
pub const Z_UTIL_DEC_4009: u32 = 4008;
pub const Z_UTIL_DEC_4010: u32 = 4009;
pub const Z_UTIL_DEC_4011: u32 = 4010;
pub const Z_UTIL_DEC_4012: u32 = 4011;
pub const Z_UTIL_DEC_4013: u32 = 4012;
pub const Z_UTIL_DEC_4014: u32 = 4013;
pub const Z_UTIL_DEC_4015: u32 = 4014;
pub const Z_UTIL_DEC_4016: u32 = 4015;
pub const Z_UTIL_DEC_4017: u32 = 4016;
pub const Z_UTIL_DEC_4018: u32 = 4017;
pub const Z_UTIL_DEC_4019: u32 = 4018;
pub const Z_UTIL_DEC_4020: u32 = 4019;
pub const Z_UTIL_DEC_4021: u32 = 4020;
pub const Z_UTIL_DEC_4022: u32 = 4021;
pub const Z_UTIL_DEC_4023: u32 = 4022;
pub const Z_UTIL_DEC_4024: u32 = 4023;
pub const Z_UTIL_DEC_4025: u32 = 4024;
pub const Z_UTIL_DEC_4026: u32 = 4025;
pub const Z_UTIL_DEC_4027: u32 = 4026;
pub const Z_UTIL_DEC_4028: u32 = 4027;
pub const Z_UTIL_DEC_4029: u32 = 4028;
pub const Z_UTIL_DEC_4030: u32 = 4029;
pub const Z_UTIL_DEC_4031: u32 = 4030;
pub const Z_UTIL_DEC_4032: u32 = 4031;
pub const Z_UTIL_DEC_4033: u32 = 4032;
pub const Z_UTIL_DEC_4034: u32 = 4033;
pub const Z_UTIL_DEC_4035: u32 = 4034;
pub const Z_UTIL_DEC_4036: u32 = 4035;
pub const Z_UTIL_DEC_4037: u32 = 4036;
pub const Z_UTIL_DEC_4038: u32 = 4037;
pub const Z_UTIL_DEC_4039: u32 = 4038;
pub const Z_UTIL_DEC_4040: u32 = 4039;
pub const Z_UTIL_DEC_4041: u32 = 4040;
pub const Z_UTIL_DEC_4042: u32 = 4041;
pub const Z_UTIL_DEC_4043: u32 = 4042;
pub const Z_UTIL_DEC_4044: u32 = 4043;
pub const Z_UTIL_DEC_4045: u32 = 4044;
pub const Z_UTIL_DEC_4046: u32 = 4045;
pub const Z_UTIL_DEC_4047: u32 = 4046;
pub const Z_UTIL_DEC_4048: u32 = 4047;
pub const Z_UTIL_DEC_4049: u32 = 4048;
pub const Z_UTIL_DEC_4050: u32 = 4049;
pub const Z_UTIL_DEC_4051: u32 = 4050;
pub const Z_UTIL_DEC_4052: u32 = 4051;
pub const Z_UTIL_DEC_4053: u32 = 4052;
pub const Z_UTIL_DEC_4054: u32 = 4053;
pub const Z_UTIL_DEC_4055: u32 = 4054;
pub const Z_UTIL_DEC_4056: u32 = 4055;
pub const Z_UTIL_DEC_4057: u32 = 4056;
pub const Z_UTIL_DEC_4058: u32 = 4057;
pub const Z_UTIL_DEC_4059: u32 = 4058;
pub const Z_UTIL_DEC_4060: u32 = 4059;
pub const Z_UTIL_DEC_4061: u32 = 4060;
pub const Z_UTIL_DEC_4062: u32 = 4061;
pub const Z_UTIL_DEC_4063: u32 = 4062;
pub const Z_UTIL_DEC_4064: u32 = 4063;
pub const Z_UTIL_DEC_4065: u32 = 4064;
pub const Z_UTIL_DEC_4066: u32 = 4065;
pub const Z_UTIL_DEC_4067: u32 = 4066;
pub const Z_UTIL_DEC_4068: u32 = 4067;
pub const Z_UTIL_DEC_4069: u32 = 4068;
pub const Z_UTIL_DEC_4070: u32 = 4069;
pub const Z_UTIL_DEC_4071: u32 = 4070;
pub const Z_UTIL_DEC_4072: u32 = 4071;
pub const Z_UTIL_DEC_4073: u32 = 4072;
pub const Z_UTIL_DEC_4074: u32 = 4073;
pub const Z_UTIL_DEC_4075: u32 = 4074;
pub const Z_UTIL_DEC_4076: u32 = 4075;
pub const Z_UTIL_DEC_4077: u32 = 4076;
pub const Z_UTIL_DEC_4078: u32 = 4077;
pub const Z_UTIL_DEC_4079: u32 = 4078;
pub const Z_UTIL_DEC_4080: u32 = 4079;
pub const Z_UTIL_DEC_4081: u32 = 4080;
pub const Z_UTIL_DEC_4082: u32 = 4081;
pub const Z_UTIL_DEC_4083: u32 = 4082;
pub const Z_UTIL_DEC_4084: u32 = 4083;
pub const Z_UTIL_DEC_4085: u32 = 4084;
pub const Z_UTIL_DEC_4086: u32 = 4085;
pub const Z_UTIL_DEC_4087: u32 = 4086;
pub const Z_UTIL_DEC_4088: u32 = 4087;
pub const Z_UTIL_DEC_4089: u32 = 4088;
pub const Z_UTIL_DEC_4090: u32 = 4089;
pub const Z_UTIL_DEC_4091: u32 = 4090;
pub const Z_UTIL_DEC_4092: u32 = 4091;
pub const Z_UTIL_DEC_4093: u32 = 4092;
pub const Z_UTIL_DEC_4094: u32 = 4093;
pub const Z_UTIL_DEC_4095: u32 = 4094;
pub const Z_UTIL_DEC_4096: u32 = 4095;
pub const Z_UTIL_X2_0: u32 = 0;
pub const Z_UTIL_X2_1: u32 = 2;
pub const Z_UTIL_X2_2: u32 = 4;
pub const Z_UTIL_X2_3: u32 = 6;
pub const Z_UTIL_X2_4: u32 = 8;
pub const Z_UTIL_X2_5: u32 = 10;
pub const Z_UTIL_X2_6: u32 = 12;
pub const Z_UTIL_X2_7: u32 = 14;
pub const Z_UTIL_X2_8: u32 = 16;
pub const Z_UTIL_X2_9: u32 = 18;
pub const Z_UTIL_X2_10: u32 = 20;
pub const Z_UTIL_X2_11: u32 = 22;
pub const Z_UTIL_X2_12: u32 = 24;
pub const Z_UTIL_X2_13: u32 = 26;
pub const Z_UTIL_X2_14: u32 = 28;
pub const Z_UTIL_X2_15: u32 = 30;
pub const Z_UTIL_X2_16: u32 = 32;
pub const Z_UTIL_X2_17: u32 = 34;
pub const Z_UTIL_X2_18: u32 = 36;
pub const Z_UTIL_X2_19: u32 = 38;
pub const Z_UTIL_X2_20: u32 = 40;
pub const Z_UTIL_X2_21: u32 = 42;
pub const Z_UTIL_X2_22: u32 = 44;
pub const Z_UTIL_X2_23: u32 = 46;
pub const Z_UTIL_X2_24: u32 = 48;
pub const Z_UTIL_X2_25: u32 = 50;
pub const Z_UTIL_X2_26: u32 = 52;
pub const Z_UTIL_X2_27: u32 = 54;
pub const Z_UTIL_X2_28: u32 = 56;
pub const Z_UTIL_X2_29: u32 = 58;
pub const Z_UTIL_X2_30: u32 = 60;
pub const Z_UTIL_X2_31: u32 = 62;
pub const Z_UTIL_X2_32: u32 = 64;
pub const Z_UTIL_X2_33: u32 = 66;
pub const Z_UTIL_X2_34: u32 = 68;
pub const Z_UTIL_X2_35: u32 = 70;
pub const Z_UTIL_X2_36: u32 = 72;
pub const Z_UTIL_X2_37: u32 = 74;
pub const Z_UTIL_X2_38: u32 = 76;
pub const Z_UTIL_X2_39: u32 = 78;
pub const Z_UTIL_X2_40: u32 = 80;
pub const Z_UTIL_X2_41: u32 = 82;
pub const Z_UTIL_X2_42: u32 = 84;
pub const Z_UTIL_X2_43: u32 = 86;
pub const Z_UTIL_X2_44: u32 = 88;
pub const Z_UTIL_X2_45: u32 = 90;
pub const Z_UTIL_X2_46: u32 = 92;
pub const Z_UTIL_X2_47: u32 = 94;
pub const Z_UTIL_X2_48: u32 = 96;
pub const Z_UTIL_X2_49: u32 = 98;
pub const Z_UTIL_X2_50: u32 = 100;
pub const Z_UTIL_X2_51: u32 = 102;
pub const Z_UTIL_X2_52: u32 = 104;
pub const Z_UTIL_X2_53: u32 = 106;
pub const Z_UTIL_X2_54: u32 = 108;
pub const Z_UTIL_X2_55: u32 = 110;
pub const Z_UTIL_X2_56: u32 = 112;
pub const Z_UTIL_X2_57: u32 = 114;
pub const Z_UTIL_X2_58: u32 = 116;
pub const Z_UTIL_X2_59: u32 = 118;
pub const Z_UTIL_X2_60: u32 = 120;
pub const Z_UTIL_X2_61: u32 = 122;
pub const Z_UTIL_X2_62: u32 = 124;
pub const Z_UTIL_X2_63: u32 = 126;
pub const Z_UTIL_X2_64: u32 = 128;
pub const Z_UTIL_X2_65: u32 = 130;
pub const Z_UTIL_X2_66: u32 = 132;
pub const Z_UTIL_X2_67: u32 = 134;
pub const Z_UTIL_X2_68: u32 = 136;
pub const Z_UTIL_X2_69: u32 = 138;
pub const Z_UTIL_X2_70: u32 = 140;
pub const Z_UTIL_X2_71: u32 = 142;
pub const Z_UTIL_X2_72: u32 = 144;
pub const Z_UTIL_X2_73: u32 = 146;
pub const Z_UTIL_X2_74: u32 = 148;
pub const Z_UTIL_X2_75: u32 = 150;
pub const Z_UTIL_X2_76: u32 = 152;
pub const Z_UTIL_X2_77: u32 = 154;
pub const Z_UTIL_X2_78: u32 = 156;
pub const Z_UTIL_X2_79: u32 = 158;
pub const Z_UTIL_X2_80: u32 = 160;
pub const Z_UTIL_X2_81: u32 = 162;
pub const Z_UTIL_X2_82: u32 = 164;
pub const Z_UTIL_X2_83: u32 = 166;
pub const Z_UTIL_X2_84: u32 = 168;
pub const Z_UTIL_X2_85: u32 = 170;
pub const Z_UTIL_X2_86: u32 = 172;
pub const Z_UTIL_X2_87: u32 = 174;
pub const Z_UTIL_X2_88: u32 = 176;
pub const Z_UTIL_X2_89: u32 = 178;
pub const Z_UTIL_X2_90: u32 = 180;
pub const Z_UTIL_X2_91: u32 = 182;
pub const Z_UTIL_X2_92: u32 = 184;
pub const Z_UTIL_X2_93: u32 = 186;
pub const Z_UTIL_X2_94: u32 = 188;
pub const Z_UTIL_X2_95: u32 = 190;
pub const Z_UTIL_X2_96: u32 = 192;
pub const Z_UTIL_X2_97: u32 = 194;
pub const Z_UTIL_X2_98: u32 = 196;
pub const Z_UTIL_X2_99: u32 = 198;
pub const Z_UTIL_X2_100: u32 = 200;
pub const Z_UTIL_X2_101: u32 = 202;
pub const Z_UTIL_X2_102: u32 = 204;
pub const Z_UTIL_X2_103: u32 = 206;
pub const Z_UTIL_X2_104: u32 = 208;
pub const Z_UTIL_X2_105: u32 = 210;
pub const Z_UTIL_X2_106: u32 = 212;
pub const Z_UTIL_X2_107: u32 = 214;
pub const Z_UTIL_X2_108: u32 = 216;
pub const Z_UTIL_X2_109: u32 = 218;
pub const Z_UTIL_X2_110: u32 = 220;
pub const Z_UTIL_X2_111: u32 = 222;
pub const Z_UTIL_X2_112: u32 = 224;
pub const Z_UTIL_X2_113: u32 = 226;
pub const Z_UTIL_X2_114: u32 = 228;
pub const Z_UTIL_X2_115: u32 = 230;
pub const Z_UTIL_X2_116: u32 = 232;
pub const Z_UTIL_X2_117: u32 = 234;
pub const Z_UTIL_X2_118: u32 = 236;
pub const Z_UTIL_X2_119: u32 = 238;
pub const Z_UTIL_X2_120: u32 = 240;
pub const Z_UTIL_X2_121: u32 = 242;
pub const Z_UTIL_X2_122: u32 = 244;
pub const Z_UTIL_X2_123: u32 = 246;
pub const Z_UTIL_X2_124: u32 = 248;
pub const Z_UTIL_X2_125: u32 = 250;
pub const Z_UTIL_X2_126: u32 = 252;
pub const Z_UTIL_X2_127: u32 = 254;
pub const Z_UTIL_X2_128: u32 = 256;
pub const Z_UTIL_X2_129: u32 = 258;
pub const Z_UTIL_X2_130: u32 = 260;
pub const Z_UTIL_X2_131: u32 = 262;
pub const Z_UTIL_X2_132: u32 = 264;
pub const Z_UTIL_X2_133: u32 = 266;
pub const Z_UTIL_X2_134: u32 = 268;
pub const Z_UTIL_X2_135: u32 = 270;
pub const Z_UTIL_X2_136: u32 = 272;
pub const Z_UTIL_X2_137: u32 = 274;
pub const Z_UTIL_X2_138: u32 = 276;
pub const Z_UTIL_X2_139: u32 = 278;
pub const Z_UTIL_X2_140: u32 = 280;
pub const Z_UTIL_X2_141: u32 = 282;
pub const Z_UTIL_X2_142: u32 = 284;
pub const Z_UTIL_X2_143: u32 = 286;
pub const Z_UTIL_X2_144: u32 = 288;
pub const Z_UTIL_X2_145: u32 = 290;
pub const Z_UTIL_X2_146: u32 = 292;
pub const Z_UTIL_X2_147: u32 = 294;
pub const Z_UTIL_X2_148: u32 = 296;
pub const Z_UTIL_X2_149: u32 = 298;
pub const Z_UTIL_X2_150: u32 = 300;
pub const Z_UTIL_X2_151: u32 = 302;
pub const Z_UTIL_X2_152: u32 = 304;
pub const Z_UTIL_X2_153: u32 = 306;
pub const Z_UTIL_X2_154: u32 = 308;
pub const Z_UTIL_X2_155: u32 = 310;
pub const Z_UTIL_X2_156: u32 = 312;
pub const Z_UTIL_X2_157: u32 = 314;
pub const Z_UTIL_X2_158: u32 = 316;
pub const Z_UTIL_X2_159: u32 = 318;
pub const Z_UTIL_X2_160: u32 = 320;
pub const Z_UTIL_X2_161: u32 = 322;
pub const Z_UTIL_X2_162: u32 = 324;
pub const Z_UTIL_X2_163: u32 = 326;
pub const Z_UTIL_X2_164: u32 = 328;
pub const Z_UTIL_X2_165: u32 = 330;
pub const Z_UTIL_X2_166: u32 = 332;
pub const Z_UTIL_X2_167: u32 = 334;
pub const Z_UTIL_X2_168: u32 = 336;
pub const Z_UTIL_X2_169: u32 = 338;
pub const Z_UTIL_X2_170: u32 = 340;
pub const Z_UTIL_X2_171: u32 = 342;
pub const Z_UTIL_X2_172: u32 = 344;
pub const Z_UTIL_X2_173: u32 = 346;
pub const Z_UTIL_X2_174: u32 = 348;
pub const Z_UTIL_X2_175: u32 = 350;
pub const Z_UTIL_X2_176: u32 = 352;
pub const Z_UTIL_X2_177: u32 = 354;
pub const Z_UTIL_X2_178: u32 = 356;
pub const Z_UTIL_X2_179: u32 = 358;
pub const Z_UTIL_X2_180: u32 = 360;
pub const Z_UTIL_X2_181: u32 = 362;
pub const Z_UTIL_X2_182: u32 = 364;
pub const Z_UTIL_X2_183: u32 = 366;
pub const Z_UTIL_X2_184: u32 = 368;
pub const Z_UTIL_X2_185: u32 = 370;
pub const Z_UTIL_X2_186: u32 = 372;
pub const Z_UTIL_X2_187: u32 = 374;
pub const Z_UTIL_X2_188: u32 = 376;
pub const Z_UTIL_X2_189: u32 = 378;
pub const Z_UTIL_X2_190: u32 = 380;
pub const Z_UTIL_X2_191: u32 = 382;
pub const Z_UTIL_X2_192: u32 = 384;
pub const Z_UTIL_X2_193: u32 = 386;
pub const Z_UTIL_X2_194: u32 = 388;
pub const Z_UTIL_X2_195: u32 = 390;
pub const Z_UTIL_X2_196: u32 = 392;
pub const Z_UTIL_X2_197: u32 = 394;
pub const Z_UTIL_X2_198: u32 = 396;
pub const Z_UTIL_X2_199: u32 = 398;
pub const Z_UTIL_X2_200: u32 = 400;
pub const Z_UTIL_X2_201: u32 = 402;
pub const Z_UTIL_X2_202: u32 = 404;
pub const Z_UTIL_X2_203: u32 = 406;
pub const Z_UTIL_X2_204: u32 = 408;
pub const Z_UTIL_X2_205: u32 = 410;
pub const Z_UTIL_X2_206: u32 = 412;
pub const Z_UTIL_X2_207: u32 = 414;
pub const Z_UTIL_X2_208: u32 = 416;
pub const Z_UTIL_X2_209: u32 = 418;
pub const Z_UTIL_X2_210: u32 = 420;
pub const Z_UTIL_X2_211: u32 = 422;
pub const Z_UTIL_X2_212: u32 = 424;
pub const Z_UTIL_X2_213: u32 = 426;
pub const Z_UTIL_X2_214: u32 = 428;
pub const Z_UTIL_X2_215: u32 = 430;
pub const Z_UTIL_X2_216: u32 = 432;
pub const Z_UTIL_X2_217: u32 = 434;
pub const Z_UTIL_X2_218: u32 = 436;
pub const Z_UTIL_X2_219: u32 = 438;
pub const Z_UTIL_X2_220: u32 = 440;
pub const Z_UTIL_X2_221: u32 = 442;
pub const Z_UTIL_X2_222: u32 = 444;
pub const Z_UTIL_X2_223: u32 = 446;
pub const Z_UTIL_X2_224: u32 = 448;
pub const Z_UTIL_X2_225: u32 = 450;
pub const Z_UTIL_X2_226: u32 = 452;
pub const Z_UTIL_X2_227: u32 = 454;
pub const Z_UTIL_X2_228: u32 = 456;
pub const Z_UTIL_X2_229: u32 = 458;
pub const Z_UTIL_X2_230: u32 = 460;
pub const Z_UTIL_X2_231: u32 = 462;
pub const Z_UTIL_X2_232: u32 = 464;
pub const Z_UTIL_X2_233: u32 = 466;
pub const Z_UTIL_X2_234: u32 = 468;
pub const Z_UTIL_X2_235: u32 = 470;
pub const Z_UTIL_X2_236: u32 = 472;
pub const Z_UTIL_X2_237: u32 = 474;
pub const Z_UTIL_X2_238: u32 = 476;
pub const Z_UTIL_X2_239: u32 = 478;
pub const Z_UTIL_X2_240: u32 = 480;
pub const Z_UTIL_X2_241: u32 = 482;
pub const Z_UTIL_X2_242: u32 = 484;
pub const Z_UTIL_X2_243: u32 = 486;
pub const Z_UTIL_X2_244: u32 = 488;
pub const Z_UTIL_X2_245: u32 = 490;
pub const Z_UTIL_X2_246: u32 = 492;
pub const Z_UTIL_X2_247: u32 = 494;
pub const Z_UTIL_X2_248: u32 = 496;
pub const Z_UTIL_X2_249: u32 = 498;
pub const Z_UTIL_X2_250: u32 = 500;
pub const Z_UTIL_X2_251: u32 = 502;
pub const Z_UTIL_X2_252: u32 = 504;
pub const Z_UTIL_X2_253: u32 = 506;
pub const Z_UTIL_X2_254: u32 = 508;
pub const Z_UTIL_X2_255: u32 = 510;
pub const Z_UTIL_X2_256: u32 = 512;
pub const Z_UTIL_X2_257: u32 = 514;
pub const Z_UTIL_X2_258: u32 = 516;
pub const Z_UTIL_X2_259: u32 = 518;
pub const Z_UTIL_X2_260: u32 = 520;
pub const Z_UTIL_X2_261: u32 = 522;
pub const Z_UTIL_X2_262: u32 = 524;
pub const Z_UTIL_X2_263: u32 = 526;
pub const Z_UTIL_X2_264: u32 = 528;
pub const Z_UTIL_X2_265: u32 = 530;
pub const Z_UTIL_X2_266: u32 = 532;
pub const Z_UTIL_X2_267: u32 = 534;
pub const Z_UTIL_X2_268: u32 = 536;
pub const Z_UTIL_X2_269: u32 = 538;
pub const Z_UTIL_X2_270: u32 = 540;
pub const Z_UTIL_X2_271: u32 = 542;
pub const Z_UTIL_X2_272: u32 = 544;
pub const Z_UTIL_X2_273: u32 = 546;
pub const Z_UTIL_X2_274: u32 = 548;
pub const Z_UTIL_X2_275: u32 = 550;
pub const Z_UTIL_X2_276: u32 = 552;
pub const Z_UTIL_X2_277: u32 = 554;
pub const Z_UTIL_X2_278: u32 = 556;
pub const Z_UTIL_X2_279: u32 = 558;
pub const Z_UTIL_X2_280: u32 = 560;
pub const Z_UTIL_X2_281: u32 = 562;
pub const Z_UTIL_X2_282: u32 = 564;
pub const Z_UTIL_X2_283: u32 = 566;
pub const Z_UTIL_X2_284: u32 = 568;
pub const Z_UTIL_X2_285: u32 = 570;
pub const Z_UTIL_X2_286: u32 = 572;
pub const Z_UTIL_X2_287: u32 = 574;
pub const Z_UTIL_X2_288: u32 = 576;
pub const Z_UTIL_X2_289: u32 = 578;
pub const Z_UTIL_X2_290: u32 = 580;
pub const Z_UTIL_X2_291: u32 = 582;
pub const Z_UTIL_X2_292: u32 = 584;
pub const Z_UTIL_X2_293: u32 = 586;
pub const Z_UTIL_X2_294: u32 = 588;
pub const Z_UTIL_X2_295: u32 = 590;
pub const Z_UTIL_X2_296: u32 = 592;
pub const Z_UTIL_X2_297: u32 = 594;
pub const Z_UTIL_X2_298: u32 = 596;
pub const Z_UTIL_X2_299: u32 = 598;
pub const Z_UTIL_X2_300: u32 = 600;
pub const Z_UTIL_X2_301: u32 = 602;
pub const Z_UTIL_X2_302: u32 = 604;
pub const Z_UTIL_X2_303: u32 = 606;
pub const Z_UTIL_X2_304: u32 = 608;
pub const Z_UTIL_X2_305: u32 = 610;
pub const Z_UTIL_X2_306: u32 = 612;
pub const Z_UTIL_X2_307: u32 = 614;
pub const Z_UTIL_X2_308: u32 = 616;
pub const Z_UTIL_X2_309: u32 = 618;
pub const Z_UTIL_X2_310: u32 = 620;
pub const Z_UTIL_X2_311: u32 = 622;
pub const Z_UTIL_X2_312: u32 = 624;
pub const Z_UTIL_X2_313: u32 = 626;
pub const Z_UTIL_X2_314: u32 = 628;
pub const Z_UTIL_X2_315: u32 = 630;
pub const Z_UTIL_X2_316: u32 = 632;
pub const Z_UTIL_X2_317: u32 = 634;
pub const Z_UTIL_X2_318: u32 = 636;
pub const Z_UTIL_X2_319: u32 = 638;
pub const Z_UTIL_X2_320: u32 = 640;
pub const Z_UTIL_X2_321: u32 = 642;
pub const Z_UTIL_X2_322: u32 = 644;
pub const Z_UTIL_X2_323: u32 = 646;
pub const Z_UTIL_X2_324: u32 = 648;
pub const Z_UTIL_X2_325: u32 = 650;
pub const Z_UTIL_X2_326: u32 = 652;
pub const Z_UTIL_X2_327: u32 = 654;
pub const Z_UTIL_X2_328: u32 = 656;
pub const Z_UTIL_X2_329: u32 = 658;
pub const Z_UTIL_X2_330: u32 = 660;
pub const Z_UTIL_X2_331: u32 = 662;
pub const Z_UTIL_X2_332: u32 = 664;
pub const Z_UTIL_X2_333: u32 = 666;
pub const Z_UTIL_X2_334: u32 = 668;
pub const Z_UTIL_X2_335: u32 = 670;
pub const Z_UTIL_X2_336: u32 = 672;
pub const Z_UTIL_X2_337: u32 = 674;
pub const Z_UTIL_X2_338: u32 = 676;
pub const Z_UTIL_X2_339: u32 = 678;
pub const Z_UTIL_X2_340: u32 = 680;
pub const Z_UTIL_X2_341: u32 = 682;
pub const Z_UTIL_X2_342: u32 = 684;
pub const Z_UTIL_X2_343: u32 = 686;
pub const Z_UTIL_X2_344: u32 = 688;
pub const Z_UTIL_X2_345: u32 = 690;
pub const Z_UTIL_X2_346: u32 = 692;
pub const Z_UTIL_X2_347: u32 = 694;
pub const Z_UTIL_X2_348: u32 = 696;
pub const Z_UTIL_X2_349: u32 = 698;
pub const Z_UTIL_X2_350: u32 = 700;
pub const Z_UTIL_X2_351: u32 = 702;
pub const Z_UTIL_X2_352: u32 = 704;
pub const Z_UTIL_X2_353: u32 = 706;
pub const Z_UTIL_X2_354: u32 = 708;
pub const Z_UTIL_X2_355: u32 = 710;
pub const Z_UTIL_X2_356: u32 = 712;
pub const Z_UTIL_X2_357: u32 = 714;
pub const Z_UTIL_X2_358: u32 = 716;
pub const Z_UTIL_X2_359: u32 = 718;
pub const Z_UTIL_X2_360: u32 = 720;
pub const Z_UTIL_X2_361: u32 = 722;
pub const Z_UTIL_X2_362: u32 = 724;
pub const Z_UTIL_X2_363: u32 = 726;
pub const Z_UTIL_X2_364: u32 = 728;
pub const Z_UTIL_X2_365: u32 = 730;
pub const Z_UTIL_X2_366: u32 = 732;
pub const Z_UTIL_X2_367: u32 = 734;
pub const Z_UTIL_X2_368: u32 = 736;
pub const Z_UTIL_X2_369: u32 = 738;
pub const Z_UTIL_X2_370: u32 = 740;
pub const Z_UTIL_X2_371: u32 = 742;
pub const Z_UTIL_X2_372: u32 = 744;
pub const Z_UTIL_X2_373: u32 = 746;
pub const Z_UTIL_X2_374: u32 = 748;
pub const Z_UTIL_X2_375: u32 = 750;
pub const Z_UTIL_X2_376: u32 = 752;
pub const Z_UTIL_X2_377: u32 = 754;
pub const Z_UTIL_X2_378: u32 = 756;
pub const Z_UTIL_X2_379: u32 = 758;
pub const Z_UTIL_X2_380: u32 = 760;
pub const Z_UTIL_X2_381: u32 = 762;
pub const Z_UTIL_X2_382: u32 = 764;
pub const Z_UTIL_X2_383: u32 = 766;
pub const Z_UTIL_X2_384: u32 = 768;
pub const Z_UTIL_X2_385: u32 = 770;
pub const Z_UTIL_X2_386: u32 = 772;
pub const Z_UTIL_X2_387: u32 = 774;
pub const Z_UTIL_X2_388: u32 = 776;
pub const Z_UTIL_X2_389: u32 = 778;
pub const Z_UTIL_X2_390: u32 = 780;
pub const Z_UTIL_X2_391: u32 = 782;
pub const Z_UTIL_X2_392: u32 = 784;
pub const Z_UTIL_X2_393: u32 = 786;
pub const Z_UTIL_X2_394: u32 = 788;
pub const Z_UTIL_X2_395: u32 = 790;
pub const Z_UTIL_X2_396: u32 = 792;
pub const Z_UTIL_X2_397: u32 = 794;
pub const Z_UTIL_X2_398: u32 = 796;
pub const Z_UTIL_X2_399: u32 = 798;
pub const Z_UTIL_X2_400: u32 = 800;
pub const Z_UTIL_X2_401: u32 = 802;
pub const Z_UTIL_X2_402: u32 = 804;
pub const Z_UTIL_X2_403: u32 = 806;
pub const Z_UTIL_X2_404: u32 = 808;
pub const Z_UTIL_X2_405: u32 = 810;
pub const Z_UTIL_X2_406: u32 = 812;
pub const Z_UTIL_X2_407: u32 = 814;
pub const Z_UTIL_X2_408: u32 = 816;
pub const Z_UTIL_X2_409: u32 = 818;
pub const Z_UTIL_X2_410: u32 = 820;
pub const Z_UTIL_X2_411: u32 = 822;
pub const Z_UTIL_X2_412: u32 = 824;
pub const Z_UTIL_X2_413: u32 = 826;
pub const Z_UTIL_X2_414: u32 = 828;
pub const Z_UTIL_X2_415: u32 = 830;
pub const Z_UTIL_X2_416: u32 = 832;
pub const Z_UTIL_X2_417: u32 = 834;
pub const Z_UTIL_X2_418: u32 = 836;
pub const Z_UTIL_X2_419: u32 = 838;
pub const Z_UTIL_X2_420: u32 = 840;
pub const Z_UTIL_X2_421: u32 = 842;
pub const Z_UTIL_X2_422: u32 = 844;
pub const Z_UTIL_X2_423: u32 = 846;
pub const Z_UTIL_X2_424: u32 = 848;
pub const Z_UTIL_X2_425: u32 = 850;
pub const Z_UTIL_X2_426: u32 = 852;
pub const Z_UTIL_X2_427: u32 = 854;
pub const Z_UTIL_X2_428: u32 = 856;
pub const Z_UTIL_X2_429: u32 = 858;
pub const Z_UTIL_X2_430: u32 = 860;
pub const Z_UTIL_X2_431: u32 = 862;
pub const Z_UTIL_X2_432: u32 = 864;
pub const Z_UTIL_X2_433: u32 = 866;
pub const Z_UTIL_X2_434: u32 = 868;
pub const Z_UTIL_X2_435: u32 = 870;
pub const Z_UTIL_X2_436: u32 = 872;
pub const Z_UTIL_X2_437: u32 = 874;
pub const Z_UTIL_X2_438: u32 = 876;
pub const Z_UTIL_X2_439: u32 = 878;
pub const Z_UTIL_X2_440: u32 = 880;
pub const Z_UTIL_X2_441: u32 = 882;
pub const Z_UTIL_X2_442: u32 = 884;
pub const Z_UTIL_X2_443: u32 = 886;
pub const Z_UTIL_X2_444: u32 = 888;
pub const Z_UTIL_X2_445: u32 = 890;
pub const Z_UTIL_X2_446: u32 = 892;
pub const Z_UTIL_X2_447: u32 = 894;
pub const Z_UTIL_X2_448: u32 = 896;
pub const Z_UTIL_X2_449: u32 = 898;
pub const Z_UTIL_X2_450: u32 = 900;
pub const Z_UTIL_X2_451: u32 = 902;
pub const Z_UTIL_X2_452: u32 = 904;
pub const Z_UTIL_X2_453: u32 = 906;
pub const Z_UTIL_X2_454: u32 = 908;
pub const Z_UTIL_X2_455: u32 = 910;
pub const Z_UTIL_X2_456: u32 = 912;
pub const Z_UTIL_X2_457: u32 = 914;
pub const Z_UTIL_X2_458: u32 = 916;
pub const Z_UTIL_X2_459: u32 = 918;
pub const Z_UTIL_X2_460: u32 = 920;
pub const Z_UTIL_X2_461: u32 = 922;
pub const Z_UTIL_X2_462: u32 = 924;
pub const Z_UTIL_X2_463: u32 = 926;
pub const Z_UTIL_X2_464: u32 = 928;
pub const Z_UTIL_X2_465: u32 = 930;
pub const Z_UTIL_X2_466: u32 = 932;
pub const Z_UTIL_X2_467: u32 = 934;
pub const Z_UTIL_X2_468: u32 = 936;
pub const Z_UTIL_X2_469: u32 = 938;
pub const Z_UTIL_X2_470: u32 = 940;
pub const Z_UTIL_X2_471: u32 = 942;
pub const Z_UTIL_X2_472: u32 = 944;
pub const Z_UTIL_X2_473: u32 = 946;
pub const Z_UTIL_X2_474: u32 = 948;
pub const Z_UTIL_X2_475: u32 = 950;
pub const Z_UTIL_X2_476: u32 = 952;
pub const Z_UTIL_X2_477: u32 = 954;
pub const Z_UTIL_X2_478: u32 = 956;
pub const Z_UTIL_X2_479: u32 = 958;
pub const Z_UTIL_X2_480: u32 = 960;
pub const Z_UTIL_X2_481: u32 = 962;
pub const Z_UTIL_X2_482: u32 = 964;
pub const Z_UTIL_X2_483: u32 = 966;
pub const Z_UTIL_X2_484: u32 = 968;
pub const Z_UTIL_X2_485: u32 = 970;
pub const Z_UTIL_X2_486: u32 = 972;
pub const Z_UTIL_X2_487: u32 = 974;
pub const Z_UTIL_X2_488: u32 = 976;
pub const Z_UTIL_X2_489: u32 = 978;
pub const Z_UTIL_X2_490: u32 = 980;
pub const Z_UTIL_X2_491: u32 = 982;
pub const Z_UTIL_X2_492: u32 = 984;
pub const Z_UTIL_X2_493: u32 = 986;
pub const Z_UTIL_X2_494: u32 = 988;
pub const Z_UTIL_X2_495: u32 = 990;
pub const Z_UTIL_X2_496: u32 = 992;
pub const Z_UTIL_X2_497: u32 = 994;
pub const Z_UTIL_X2_498: u32 = 996;
pub const Z_UTIL_X2_499: u32 = 998;
pub const Z_UTIL_X2_500: u32 = 1000;
pub const Z_UTIL_X2_501: u32 = 1002;
pub const Z_UTIL_X2_502: u32 = 1004;
pub const Z_UTIL_X2_503: u32 = 1006;
pub const Z_UTIL_X2_504: u32 = 1008;
pub const Z_UTIL_X2_505: u32 = 1010;
pub const Z_UTIL_X2_506: u32 = 1012;
pub const Z_UTIL_X2_507: u32 = 1014;
pub const Z_UTIL_X2_508: u32 = 1016;
pub const Z_UTIL_X2_509: u32 = 1018;
pub const Z_UTIL_X2_510: u32 = 1020;
pub const Z_UTIL_X2_511: u32 = 1022;
pub const Z_UTIL_X2_512: u32 = 1024;
pub const Z_UTIL_X2_513: u32 = 1026;
pub const Z_UTIL_X2_514: u32 = 1028;
pub const Z_UTIL_X2_515: u32 = 1030;
pub const Z_UTIL_X2_516: u32 = 1032;
pub const Z_UTIL_X2_517: u32 = 1034;
pub const Z_UTIL_X2_518: u32 = 1036;
pub const Z_UTIL_X2_519: u32 = 1038;
pub const Z_UTIL_X2_520: u32 = 1040;
pub const Z_UTIL_X2_521: u32 = 1042;
pub const Z_UTIL_X2_522: u32 = 1044;
pub const Z_UTIL_X2_523: u32 = 1046;
pub const Z_UTIL_X2_524: u32 = 1048;
pub const Z_UTIL_X2_525: u32 = 1050;
pub const Z_UTIL_X2_526: u32 = 1052;
pub const Z_UTIL_X2_527: u32 = 1054;
pub const Z_UTIL_X2_528: u32 = 1056;
pub const Z_UTIL_X2_529: u32 = 1058;
pub const Z_UTIL_X2_530: u32 = 1060;
pub const Z_UTIL_X2_531: u32 = 1062;
pub const Z_UTIL_X2_532: u32 = 1064;
pub const Z_UTIL_X2_533: u32 = 1066;
pub const Z_UTIL_X2_534: u32 = 1068;
pub const Z_UTIL_X2_535: u32 = 1070;
pub const Z_UTIL_X2_536: u32 = 1072;
pub const Z_UTIL_X2_537: u32 = 1074;
pub const Z_UTIL_X2_538: u32 = 1076;
pub const Z_UTIL_X2_539: u32 = 1078;
pub const Z_UTIL_X2_540: u32 = 1080;
pub const Z_UTIL_X2_541: u32 = 1082;
pub const Z_UTIL_X2_542: u32 = 1084;
pub const Z_UTIL_X2_543: u32 = 1086;
pub const Z_UTIL_X2_544: u32 = 1088;
pub const Z_UTIL_X2_545: u32 = 1090;
pub const Z_UTIL_X2_546: u32 = 1092;
pub const Z_UTIL_X2_547: u32 = 1094;
pub const Z_UTIL_X2_548: u32 = 1096;
pub const Z_UTIL_X2_549: u32 = 1098;
pub const Z_UTIL_X2_550: u32 = 1100;
pub const Z_UTIL_X2_551: u32 = 1102;
pub const Z_UTIL_X2_552: u32 = 1104;
pub const Z_UTIL_X2_553: u32 = 1106;
pub const Z_UTIL_X2_554: u32 = 1108;
pub const Z_UTIL_X2_555: u32 = 1110;
pub const Z_UTIL_X2_556: u32 = 1112;
pub const Z_UTIL_X2_557: u32 = 1114;
pub const Z_UTIL_X2_558: u32 = 1116;
pub const Z_UTIL_X2_559: u32 = 1118;
pub const Z_UTIL_X2_560: u32 = 1120;
pub const Z_UTIL_X2_561: u32 = 1122;
pub const Z_UTIL_X2_562: u32 = 1124;
pub const Z_UTIL_X2_563: u32 = 1126;
pub const Z_UTIL_X2_564: u32 = 1128;
pub const Z_UTIL_X2_565: u32 = 1130;
pub const Z_UTIL_X2_566: u32 = 1132;
pub const Z_UTIL_X2_567: u32 = 1134;
pub const Z_UTIL_X2_568: u32 = 1136;
pub const Z_UTIL_X2_569: u32 = 1138;
pub const Z_UTIL_X2_570: u32 = 1140;
pub const Z_UTIL_X2_571: u32 = 1142;
pub const Z_UTIL_X2_572: u32 = 1144;
pub const Z_UTIL_X2_573: u32 = 1146;
pub const Z_UTIL_X2_574: u32 = 1148;
pub const Z_UTIL_X2_575: u32 = 1150;
pub const Z_UTIL_X2_576: u32 = 1152;
pub const Z_UTIL_X2_577: u32 = 1154;
pub const Z_UTIL_X2_578: u32 = 1156;
pub const Z_UTIL_X2_579: u32 = 1158;
pub const Z_UTIL_X2_580: u32 = 1160;
pub const Z_UTIL_X2_581: u32 = 1162;
pub const Z_UTIL_X2_582: u32 = 1164;
pub const Z_UTIL_X2_583: u32 = 1166;
pub const Z_UTIL_X2_584: u32 = 1168;
pub const Z_UTIL_X2_585: u32 = 1170;
pub const Z_UTIL_X2_586: u32 = 1172;
pub const Z_UTIL_X2_587: u32 = 1174;
pub const Z_UTIL_X2_588: u32 = 1176;
pub const Z_UTIL_X2_589: u32 = 1178;
pub const Z_UTIL_X2_590: u32 = 1180;
pub const Z_UTIL_X2_591: u32 = 1182;
pub const Z_UTIL_X2_592: u32 = 1184;
pub const Z_UTIL_X2_593: u32 = 1186;
pub const Z_UTIL_X2_594: u32 = 1188;
pub const Z_UTIL_X2_595: u32 = 1190;
pub const Z_UTIL_X2_596: u32 = 1192;
pub const Z_UTIL_X2_597: u32 = 1194;
pub const Z_UTIL_X2_598: u32 = 1196;
pub const Z_UTIL_X2_599: u32 = 1198;
pub const Z_UTIL_X2_600: u32 = 1200;
pub const Z_UTIL_X2_601: u32 = 1202;
pub const Z_UTIL_X2_602: u32 = 1204;
pub const Z_UTIL_X2_603: u32 = 1206;
pub const Z_UTIL_X2_604: u32 = 1208;
pub const Z_UTIL_X2_605: u32 = 1210;
pub const Z_UTIL_X2_606: u32 = 1212;
pub const Z_UTIL_X2_607: u32 = 1214;
pub const Z_UTIL_X2_608: u32 = 1216;
pub const Z_UTIL_X2_609: u32 = 1218;
pub const Z_UTIL_X2_610: u32 = 1220;
pub const Z_UTIL_X2_611: u32 = 1222;
pub const Z_UTIL_X2_612: u32 = 1224;
pub const Z_UTIL_X2_613: u32 = 1226;
pub const Z_UTIL_X2_614: u32 = 1228;
pub const Z_UTIL_X2_615: u32 = 1230;
pub const Z_UTIL_X2_616: u32 = 1232;
pub const Z_UTIL_X2_617: u32 = 1234;
pub const Z_UTIL_X2_618: u32 = 1236;
pub const Z_UTIL_X2_619: u32 = 1238;
pub const Z_UTIL_X2_620: u32 = 1240;
pub const Z_UTIL_X2_621: u32 = 1242;
pub const Z_UTIL_X2_622: u32 = 1244;
pub const Z_UTIL_X2_623: u32 = 1246;
pub const Z_UTIL_X2_624: u32 = 1248;
pub const Z_UTIL_X2_625: u32 = 1250;
pub const Z_UTIL_X2_626: u32 = 1252;
pub const Z_UTIL_X2_627: u32 = 1254;
pub const Z_UTIL_X2_628: u32 = 1256;
pub const Z_UTIL_X2_629: u32 = 1258;
pub const Z_UTIL_X2_630: u32 = 1260;
pub const Z_UTIL_X2_631: u32 = 1262;
pub const Z_UTIL_X2_632: u32 = 1264;
pub const Z_UTIL_X2_633: u32 = 1266;
pub const Z_UTIL_X2_634: u32 = 1268;
pub const Z_UTIL_X2_635: u32 = 1270;
pub const Z_UTIL_X2_636: u32 = 1272;
pub const Z_UTIL_X2_637: u32 = 1274;
pub const Z_UTIL_X2_638: u32 = 1276;
pub const Z_UTIL_X2_639: u32 = 1278;
pub const Z_UTIL_X2_640: u32 = 1280;
pub const Z_UTIL_X2_641: u32 = 1282;
pub const Z_UTIL_X2_642: u32 = 1284;
pub const Z_UTIL_X2_643: u32 = 1286;
pub const Z_UTIL_X2_644: u32 = 1288;
pub const Z_UTIL_X2_645: u32 = 1290;
pub const Z_UTIL_X2_646: u32 = 1292;
pub const Z_UTIL_X2_647: u32 = 1294;
pub const Z_UTIL_X2_648: u32 = 1296;
pub const Z_UTIL_X2_649: u32 = 1298;
pub const Z_UTIL_X2_650: u32 = 1300;
pub const Z_UTIL_X2_651: u32 = 1302;
pub const Z_UTIL_X2_652: u32 = 1304;
pub const Z_UTIL_X2_653: u32 = 1306;
pub const Z_UTIL_X2_654: u32 = 1308;
pub const Z_UTIL_X2_655: u32 = 1310;
pub const Z_UTIL_X2_656: u32 = 1312;
pub const Z_UTIL_X2_657: u32 = 1314;
pub const Z_UTIL_X2_658: u32 = 1316;
pub const Z_UTIL_X2_659: u32 = 1318;
pub const Z_UTIL_X2_660: u32 = 1320;
pub const Z_UTIL_X2_661: u32 = 1322;
pub const Z_UTIL_X2_662: u32 = 1324;
pub const Z_UTIL_X2_663: u32 = 1326;
pub const Z_UTIL_X2_664: u32 = 1328;
pub const Z_UTIL_X2_665: u32 = 1330;
pub const Z_UTIL_X2_666: u32 = 1332;
pub const Z_UTIL_X2_667: u32 = 1334;
pub const Z_UTIL_X2_668: u32 = 1336;
pub const Z_UTIL_X2_669: u32 = 1338;
pub const Z_UTIL_X2_670: u32 = 1340;
pub const Z_UTIL_X2_671: u32 = 1342;
pub const Z_UTIL_X2_672: u32 = 1344;
pub const Z_UTIL_X2_673: u32 = 1346;
pub const Z_UTIL_X2_674: u32 = 1348;
pub const Z_UTIL_X2_675: u32 = 1350;
pub const Z_UTIL_X2_676: u32 = 1352;
pub const Z_UTIL_X2_677: u32 = 1354;
pub const Z_UTIL_X2_678: u32 = 1356;
pub const Z_UTIL_X2_679: u32 = 1358;
pub const Z_UTIL_X2_680: u32 = 1360;
pub const Z_UTIL_X2_681: u32 = 1362;
pub const Z_UTIL_X2_682: u32 = 1364;
pub const Z_UTIL_X2_683: u32 = 1366;
pub const Z_UTIL_X2_684: u32 = 1368;
pub const Z_UTIL_X2_685: u32 = 1370;
pub const Z_UTIL_X2_686: u32 = 1372;
pub const Z_UTIL_X2_687: u32 = 1374;
pub const Z_UTIL_X2_688: u32 = 1376;
pub const Z_UTIL_X2_689: u32 = 1378;
pub const Z_UTIL_X2_690: u32 = 1380;
pub const Z_UTIL_X2_691: u32 = 1382;
pub const Z_UTIL_X2_692: u32 = 1384;
pub const Z_UTIL_X2_693: u32 = 1386;
pub const Z_UTIL_X2_694: u32 = 1388;
pub const Z_UTIL_X2_695: u32 = 1390;
pub const Z_UTIL_X2_696: u32 = 1392;
pub const Z_UTIL_X2_697: u32 = 1394;
pub const Z_UTIL_X2_698: u32 = 1396;
pub const Z_UTIL_X2_699: u32 = 1398;
pub const Z_UTIL_X2_700: u32 = 1400;
pub const Z_UTIL_X2_701: u32 = 1402;
pub const Z_UTIL_X2_702: u32 = 1404;
pub const Z_UTIL_X2_703: u32 = 1406;
pub const Z_UTIL_X2_704: u32 = 1408;
pub const Z_UTIL_X2_705: u32 = 1410;
pub const Z_UTIL_X2_706: u32 = 1412;
pub const Z_UTIL_X2_707: u32 = 1414;
pub const Z_UTIL_X2_708: u32 = 1416;
pub const Z_UTIL_X2_709: u32 = 1418;
pub const Z_UTIL_X2_710: u32 = 1420;
pub const Z_UTIL_X2_711: u32 = 1422;
pub const Z_UTIL_X2_712: u32 = 1424;
pub const Z_UTIL_X2_713: u32 = 1426;
pub const Z_UTIL_X2_714: u32 = 1428;
pub const Z_UTIL_X2_715: u32 = 1430;
pub const Z_UTIL_X2_716: u32 = 1432;
pub const Z_UTIL_X2_717: u32 = 1434;
pub const Z_UTIL_X2_718: u32 = 1436;
pub const Z_UTIL_X2_719: u32 = 1438;
pub const Z_UTIL_X2_720: u32 = 1440;
pub const Z_UTIL_X2_721: u32 = 1442;
pub const Z_UTIL_X2_722: u32 = 1444;
pub const Z_UTIL_X2_723: u32 = 1446;
pub const Z_UTIL_X2_724: u32 = 1448;
pub const Z_UTIL_X2_725: u32 = 1450;
pub const Z_UTIL_X2_726: u32 = 1452;
pub const Z_UTIL_X2_727: u32 = 1454;
pub const Z_UTIL_X2_728: u32 = 1456;
pub const Z_UTIL_X2_729: u32 = 1458;
pub const Z_UTIL_X2_730: u32 = 1460;
pub const Z_UTIL_X2_731: u32 = 1462;
pub const Z_UTIL_X2_732: u32 = 1464;
pub const Z_UTIL_X2_733: u32 = 1466;
pub const Z_UTIL_X2_734: u32 = 1468;
pub const Z_UTIL_X2_735: u32 = 1470;
pub const Z_UTIL_X2_736: u32 = 1472;
pub const Z_UTIL_X2_737: u32 = 1474;
pub const Z_UTIL_X2_738: u32 = 1476;
pub const Z_UTIL_X2_739: u32 = 1478;
pub const Z_UTIL_X2_740: u32 = 1480;
pub const Z_UTIL_X2_741: u32 = 1482;
pub const Z_UTIL_X2_742: u32 = 1484;
pub const Z_UTIL_X2_743: u32 = 1486;
pub const Z_UTIL_X2_744: u32 = 1488;
pub const Z_UTIL_X2_745: u32 = 1490;
pub const Z_UTIL_X2_746: u32 = 1492;
pub const Z_UTIL_X2_747: u32 = 1494;
pub const Z_UTIL_X2_748: u32 = 1496;
pub const Z_UTIL_X2_749: u32 = 1498;
pub const Z_UTIL_X2_750: u32 = 1500;
pub const Z_UTIL_X2_751: u32 = 1502;
pub const Z_UTIL_X2_752: u32 = 1504;
pub const Z_UTIL_X2_753: u32 = 1506;
pub const Z_UTIL_X2_754: u32 = 1508;
pub const Z_UTIL_X2_755: u32 = 1510;
pub const Z_UTIL_X2_756: u32 = 1512;
pub const Z_UTIL_X2_757: u32 = 1514;
pub const Z_UTIL_X2_758: u32 = 1516;
pub const Z_UTIL_X2_759: u32 = 1518;
pub const Z_UTIL_X2_760: u32 = 1520;
pub const Z_UTIL_X2_761: u32 = 1522;
pub const Z_UTIL_X2_762: u32 = 1524;
pub const Z_UTIL_X2_763: u32 = 1526;
pub const Z_UTIL_X2_764: u32 = 1528;
pub const Z_UTIL_X2_765: u32 = 1530;
pub const Z_UTIL_X2_766: u32 = 1532;
pub const Z_UTIL_X2_767: u32 = 1534;
pub const Z_UTIL_X2_768: u32 = 1536;
pub const Z_UTIL_X2_769: u32 = 1538;
pub const Z_UTIL_X2_770: u32 = 1540;
pub const Z_UTIL_X2_771: u32 = 1542;
pub const Z_UTIL_X2_772: u32 = 1544;
pub const Z_UTIL_X2_773: u32 = 1546;
pub const Z_UTIL_X2_774: u32 = 1548;
pub const Z_UTIL_X2_775: u32 = 1550;
pub const Z_UTIL_X2_776: u32 = 1552;
pub const Z_UTIL_X2_777: u32 = 1554;
pub const Z_UTIL_X2_778: u32 = 1556;
pub const Z_UTIL_X2_779: u32 = 1558;
pub const Z_UTIL_X2_780: u32 = 1560;
pub const Z_UTIL_X2_781: u32 = 1562;
pub const Z_UTIL_X2_782: u32 = 1564;
pub const Z_UTIL_X2_783: u32 = 1566;
pub const Z_UTIL_X2_784: u32 = 1568;
pub const Z_UTIL_X2_785: u32 = 1570;
pub const Z_UTIL_X2_786: u32 = 1572;
pub const Z_UTIL_X2_787: u32 = 1574;
pub const Z_UTIL_X2_788: u32 = 1576;
pub const Z_UTIL_X2_789: u32 = 1578;
pub const Z_UTIL_X2_790: u32 = 1580;
pub const Z_UTIL_X2_791: u32 = 1582;
pub const Z_UTIL_X2_792: u32 = 1584;
pub const Z_UTIL_X2_793: u32 = 1586;
pub const Z_UTIL_X2_794: u32 = 1588;
pub const Z_UTIL_X2_795: u32 = 1590;
pub const Z_UTIL_X2_796: u32 = 1592;
pub const Z_UTIL_X2_797: u32 = 1594;
pub const Z_UTIL_X2_798: u32 = 1596;
pub const Z_UTIL_X2_799: u32 = 1598;
pub const Z_UTIL_X2_800: u32 = 1600;
pub const Z_UTIL_X2_801: u32 = 1602;
pub const Z_UTIL_X2_802: u32 = 1604;
pub const Z_UTIL_X2_803: u32 = 1606;
pub const Z_UTIL_X2_804: u32 = 1608;
pub const Z_UTIL_X2_805: u32 = 1610;
pub const Z_UTIL_X2_806: u32 = 1612;
pub const Z_UTIL_X2_807: u32 = 1614;
pub const Z_UTIL_X2_808: u32 = 1616;
pub const Z_UTIL_X2_809: u32 = 1618;
pub const Z_UTIL_X2_810: u32 = 1620;
pub const Z_UTIL_X2_811: u32 = 1622;
pub const Z_UTIL_X2_812: u32 = 1624;
pub const Z_UTIL_X2_813: u32 = 1626;
pub const Z_UTIL_X2_814: u32 = 1628;
pub const Z_UTIL_X2_815: u32 = 1630;
pub const Z_UTIL_X2_816: u32 = 1632;
pub const Z_UTIL_X2_817: u32 = 1634;
pub const Z_UTIL_X2_818: u32 = 1636;
pub const Z_UTIL_X2_819: u32 = 1638;
pub const Z_UTIL_X2_820: u32 = 1640;
pub const Z_UTIL_X2_821: u32 = 1642;
pub const Z_UTIL_X2_822: u32 = 1644;
pub const Z_UTIL_X2_823: u32 = 1646;
pub const Z_UTIL_X2_824: u32 = 1648;
pub const Z_UTIL_X2_825: u32 = 1650;
pub const Z_UTIL_X2_826: u32 = 1652;
pub const Z_UTIL_X2_827: u32 = 1654;
pub const Z_UTIL_X2_828: u32 = 1656;
pub const Z_UTIL_X2_829: u32 = 1658;
pub const Z_UTIL_X2_830: u32 = 1660;
pub const Z_UTIL_X2_831: u32 = 1662;
pub const Z_UTIL_X2_832: u32 = 1664;
pub const Z_UTIL_X2_833: u32 = 1666;
pub const Z_UTIL_X2_834: u32 = 1668;
pub const Z_UTIL_X2_835: u32 = 1670;
pub const Z_UTIL_X2_836: u32 = 1672;
pub const Z_UTIL_X2_837: u32 = 1674;
pub const Z_UTIL_X2_838: u32 = 1676;
pub const Z_UTIL_X2_839: u32 = 1678;
pub const Z_UTIL_X2_840: u32 = 1680;
pub const Z_UTIL_X2_841: u32 = 1682;
pub const Z_UTIL_X2_842: u32 = 1684;
pub const Z_UTIL_X2_843: u32 = 1686;
pub const Z_UTIL_X2_844: u32 = 1688;
pub const Z_UTIL_X2_845: u32 = 1690;
pub const Z_UTIL_X2_846: u32 = 1692;
pub const Z_UTIL_X2_847: u32 = 1694;
pub const Z_UTIL_X2_848: u32 = 1696;
pub const Z_UTIL_X2_849: u32 = 1698;
pub const Z_UTIL_X2_850: u32 = 1700;
pub const Z_UTIL_X2_851: u32 = 1702;
pub const Z_UTIL_X2_852: u32 = 1704;
pub const Z_UTIL_X2_853: u32 = 1706;
pub const Z_UTIL_X2_854: u32 = 1708;
pub const Z_UTIL_X2_855: u32 = 1710;
pub const Z_UTIL_X2_856: u32 = 1712;
pub const Z_UTIL_X2_857: u32 = 1714;
pub const Z_UTIL_X2_858: u32 = 1716;
pub const Z_UTIL_X2_859: u32 = 1718;
pub const Z_UTIL_X2_860: u32 = 1720;
pub const Z_UTIL_X2_861: u32 = 1722;
pub const Z_UTIL_X2_862: u32 = 1724;
pub const Z_UTIL_X2_863: u32 = 1726;
pub const Z_UTIL_X2_864: u32 = 1728;
pub const Z_UTIL_X2_865: u32 = 1730;
pub const Z_UTIL_X2_866: u32 = 1732;
pub const Z_UTIL_X2_867: u32 = 1734;
pub const Z_UTIL_X2_868: u32 = 1736;
pub const Z_UTIL_X2_869: u32 = 1738;
pub const Z_UTIL_X2_870: u32 = 1740;
pub const Z_UTIL_X2_871: u32 = 1742;
pub const Z_UTIL_X2_872: u32 = 1744;
pub const Z_UTIL_X2_873: u32 = 1746;
pub const Z_UTIL_X2_874: u32 = 1748;
pub const Z_UTIL_X2_875: u32 = 1750;
pub const Z_UTIL_X2_876: u32 = 1752;
pub const Z_UTIL_X2_877: u32 = 1754;
pub const Z_UTIL_X2_878: u32 = 1756;
pub const Z_UTIL_X2_879: u32 = 1758;
pub const Z_UTIL_X2_880: u32 = 1760;
pub const Z_UTIL_X2_881: u32 = 1762;
pub const Z_UTIL_X2_882: u32 = 1764;
pub const Z_UTIL_X2_883: u32 = 1766;
pub const Z_UTIL_X2_884: u32 = 1768;
pub const Z_UTIL_X2_885: u32 = 1770;
pub const Z_UTIL_X2_886: u32 = 1772;
pub const Z_UTIL_X2_887: u32 = 1774;
pub const Z_UTIL_X2_888: u32 = 1776;
pub const Z_UTIL_X2_889: u32 = 1778;
pub const Z_UTIL_X2_890: u32 = 1780;
pub const Z_UTIL_X2_891: u32 = 1782;
pub const Z_UTIL_X2_892: u32 = 1784;
pub const Z_UTIL_X2_893: u32 = 1786;
pub const Z_UTIL_X2_894: u32 = 1788;
pub const Z_UTIL_X2_895: u32 = 1790;
pub const Z_UTIL_X2_896: u32 = 1792;
pub const Z_UTIL_X2_897: u32 = 1794;
pub const Z_UTIL_X2_898: u32 = 1796;
pub const Z_UTIL_X2_899: u32 = 1798;
pub const Z_UTIL_X2_900: u32 = 1800;
pub const Z_UTIL_X2_901: u32 = 1802;
pub const Z_UTIL_X2_902: u32 = 1804;
pub const Z_UTIL_X2_903: u32 = 1806;
pub const Z_UTIL_X2_904: u32 = 1808;
pub const Z_UTIL_X2_905: u32 = 1810;
pub const Z_UTIL_X2_906: u32 = 1812;
pub const Z_UTIL_X2_907: u32 = 1814;
pub const Z_UTIL_X2_908: u32 = 1816;
pub const Z_UTIL_X2_909: u32 = 1818;
pub const Z_UTIL_X2_910: u32 = 1820;
pub const Z_UTIL_X2_911: u32 = 1822;
pub const Z_UTIL_X2_912: u32 = 1824;
pub const Z_UTIL_X2_913: u32 = 1826;
pub const Z_UTIL_X2_914: u32 = 1828;
pub const Z_UTIL_X2_915: u32 = 1830;
pub const Z_UTIL_X2_916: u32 = 1832;
pub const Z_UTIL_X2_917: u32 = 1834;
pub const Z_UTIL_X2_918: u32 = 1836;
pub const Z_UTIL_X2_919: u32 = 1838;
pub const Z_UTIL_X2_920: u32 = 1840;
pub const Z_UTIL_X2_921: u32 = 1842;
pub const Z_UTIL_X2_922: u32 = 1844;
pub const Z_UTIL_X2_923: u32 = 1846;
pub const Z_UTIL_X2_924: u32 = 1848;
pub const Z_UTIL_X2_925: u32 = 1850;
pub const Z_UTIL_X2_926: u32 = 1852;
pub const Z_UTIL_X2_927: u32 = 1854;
pub const Z_UTIL_X2_928: u32 = 1856;
pub const Z_UTIL_X2_929: u32 = 1858;
pub const Z_UTIL_X2_930: u32 = 1860;
pub const Z_UTIL_X2_931: u32 = 1862;
pub const Z_UTIL_X2_932: u32 = 1864;
pub const Z_UTIL_X2_933: u32 = 1866;
pub const Z_UTIL_X2_934: u32 = 1868;
pub const Z_UTIL_X2_935: u32 = 1870;
pub const Z_UTIL_X2_936: u32 = 1872;
pub const Z_UTIL_X2_937: u32 = 1874;
pub const Z_UTIL_X2_938: u32 = 1876;
pub const Z_UTIL_X2_939: u32 = 1878;
pub const Z_UTIL_X2_940: u32 = 1880;
pub const Z_UTIL_X2_941: u32 = 1882;
pub const Z_UTIL_X2_942: u32 = 1884;
pub const Z_UTIL_X2_943: u32 = 1886;
pub const Z_UTIL_X2_944: u32 = 1888;
pub const Z_UTIL_X2_945: u32 = 1890;
pub const Z_UTIL_X2_946: u32 = 1892;
pub const Z_UTIL_X2_947: u32 = 1894;
pub const Z_UTIL_X2_948: u32 = 1896;
pub const Z_UTIL_X2_949: u32 = 1898;
pub const Z_UTIL_X2_950: u32 = 1900;
pub const Z_UTIL_X2_951: u32 = 1902;
pub const Z_UTIL_X2_952: u32 = 1904;
pub const Z_UTIL_X2_953: u32 = 1906;
pub const Z_UTIL_X2_954: u32 = 1908;
pub const Z_UTIL_X2_955: u32 = 1910;
pub const Z_UTIL_X2_956: u32 = 1912;
pub const Z_UTIL_X2_957: u32 = 1914;
pub const Z_UTIL_X2_958: u32 = 1916;
pub const Z_UTIL_X2_959: u32 = 1918;
pub const Z_UTIL_X2_960: u32 = 1920;
pub const Z_UTIL_X2_961: u32 = 1922;
pub const Z_UTIL_X2_962: u32 = 1924;
pub const Z_UTIL_X2_963: u32 = 1926;
pub const Z_UTIL_X2_964: u32 = 1928;
pub const Z_UTIL_X2_965: u32 = 1930;
pub const Z_UTIL_X2_966: u32 = 1932;
pub const Z_UTIL_X2_967: u32 = 1934;
pub const Z_UTIL_X2_968: u32 = 1936;
pub const Z_UTIL_X2_969: u32 = 1938;
pub const Z_UTIL_X2_970: u32 = 1940;
pub const Z_UTIL_X2_971: u32 = 1942;
pub const Z_UTIL_X2_972: u32 = 1944;
pub const Z_UTIL_X2_973: u32 = 1946;
pub const Z_UTIL_X2_974: u32 = 1948;
pub const Z_UTIL_X2_975: u32 = 1950;
pub const Z_UTIL_X2_976: u32 = 1952;
pub const Z_UTIL_X2_977: u32 = 1954;
pub const Z_UTIL_X2_978: u32 = 1956;
pub const Z_UTIL_X2_979: u32 = 1958;
pub const Z_UTIL_X2_980: u32 = 1960;
pub const Z_UTIL_X2_981: u32 = 1962;
pub const Z_UTIL_X2_982: u32 = 1964;
pub const Z_UTIL_X2_983: u32 = 1966;
pub const Z_UTIL_X2_984: u32 = 1968;
pub const Z_UTIL_X2_985: u32 = 1970;
pub const Z_UTIL_X2_986: u32 = 1972;
pub const Z_UTIL_X2_987: u32 = 1974;
pub const Z_UTIL_X2_988: u32 = 1976;
pub const Z_UTIL_X2_989: u32 = 1978;
pub const Z_UTIL_X2_990: u32 = 1980;
pub const Z_UTIL_X2_991: u32 = 1982;
pub const Z_UTIL_X2_992: u32 = 1984;
pub const Z_UTIL_X2_993: u32 = 1986;
pub const Z_UTIL_X2_994: u32 = 1988;
pub const Z_UTIL_X2_995: u32 = 1990;
pub const Z_UTIL_X2_996: u32 = 1992;
pub const Z_UTIL_X2_997: u32 = 1994;
pub const Z_UTIL_X2_998: u32 = 1996;
pub const Z_UTIL_X2_999: u32 = 1998;
pub const Z_UTIL_X2_1000: u32 = 2000;
pub const Z_UTIL_X2_1001: u32 = 2002;
pub const Z_UTIL_X2_1002: u32 = 2004;
pub const Z_UTIL_X2_1003: u32 = 2006;
pub const Z_UTIL_X2_1004: u32 = 2008;
pub const Z_UTIL_X2_1005: u32 = 2010;
pub const Z_UTIL_X2_1006: u32 = 2012;
pub const Z_UTIL_X2_1007: u32 = 2014;
pub const Z_UTIL_X2_1008: u32 = 2016;
pub const Z_UTIL_X2_1009: u32 = 2018;
pub const Z_UTIL_X2_1010: u32 = 2020;
pub const Z_UTIL_X2_1011: u32 = 2022;
pub const Z_UTIL_X2_1012: u32 = 2024;
pub const Z_UTIL_X2_1013: u32 = 2026;
pub const Z_UTIL_X2_1014: u32 = 2028;
pub const Z_UTIL_X2_1015: u32 = 2030;
pub const Z_UTIL_X2_1016: u32 = 2032;
pub const Z_UTIL_X2_1017: u32 = 2034;
pub const Z_UTIL_X2_1018: u32 = 2036;
pub const Z_UTIL_X2_1019: u32 = 2038;
pub const Z_UTIL_X2_1020: u32 = 2040;
pub const Z_UTIL_X2_1021: u32 = 2042;
pub const Z_UTIL_X2_1022: u32 = 2044;
pub const Z_UTIL_X2_1023: u32 = 2046;
pub const Z_UTIL_X2_1024: u32 = 2048;
pub const Z_UTIL_X2_1025: u32 = 2050;
pub const Z_UTIL_X2_1026: u32 = 2052;
pub const Z_UTIL_X2_1027: u32 = 2054;
pub const Z_UTIL_X2_1028: u32 = 2056;
pub const Z_UTIL_X2_1029: u32 = 2058;
pub const Z_UTIL_X2_1030: u32 = 2060;
pub const Z_UTIL_X2_1031: u32 = 2062;
pub const Z_UTIL_X2_1032: u32 = 2064;
pub const Z_UTIL_X2_1033: u32 = 2066;
pub const Z_UTIL_X2_1034: u32 = 2068;
pub const Z_UTIL_X2_1035: u32 = 2070;
pub const Z_UTIL_X2_1036: u32 = 2072;
pub const Z_UTIL_X2_1037: u32 = 2074;
pub const Z_UTIL_X2_1038: u32 = 2076;
pub const Z_UTIL_X2_1039: u32 = 2078;
pub const Z_UTIL_X2_1040: u32 = 2080;
pub const Z_UTIL_X2_1041: u32 = 2082;
pub const Z_UTIL_X2_1042: u32 = 2084;
pub const Z_UTIL_X2_1043: u32 = 2086;
pub const Z_UTIL_X2_1044: u32 = 2088;
pub const Z_UTIL_X2_1045: u32 = 2090;
pub const Z_UTIL_X2_1046: u32 = 2092;
pub const Z_UTIL_X2_1047: u32 = 2094;
pub const Z_UTIL_X2_1048: u32 = 2096;
pub const Z_UTIL_X2_1049: u32 = 2098;
pub const Z_UTIL_X2_1050: u32 = 2100;
pub const Z_UTIL_X2_1051: u32 = 2102;
pub const Z_UTIL_X2_1052: u32 = 2104;
pub const Z_UTIL_X2_1053: u32 = 2106;
pub const Z_UTIL_X2_1054: u32 = 2108;
pub const Z_UTIL_X2_1055: u32 = 2110;
pub const Z_UTIL_X2_1056: u32 = 2112;
pub const Z_UTIL_X2_1057: u32 = 2114;
pub const Z_UTIL_X2_1058: u32 = 2116;
pub const Z_UTIL_X2_1059: u32 = 2118;
pub const Z_UTIL_X2_1060: u32 = 2120;
pub const Z_UTIL_X2_1061: u32 = 2122;
pub const Z_UTIL_X2_1062: u32 = 2124;
pub const Z_UTIL_X2_1063: u32 = 2126;
pub const Z_UTIL_X2_1064: u32 = 2128;
pub const Z_UTIL_X2_1065: u32 = 2130;
pub const Z_UTIL_X2_1066: u32 = 2132;
pub const Z_UTIL_X2_1067: u32 = 2134;
pub const Z_UTIL_X2_1068: u32 = 2136;
pub const Z_UTIL_X2_1069: u32 = 2138;
pub const Z_UTIL_X2_1070: u32 = 2140;
pub const Z_UTIL_X2_1071: u32 = 2142;
pub const Z_UTIL_X2_1072: u32 = 2144;
pub const Z_UTIL_X2_1073: u32 = 2146;
pub const Z_UTIL_X2_1074: u32 = 2148;
pub const Z_UTIL_X2_1075: u32 = 2150;
pub const Z_UTIL_X2_1076: u32 = 2152;
pub const Z_UTIL_X2_1077: u32 = 2154;
pub const Z_UTIL_X2_1078: u32 = 2156;
pub const Z_UTIL_X2_1079: u32 = 2158;
pub const Z_UTIL_X2_1080: u32 = 2160;
pub const Z_UTIL_X2_1081: u32 = 2162;
pub const Z_UTIL_X2_1082: u32 = 2164;
pub const Z_UTIL_X2_1083: u32 = 2166;
pub const Z_UTIL_X2_1084: u32 = 2168;
pub const Z_UTIL_X2_1085: u32 = 2170;
pub const Z_UTIL_X2_1086: u32 = 2172;
pub const Z_UTIL_X2_1087: u32 = 2174;
pub const Z_UTIL_X2_1088: u32 = 2176;
pub const Z_UTIL_X2_1089: u32 = 2178;
pub const Z_UTIL_X2_1090: u32 = 2180;
pub const Z_UTIL_X2_1091: u32 = 2182;
pub const Z_UTIL_X2_1092: u32 = 2184;
pub const Z_UTIL_X2_1093: u32 = 2186;
pub const Z_UTIL_X2_1094: u32 = 2188;
pub const Z_UTIL_X2_1095: u32 = 2190;
pub const Z_UTIL_X2_1096: u32 = 2192;
pub const Z_UTIL_X2_1097: u32 = 2194;
pub const Z_UTIL_X2_1098: u32 = 2196;
pub const Z_UTIL_X2_1099: u32 = 2198;
pub const Z_UTIL_X2_1100: u32 = 2200;
pub const Z_UTIL_X2_1101: u32 = 2202;
pub const Z_UTIL_X2_1102: u32 = 2204;
pub const Z_UTIL_X2_1103: u32 = 2206;
pub const Z_UTIL_X2_1104: u32 = 2208;
pub const Z_UTIL_X2_1105: u32 = 2210;
pub const Z_UTIL_X2_1106: u32 = 2212;
pub const Z_UTIL_X2_1107: u32 = 2214;
pub const Z_UTIL_X2_1108: u32 = 2216;
pub const Z_UTIL_X2_1109: u32 = 2218;
pub const Z_UTIL_X2_1110: u32 = 2220;
pub const Z_UTIL_X2_1111: u32 = 2222;
pub const Z_UTIL_X2_1112: u32 = 2224;
pub const Z_UTIL_X2_1113: u32 = 2226;
pub const Z_UTIL_X2_1114: u32 = 2228;
pub const Z_UTIL_X2_1115: u32 = 2230;
pub const Z_UTIL_X2_1116: u32 = 2232;
pub const Z_UTIL_X2_1117: u32 = 2234;
pub const Z_UTIL_X2_1118: u32 = 2236;
pub const Z_UTIL_X2_1119: u32 = 2238;
pub const Z_UTIL_X2_1120: u32 = 2240;
pub const Z_UTIL_X2_1121: u32 = 2242;
pub const Z_UTIL_X2_1122: u32 = 2244;
pub const Z_UTIL_X2_1123: u32 = 2246;
pub const Z_UTIL_X2_1124: u32 = 2248;
pub const Z_UTIL_X2_1125: u32 = 2250;
pub const Z_UTIL_X2_1126: u32 = 2252;
pub const Z_UTIL_X2_1127: u32 = 2254;
pub const Z_UTIL_X2_1128: u32 = 2256;
pub const Z_UTIL_X2_1129: u32 = 2258;
pub const Z_UTIL_X2_1130: u32 = 2260;
pub const Z_UTIL_X2_1131: u32 = 2262;
pub const Z_UTIL_X2_1132: u32 = 2264;
pub const Z_UTIL_X2_1133: u32 = 2266;
pub const Z_UTIL_X2_1134: u32 = 2268;
pub const Z_UTIL_X2_1135: u32 = 2270;
pub const Z_UTIL_X2_1136: u32 = 2272;
pub const Z_UTIL_X2_1137: u32 = 2274;
pub const Z_UTIL_X2_1138: u32 = 2276;
pub const Z_UTIL_X2_1139: u32 = 2278;
pub const Z_UTIL_X2_1140: u32 = 2280;
pub const Z_UTIL_X2_1141: u32 = 2282;
pub const Z_UTIL_X2_1142: u32 = 2284;
pub const Z_UTIL_X2_1143: u32 = 2286;
pub const Z_UTIL_X2_1144: u32 = 2288;
pub const Z_UTIL_X2_1145: u32 = 2290;
pub const Z_UTIL_X2_1146: u32 = 2292;
pub const Z_UTIL_X2_1147: u32 = 2294;
pub const Z_UTIL_X2_1148: u32 = 2296;
pub const Z_UTIL_X2_1149: u32 = 2298;
pub const Z_UTIL_X2_1150: u32 = 2300;
pub const Z_UTIL_X2_1151: u32 = 2302;
pub const Z_UTIL_X2_1152: u32 = 2304;
pub const Z_UTIL_X2_1153: u32 = 2306;
pub const Z_UTIL_X2_1154: u32 = 2308;
pub const Z_UTIL_X2_1155: u32 = 2310;
pub const Z_UTIL_X2_1156: u32 = 2312;
pub const Z_UTIL_X2_1157: u32 = 2314;
pub const Z_UTIL_X2_1158: u32 = 2316;
pub const Z_UTIL_X2_1159: u32 = 2318;
pub const Z_UTIL_X2_1160: u32 = 2320;
pub const Z_UTIL_X2_1161: u32 = 2322;
pub const Z_UTIL_X2_1162: u32 = 2324;
pub const Z_UTIL_X2_1163: u32 = 2326;
pub const Z_UTIL_X2_1164: u32 = 2328;
pub const Z_UTIL_X2_1165: u32 = 2330;
pub const Z_UTIL_X2_1166: u32 = 2332;
pub const Z_UTIL_X2_1167: u32 = 2334;
pub const Z_UTIL_X2_1168: u32 = 2336;
pub const Z_UTIL_X2_1169: u32 = 2338;
pub const Z_UTIL_X2_1170: u32 = 2340;
pub const Z_UTIL_X2_1171: u32 = 2342;
pub const Z_UTIL_X2_1172: u32 = 2344;
pub const Z_UTIL_X2_1173: u32 = 2346;
pub const Z_UTIL_X2_1174: u32 = 2348;
pub const Z_UTIL_X2_1175: u32 = 2350;
pub const Z_UTIL_X2_1176: u32 = 2352;
pub const Z_UTIL_X2_1177: u32 = 2354;
pub const Z_UTIL_X2_1178: u32 = 2356;
pub const Z_UTIL_X2_1179: u32 = 2358;
pub const Z_UTIL_X2_1180: u32 = 2360;
pub const Z_UTIL_X2_1181: u32 = 2362;
pub const Z_UTIL_X2_1182: u32 = 2364;
pub const Z_UTIL_X2_1183: u32 = 2366;
pub const Z_UTIL_X2_1184: u32 = 2368;
pub const Z_UTIL_X2_1185: u32 = 2370;
pub const Z_UTIL_X2_1186: u32 = 2372;
pub const Z_UTIL_X2_1187: u32 = 2374;
pub const Z_UTIL_X2_1188: u32 = 2376;
pub const Z_UTIL_X2_1189: u32 = 2378;
pub const Z_UTIL_X2_1190: u32 = 2380;
pub const Z_UTIL_X2_1191: u32 = 2382;
pub const Z_UTIL_X2_1192: u32 = 2384;
pub const Z_UTIL_X2_1193: u32 = 2386;
pub const Z_UTIL_X2_1194: u32 = 2388;
pub const Z_UTIL_X2_1195: u32 = 2390;
pub const Z_UTIL_X2_1196: u32 = 2392;
pub const Z_UTIL_X2_1197: u32 = 2394;
pub const Z_UTIL_X2_1198: u32 = 2396;
pub const Z_UTIL_X2_1199: u32 = 2398;
pub const Z_UTIL_X2_1200: u32 = 2400;
pub const Z_UTIL_X2_1201: u32 = 2402;
pub const Z_UTIL_X2_1202: u32 = 2404;
pub const Z_UTIL_X2_1203: u32 = 2406;
pub const Z_UTIL_X2_1204: u32 = 2408;
pub const Z_UTIL_X2_1205: u32 = 2410;
pub const Z_UTIL_X2_1206: u32 = 2412;
pub const Z_UTIL_X2_1207: u32 = 2414;
pub const Z_UTIL_X2_1208: u32 = 2416;
pub const Z_UTIL_X2_1209: u32 = 2418;
pub const Z_UTIL_X2_1210: u32 = 2420;
pub const Z_UTIL_X2_1211: u32 = 2422;
pub const Z_UTIL_X2_1212: u32 = 2424;
pub const Z_UTIL_X2_1213: u32 = 2426;
pub const Z_UTIL_X2_1214: u32 = 2428;
pub const Z_UTIL_X2_1215: u32 = 2430;
pub const Z_UTIL_X2_1216: u32 = 2432;
pub const Z_UTIL_X2_1217: u32 = 2434;
pub const Z_UTIL_X2_1218: u32 = 2436;
pub const Z_UTIL_X2_1219: u32 = 2438;
pub const Z_UTIL_X2_1220: u32 = 2440;
pub const Z_UTIL_X2_1221: u32 = 2442;
pub const Z_UTIL_X2_1222: u32 = 2444;
pub const Z_UTIL_X2_1223: u32 = 2446;
pub const Z_UTIL_X2_1224: u32 = 2448;
pub const Z_UTIL_X2_1225: u32 = 2450;
pub const Z_UTIL_X2_1226: u32 = 2452;
pub const Z_UTIL_X2_1227: u32 = 2454;
pub const Z_UTIL_X2_1228: u32 = 2456;
pub const Z_UTIL_X2_1229: u32 = 2458;
pub const Z_UTIL_X2_1230: u32 = 2460;
pub const Z_UTIL_X2_1231: u32 = 2462;
pub const Z_UTIL_X2_1232: u32 = 2464;
pub const Z_UTIL_X2_1233: u32 = 2466;
pub const Z_UTIL_X2_1234: u32 = 2468;
pub const Z_UTIL_X2_1235: u32 = 2470;
pub const Z_UTIL_X2_1236: u32 = 2472;
pub const Z_UTIL_X2_1237: u32 = 2474;
pub const Z_UTIL_X2_1238: u32 = 2476;
pub const Z_UTIL_X2_1239: u32 = 2478;
pub const Z_UTIL_X2_1240: u32 = 2480;
pub const Z_UTIL_X2_1241: u32 = 2482;
pub const Z_UTIL_X2_1242: u32 = 2484;
pub const Z_UTIL_X2_1243: u32 = 2486;
pub const Z_UTIL_X2_1244: u32 = 2488;
pub const Z_UTIL_X2_1245: u32 = 2490;
pub const Z_UTIL_X2_1246: u32 = 2492;
pub const Z_UTIL_X2_1247: u32 = 2494;
pub const Z_UTIL_X2_1248: u32 = 2496;
pub const Z_UTIL_X2_1249: u32 = 2498;
pub const Z_UTIL_X2_1250: u32 = 2500;
pub const Z_UTIL_X2_1251: u32 = 2502;
pub const Z_UTIL_X2_1252: u32 = 2504;
pub const Z_UTIL_X2_1253: u32 = 2506;
pub const Z_UTIL_X2_1254: u32 = 2508;
pub const Z_UTIL_X2_1255: u32 = 2510;
pub const Z_UTIL_X2_1256: u32 = 2512;
pub const Z_UTIL_X2_1257: u32 = 2514;
pub const Z_UTIL_X2_1258: u32 = 2516;
pub const Z_UTIL_X2_1259: u32 = 2518;
pub const Z_UTIL_X2_1260: u32 = 2520;
pub const Z_UTIL_X2_1261: u32 = 2522;
pub const Z_UTIL_X2_1262: u32 = 2524;
pub const Z_UTIL_X2_1263: u32 = 2526;
pub const Z_UTIL_X2_1264: u32 = 2528;
pub const Z_UTIL_X2_1265: u32 = 2530;
pub const Z_UTIL_X2_1266: u32 = 2532;
pub const Z_UTIL_X2_1267: u32 = 2534;
pub const Z_UTIL_X2_1268: u32 = 2536;
pub const Z_UTIL_X2_1269: u32 = 2538;
pub const Z_UTIL_X2_1270: u32 = 2540;
pub const Z_UTIL_X2_1271: u32 = 2542;
pub const Z_UTIL_X2_1272: u32 = 2544;
pub const Z_UTIL_X2_1273: u32 = 2546;
pub const Z_UTIL_X2_1274: u32 = 2548;
pub const Z_UTIL_X2_1275: u32 = 2550;
pub const Z_UTIL_X2_1276: u32 = 2552;
pub const Z_UTIL_X2_1277: u32 = 2554;
pub const Z_UTIL_X2_1278: u32 = 2556;
pub const Z_UTIL_X2_1279: u32 = 2558;
pub const Z_UTIL_X2_1280: u32 = 2560;
pub const Z_UTIL_X2_1281: u32 = 2562;
pub const Z_UTIL_X2_1282: u32 = 2564;
pub const Z_UTIL_X2_1283: u32 = 2566;
pub const Z_UTIL_X2_1284: u32 = 2568;
pub const Z_UTIL_X2_1285: u32 = 2570;
pub const Z_UTIL_X2_1286: u32 = 2572;
pub const Z_UTIL_X2_1287: u32 = 2574;
pub const Z_UTIL_X2_1288: u32 = 2576;
pub const Z_UTIL_X2_1289: u32 = 2578;
pub const Z_UTIL_X2_1290: u32 = 2580;
pub const Z_UTIL_X2_1291: u32 = 2582;
pub const Z_UTIL_X2_1292: u32 = 2584;
pub const Z_UTIL_X2_1293: u32 = 2586;
pub const Z_UTIL_X2_1294: u32 = 2588;
pub const Z_UTIL_X2_1295: u32 = 2590;
pub const Z_UTIL_X2_1296: u32 = 2592;
pub const Z_UTIL_X2_1297: u32 = 2594;
pub const Z_UTIL_X2_1298: u32 = 2596;
pub const Z_UTIL_X2_1299: u32 = 2598;
pub const Z_UTIL_X2_1300: u32 = 2600;
pub const Z_UTIL_X2_1301: u32 = 2602;
pub const Z_UTIL_X2_1302: u32 = 2604;
pub const Z_UTIL_X2_1303: u32 = 2606;
pub const Z_UTIL_X2_1304: u32 = 2608;
pub const Z_UTIL_X2_1305: u32 = 2610;
pub const Z_UTIL_X2_1306: u32 = 2612;
pub const Z_UTIL_X2_1307: u32 = 2614;
pub const Z_UTIL_X2_1308: u32 = 2616;
pub const Z_UTIL_X2_1309: u32 = 2618;
pub const Z_UTIL_X2_1310: u32 = 2620;
pub const Z_UTIL_X2_1311: u32 = 2622;
pub const Z_UTIL_X2_1312: u32 = 2624;
pub const Z_UTIL_X2_1313: u32 = 2626;
pub const Z_UTIL_X2_1314: u32 = 2628;
pub const Z_UTIL_X2_1315: u32 = 2630;
pub const Z_UTIL_X2_1316: u32 = 2632;
pub const Z_UTIL_X2_1317: u32 = 2634;
pub const Z_UTIL_X2_1318: u32 = 2636;
pub const Z_UTIL_X2_1319: u32 = 2638;
pub const Z_UTIL_X2_1320: u32 = 2640;
pub const Z_UTIL_X2_1321: u32 = 2642;
pub const Z_UTIL_X2_1322: u32 = 2644;
pub const Z_UTIL_X2_1323: u32 = 2646;
pub const Z_UTIL_X2_1324: u32 = 2648;
pub const Z_UTIL_X2_1325: u32 = 2650;
pub const Z_UTIL_X2_1326: u32 = 2652;
pub const Z_UTIL_X2_1327: u32 = 2654;
pub const Z_UTIL_X2_1328: u32 = 2656;
pub const Z_UTIL_X2_1329: u32 = 2658;
pub const Z_UTIL_X2_1330: u32 = 2660;
pub const Z_UTIL_X2_1331: u32 = 2662;
pub const Z_UTIL_X2_1332: u32 = 2664;
pub const Z_UTIL_X2_1333: u32 = 2666;
pub const Z_UTIL_X2_1334: u32 = 2668;
pub const Z_UTIL_X2_1335: u32 = 2670;
pub const Z_UTIL_X2_1336: u32 = 2672;
pub const Z_UTIL_X2_1337: u32 = 2674;
pub const Z_UTIL_X2_1338: u32 = 2676;
pub const Z_UTIL_X2_1339: u32 = 2678;
pub const Z_UTIL_X2_1340: u32 = 2680;
pub const Z_UTIL_X2_1341: u32 = 2682;
pub const Z_UTIL_X2_1342: u32 = 2684;
pub const Z_UTIL_X2_1343: u32 = 2686;
pub const Z_UTIL_X2_1344: u32 = 2688;
pub const Z_UTIL_X2_1345: u32 = 2690;
pub const Z_UTIL_X2_1346: u32 = 2692;
pub const Z_UTIL_X2_1347: u32 = 2694;
pub const Z_UTIL_X2_1348: u32 = 2696;
pub const Z_UTIL_X2_1349: u32 = 2698;
pub const Z_UTIL_X2_1350: u32 = 2700;
pub const Z_UTIL_X2_1351: u32 = 2702;
pub const Z_UTIL_X2_1352: u32 = 2704;
pub const Z_UTIL_X2_1353: u32 = 2706;
pub const Z_UTIL_X2_1354: u32 = 2708;
pub const Z_UTIL_X2_1355: u32 = 2710;
pub const Z_UTIL_X2_1356: u32 = 2712;
pub const Z_UTIL_X2_1357: u32 = 2714;
pub const Z_UTIL_X2_1358: u32 = 2716;
pub const Z_UTIL_X2_1359: u32 = 2718;
pub const Z_UTIL_X2_1360: u32 = 2720;
pub const Z_UTIL_X2_1361: u32 = 2722;
pub const Z_UTIL_X2_1362: u32 = 2724;
pub const Z_UTIL_X2_1363: u32 = 2726;
pub const Z_UTIL_X2_1364: u32 = 2728;
pub const Z_UTIL_X2_1365: u32 = 2730;
pub const Z_UTIL_X2_1366: u32 = 2732;
pub const Z_UTIL_X2_1367: u32 = 2734;
pub const Z_UTIL_X2_1368: u32 = 2736;
pub const Z_UTIL_X2_1369: u32 = 2738;
pub const Z_UTIL_X2_1370: u32 = 2740;
pub const Z_UTIL_X2_1371: u32 = 2742;
pub const Z_UTIL_X2_1372: u32 = 2744;
pub const Z_UTIL_X2_1373: u32 = 2746;
pub const Z_UTIL_X2_1374: u32 = 2748;
pub const Z_UTIL_X2_1375: u32 = 2750;
pub const Z_UTIL_X2_1376: u32 = 2752;
pub const Z_UTIL_X2_1377: u32 = 2754;
pub const Z_UTIL_X2_1378: u32 = 2756;
pub const Z_UTIL_X2_1379: u32 = 2758;
pub const Z_UTIL_X2_1380: u32 = 2760;
pub const Z_UTIL_X2_1381: u32 = 2762;
pub const Z_UTIL_X2_1382: u32 = 2764;
pub const Z_UTIL_X2_1383: u32 = 2766;
pub const Z_UTIL_X2_1384: u32 = 2768;
pub const Z_UTIL_X2_1385: u32 = 2770;
pub const Z_UTIL_X2_1386: u32 = 2772;
pub const Z_UTIL_X2_1387: u32 = 2774;
pub const Z_UTIL_X2_1388: u32 = 2776;
pub const Z_UTIL_X2_1389: u32 = 2778;
pub const Z_UTIL_X2_1390: u32 = 2780;
pub const Z_UTIL_X2_1391: u32 = 2782;
pub const Z_UTIL_X2_1392: u32 = 2784;
pub const Z_UTIL_X2_1393: u32 = 2786;
pub const Z_UTIL_X2_1394: u32 = 2788;
pub const Z_UTIL_X2_1395: u32 = 2790;
pub const Z_UTIL_X2_1396: u32 = 2792;
pub const Z_UTIL_X2_1397: u32 = 2794;
pub const Z_UTIL_X2_1398: u32 = 2796;
pub const Z_UTIL_X2_1399: u32 = 2798;
pub const Z_UTIL_X2_1400: u32 = 2800;
pub const Z_UTIL_X2_1401: u32 = 2802;
pub const Z_UTIL_X2_1402: u32 = 2804;
pub const Z_UTIL_X2_1403: u32 = 2806;
pub const Z_UTIL_X2_1404: u32 = 2808;
pub const Z_UTIL_X2_1405: u32 = 2810;
pub const Z_UTIL_X2_1406: u32 = 2812;
pub const Z_UTIL_X2_1407: u32 = 2814;
pub const Z_UTIL_X2_1408: u32 = 2816;
pub const Z_UTIL_X2_1409: u32 = 2818;
pub const Z_UTIL_X2_1410: u32 = 2820;
pub const Z_UTIL_X2_1411: u32 = 2822;
pub const Z_UTIL_X2_1412: u32 = 2824;
pub const Z_UTIL_X2_1413: u32 = 2826;
pub const Z_UTIL_X2_1414: u32 = 2828;
pub const Z_UTIL_X2_1415: u32 = 2830;
pub const Z_UTIL_X2_1416: u32 = 2832;
pub const Z_UTIL_X2_1417: u32 = 2834;
pub const Z_UTIL_X2_1418: u32 = 2836;
pub const Z_UTIL_X2_1419: u32 = 2838;
pub const Z_UTIL_X2_1420: u32 = 2840;
pub const Z_UTIL_X2_1421: u32 = 2842;
pub const Z_UTIL_X2_1422: u32 = 2844;
pub const Z_UTIL_X2_1423: u32 = 2846;
pub const Z_UTIL_X2_1424: u32 = 2848;
pub const Z_UTIL_X2_1425: u32 = 2850;
pub const Z_UTIL_X2_1426: u32 = 2852;
pub const Z_UTIL_X2_1427: u32 = 2854;
pub const Z_UTIL_X2_1428: u32 = 2856;
pub const Z_UTIL_X2_1429: u32 = 2858;
pub const Z_UTIL_X2_1430: u32 = 2860;
pub const Z_UTIL_X2_1431: u32 = 2862;
pub const Z_UTIL_X2_1432: u32 = 2864;
pub const Z_UTIL_X2_1433: u32 = 2866;
pub const Z_UTIL_X2_1434: u32 = 2868;
pub const Z_UTIL_X2_1435: u32 = 2870;
pub const Z_UTIL_X2_1436: u32 = 2872;
pub const Z_UTIL_X2_1437: u32 = 2874;
pub const Z_UTIL_X2_1438: u32 = 2876;
pub const Z_UTIL_X2_1439: u32 = 2878;
pub const Z_UTIL_X2_1440: u32 = 2880;
pub const Z_UTIL_X2_1441: u32 = 2882;
pub const Z_UTIL_X2_1442: u32 = 2884;
pub const Z_UTIL_X2_1443: u32 = 2886;
pub const Z_UTIL_X2_1444: u32 = 2888;
pub const Z_UTIL_X2_1445: u32 = 2890;
pub const Z_UTIL_X2_1446: u32 = 2892;
pub const Z_UTIL_X2_1447: u32 = 2894;
pub const Z_UTIL_X2_1448: u32 = 2896;
pub const Z_UTIL_X2_1449: u32 = 2898;
pub const Z_UTIL_X2_1450: u32 = 2900;
pub const Z_UTIL_X2_1451: u32 = 2902;
pub const Z_UTIL_X2_1452: u32 = 2904;
pub const Z_UTIL_X2_1453: u32 = 2906;
pub const Z_UTIL_X2_1454: u32 = 2908;
pub const Z_UTIL_X2_1455: u32 = 2910;
pub const Z_UTIL_X2_1456: u32 = 2912;
pub const Z_UTIL_X2_1457: u32 = 2914;
pub const Z_UTIL_X2_1458: u32 = 2916;
pub const Z_UTIL_X2_1459: u32 = 2918;
pub const Z_UTIL_X2_1460: u32 = 2920;
pub const Z_UTIL_X2_1461: u32 = 2922;
pub const Z_UTIL_X2_1462: u32 = 2924;
pub const Z_UTIL_X2_1463: u32 = 2926;
pub const Z_UTIL_X2_1464: u32 = 2928;
pub const Z_UTIL_X2_1465: u32 = 2930;
pub const Z_UTIL_X2_1466: u32 = 2932;
pub const Z_UTIL_X2_1467: u32 = 2934;
pub const Z_UTIL_X2_1468: u32 = 2936;
pub const Z_UTIL_X2_1469: u32 = 2938;
pub const Z_UTIL_X2_1470: u32 = 2940;
pub const Z_UTIL_X2_1471: u32 = 2942;
pub const Z_UTIL_X2_1472: u32 = 2944;
pub const Z_UTIL_X2_1473: u32 = 2946;
pub const Z_UTIL_X2_1474: u32 = 2948;
pub const Z_UTIL_X2_1475: u32 = 2950;
pub const Z_UTIL_X2_1476: u32 = 2952;
pub const Z_UTIL_X2_1477: u32 = 2954;
pub const Z_UTIL_X2_1478: u32 = 2956;
pub const Z_UTIL_X2_1479: u32 = 2958;
pub const Z_UTIL_X2_1480: u32 = 2960;
pub const Z_UTIL_X2_1481: u32 = 2962;
pub const Z_UTIL_X2_1482: u32 = 2964;
pub const Z_UTIL_X2_1483: u32 = 2966;
pub const Z_UTIL_X2_1484: u32 = 2968;
pub const Z_UTIL_X2_1485: u32 = 2970;
pub const Z_UTIL_X2_1486: u32 = 2972;
pub const Z_UTIL_X2_1487: u32 = 2974;
pub const Z_UTIL_X2_1488: u32 = 2976;
pub const Z_UTIL_X2_1489: u32 = 2978;
pub const Z_UTIL_X2_1490: u32 = 2980;
pub const Z_UTIL_X2_1491: u32 = 2982;
pub const Z_UTIL_X2_1492: u32 = 2984;
pub const Z_UTIL_X2_1493: u32 = 2986;
pub const Z_UTIL_X2_1494: u32 = 2988;
pub const Z_UTIL_X2_1495: u32 = 2990;
pub const Z_UTIL_X2_1496: u32 = 2992;
pub const Z_UTIL_X2_1497: u32 = 2994;
pub const Z_UTIL_X2_1498: u32 = 2996;
pub const Z_UTIL_X2_1499: u32 = 2998;
pub const Z_UTIL_X2_1500: u32 = 3000;
pub const Z_UTIL_X2_1501: u32 = 3002;
pub const Z_UTIL_X2_1502: u32 = 3004;
pub const Z_UTIL_X2_1503: u32 = 3006;
pub const Z_UTIL_X2_1504: u32 = 3008;
pub const Z_UTIL_X2_1505: u32 = 3010;
pub const Z_UTIL_X2_1506: u32 = 3012;
pub const Z_UTIL_X2_1507: u32 = 3014;
pub const Z_UTIL_X2_1508: u32 = 3016;
pub const Z_UTIL_X2_1509: u32 = 3018;
pub const Z_UTIL_X2_1510: u32 = 3020;
pub const Z_UTIL_X2_1511: u32 = 3022;
pub const Z_UTIL_X2_1512: u32 = 3024;
pub const Z_UTIL_X2_1513: u32 = 3026;
pub const Z_UTIL_X2_1514: u32 = 3028;
pub const Z_UTIL_X2_1515: u32 = 3030;
pub const Z_UTIL_X2_1516: u32 = 3032;
pub const Z_UTIL_X2_1517: u32 = 3034;
pub const Z_UTIL_X2_1518: u32 = 3036;
pub const Z_UTIL_X2_1519: u32 = 3038;
pub const Z_UTIL_X2_1520: u32 = 3040;
pub const Z_UTIL_X2_1521: u32 = 3042;
pub const Z_UTIL_X2_1522: u32 = 3044;
pub const Z_UTIL_X2_1523: u32 = 3046;
pub const Z_UTIL_X2_1524: u32 = 3048;
pub const Z_UTIL_X2_1525: u32 = 3050;
pub const Z_UTIL_X2_1526: u32 = 3052;
pub const Z_UTIL_X2_1527: u32 = 3054;
pub const Z_UTIL_X2_1528: u32 = 3056;
pub const Z_UTIL_X2_1529: u32 = 3058;
pub const Z_UTIL_X2_1530: u32 = 3060;
pub const Z_UTIL_X2_1531: u32 = 3062;
pub const Z_UTIL_X2_1532: u32 = 3064;
pub const Z_UTIL_X2_1533: u32 = 3066;
pub const Z_UTIL_X2_1534: u32 = 3068;
pub const Z_UTIL_X2_1535: u32 = 3070;
pub const Z_UTIL_X2_1536: u32 = 3072;
pub const Z_UTIL_X2_1537: u32 = 3074;
pub const Z_UTIL_X2_1538: u32 = 3076;
pub const Z_UTIL_X2_1539: u32 = 3078;
pub const Z_UTIL_X2_1540: u32 = 3080;
pub const Z_UTIL_X2_1541: u32 = 3082;
pub const Z_UTIL_X2_1542: u32 = 3084;
pub const Z_UTIL_X2_1543: u32 = 3086;
pub const Z_UTIL_X2_1544: u32 = 3088;
pub const Z_UTIL_X2_1545: u32 = 3090;
pub const Z_UTIL_X2_1546: u32 = 3092;
pub const Z_UTIL_X2_1547: u32 = 3094;
pub const Z_UTIL_X2_1548: u32 = 3096;
pub const Z_UTIL_X2_1549: u32 = 3098;
pub const Z_UTIL_X2_1550: u32 = 3100;
pub const Z_UTIL_X2_1551: u32 = 3102;
pub const Z_UTIL_X2_1552: u32 = 3104;
pub const Z_UTIL_X2_1553: u32 = 3106;
pub const Z_UTIL_X2_1554: u32 = 3108;
pub const Z_UTIL_X2_1555: u32 = 3110;
pub const Z_UTIL_X2_1556: u32 = 3112;
pub const Z_UTIL_X2_1557: u32 = 3114;
pub const Z_UTIL_X2_1558: u32 = 3116;
pub const Z_UTIL_X2_1559: u32 = 3118;
pub const Z_UTIL_X2_1560: u32 = 3120;
pub const Z_UTIL_X2_1561: u32 = 3122;
pub const Z_UTIL_X2_1562: u32 = 3124;
pub const Z_UTIL_X2_1563: u32 = 3126;
pub const Z_UTIL_X2_1564: u32 = 3128;
pub const Z_UTIL_X2_1565: u32 = 3130;
pub const Z_UTIL_X2_1566: u32 = 3132;
pub const Z_UTIL_X2_1567: u32 = 3134;
pub const Z_UTIL_X2_1568: u32 = 3136;
pub const Z_UTIL_X2_1569: u32 = 3138;
pub const Z_UTIL_X2_1570: u32 = 3140;
pub const Z_UTIL_X2_1571: u32 = 3142;
pub const Z_UTIL_X2_1572: u32 = 3144;
pub const Z_UTIL_X2_1573: u32 = 3146;
pub const Z_UTIL_X2_1574: u32 = 3148;
pub const Z_UTIL_X2_1575: u32 = 3150;
pub const Z_UTIL_X2_1576: u32 = 3152;
pub const Z_UTIL_X2_1577: u32 = 3154;
pub const Z_UTIL_X2_1578: u32 = 3156;
pub const Z_UTIL_X2_1579: u32 = 3158;
pub const Z_UTIL_X2_1580: u32 = 3160;
pub const Z_UTIL_X2_1581: u32 = 3162;
pub const Z_UTIL_X2_1582: u32 = 3164;
pub const Z_UTIL_X2_1583: u32 = 3166;
pub const Z_UTIL_X2_1584: u32 = 3168;
pub const Z_UTIL_X2_1585: u32 = 3170;
pub const Z_UTIL_X2_1586: u32 = 3172;
pub const Z_UTIL_X2_1587: u32 = 3174;
pub const Z_UTIL_X2_1588: u32 = 3176;
pub const Z_UTIL_X2_1589: u32 = 3178;
pub const Z_UTIL_X2_1590: u32 = 3180;
pub const Z_UTIL_X2_1591: u32 = 3182;
pub const Z_UTIL_X2_1592: u32 = 3184;
pub const Z_UTIL_X2_1593: u32 = 3186;
pub const Z_UTIL_X2_1594: u32 = 3188;
pub const Z_UTIL_X2_1595: u32 = 3190;
pub const Z_UTIL_X2_1596: u32 = 3192;
pub const Z_UTIL_X2_1597: u32 = 3194;
pub const Z_UTIL_X2_1598: u32 = 3196;
pub const Z_UTIL_X2_1599: u32 = 3198;
pub const Z_UTIL_X2_1600: u32 = 3200;
pub const Z_UTIL_X2_1601: u32 = 3202;
pub const Z_UTIL_X2_1602: u32 = 3204;
pub const Z_UTIL_X2_1603: u32 = 3206;
pub const Z_UTIL_X2_1604: u32 = 3208;
pub const Z_UTIL_X2_1605: u32 = 3210;
pub const Z_UTIL_X2_1606: u32 = 3212;
pub const Z_UTIL_X2_1607: u32 = 3214;
pub const Z_UTIL_X2_1608: u32 = 3216;
pub const Z_UTIL_X2_1609: u32 = 3218;
pub const Z_UTIL_X2_1610: u32 = 3220;
pub const Z_UTIL_X2_1611: u32 = 3222;
pub const Z_UTIL_X2_1612: u32 = 3224;
pub const Z_UTIL_X2_1613: u32 = 3226;
pub const Z_UTIL_X2_1614: u32 = 3228;
pub const Z_UTIL_X2_1615: u32 = 3230;
pub const Z_UTIL_X2_1616: u32 = 3232;
pub const Z_UTIL_X2_1617: u32 = 3234;
pub const Z_UTIL_X2_1618: u32 = 3236;
pub const Z_UTIL_X2_1619: u32 = 3238;
pub const Z_UTIL_X2_1620: u32 = 3240;
pub const Z_UTIL_X2_1621: u32 = 3242;
pub const Z_UTIL_X2_1622: u32 = 3244;
pub const Z_UTIL_X2_1623: u32 = 3246;
pub const Z_UTIL_X2_1624: u32 = 3248;
pub const Z_UTIL_X2_1625: u32 = 3250;
pub const Z_UTIL_X2_1626: u32 = 3252;
pub const Z_UTIL_X2_1627: u32 = 3254;
pub const Z_UTIL_X2_1628: u32 = 3256;
pub const Z_UTIL_X2_1629: u32 = 3258;
pub const Z_UTIL_X2_1630: u32 = 3260;
pub const Z_UTIL_X2_1631: u32 = 3262;
pub const Z_UTIL_X2_1632: u32 = 3264;
pub const Z_UTIL_X2_1633: u32 = 3266;
pub const Z_UTIL_X2_1634: u32 = 3268;
pub const Z_UTIL_X2_1635: u32 = 3270;
pub const Z_UTIL_X2_1636: u32 = 3272;
pub const Z_UTIL_X2_1637: u32 = 3274;
pub const Z_UTIL_X2_1638: u32 = 3276;
pub const Z_UTIL_X2_1639: u32 = 3278;
pub const Z_UTIL_X2_1640: u32 = 3280;
pub const Z_UTIL_X2_1641: u32 = 3282;
pub const Z_UTIL_X2_1642: u32 = 3284;
pub const Z_UTIL_X2_1643: u32 = 3286;
pub const Z_UTIL_X2_1644: u32 = 3288;
pub const Z_UTIL_X2_1645: u32 = 3290;
pub const Z_UTIL_X2_1646: u32 = 3292;
pub const Z_UTIL_X2_1647: u32 = 3294;
pub const Z_UTIL_X2_1648: u32 = 3296;
pub const Z_UTIL_X2_1649: u32 = 3298;
pub const Z_UTIL_X2_1650: u32 = 3300;
pub const Z_UTIL_X2_1651: u32 = 3302;
pub const Z_UTIL_X2_1652: u32 = 3304;
pub const Z_UTIL_X2_1653: u32 = 3306;
pub const Z_UTIL_X2_1654: u32 = 3308;
pub const Z_UTIL_X2_1655: u32 = 3310;
pub const Z_UTIL_X2_1656: u32 = 3312;
pub const Z_UTIL_X2_1657: u32 = 3314;
pub const Z_UTIL_X2_1658: u32 = 3316;
pub const Z_UTIL_X2_1659: u32 = 3318;
pub const Z_UTIL_X2_1660: u32 = 3320;
pub const Z_UTIL_X2_1661: u32 = 3322;
pub const Z_UTIL_X2_1662: u32 = 3324;
pub const Z_UTIL_X2_1663: u32 = 3326;
pub const Z_UTIL_X2_1664: u32 = 3328;
pub const Z_UTIL_X2_1665: u32 = 3330;
pub const Z_UTIL_X2_1666: u32 = 3332;
pub const Z_UTIL_X2_1667: u32 = 3334;
pub const Z_UTIL_X2_1668: u32 = 3336;
pub const Z_UTIL_X2_1669: u32 = 3338;
pub const Z_UTIL_X2_1670: u32 = 3340;
pub const Z_UTIL_X2_1671: u32 = 3342;
pub const Z_UTIL_X2_1672: u32 = 3344;
pub const Z_UTIL_X2_1673: u32 = 3346;
pub const Z_UTIL_X2_1674: u32 = 3348;
pub const Z_UTIL_X2_1675: u32 = 3350;
pub const Z_UTIL_X2_1676: u32 = 3352;
pub const Z_UTIL_X2_1677: u32 = 3354;
pub const Z_UTIL_X2_1678: u32 = 3356;
pub const Z_UTIL_X2_1679: u32 = 3358;
pub const Z_UTIL_X2_1680: u32 = 3360;
pub const Z_UTIL_X2_1681: u32 = 3362;
pub const Z_UTIL_X2_1682: u32 = 3364;
pub const Z_UTIL_X2_1683: u32 = 3366;
pub const Z_UTIL_X2_1684: u32 = 3368;
pub const Z_UTIL_X2_1685: u32 = 3370;
pub const Z_UTIL_X2_1686: u32 = 3372;
pub const Z_UTIL_X2_1687: u32 = 3374;
pub const Z_UTIL_X2_1688: u32 = 3376;
pub const Z_UTIL_X2_1689: u32 = 3378;
pub const Z_UTIL_X2_1690: u32 = 3380;
pub const Z_UTIL_X2_1691: u32 = 3382;
pub const Z_UTIL_X2_1692: u32 = 3384;
pub const Z_UTIL_X2_1693: u32 = 3386;
pub const Z_UTIL_X2_1694: u32 = 3388;
pub const Z_UTIL_X2_1695: u32 = 3390;
pub const Z_UTIL_X2_1696: u32 = 3392;
pub const Z_UTIL_X2_1697: u32 = 3394;
pub const Z_UTIL_X2_1698: u32 = 3396;
pub const Z_UTIL_X2_1699: u32 = 3398;
pub const Z_UTIL_X2_1700: u32 = 3400;
pub const Z_UTIL_X2_1701: u32 = 3402;
pub const Z_UTIL_X2_1702: u32 = 3404;
pub const Z_UTIL_X2_1703: u32 = 3406;
pub const Z_UTIL_X2_1704: u32 = 3408;
pub const Z_UTIL_X2_1705: u32 = 3410;
pub const Z_UTIL_X2_1706: u32 = 3412;
pub const Z_UTIL_X2_1707: u32 = 3414;
pub const Z_UTIL_X2_1708: u32 = 3416;
pub const Z_UTIL_X2_1709: u32 = 3418;
pub const Z_UTIL_X2_1710: u32 = 3420;
pub const Z_UTIL_X2_1711: u32 = 3422;
pub const Z_UTIL_X2_1712: u32 = 3424;
pub const Z_UTIL_X2_1713: u32 = 3426;
pub const Z_UTIL_X2_1714: u32 = 3428;
pub const Z_UTIL_X2_1715: u32 = 3430;
pub const Z_UTIL_X2_1716: u32 = 3432;
pub const Z_UTIL_X2_1717: u32 = 3434;
pub const Z_UTIL_X2_1718: u32 = 3436;
pub const Z_UTIL_X2_1719: u32 = 3438;
pub const Z_UTIL_X2_1720: u32 = 3440;
pub const Z_UTIL_X2_1721: u32 = 3442;
pub const Z_UTIL_X2_1722: u32 = 3444;
pub const Z_UTIL_X2_1723: u32 = 3446;
pub const Z_UTIL_X2_1724: u32 = 3448;
pub const Z_UTIL_X2_1725: u32 = 3450;
pub const Z_UTIL_X2_1726: u32 = 3452;
pub const Z_UTIL_X2_1727: u32 = 3454;
pub const Z_UTIL_X2_1728: u32 = 3456;
pub const Z_UTIL_X2_1729: u32 = 3458;
pub const Z_UTIL_X2_1730: u32 = 3460;
pub const Z_UTIL_X2_1731: u32 = 3462;
pub const Z_UTIL_X2_1732: u32 = 3464;
pub const Z_UTIL_X2_1733: u32 = 3466;
pub const Z_UTIL_X2_1734: u32 = 3468;
pub const Z_UTIL_X2_1735: u32 = 3470;
pub const Z_UTIL_X2_1736: u32 = 3472;
pub const Z_UTIL_X2_1737: u32 = 3474;
pub const Z_UTIL_X2_1738: u32 = 3476;
pub const Z_UTIL_X2_1739: u32 = 3478;
pub const Z_UTIL_X2_1740: u32 = 3480;
pub const Z_UTIL_X2_1741: u32 = 3482;
pub const Z_UTIL_X2_1742: u32 = 3484;
pub const Z_UTIL_X2_1743: u32 = 3486;
pub const Z_UTIL_X2_1744: u32 = 3488;
pub const Z_UTIL_X2_1745: u32 = 3490;
pub const Z_UTIL_X2_1746: u32 = 3492;
pub const Z_UTIL_X2_1747: u32 = 3494;
pub const Z_UTIL_X2_1748: u32 = 3496;
pub const Z_UTIL_X2_1749: u32 = 3498;
pub const Z_UTIL_X2_1750: u32 = 3500;
pub const Z_UTIL_X2_1751: u32 = 3502;
pub const Z_UTIL_X2_1752: u32 = 3504;
pub const Z_UTIL_X2_1753: u32 = 3506;
pub const Z_UTIL_X2_1754: u32 = 3508;
pub const Z_UTIL_X2_1755: u32 = 3510;
pub const Z_UTIL_X2_1756: u32 = 3512;
pub const Z_UTIL_X2_1757: u32 = 3514;
pub const Z_UTIL_X2_1758: u32 = 3516;
pub const Z_UTIL_X2_1759: u32 = 3518;
pub const Z_UTIL_X2_1760: u32 = 3520;
pub const Z_UTIL_X2_1761: u32 = 3522;
pub const Z_UTIL_X2_1762: u32 = 3524;
pub const Z_UTIL_X2_1763: u32 = 3526;
pub const Z_UTIL_X2_1764: u32 = 3528;
pub const Z_UTIL_X2_1765: u32 = 3530;
pub const Z_UTIL_X2_1766: u32 = 3532;
pub const Z_UTIL_X2_1767: u32 = 3534;
pub const Z_UTIL_X2_1768: u32 = 3536;
pub const Z_UTIL_X2_1769: u32 = 3538;
pub const Z_UTIL_X2_1770: u32 = 3540;
pub const Z_UTIL_X2_1771: u32 = 3542;
pub const Z_UTIL_X2_1772: u32 = 3544;
pub const Z_UTIL_X2_1773: u32 = 3546;
pub const Z_UTIL_X2_1774: u32 = 3548;
pub const Z_UTIL_X2_1775: u32 = 3550;
pub const Z_UTIL_X2_1776: u32 = 3552;
pub const Z_UTIL_X2_1777: u32 = 3554;
pub const Z_UTIL_X2_1778: u32 = 3556;
pub const Z_UTIL_X2_1779: u32 = 3558;
pub const Z_UTIL_X2_1780: u32 = 3560;
pub const Z_UTIL_X2_1781: u32 = 3562;
pub const Z_UTIL_X2_1782: u32 = 3564;
pub const Z_UTIL_X2_1783: u32 = 3566;
pub const Z_UTIL_X2_1784: u32 = 3568;
pub const Z_UTIL_X2_1785: u32 = 3570;
pub const Z_UTIL_X2_1786: u32 = 3572;
pub const Z_UTIL_X2_1787: u32 = 3574;
pub const Z_UTIL_X2_1788: u32 = 3576;
pub const Z_UTIL_X2_1789: u32 = 3578;
pub const Z_UTIL_X2_1790: u32 = 3580;
pub const Z_UTIL_X2_1791: u32 = 3582;
pub const Z_UTIL_X2_1792: u32 = 3584;
pub const Z_UTIL_X2_1793: u32 = 3586;
pub const Z_UTIL_X2_1794: u32 = 3588;
pub const Z_UTIL_X2_1795: u32 = 3590;
pub const Z_UTIL_X2_1796: u32 = 3592;
pub const Z_UTIL_X2_1797: u32 = 3594;
pub const Z_UTIL_X2_1798: u32 = 3596;
pub const Z_UTIL_X2_1799: u32 = 3598;
pub const Z_UTIL_X2_1800: u32 = 3600;
pub const Z_UTIL_X2_1801: u32 = 3602;
pub const Z_UTIL_X2_1802: u32 = 3604;
pub const Z_UTIL_X2_1803: u32 = 3606;
pub const Z_UTIL_X2_1804: u32 = 3608;
pub const Z_UTIL_X2_1805: u32 = 3610;
pub const Z_UTIL_X2_1806: u32 = 3612;
pub const Z_UTIL_X2_1807: u32 = 3614;
pub const Z_UTIL_X2_1808: u32 = 3616;
pub const Z_UTIL_X2_1809: u32 = 3618;
pub const Z_UTIL_X2_1810: u32 = 3620;
pub const Z_UTIL_X2_1811: u32 = 3622;
pub const Z_UTIL_X2_1812: u32 = 3624;
pub const Z_UTIL_X2_1813: u32 = 3626;
pub const Z_UTIL_X2_1814: u32 = 3628;
pub const Z_UTIL_X2_1815: u32 = 3630;
pub const Z_UTIL_X2_1816: u32 = 3632;
pub const Z_UTIL_X2_1817: u32 = 3634;
pub const Z_UTIL_X2_1818: u32 = 3636;
pub const Z_UTIL_X2_1819: u32 = 3638;
pub const Z_UTIL_X2_1820: u32 = 3640;
pub const Z_UTIL_X2_1821: u32 = 3642;
pub const Z_UTIL_X2_1822: u32 = 3644;
pub const Z_UTIL_X2_1823: u32 = 3646;
pub const Z_UTIL_X2_1824: u32 = 3648;
pub const Z_UTIL_X2_1825: u32 = 3650;
pub const Z_UTIL_X2_1826: u32 = 3652;
pub const Z_UTIL_X2_1827: u32 = 3654;
pub const Z_UTIL_X2_1828: u32 = 3656;
pub const Z_UTIL_X2_1829: u32 = 3658;
pub const Z_UTIL_X2_1830: u32 = 3660;
pub const Z_UTIL_X2_1831: u32 = 3662;
pub const Z_UTIL_X2_1832: u32 = 3664;
pub const Z_UTIL_X2_1833: u32 = 3666;
pub const Z_UTIL_X2_1834: u32 = 3668;
pub const Z_UTIL_X2_1835: u32 = 3670;
pub const Z_UTIL_X2_1836: u32 = 3672;
pub const Z_UTIL_X2_1837: u32 = 3674;
pub const Z_UTIL_X2_1838: u32 = 3676;
pub const Z_UTIL_X2_1839: u32 = 3678;
pub const Z_UTIL_X2_1840: u32 = 3680;
pub const Z_UTIL_X2_1841: u32 = 3682;
pub const Z_UTIL_X2_1842: u32 = 3684;
pub const Z_UTIL_X2_1843: u32 = 3686;
pub const Z_UTIL_X2_1844: u32 = 3688;
pub const Z_UTIL_X2_1845: u32 = 3690;
pub const Z_UTIL_X2_1846: u32 = 3692;
pub const Z_UTIL_X2_1847: u32 = 3694;
pub const Z_UTIL_X2_1848: u32 = 3696;
pub const Z_UTIL_X2_1849: u32 = 3698;
pub const Z_UTIL_X2_1850: u32 = 3700;
pub const Z_UTIL_X2_1851: u32 = 3702;
pub const Z_UTIL_X2_1852: u32 = 3704;
pub const Z_UTIL_X2_1853: u32 = 3706;
pub const Z_UTIL_X2_1854: u32 = 3708;
pub const Z_UTIL_X2_1855: u32 = 3710;
pub const Z_UTIL_X2_1856: u32 = 3712;
pub const Z_UTIL_X2_1857: u32 = 3714;
pub const Z_UTIL_X2_1858: u32 = 3716;
pub const Z_UTIL_X2_1859: u32 = 3718;
pub const Z_UTIL_X2_1860: u32 = 3720;
pub const Z_UTIL_X2_1861: u32 = 3722;
pub const Z_UTIL_X2_1862: u32 = 3724;
pub const Z_UTIL_X2_1863: u32 = 3726;
pub const Z_UTIL_X2_1864: u32 = 3728;
pub const Z_UTIL_X2_1865: u32 = 3730;
pub const Z_UTIL_X2_1866: u32 = 3732;
pub const Z_UTIL_X2_1867: u32 = 3734;
pub const Z_UTIL_X2_1868: u32 = 3736;
pub const Z_UTIL_X2_1869: u32 = 3738;
pub const Z_UTIL_X2_1870: u32 = 3740;
pub const Z_UTIL_X2_1871: u32 = 3742;
pub const Z_UTIL_X2_1872: u32 = 3744;
pub const Z_UTIL_X2_1873: u32 = 3746;
pub const Z_UTIL_X2_1874: u32 = 3748;
pub const Z_UTIL_X2_1875: u32 = 3750;
pub const Z_UTIL_X2_1876: u32 = 3752;
pub const Z_UTIL_X2_1877: u32 = 3754;
pub const Z_UTIL_X2_1878: u32 = 3756;
pub const Z_UTIL_X2_1879: u32 = 3758;
pub const Z_UTIL_X2_1880: u32 = 3760;
pub const Z_UTIL_X2_1881: u32 = 3762;
pub const Z_UTIL_X2_1882: u32 = 3764;
pub const Z_UTIL_X2_1883: u32 = 3766;
pub const Z_UTIL_X2_1884: u32 = 3768;
pub const Z_UTIL_X2_1885: u32 = 3770;
pub const Z_UTIL_X2_1886: u32 = 3772;
pub const Z_UTIL_X2_1887: u32 = 3774;
pub const Z_UTIL_X2_1888: u32 = 3776;
pub const Z_UTIL_X2_1889: u32 = 3778;
pub const Z_UTIL_X2_1890: u32 = 3780;
pub const Z_UTIL_X2_1891: u32 = 3782;
pub const Z_UTIL_X2_1892: u32 = 3784;
pub const Z_UTIL_X2_1893: u32 = 3786;
pub const Z_UTIL_X2_1894: u32 = 3788;
pub const Z_UTIL_X2_1895: u32 = 3790;
pub const Z_UTIL_X2_1896: u32 = 3792;
pub const Z_UTIL_X2_1897: u32 = 3794;
pub const Z_UTIL_X2_1898: u32 = 3796;
pub const Z_UTIL_X2_1899: u32 = 3798;
pub const Z_UTIL_X2_1900: u32 = 3800;
pub const Z_UTIL_X2_1901: u32 = 3802;
pub const Z_UTIL_X2_1902: u32 = 3804;
pub const Z_UTIL_X2_1903: u32 = 3806;
pub const Z_UTIL_X2_1904: u32 = 3808;
pub const Z_UTIL_X2_1905: u32 = 3810;
pub const Z_UTIL_X2_1906: u32 = 3812;
pub const Z_UTIL_X2_1907: u32 = 3814;
pub const Z_UTIL_X2_1908: u32 = 3816;
pub const Z_UTIL_X2_1909: u32 = 3818;
pub const Z_UTIL_X2_1910: u32 = 3820;
pub const Z_UTIL_X2_1911: u32 = 3822;
pub const Z_UTIL_X2_1912: u32 = 3824;
pub const Z_UTIL_X2_1913: u32 = 3826;
pub const Z_UTIL_X2_1914: u32 = 3828;
pub const Z_UTIL_X2_1915: u32 = 3830;
pub const Z_UTIL_X2_1916: u32 = 3832;
pub const Z_UTIL_X2_1917: u32 = 3834;
pub const Z_UTIL_X2_1918: u32 = 3836;
pub const Z_UTIL_X2_1919: u32 = 3838;
pub const Z_UTIL_X2_1920: u32 = 3840;
pub const Z_UTIL_X2_1921: u32 = 3842;
pub const Z_UTIL_X2_1922: u32 = 3844;
pub const Z_UTIL_X2_1923: u32 = 3846;
pub const Z_UTIL_X2_1924: u32 = 3848;
pub const Z_UTIL_X2_1925: u32 = 3850;
pub const Z_UTIL_X2_1926: u32 = 3852;
pub const Z_UTIL_X2_1927: u32 = 3854;
pub const Z_UTIL_X2_1928: u32 = 3856;
pub const Z_UTIL_X2_1929: u32 = 3858;
pub const Z_UTIL_X2_1930: u32 = 3860;
pub const Z_UTIL_X2_1931: u32 = 3862;
pub const Z_UTIL_X2_1932: u32 = 3864;
pub const Z_UTIL_X2_1933: u32 = 3866;
pub const Z_UTIL_X2_1934: u32 = 3868;
pub const Z_UTIL_X2_1935: u32 = 3870;
pub const Z_UTIL_X2_1936: u32 = 3872;
pub const Z_UTIL_X2_1937: u32 = 3874;
pub const Z_UTIL_X2_1938: u32 = 3876;
pub const Z_UTIL_X2_1939: u32 = 3878;
pub const Z_UTIL_X2_1940: u32 = 3880;
pub const Z_UTIL_X2_1941: u32 = 3882;
pub const Z_UTIL_X2_1942: u32 = 3884;
pub const Z_UTIL_X2_1943: u32 = 3886;
pub const Z_UTIL_X2_1944: u32 = 3888;
pub const Z_UTIL_X2_1945: u32 = 3890;
pub const Z_UTIL_X2_1946: u32 = 3892;
pub const Z_UTIL_X2_1947: u32 = 3894;
pub const Z_UTIL_X2_1948: u32 = 3896;
pub const Z_UTIL_X2_1949: u32 = 3898;
pub const Z_UTIL_X2_1950: u32 = 3900;
pub const Z_UTIL_X2_1951: u32 = 3902;
pub const Z_UTIL_X2_1952: u32 = 3904;
pub const Z_UTIL_X2_1953: u32 = 3906;
pub const Z_UTIL_X2_1954: u32 = 3908;
pub const Z_UTIL_X2_1955: u32 = 3910;
pub const Z_UTIL_X2_1956: u32 = 3912;
pub const Z_UTIL_X2_1957: u32 = 3914;
pub const Z_UTIL_X2_1958: u32 = 3916;
pub const Z_UTIL_X2_1959: u32 = 3918;
pub const Z_UTIL_X2_1960: u32 = 3920;
pub const Z_UTIL_X2_1961: u32 = 3922;
pub const Z_UTIL_X2_1962: u32 = 3924;
pub const Z_UTIL_X2_1963: u32 = 3926;
pub const Z_UTIL_X2_1964: u32 = 3928;
pub const Z_UTIL_X2_1965: u32 = 3930;
pub const Z_UTIL_X2_1966: u32 = 3932;
pub const Z_UTIL_X2_1967: u32 = 3934;
pub const Z_UTIL_X2_1968: u32 = 3936;
pub const Z_UTIL_X2_1969: u32 = 3938;
pub const Z_UTIL_X2_1970: u32 = 3940;
pub const Z_UTIL_X2_1971: u32 = 3942;
pub const Z_UTIL_X2_1972: u32 = 3944;
pub const Z_UTIL_X2_1973: u32 = 3946;
pub const Z_UTIL_X2_1974: u32 = 3948;
pub const Z_UTIL_X2_1975: u32 = 3950;
pub const Z_UTIL_X2_1976: u32 = 3952;
pub const Z_UTIL_X2_1977: u32 = 3954;
pub const Z_UTIL_X2_1978: u32 = 3956;
pub const Z_UTIL_X2_1979: u32 = 3958;
pub const Z_UTIL_X2_1980: u32 = 3960;
pub const Z_UTIL_X2_1981: u32 = 3962;
pub const Z_UTIL_X2_1982: u32 = 3964;
pub const Z_UTIL_X2_1983: u32 = 3966;
pub const Z_UTIL_X2_1984: u32 = 3968;
pub const Z_UTIL_X2_1985: u32 = 3970;
pub const Z_UTIL_X2_1986: u32 = 3972;
pub const Z_UTIL_X2_1987: u32 = 3974;
pub const Z_UTIL_X2_1988: u32 = 3976;
pub const Z_UTIL_X2_1989: u32 = 3978;
pub const Z_UTIL_X2_1990: u32 = 3980;
pub const Z_UTIL_X2_1991: u32 = 3982;
pub const Z_UTIL_X2_1992: u32 = 3984;
pub const Z_UTIL_X2_1993: u32 = 3986;
pub const Z_UTIL_X2_1994: u32 = 3988;
pub const Z_UTIL_X2_1995: u32 = 3990;
pub const Z_UTIL_X2_1996: u32 = 3992;
pub const Z_UTIL_X2_1997: u32 = 3994;
pub const Z_UTIL_X2_1998: u32 = 3996;
pub const Z_UTIL_X2_1999: u32 = 3998;
pub const Z_UTIL_X2_2000: u32 = 4000;
pub const Z_UTIL_X2_2001: u32 = 4002;
pub const Z_UTIL_X2_2002: u32 = 4004;
pub const Z_UTIL_X2_2003: u32 = 4006;
pub const Z_UTIL_X2_2004: u32 = 4008;
pub const Z_UTIL_X2_2005: u32 = 4010;
pub const Z_UTIL_X2_2006: u32 = 4012;
pub const Z_UTIL_X2_2007: u32 = 4014;
pub const Z_UTIL_X2_2008: u32 = 4016;
pub const Z_UTIL_X2_2009: u32 = 4018;
pub const Z_UTIL_X2_2010: u32 = 4020;
pub const Z_UTIL_X2_2011: u32 = 4022;
pub const Z_UTIL_X2_2012: u32 = 4024;
pub const Z_UTIL_X2_2013: u32 = 4026;
pub const Z_UTIL_X2_2014: u32 = 4028;
pub const Z_UTIL_X2_2015: u32 = 4030;
pub const Z_UTIL_X2_2016: u32 = 4032;
pub const Z_UTIL_X2_2017: u32 = 4034;
pub const Z_UTIL_X2_2018: u32 = 4036;
pub const Z_UTIL_X2_2019: u32 = 4038;
pub const Z_UTIL_X2_2020: u32 = 4040;
pub const Z_UTIL_X2_2021: u32 = 4042;
pub const Z_UTIL_X2_2022: u32 = 4044;
pub const Z_UTIL_X2_2023: u32 = 4046;
pub const Z_UTIL_X2_2024: u32 = 4048;
pub const Z_UTIL_X2_2025: u32 = 4050;
pub const Z_UTIL_X2_2026: u32 = 4052;
pub const Z_UTIL_X2_2027: u32 = 4054;
pub const Z_UTIL_X2_2028: u32 = 4056;
pub const Z_UTIL_X2_2029: u32 = 4058;
pub const Z_UTIL_X2_2030: u32 = 4060;
pub const Z_UTIL_X2_2031: u32 = 4062;
pub const Z_UTIL_X2_2032: u32 = 4064;
pub const Z_UTIL_X2_2033: u32 = 4066;
pub const Z_UTIL_X2_2034: u32 = 4068;
pub const Z_UTIL_X2_2035: u32 = 4070;
pub const Z_UTIL_X2_2036: u32 = 4072;
pub const Z_UTIL_X2_2037: u32 = 4074;
pub const Z_UTIL_X2_2038: u32 = 4076;
pub const Z_UTIL_X2_2039: u32 = 4078;
pub const Z_UTIL_X2_2040: u32 = 4080;
pub const Z_UTIL_X2_2041: u32 = 4082;
pub const Z_UTIL_X2_2042: u32 = 4084;
pub const Z_UTIL_X2_2043: u32 = 4086;
pub const Z_UTIL_X2_2044: u32 = 4088;
pub const Z_UTIL_X2_2045: u32 = 4090;
pub const Z_UTIL_X2_2046: u32 = 4092;
pub const Z_UTIL_X2_2047: u32 = 4094;
pub const Z_UTIL_X2_2048: u32 = 4096;
pub const Z_UTIL_X2_2049: u32 = 4098;
pub const Z_UTIL_X2_2050: u32 = 4100;
pub const Z_UTIL_X2_2051: u32 = 4102;
pub const Z_UTIL_X2_2052: u32 = 4104;
pub const Z_UTIL_X2_2053: u32 = 4106;
pub const Z_UTIL_X2_2054: u32 = 4108;
pub const Z_UTIL_X2_2055: u32 = 4110;
pub const Z_UTIL_X2_2056: u32 = 4112;
pub const Z_UTIL_X2_2057: u32 = 4114;
pub const Z_UTIL_X2_2058: u32 = 4116;
pub const Z_UTIL_X2_2059: u32 = 4118;
pub const Z_UTIL_X2_2060: u32 = 4120;
pub const Z_UTIL_X2_2061: u32 = 4122;
pub const Z_UTIL_X2_2062: u32 = 4124;
pub const Z_UTIL_X2_2063: u32 = 4126;
pub const Z_UTIL_X2_2064: u32 = 4128;
pub const Z_UTIL_X2_2065: u32 = 4130;
pub const Z_UTIL_X2_2066: u32 = 4132;
pub const Z_UTIL_X2_2067: u32 = 4134;
pub const Z_UTIL_X2_2068: u32 = 4136;
pub const Z_UTIL_X2_2069: u32 = 4138;
pub const Z_UTIL_X2_2070: u32 = 4140;
pub const Z_UTIL_X2_2071: u32 = 4142;
pub const Z_UTIL_X2_2072: u32 = 4144;
pub const Z_UTIL_X2_2073: u32 = 4146;
pub const Z_UTIL_X2_2074: u32 = 4148;
pub const Z_UTIL_X2_2075: u32 = 4150;
pub const Z_UTIL_X2_2076: u32 = 4152;
pub const Z_UTIL_X2_2077: u32 = 4154;
pub const Z_UTIL_X2_2078: u32 = 4156;
pub const Z_UTIL_X2_2079: u32 = 4158;
pub const Z_UTIL_X2_2080: u32 = 4160;
pub const Z_UTIL_X2_2081: u32 = 4162;
pub const Z_UTIL_X2_2082: u32 = 4164;
pub const Z_UTIL_X2_2083: u32 = 4166;
pub const Z_UTIL_X2_2084: u32 = 4168;
pub const Z_UTIL_X2_2085: u32 = 4170;
pub const Z_UTIL_X2_2086: u32 = 4172;
pub const Z_UTIL_X2_2087: u32 = 4174;
pub const Z_UTIL_X2_2088: u32 = 4176;
pub const Z_UTIL_X2_2089: u32 = 4178;
pub const Z_UTIL_X2_2090: u32 = 4180;
pub const Z_UTIL_X2_2091: u32 = 4182;
pub const Z_UTIL_X2_2092: u32 = 4184;
pub const Z_UTIL_X2_2093: u32 = 4186;
pub const Z_UTIL_X2_2094: u32 = 4188;
pub const Z_UTIL_X2_2095: u32 = 4190;
pub const Z_UTIL_X2_2096: u32 = 4192;
pub const Z_UTIL_X2_2097: u32 = 4194;
pub const Z_UTIL_X2_2098: u32 = 4196;
pub const Z_UTIL_X2_2099: u32 = 4198;
pub const Z_UTIL_X2_2100: u32 = 4200;
pub const Z_UTIL_X2_2101: u32 = 4202;
pub const Z_UTIL_X2_2102: u32 = 4204;
pub const Z_UTIL_X2_2103: u32 = 4206;
pub const Z_UTIL_X2_2104: u32 = 4208;
pub const Z_UTIL_X2_2105: u32 = 4210;
pub const Z_UTIL_X2_2106: u32 = 4212;
pub const Z_UTIL_X2_2107: u32 = 4214;
pub const Z_UTIL_X2_2108: u32 = 4216;
pub const Z_UTIL_X2_2109: u32 = 4218;
pub const Z_UTIL_X2_2110: u32 = 4220;
pub const Z_UTIL_X2_2111: u32 = 4222;
pub const Z_UTIL_X2_2112: u32 = 4224;
pub const Z_UTIL_X2_2113: u32 = 4226;
pub const Z_UTIL_X2_2114: u32 = 4228;
pub const Z_UTIL_X2_2115: u32 = 4230;
pub const Z_UTIL_X2_2116: u32 = 4232;
pub const Z_UTIL_X2_2117: u32 = 4234;
pub const Z_UTIL_X2_2118: u32 = 4236;
pub const Z_UTIL_X2_2119: u32 = 4238;
pub const Z_UTIL_X2_2120: u32 = 4240;
pub const Z_UTIL_X2_2121: u32 = 4242;
pub const Z_UTIL_X2_2122: u32 = 4244;
pub const Z_UTIL_X2_2123: u32 = 4246;
pub const Z_UTIL_X2_2124: u32 = 4248;
pub const Z_UTIL_X2_2125: u32 = 4250;
pub const Z_UTIL_X2_2126: u32 = 4252;
pub const Z_UTIL_X2_2127: u32 = 4254;
pub const Z_UTIL_X2_2128: u32 = 4256;
pub const Z_UTIL_X2_2129: u32 = 4258;
pub const Z_UTIL_X2_2130: u32 = 4260;
pub const Z_UTIL_X2_2131: u32 = 4262;
pub const Z_UTIL_X2_2132: u32 = 4264;
pub const Z_UTIL_X2_2133: u32 = 4266;
pub const Z_UTIL_X2_2134: u32 = 4268;
pub const Z_UTIL_X2_2135: u32 = 4270;
pub const Z_UTIL_X2_2136: u32 = 4272;
pub const Z_UTIL_X2_2137: u32 = 4274;
pub const Z_UTIL_X2_2138: u32 = 4276;
pub const Z_UTIL_X2_2139: u32 = 4278;
pub const Z_UTIL_X2_2140: u32 = 4280;
pub const Z_UTIL_X2_2141: u32 = 4282;
pub const Z_UTIL_X2_2142: u32 = 4284;
pub const Z_UTIL_X2_2143: u32 = 4286;
pub const Z_UTIL_X2_2144: u32 = 4288;
pub const Z_UTIL_X2_2145: u32 = 4290;
pub const Z_UTIL_X2_2146: u32 = 4292;
pub const Z_UTIL_X2_2147: u32 = 4294;
pub const Z_UTIL_X2_2148: u32 = 4296;
pub const Z_UTIL_X2_2149: u32 = 4298;
pub const Z_UTIL_X2_2150: u32 = 4300;
pub const Z_UTIL_X2_2151: u32 = 4302;
pub const Z_UTIL_X2_2152: u32 = 4304;
pub const Z_UTIL_X2_2153: u32 = 4306;
pub const Z_UTIL_X2_2154: u32 = 4308;
pub const Z_UTIL_X2_2155: u32 = 4310;
pub const Z_UTIL_X2_2156: u32 = 4312;
pub const Z_UTIL_X2_2157: u32 = 4314;
pub const Z_UTIL_X2_2158: u32 = 4316;
pub const Z_UTIL_X2_2159: u32 = 4318;
pub const Z_UTIL_X2_2160: u32 = 4320;
pub const Z_UTIL_X2_2161: u32 = 4322;
pub const Z_UTIL_X2_2162: u32 = 4324;
pub const Z_UTIL_X2_2163: u32 = 4326;
pub const Z_UTIL_X2_2164: u32 = 4328;
pub const Z_UTIL_X2_2165: u32 = 4330;
pub const Z_UTIL_X2_2166: u32 = 4332;
pub const Z_UTIL_X2_2167: u32 = 4334;
pub const Z_UTIL_X2_2168: u32 = 4336;
pub const Z_UTIL_X2_2169: u32 = 4338;
pub const Z_UTIL_X2_2170: u32 = 4340;
pub const Z_UTIL_X2_2171: u32 = 4342;
pub const Z_UTIL_X2_2172: u32 = 4344;
pub const Z_UTIL_X2_2173: u32 = 4346;
pub const Z_UTIL_X2_2174: u32 = 4348;
pub const Z_UTIL_X2_2175: u32 = 4350;
pub const Z_UTIL_X2_2176: u32 = 4352;
pub const Z_UTIL_X2_2177: u32 = 4354;
pub const Z_UTIL_X2_2178: u32 = 4356;
pub const Z_UTIL_X2_2179: u32 = 4358;
pub const Z_UTIL_X2_2180: u32 = 4360;
pub const Z_UTIL_X2_2181: u32 = 4362;
pub const Z_UTIL_X2_2182: u32 = 4364;
pub const Z_UTIL_X2_2183: u32 = 4366;
pub const Z_UTIL_X2_2184: u32 = 4368;
pub const Z_UTIL_X2_2185: u32 = 4370;
pub const Z_UTIL_X2_2186: u32 = 4372;
pub const Z_UTIL_X2_2187: u32 = 4374;
pub const Z_UTIL_X2_2188: u32 = 4376;
pub const Z_UTIL_X2_2189: u32 = 4378;
pub const Z_UTIL_X2_2190: u32 = 4380;
pub const Z_UTIL_X2_2191: u32 = 4382;
pub const Z_UTIL_X2_2192: u32 = 4384;
pub const Z_UTIL_X2_2193: u32 = 4386;
pub const Z_UTIL_X2_2194: u32 = 4388;
pub const Z_UTIL_X2_2195: u32 = 4390;
pub const Z_UTIL_X2_2196: u32 = 4392;
pub const Z_UTIL_X2_2197: u32 = 4394;
pub const Z_UTIL_X2_2198: u32 = 4396;
pub const Z_UTIL_X2_2199: u32 = 4398;
pub const Z_UTIL_X2_2200: u32 = 4400;
pub const Z_UTIL_X2_2201: u32 = 4402;
pub const Z_UTIL_X2_2202: u32 = 4404;
pub const Z_UTIL_X2_2203: u32 = 4406;
pub const Z_UTIL_X2_2204: u32 = 4408;
pub const Z_UTIL_X2_2205: u32 = 4410;
pub const Z_UTIL_X2_2206: u32 = 4412;
pub const Z_UTIL_X2_2207: u32 = 4414;
pub const Z_UTIL_X2_2208: u32 = 4416;
pub const Z_UTIL_X2_2209: u32 = 4418;
pub const Z_UTIL_X2_2210: u32 = 4420;
pub const Z_UTIL_X2_2211: u32 = 4422;
pub const Z_UTIL_X2_2212: u32 = 4424;
pub const Z_UTIL_X2_2213: u32 = 4426;
pub const Z_UTIL_X2_2214: u32 = 4428;
pub const Z_UTIL_X2_2215: u32 = 4430;
pub const Z_UTIL_X2_2216: u32 = 4432;
pub const Z_UTIL_X2_2217: u32 = 4434;
pub const Z_UTIL_X2_2218: u32 = 4436;
pub const Z_UTIL_X2_2219: u32 = 4438;
pub const Z_UTIL_X2_2220: u32 = 4440;
pub const Z_UTIL_X2_2221: u32 = 4442;
pub const Z_UTIL_X2_2222: u32 = 4444;
pub const Z_UTIL_X2_2223: u32 = 4446;
pub const Z_UTIL_X2_2224: u32 = 4448;
pub const Z_UTIL_X2_2225: u32 = 4450;
pub const Z_UTIL_X2_2226: u32 = 4452;
pub const Z_UTIL_X2_2227: u32 = 4454;
pub const Z_UTIL_X2_2228: u32 = 4456;
pub const Z_UTIL_X2_2229: u32 = 4458;
pub const Z_UTIL_X2_2230: u32 = 4460;
pub const Z_UTIL_X2_2231: u32 = 4462;
pub const Z_UTIL_X2_2232: u32 = 4464;
pub const Z_UTIL_X2_2233: u32 = 4466;
pub const Z_UTIL_X2_2234: u32 = 4468;
pub const Z_UTIL_X2_2235: u32 = 4470;
pub const Z_UTIL_X2_2236: u32 = 4472;
pub const Z_UTIL_X2_2237: u32 = 4474;
pub const Z_UTIL_X2_2238: u32 = 4476;
pub const Z_UTIL_X2_2239: u32 = 4478;
pub const Z_UTIL_X2_2240: u32 = 4480;
pub const Z_UTIL_X2_2241: u32 = 4482;
pub const Z_UTIL_X2_2242: u32 = 4484;
pub const Z_UTIL_X2_2243: u32 = 4486;
pub const Z_UTIL_X2_2244: u32 = 4488;
pub const Z_UTIL_X2_2245: u32 = 4490;
pub const Z_UTIL_X2_2246: u32 = 4492;
pub const Z_UTIL_X2_2247: u32 = 4494;
pub const Z_UTIL_X2_2248: u32 = 4496;
pub const Z_UTIL_X2_2249: u32 = 4498;
pub const Z_UTIL_X2_2250: u32 = 4500;
pub const Z_UTIL_X2_2251: u32 = 4502;
pub const Z_UTIL_X2_2252: u32 = 4504;
pub const Z_UTIL_X2_2253: u32 = 4506;
pub const Z_UTIL_X2_2254: u32 = 4508;
pub const Z_UTIL_X2_2255: u32 = 4510;
pub const Z_UTIL_X2_2256: u32 = 4512;
pub const Z_UTIL_X2_2257: u32 = 4514;
pub const Z_UTIL_X2_2258: u32 = 4516;
pub const Z_UTIL_X2_2259: u32 = 4518;
pub const Z_UTIL_X2_2260: u32 = 4520;
pub const Z_UTIL_X2_2261: u32 = 4522;
pub const Z_UTIL_X2_2262: u32 = 4524;
pub const Z_UTIL_X2_2263: u32 = 4526;
pub const Z_UTIL_X2_2264: u32 = 4528;
pub const Z_UTIL_X2_2265: u32 = 4530;
pub const Z_UTIL_X2_2266: u32 = 4532;
pub const Z_UTIL_X2_2267: u32 = 4534;
pub const Z_UTIL_X2_2268: u32 = 4536;
pub const Z_UTIL_X2_2269: u32 = 4538;
pub const Z_UTIL_X2_2270: u32 = 4540;
pub const Z_UTIL_X2_2271: u32 = 4542;
pub const Z_UTIL_X2_2272: u32 = 4544;
pub const Z_UTIL_X2_2273: u32 = 4546;
pub const Z_UTIL_X2_2274: u32 = 4548;
pub const Z_UTIL_X2_2275: u32 = 4550;
pub const Z_UTIL_X2_2276: u32 = 4552;
pub const Z_UTIL_X2_2277: u32 = 4554;
pub const Z_UTIL_X2_2278: u32 = 4556;
pub const Z_UTIL_X2_2279: u32 = 4558;
pub const Z_UTIL_X2_2280: u32 = 4560;
pub const Z_UTIL_X2_2281: u32 = 4562;
pub const Z_UTIL_X2_2282: u32 = 4564;
pub const Z_UTIL_X2_2283: u32 = 4566;
pub const Z_UTIL_X2_2284: u32 = 4568;
pub const Z_UTIL_X2_2285: u32 = 4570;
pub const Z_UTIL_X2_2286: u32 = 4572;
pub const Z_UTIL_X2_2287: u32 = 4574;
pub const Z_UTIL_X2_2288: u32 = 4576;
pub const Z_UTIL_X2_2289: u32 = 4578;
pub const Z_UTIL_X2_2290: u32 = 4580;
pub const Z_UTIL_X2_2291: u32 = 4582;
pub const Z_UTIL_X2_2292: u32 = 4584;
pub const Z_UTIL_X2_2293: u32 = 4586;
pub const Z_UTIL_X2_2294: u32 = 4588;
pub const Z_UTIL_X2_2295: u32 = 4590;
pub const Z_UTIL_X2_2296: u32 = 4592;
pub const Z_UTIL_X2_2297: u32 = 4594;
pub const Z_UTIL_X2_2298: u32 = 4596;
pub const Z_UTIL_X2_2299: u32 = 4598;
pub const Z_UTIL_X2_2300: u32 = 4600;
pub const Z_UTIL_X2_2301: u32 = 4602;
pub const Z_UTIL_X2_2302: u32 = 4604;
pub const Z_UTIL_X2_2303: u32 = 4606;
pub const Z_UTIL_X2_2304: u32 = 4608;
pub const Z_UTIL_X2_2305: u32 = 4610;
pub const Z_UTIL_X2_2306: u32 = 4612;
pub const Z_UTIL_X2_2307: u32 = 4614;
pub const Z_UTIL_X2_2308: u32 = 4616;
pub const Z_UTIL_X2_2309: u32 = 4618;
pub const Z_UTIL_X2_2310: u32 = 4620;
pub const Z_UTIL_X2_2311: u32 = 4622;
pub const Z_UTIL_X2_2312: u32 = 4624;
pub const Z_UTIL_X2_2313: u32 = 4626;
pub const Z_UTIL_X2_2314: u32 = 4628;
pub const Z_UTIL_X2_2315: u32 = 4630;
pub const Z_UTIL_X2_2316: u32 = 4632;
pub const Z_UTIL_X2_2317: u32 = 4634;
pub const Z_UTIL_X2_2318: u32 = 4636;
pub const Z_UTIL_X2_2319: u32 = 4638;
pub const Z_UTIL_X2_2320: u32 = 4640;
pub const Z_UTIL_X2_2321: u32 = 4642;
pub const Z_UTIL_X2_2322: u32 = 4644;
pub const Z_UTIL_X2_2323: u32 = 4646;
pub const Z_UTIL_X2_2324: u32 = 4648;
pub const Z_UTIL_X2_2325: u32 = 4650;
pub const Z_UTIL_X2_2326: u32 = 4652;
pub const Z_UTIL_X2_2327: u32 = 4654;
pub const Z_UTIL_X2_2328: u32 = 4656;
pub const Z_UTIL_X2_2329: u32 = 4658;
pub const Z_UTIL_X2_2330: u32 = 4660;
pub const Z_UTIL_X2_2331: u32 = 4662;
pub const Z_UTIL_X2_2332: u32 = 4664;
pub const Z_UTIL_X2_2333: u32 = 4666;
pub const Z_UTIL_X2_2334: u32 = 4668;
pub const Z_UTIL_X2_2335: u32 = 4670;
pub const Z_UTIL_X2_2336: u32 = 4672;
pub const Z_UTIL_X2_2337: u32 = 4674;
pub const Z_UTIL_X2_2338: u32 = 4676;
pub const Z_UTIL_X2_2339: u32 = 4678;
pub const Z_UTIL_X2_2340: u32 = 4680;
pub const Z_UTIL_X2_2341: u32 = 4682;
pub const Z_UTIL_X2_2342: u32 = 4684;
pub const Z_UTIL_X2_2343: u32 = 4686;
pub const Z_UTIL_X2_2344: u32 = 4688;
pub const Z_UTIL_X2_2345: u32 = 4690;
pub const Z_UTIL_X2_2346: u32 = 4692;
pub const Z_UTIL_X2_2347: u32 = 4694;
pub const Z_UTIL_X2_2348: u32 = 4696;
pub const Z_UTIL_X2_2349: u32 = 4698;
pub const Z_UTIL_X2_2350: u32 = 4700;
pub const Z_UTIL_X2_2351: u32 = 4702;
pub const Z_UTIL_X2_2352: u32 = 4704;
pub const Z_UTIL_X2_2353: u32 = 4706;
pub const Z_UTIL_X2_2354: u32 = 4708;
pub const Z_UTIL_X2_2355: u32 = 4710;
pub const Z_UTIL_X2_2356: u32 = 4712;
pub const Z_UTIL_X2_2357: u32 = 4714;
pub const Z_UTIL_X2_2358: u32 = 4716;
pub const Z_UTIL_X2_2359: u32 = 4718;
pub const Z_UTIL_X2_2360: u32 = 4720;
pub const Z_UTIL_X2_2361: u32 = 4722;
pub const Z_UTIL_X2_2362: u32 = 4724;
pub const Z_UTIL_X2_2363: u32 = 4726;
pub const Z_UTIL_X2_2364: u32 = 4728;
pub const Z_UTIL_X2_2365: u32 = 4730;
pub const Z_UTIL_X2_2366: u32 = 4732;
pub const Z_UTIL_X2_2367: u32 = 4734;
pub const Z_UTIL_X2_2368: u32 = 4736;
pub const Z_UTIL_X2_2369: u32 = 4738;
pub const Z_UTIL_X2_2370: u32 = 4740;
pub const Z_UTIL_X2_2371: u32 = 4742;
pub const Z_UTIL_X2_2372: u32 = 4744;
pub const Z_UTIL_X2_2373: u32 = 4746;
pub const Z_UTIL_X2_2374: u32 = 4748;
pub const Z_UTIL_X2_2375: u32 = 4750;
pub const Z_UTIL_X2_2376: u32 = 4752;
pub const Z_UTIL_X2_2377: u32 = 4754;
pub const Z_UTIL_X2_2378: u32 = 4756;
pub const Z_UTIL_X2_2379: u32 = 4758;
pub const Z_UTIL_X2_2380: u32 = 4760;
pub const Z_UTIL_X2_2381: u32 = 4762;
pub const Z_UTIL_X2_2382: u32 = 4764;
pub const Z_UTIL_X2_2383: u32 = 4766;
pub const Z_UTIL_X2_2384: u32 = 4768;
pub const Z_UTIL_X2_2385: u32 = 4770;
pub const Z_UTIL_X2_2386: u32 = 4772;
pub const Z_UTIL_X2_2387: u32 = 4774;
pub const Z_UTIL_X2_2388: u32 = 4776;
pub const Z_UTIL_X2_2389: u32 = 4778;
pub const Z_UTIL_X2_2390: u32 = 4780;
pub const Z_UTIL_X2_2391: u32 = 4782;
pub const Z_UTIL_X2_2392: u32 = 4784;
pub const Z_UTIL_X2_2393: u32 = 4786;
pub const Z_UTIL_X2_2394: u32 = 4788;
pub const Z_UTIL_X2_2395: u32 = 4790;
pub const Z_UTIL_X2_2396: u32 = 4792;
pub const Z_UTIL_X2_2397: u32 = 4794;
pub const Z_UTIL_X2_2398: u32 = 4796;
pub const Z_UTIL_X2_2399: u32 = 4798;
pub const Z_UTIL_X2_2400: u32 = 4800;
pub const Z_UTIL_X2_2401: u32 = 4802;
pub const Z_UTIL_X2_2402: u32 = 4804;
pub const Z_UTIL_X2_2403: u32 = 4806;
pub const Z_UTIL_X2_2404: u32 = 4808;
pub const Z_UTIL_X2_2405: u32 = 4810;
pub const Z_UTIL_X2_2406: u32 = 4812;
pub const Z_UTIL_X2_2407: u32 = 4814;
pub const Z_UTIL_X2_2408: u32 = 4816;
pub const Z_UTIL_X2_2409: u32 = 4818;
pub const Z_UTIL_X2_2410: u32 = 4820;
pub const Z_UTIL_X2_2411: u32 = 4822;
pub const Z_UTIL_X2_2412: u32 = 4824;
pub const Z_UTIL_X2_2413: u32 = 4826;
pub const Z_UTIL_X2_2414: u32 = 4828;
pub const Z_UTIL_X2_2415: u32 = 4830;
pub const Z_UTIL_X2_2416: u32 = 4832;
pub const Z_UTIL_X2_2417: u32 = 4834;
pub const Z_UTIL_X2_2418: u32 = 4836;
pub const Z_UTIL_X2_2419: u32 = 4838;
pub const Z_UTIL_X2_2420: u32 = 4840;
pub const Z_UTIL_X2_2421: u32 = 4842;
pub const Z_UTIL_X2_2422: u32 = 4844;
pub const Z_UTIL_X2_2423: u32 = 4846;
pub const Z_UTIL_X2_2424: u32 = 4848;
pub const Z_UTIL_X2_2425: u32 = 4850;
pub const Z_UTIL_X2_2426: u32 = 4852;
pub const Z_UTIL_X2_2427: u32 = 4854;
pub const Z_UTIL_X2_2428: u32 = 4856;
pub const Z_UTIL_X2_2429: u32 = 4858;
pub const Z_UTIL_X2_2430: u32 = 4860;
pub const Z_UTIL_X2_2431: u32 = 4862;
pub const Z_UTIL_X2_2432: u32 = 4864;
pub const Z_UTIL_X2_2433: u32 = 4866;
pub const Z_UTIL_X2_2434: u32 = 4868;
pub const Z_UTIL_X2_2435: u32 = 4870;
pub const Z_UTIL_X2_2436: u32 = 4872;
pub const Z_UTIL_X2_2437: u32 = 4874;
pub const Z_UTIL_X2_2438: u32 = 4876;
pub const Z_UTIL_X2_2439: u32 = 4878;
pub const Z_UTIL_X2_2440: u32 = 4880;
pub const Z_UTIL_X2_2441: u32 = 4882;
pub const Z_UTIL_X2_2442: u32 = 4884;
pub const Z_UTIL_X2_2443: u32 = 4886;
pub const Z_UTIL_X2_2444: u32 = 4888;
pub const Z_UTIL_X2_2445: u32 = 4890;
pub const Z_UTIL_X2_2446: u32 = 4892;
pub const Z_UTIL_X2_2447: u32 = 4894;
pub const Z_UTIL_X2_2448: u32 = 4896;
pub const Z_UTIL_X2_2449: u32 = 4898;
pub const Z_UTIL_X2_2450: u32 = 4900;
pub const Z_UTIL_X2_2451: u32 = 4902;
pub const Z_UTIL_X2_2452: u32 = 4904;
pub const Z_UTIL_X2_2453: u32 = 4906;
pub const Z_UTIL_X2_2454: u32 = 4908;
pub const Z_UTIL_X2_2455: u32 = 4910;
pub const Z_UTIL_X2_2456: u32 = 4912;
pub const Z_UTIL_X2_2457: u32 = 4914;
pub const Z_UTIL_X2_2458: u32 = 4916;
pub const Z_UTIL_X2_2459: u32 = 4918;
pub const Z_UTIL_X2_2460: u32 = 4920;
pub const Z_UTIL_X2_2461: u32 = 4922;
pub const Z_UTIL_X2_2462: u32 = 4924;
pub const Z_UTIL_X2_2463: u32 = 4926;
pub const Z_UTIL_X2_2464: u32 = 4928;
pub const Z_UTIL_X2_2465: u32 = 4930;
pub const Z_UTIL_X2_2466: u32 = 4932;
pub const Z_UTIL_X2_2467: u32 = 4934;
pub const Z_UTIL_X2_2468: u32 = 4936;
pub const Z_UTIL_X2_2469: u32 = 4938;
pub const Z_UTIL_X2_2470: u32 = 4940;
pub const Z_UTIL_X2_2471: u32 = 4942;
pub const Z_UTIL_X2_2472: u32 = 4944;
pub const Z_UTIL_X2_2473: u32 = 4946;
pub const Z_UTIL_X2_2474: u32 = 4948;
pub const Z_UTIL_X2_2475: u32 = 4950;
pub const Z_UTIL_X2_2476: u32 = 4952;
pub const Z_UTIL_X2_2477: u32 = 4954;
pub const Z_UTIL_X2_2478: u32 = 4956;
pub const Z_UTIL_X2_2479: u32 = 4958;
pub const Z_UTIL_X2_2480: u32 = 4960;
pub const Z_UTIL_X2_2481: u32 = 4962;
pub const Z_UTIL_X2_2482: u32 = 4964;
pub const Z_UTIL_X2_2483: u32 = 4966;
pub const Z_UTIL_X2_2484: u32 = 4968;
pub const Z_UTIL_X2_2485: u32 = 4970;
pub const Z_UTIL_X2_2486: u32 = 4972;
pub const Z_UTIL_X2_2487: u32 = 4974;
pub const Z_UTIL_X2_2488: u32 = 4976;
pub const Z_UTIL_X2_2489: u32 = 4978;
pub const Z_UTIL_X2_2490: u32 = 4980;
pub const Z_UTIL_X2_2491: u32 = 4982;
pub const Z_UTIL_X2_2492: u32 = 4984;
pub const Z_UTIL_X2_2493: u32 = 4986;
pub const Z_UTIL_X2_2494: u32 = 4988;
pub const Z_UTIL_X2_2495: u32 = 4990;
pub const Z_UTIL_X2_2496: u32 = 4992;
pub const Z_UTIL_X2_2497: u32 = 4994;
pub const Z_UTIL_X2_2498: u32 = 4996;
pub const Z_UTIL_X2_2499: u32 = 4998;
pub const Z_UTIL_X2_2500: u32 = 5000;
pub const Z_UTIL_X2_2501: u32 = 5002;
pub const Z_UTIL_X2_2502: u32 = 5004;
pub const Z_UTIL_X2_2503: u32 = 5006;
pub const Z_UTIL_X2_2504: u32 = 5008;
pub const Z_UTIL_X2_2505: u32 = 5010;
pub const Z_UTIL_X2_2506: u32 = 5012;
pub const Z_UTIL_X2_2507: u32 = 5014;
pub const Z_UTIL_X2_2508: u32 = 5016;
pub const Z_UTIL_X2_2509: u32 = 5018;
pub const Z_UTIL_X2_2510: u32 = 5020;
pub const Z_UTIL_X2_2511: u32 = 5022;
pub const Z_UTIL_X2_2512: u32 = 5024;
pub const Z_UTIL_X2_2513: u32 = 5026;
pub const Z_UTIL_X2_2514: u32 = 5028;
pub const Z_UTIL_X2_2515: u32 = 5030;
pub const Z_UTIL_X2_2516: u32 = 5032;
pub const Z_UTIL_X2_2517: u32 = 5034;
pub const Z_UTIL_X2_2518: u32 = 5036;
pub const Z_UTIL_X2_2519: u32 = 5038;
pub const Z_UTIL_X2_2520: u32 = 5040;
pub const Z_UTIL_X2_2521: u32 = 5042;
pub const Z_UTIL_X2_2522: u32 = 5044;
pub const Z_UTIL_X2_2523: u32 = 5046;
pub const Z_UTIL_X2_2524: u32 = 5048;
pub const Z_UTIL_X2_2525: u32 = 5050;
pub const Z_UTIL_X2_2526: u32 = 5052;
pub const Z_UTIL_X2_2527: u32 = 5054;
pub const Z_UTIL_X2_2528: u32 = 5056;
pub const Z_UTIL_X2_2529: u32 = 5058;
pub const Z_UTIL_X2_2530: u32 = 5060;
pub const Z_UTIL_X2_2531: u32 = 5062;
pub const Z_UTIL_X2_2532: u32 = 5064;
pub const Z_UTIL_X2_2533: u32 = 5066;
pub const Z_UTIL_X2_2534: u32 = 5068;
pub const Z_UTIL_X2_2535: u32 = 5070;
pub const Z_UTIL_X2_2536: u32 = 5072;
pub const Z_UTIL_X2_2537: u32 = 5074;
pub const Z_UTIL_X2_2538: u32 = 5076;
pub const Z_UTIL_X2_2539: u32 = 5078;
pub const Z_UTIL_X2_2540: u32 = 5080;
pub const Z_UTIL_X2_2541: u32 = 5082;
pub const Z_UTIL_X2_2542: u32 = 5084;
pub const Z_UTIL_X2_2543: u32 = 5086;
pub const Z_UTIL_X2_2544: u32 = 5088;
pub const Z_UTIL_X2_2545: u32 = 5090;
pub const Z_UTIL_X2_2546: u32 = 5092;
pub const Z_UTIL_X2_2547: u32 = 5094;
pub const Z_UTIL_X2_2548: u32 = 5096;
pub const Z_UTIL_X2_2549: u32 = 5098;
pub const Z_UTIL_X2_2550: u32 = 5100;
pub const Z_UTIL_X2_2551: u32 = 5102;
pub const Z_UTIL_X2_2552: u32 = 5104;
pub const Z_UTIL_X2_2553: u32 = 5106;
pub const Z_UTIL_X2_2554: u32 = 5108;
pub const Z_UTIL_X2_2555: u32 = 5110;
pub const Z_UTIL_X2_2556: u32 = 5112;
pub const Z_UTIL_X2_2557: u32 = 5114;
pub const Z_UTIL_X2_2558: u32 = 5116;
pub const Z_UTIL_X2_2559: u32 = 5118;
pub const Z_UTIL_X2_2560: u32 = 5120;
pub const Z_UTIL_X2_2561: u32 = 5122;
pub const Z_UTIL_X2_2562: u32 = 5124;
pub const Z_UTIL_X2_2563: u32 = 5126;
pub const Z_UTIL_X2_2564: u32 = 5128;
pub const Z_UTIL_X2_2565: u32 = 5130;
pub const Z_UTIL_X2_2566: u32 = 5132;
pub const Z_UTIL_X2_2567: u32 = 5134;
pub const Z_UTIL_X2_2568: u32 = 5136;
pub const Z_UTIL_X2_2569: u32 = 5138;
pub const Z_UTIL_X2_2570: u32 = 5140;
pub const Z_UTIL_X2_2571: u32 = 5142;
pub const Z_UTIL_X2_2572: u32 = 5144;
pub const Z_UTIL_X2_2573: u32 = 5146;
pub const Z_UTIL_X2_2574: u32 = 5148;
pub const Z_UTIL_X2_2575: u32 = 5150;
pub const Z_UTIL_X2_2576: u32 = 5152;
pub const Z_UTIL_X2_2577: u32 = 5154;
pub const Z_UTIL_X2_2578: u32 = 5156;
pub const Z_UTIL_X2_2579: u32 = 5158;
pub const Z_UTIL_X2_2580: u32 = 5160;
pub const Z_UTIL_X2_2581: u32 = 5162;
pub const Z_UTIL_X2_2582: u32 = 5164;
pub const Z_UTIL_X2_2583: u32 = 5166;
pub const Z_UTIL_X2_2584: u32 = 5168;
pub const Z_UTIL_X2_2585: u32 = 5170;
pub const Z_UTIL_X2_2586: u32 = 5172;
pub const Z_UTIL_X2_2587: u32 = 5174;
pub const Z_UTIL_X2_2588: u32 = 5176;
pub const Z_UTIL_X2_2589: u32 = 5178;
pub const Z_UTIL_X2_2590: u32 = 5180;
pub const Z_UTIL_X2_2591: u32 = 5182;
pub const Z_UTIL_X2_2592: u32 = 5184;
pub const Z_UTIL_X2_2593: u32 = 5186;
pub const Z_UTIL_X2_2594: u32 = 5188;
pub const Z_UTIL_X2_2595: u32 = 5190;
pub const Z_UTIL_X2_2596: u32 = 5192;
pub const Z_UTIL_X2_2597: u32 = 5194;
pub const Z_UTIL_X2_2598: u32 = 5196;
pub const Z_UTIL_X2_2599: u32 = 5198;
pub const Z_UTIL_X2_2600: u32 = 5200;
pub const Z_UTIL_X2_2601: u32 = 5202;
pub const Z_UTIL_X2_2602: u32 = 5204;
pub const Z_UTIL_X2_2603: u32 = 5206;
pub const Z_UTIL_X2_2604: u32 = 5208;
pub const Z_UTIL_X2_2605: u32 = 5210;
pub const Z_UTIL_X2_2606: u32 = 5212;
pub const Z_UTIL_X2_2607: u32 = 5214;
pub const Z_UTIL_X2_2608: u32 = 5216;
pub const Z_UTIL_X2_2609: u32 = 5218;
pub const Z_UTIL_X2_2610: u32 = 5220;
pub const Z_UTIL_X2_2611: u32 = 5222;
pub const Z_UTIL_X2_2612: u32 = 5224;
pub const Z_UTIL_X2_2613: u32 = 5226;
pub const Z_UTIL_X2_2614: u32 = 5228;
pub const Z_UTIL_X2_2615: u32 = 5230;
pub const Z_UTIL_X2_2616: u32 = 5232;
pub const Z_UTIL_X2_2617: u32 = 5234;
pub const Z_UTIL_X2_2618: u32 = 5236;
pub const Z_UTIL_X2_2619: u32 = 5238;
pub const Z_UTIL_X2_2620: u32 = 5240;
pub const Z_UTIL_X2_2621: u32 = 5242;
pub const Z_UTIL_X2_2622: u32 = 5244;
pub const Z_UTIL_X2_2623: u32 = 5246;
pub const Z_UTIL_X2_2624: u32 = 5248;
pub const Z_UTIL_X2_2625: u32 = 5250;
pub const Z_UTIL_X2_2626: u32 = 5252;
pub const Z_UTIL_X2_2627: u32 = 5254;
pub const Z_UTIL_X2_2628: u32 = 5256;
pub const Z_UTIL_X2_2629: u32 = 5258;
pub const Z_UTIL_X2_2630: u32 = 5260;
pub const Z_UTIL_X2_2631: u32 = 5262;
pub const Z_UTIL_X2_2632: u32 = 5264;
pub const Z_UTIL_X2_2633: u32 = 5266;
pub const Z_UTIL_X2_2634: u32 = 5268;
pub const Z_UTIL_X2_2635: u32 = 5270;
pub const Z_UTIL_X2_2636: u32 = 5272;
pub const Z_UTIL_X2_2637: u32 = 5274;
pub const Z_UTIL_X2_2638: u32 = 5276;
pub const Z_UTIL_X2_2639: u32 = 5278;
pub const Z_UTIL_X2_2640: u32 = 5280;
pub const Z_UTIL_X2_2641: u32 = 5282;
pub const Z_UTIL_X2_2642: u32 = 5284;
pub const Z_UTIL_X2_2643: u32 = 5286;
pub const Z_UTIL_X2_2644: u32 = 5288;
pub const Z_UTIL_X2_2645: u32 = 5290;
pub const Z_UTIL_X2_2646: u32 = 5292;
pub const Z_UTIL_X2_2647: u32 = 5294;
pub const Z_UTIL_X2_2648: u32 = 5296;
pub const Z_UTIL_X2_2649: u32 = 5298;
pub const Z_UTIL_X2_2650: u32 = 5300;
pub const Z_UTIL_X2_2651: u32 = 5302;
pub const Z_UTIL_X2_2652: u32 = 5304;
pub const Z_UTIL_X2_2653: u32 = 5306;
pub const Z_UTIL_X2_2654: u32 = 5308;
pub const Z_UTIL_X2_2655: u32 = 5310;
pub const Z_UTIL_X2_2656: u32 = 5312;
pub const Z_UTIL_X2_2657: u32 = 5314;
pub const Z_UTIL_X2_2658: u32 = 5316;
pub const Z_UTIL_X2_2659: u32 = 5318;
pub const Z_UTIL_X2_2660: u32 = 5320;
pub const Z_UTIL_X2_2661: u32 = 5322;
pub const Z_UTIL_X2_2662: u32 = 5324;
pub const Z_UTIL_X2_2663: u32 = 5326;
pub const Z_UTIL_X2_2664: u32 = 5328;
pub const Z_UTIL_X2_2665: u32 = 5330;
pub const Z_UTIL_X2_2666: u32 = 5332;
pub const Z_UTIL_X2_2667: u32 = 5334;
pub const Z_UTIL_X2_2668: u32 = 5336;
pub const Z_UTIL_X2_2669: u32 = 5338;
pub const Z_UTIL_X2_2670: u32 = 5340;
pub const Z_UTIL_X2_2671: u32 = 5342;
pub const Z_UTIL_X2_2672: u32 = 5344;
pub const Z_UTIL_X2_2673: u32 = 5346;
pub const Z_UTIL_X2_2674: u32 = 5348;
pub const Z_UTIL_X2_2675: u32 = 5350;
pub const Z_UTIL_X2_2676: u32 = 5352;
pub const Z_UTIL_X2_2677: u32 = 5354;
pub const Z_UTIL_X2_2678: u32 = 5356;
pub const Z_UTIL_X2_2679: u32 = 5358;
pub const Z_UTIL_X2_2680: u32 = 5360;
pub const Z_UTIL_X2_2681: u32 = 5362;
pub const Z_UTIL_X2_2682: u32 = 5364;
pub const Z_UTIL_X2_2683: u32 = 5366;
pub const Z_UTIL_X2_2684: u32 = 5368;
pub const Z_UTIL_X2_2685: u32 = 5370;
pub const Z_UTIL_X2_2686: u32 = 5372;
pub const Z_UTIL_X2_2687: u32 = 5374;
pub const Z_UTIL_X2_2688: u32 = 5376;
pub const Z_UTIL_X2_2689: u32 = 5378;
pub const Z_UTIL_X2_2690: u32 = 5380;
pub const Z_UTIL_X2_2691: u32 = 5382;
pub const Z_UTIL_X2_2692: u32 = 5384;
pub const Z_UTIL_X2_2693: u32 = 5386;
pub const Z_UTIL_X2_2694: u32 = 5388;
pub const Z_UTIL_X2_2695: u32 = 5390;
pub const Z_UTIL_X2_2696: u32 = 5392;
pub const Z_UTIL_X2_2697: u32 = 5394;
pub const Z_UTIL_X2_2698: u32 = 5396;
pub const Z_UTIL_X2_2699: u32 = 5398;
pub const Z_UTIL_X2_2700: u32 = 5400;
pub const Z_UTIL_X2_2701: u32 = 5402;
pub const Z_UTIL_X2_2702: u32 = 5404;
pub const Z_UTIL_X2_2703: u32 = 5406;
pub const Z_UTIL_X2_2704: u32 = 5408;
pub const Z_UTIL_X2_2705: u32 = 5410;
pub const Z_UTIL_X2_2706: u32 = 5412;
pub const Z_UTIL_X2_2707: u32 = 5414;
pub const Z_UTIL_X2_2708: u32 = 5416;
pub const Z_UTIL_X2_2709: u32 = 5418;
pub const Z_UTIL_X2_2710: u32 = 5420;
pub const Z_UTIL_X2_2711: u32 = 5422;
pub const Z_UTIL_X2_2712: u32 = 5424;
pub const Z_UTIL_X2_2713: u32 = 5426;
pub const Z_UTIL_X2_2714: u32 = 5428;
pub const Z_UTIL_X2_2715: u32 = 5430;
pub const Z_UTIL_X2_2716: u32 = 5432;
pub const Z_UTIL_X2_2717: u32 = 5434;
pub const Z_UTIL_X2_2718: u32 = 5436;
pub const Z_UTIL_X2_2719: u32 = 5438;
pub const Z_UTIL_X2_2720: u32 = 5440;
pub const Z_UTIL_X2_2721: u32 = 5442;
pub const Z_UTIL_X2_2722: u32 = 5444;
pub const Z_UTIL_X2_2723: u32 = 5446;
pub const Z_UTIL_X2_2724: u32 = 5448;
pub const Z_UTIL_X2_2725: u32 = 5450;
pub const Z_UTIL_X2_2726: u32 = 5452;
pub const Z_UTIL_X2_2727: u32 = 5454;
pub const Z_UTIL_X2_2728: u32 = 5456;
pub const Z_UTIL_X2_2729: u32 = 5458;
pub const Z_UTIL_X2_2730: u32 = 5460;
pub const Z_UTIL_X2_2731: u32 = 5462;
pub const Z_UTIL_X2_2732: u32 = 5464;
pub const Z_UTIL_X2_2733: u32 = 5466;
pub const Z_UTIL_X2_2734: u32 = 5468;
pub const Z_UTIL_X2_2735: u32 = 5470;
pub const Z_UTIL_X2_2736: u32 = 5472;
pub const Z_UTIL_X2_2737: u32 = 5474;
pub const Z_UTIL_X2_2738: u32 = 5476;
pub const Z_UTIL_X2_2739: u32 = 5478;
pub const Z_UTIL_X2_2740: u32 = 5480;
pub const Z_UTIL_X2_2741: u32 = 5482;
pub const Z_UTIL_X2_2742: u32 = 5484;
pub const Z_UTIL_X2_2743: u32 = 5486;
pub const Z_UTIL_X2_2744: u32 = 5488;
pub const Z_UTIL_X2_2745: u32 = 5490;
pub const Z_UTIL_X2_2746: u32 = 5492;
pub const Z_UTIL_X2_2747: u32 = 5494;
pub const Z_UTIL_X2_2748: u32 = 5496;
pub const Z_UTIL_X2_2749: u32 = 5498;
pub const Z_UTIL_X2_2750: u32 = 5500;
pub const Z_UTIL_X2_2751: u32 = 5502;
pub const Z_UTIL_X2_2752: u32 = 5504;
pub const Z_UTIL_X2_2753: u32 = 5506;
pub const Z_UTIL_X2_2754: u32 = 5508;
pub const Z_UTIL_X2_2755: u32 = 5510;
pub const Z_UTIL_X2_2756: u32 = 5512;
pub const Z_UTIL_X2_2757: u32 = 5514;
pub const Z_UTIL_X2_2758: u32 = 5516;
pub const Z_UTIL_X2_2759: u32 = 5518;
pub const Z_UTIL_X2_2760: u32 = 5520;
pub const Z_UTIL_X2_2761: u32 = 5522;
pub const Z_UTIL_X2_2762: u32 = 5524;
pub const Z_UTIL_X2_2763: u32 = 5526;
pub const Z_UTIL_X2_2764: u32 = 5528;
pub const Z_UTIL_X2_2765: u32 = 5530;
pub const Z_UTIL_X2_2766: u32 = 5532;
pub const Z_UTIL_X2_2767: u32 = 5534;
pub const Z_UTIL_X2_2768: u32 = 5536;
pub const Z_UTIL_X2_2769: u32 = 5538;
pub const Z_UTIL_X2_2770: u32 = 5540;
pub const Z_UTIL_X2_2771: u32 = 5542;
pub const Z_UTIL_X2_2772: u32 = 5544;
pub const Z_UTIL_X2_2773: u32 = 5546;
pub const Z_UTIL_X2_2774: u32 = 5548;
pub const Z_UTIL_X2_2775: u32 = 5550;
pub const Z_UTIL_X2_2776: u32 = 5552;
pub const Z_UTIL_X2_2777: u32 = 5554;
pub const Z_UTIL_X2_2778: u32 = 5556;
pub const Z_UTIL_X2_2779: u32 = 5558;
pub const Z_UTIL_X2_2780: u32 = 5560;
pub const Z_UTIL_X2_2781: u32 = 5562;
pub const Z_UTIL_X2_2782: u32 = 5564;
pub const Z_UTIL_X2_2783: u32 = 5566;
pub const Z_UTIL_X2_2784: u32 = 5568;
pub const Z_UTIL_X2_2785: u32 = 5570;
pub const Z_UTIL_X2_2786: u32 = 5572;
pub const Z_UTIL_X2_2787: u32 = 5574;
pub const Z_UTIL_X2_2788: u32 = 5576;
pub const Z_UTIL_X2_2789: u32 = 5578;
pub const Z_UTIL_X2_2790: u32 = 5580;
pub const Z_UTIL_X2_2791: u32 = 5582;
pub const Z_UTIL_X2_2792: u32 = 5584;
pub const Z_UTIL_X2_2793: u32 = 5586;
pub const Z_UTIL_X2_2794: u32 = 5588;
pub const Z_UTIL_X2_2795: u32 = 5590;
pub const Z_UTIL_X2_2796: u32 = 5592;
pub const Z_UTIL_X2_2797: u32 = 5594;
pub const Z_UTIL_X2_2798: u32 = 5596;
pub const Z_UTIL_X2_2799: u32 = 5598;
pub const Z_UTIL_X2_2800: u32 = 5600;
pub const Z_UTIL_X2_2801: u32 = 5602;
pub const Z_UTIL_X2_2802: u32 = 5604;
pub const Z_UTIL_X2_2803: u32 = 5606;
pub const Z_UTIL_X2_2804: u32 = 5608;
pub const Z_UTIL_X2_2805: u32 = 5610;
pub const Z_UTIL_X2_2806: u32 = 5612;
pub const Z_UTIL_X2_2807: u32 = 5614;
pub const Z_UTIL_X2_2808: u32 = 5616;
pub const Z_UTIL_X2_2809: u32 = 5618;
pub const Z_UTIL_X2_2810: u32 = 5620;
pub const Z_UTIL_X2_2811: u32 = 5622;
pub const Z_UTIL_X2_2812: u32 = 5624;
pub const Z_UTIL_X2_2813: u32 = 5626;
pub const Z_UTIL_X2_2814: u32 = 5628;
pub const Z_UTIL_X2_2815: u32 = 5630;
pub const Z_UTIL_X2_2816: u32 = 5632;
pub const Z_UTIL_X2_2817: u32 = 5634;
pub const Z_UTIL_X2_2818: u32 = 5636;
pub const Z_UTIL_X2_2819: u32 = 5638;
pub const Z_UTIL_X2_2820: u32 = 5640;
pub const Z_UTIL_X2_2821: u32 = 5642;
pub const Z_UTIL_X2_2822: u32 = 5644;
pub const Z_UTIL_X2_2823: u32 = 5646;
pub const Z_UTIL_X2_2824: u32 = 5648;
pub const Z_UTIL_X2_2825: u32 = 5650;
pub const Z_UTIL_X2_2826: u32 = 5652;
pub const Z_UTIL_X2_2827: u32 = 5654;
pub const Z_UTIL_X2_2828: u32 = 5656;
pub const Z_UTIL_X2_2829: u32 = 5658;
pub const Z_UTIL_X2_2830: u32 = 5660;
pub const Z_UTIL_X2_2831: u32 = 5662;
pub const Z_UTIL_X2_2832: u32 = 5664;
pub const Z_UTIL_X2_2833: u32 = 5666;
pub const Z_UTIL_X2_2834: u32 = 5668;
pub const Z_UTIL_X2_2835: u32 = 5670;
pub const Z_UTIL_X2_2836: u32 = 5672;
pub const Z_UTIL_X2_2837: u32 = 5674;
pub const Z_UTIL_X2_2838: u32 = 5676;
pub const Z_UTIL_X2_2839: u32 = 5678;
pub const Z_UTIL_X2_2840: u32 = 5680;
pub const Z_UTIL_X2_2841: u32 = 5682;
pub const Z_UTIL_X2_2842: u32 = 5684;
pub const Z_UTIL_X2_2843: u32 = 5686;
pub const Z_UTIL_X2_2844: u32 = 5688;
pub const Z_UTIL_X2_2845: u32 = 5690;
pub const Z_UTIL_X2_2846: u32 = 5692;
pub const Z_UTIL_X2_2847: u32 = 5694;
pub const Z_UTIL_X2_2848: u32 = 5696;
pub const Z_UTIL_X2_2849: u32 = 5698;
pub const Z_UTIL_X2_2850: u32 = 5700;
pub const Z_UTIL_X2_2851: u32 = 5702;
pub const Z_UTIL_X2_2852: u32 = 5704;
pub const Z_UTIL_X2_2853: u32 = 5706;
pub const Z_UTIL_X2_2854: u32 = 5708;
pub const Z_UTIL_X2_2855: u32 = 5710;
pub const Z_UTIL_X2_2856: u32 = 5712;
pub const Z_UTIL_X2_2857: u32 = 5714;
pub const Z_UTIL_X2_2858: u32 = 5716;
pub const Z_UTIL_X2_2859: u32 = 5718;
pub const Z_UTIL_X2_2860: u32 = 5720;
pub const Z_UTIL_X2_2861: u32 = 5722;
pub const Z_UTIL_X2_2862: u32 = 5724;
pub const Z_UTIL_X2_2863: u32 = 5726;
pub const Z_UTIL_X2_2864: u32 = 5728;
pub const Z_UTIL_X2_2865: u32 = 5730;
pub const Z_UTIL_X2_2866: u32 = 5732;
pub const Z_UTIL_X2_2867: u32 = 5734;
pub const Z_UTIL_X2_2868: u32 = 5736;
pub const Z_UTIL_X2_2869: u32 = 5738;
pub const Z_UTIL_X2_2870: u32 = 5740;
pub const Z_UTIL_X2_2871: u32 = 5742;
pub const Z_UTIL_X2_2872: u32 = 5744;
pub const Z_UTIL_X2_2873: u32 = 5746;
pub const Z_UTIL_X2_2874: u32 = 5748;
pub const Z_UTIL_X2_2875: u32 = 5750;
pub const Z_UTIL_X2_2876: u32 = 5752;
pub const Z_UTIL_X2_2877: u32 = 5754;
pub const Z_UTIL_X2_2878: u32 = 5756;
pub const Z_UTIL_X2_2879: u32 = 5758;
pub const Z_UTIL_X2_2880: u32 = 5760;
pub const Z_UTIL_X2_2881: u32 = 5762;
pub const Z_UTIL_X2_2882: u32 = 5764;
pub const Z_UTIL_X2_2883: u32 = 5766;
pub const Z_UTIL_X2_2884: u32 = 5768;
pub const Z_UTIL_X2_2885: u32 = 5770;
pub const Z_UTIL_X2_2886: u32 = 5772;
pub const Z_UTIL_X2_2887: u32 = 5774;
pub const Z_UTIL_X2_2888: u32 = 5776;
pub const Z_UTIL_X2_2889: u32 = 5778;
pub const Z_UTIL_X2_2890: u32 = 5780;
pub const Z_UTIL_X2_2891: u32 = 5782;
pub const Z_UTIL_X2_2892: u32 = 5784;
pub const Z_UTIL_X2_2893: u32 = 5786;
pub const Z_UTIL_X2_2894: u32 = 5788;
pub const Z_UTIL_X2_2895: u32 = 5790;
pub const Z_UTIL_X2_2896: u32 = 5792;
pub const Z_UTIL_X2_2897: u32 = 5794;
pub const Z_UTIL_X2_2898: u32 = 5796;
pub const Z_UTIL_X2_2899: u32 = 5798;
pub const Z_UTIL_X2_2900: u32 = 5800;
pub const Z_UTIL_X2_2901: u32 = 5802;
pub const Z_UTIL_X2_2902: u32 = 5804;
pub const Z_UTIL_X2_2903: u32 = 5806;
pub const Z_UTIL_X2_2904: u32 = 5808;
pub const Z_UTIL_X2_2905: u32 = 5810;
pub const Z_UTIL_X2_2906: u32 = 5812;
pub const Z_UTIL_X2_2907: u32 = 5814;
pub const Z_UTIL_X2_2908: u32 = 5816;
pub const Z_UTIL_X2_2909: u32 = 5818;
pub const Z_UTIL_X2_2910: u32 = 5820;
pub const Z_UTIL_X2_2911: u32 = 5822;
pub const Z_UTIL_X2_2912: u32 = 5824;
pub const Z_UTIL_X2_2913: u32 = 5826;
pub const Z_UTIL_X2_2914: u32 = 5828;
pub const Z_UTIL_X2_2915: u32 = 5830;
pub const Z_UTIL_X2_2916: u32 = 5832;
pub const Z_UTIL_X2_2917: u32 = 5834;
pub const Z_UTIL_X2_2918: u32 = 5836;
pub const Z_UTIL_X2_2919: u32 = 5838;
pub const Z_UTIL_X2_2920: u32 = 5840;
pub const Z_UTIL_X2_2921: u32 = 5842;
pub const Z_UTIL_X2_2922: u32 = 5844;
pub const Z_UTIL_X2_2923: u32 = 5846;
pub const Z_UTIL_X2_2924: u32 = 5848;
pub const Z_UTIL_X2_2925: u32 = 5850;
pub const Z_UTIL_X2_2926: u32 = 5852;
pub const Z_UTIL_X2_2927: u32 = 5854;
pub const Z_UTIL_X2_2928: u32 = 5856;
pub const Z_UTIL_X2_2929: u32 = 5858;
pub const Z_UTIL_X2_2930: u32 = 5860;
pub const Z_UTIL_X2_2931: u32 = 5862;
pub const Z_UTIL_X2_2932: u32 = 5864;
pub const Z_UTIL_X2_2933: u32 = 5866;
pub const Z_UTIL_X2_2934: u32 = 5868;
pub const Z_UTIL_X2_2935: u32 = 5870;
pub const Z_UTIL_X2_2936: u32 = 5872;
pub const Z_UTIL_X2_2937: u32 = 5874;
pub const Z_UTIL_X2_2938: u32 = 5876;
pub const Z_UTIL_X2_2939: u32 = 5878;
pub const Z_UTIL_X2_2940: u32 = 5880;
pub const Z_UTIL_X2_2941: u32 = 5882;
pub const Z_UTIL_X2_2942: u32 = 5884;
pub const Z_UTIL_X2_2943: u32 = 5886;
pub const Z_UTIL_X2_2944: u32 = 5888;
pub const Z_UTIL_X2_2945: u32 = 5890;
pub const Z_UTIL_X2_2946: u32 = 5892;
pub const Z_UTIL_X2_2947: u32 = 5894;
pub const Z_UTIL_X2_2948: u32 = 5896;
pub const Z_UTIL_X2_2949: u32 = 5898;
pub const Z_UTIL_X2_2950: u32 = 5900;
pub const Z_UTIL_X2_2951: u32 = 5902;
pub const Z_UTIL_X2_2952: u32 = 5904;
pub const Z_UTIL_X2_2953: u32 = 5906;
pub const Z_UTIL_X2_2954: u32 = 5908;
pub const Z_UTIL_X2_2955: u32 = 5910;
pub const Z_UTIL_X2_2956: u32 = 5912;
pub const Z_UTIL_X2_2957: u32 = 5914;
pub const Z_UTIL_X2_2958: u32 = 5916;
pub const Z_UTIL_X2_2959: u32 = 5918;
pub const Z_UTIL_X2_2960: u32 = 5920;
pub const Z_UTIL_X2_2961: u32 = 5922;
pub const Z_UTIL_X2_2962: u32 = 5924;
pub const Z_UTIL_X2_2963: u32 = 5926;
pub const Z_UTIL_X2_2964: u32 = 5928;
pub const Z_UTIL_X2_2965: u32 = 5930;
pub const Z_UTIL_X2_2966: u32 = 5932;
pub const Z_UTIL_X2_2967: u32 = 5934;
pub const Z_UTIL_X2_2968: u32 = 5936;
pub const Z_UTIL_X2_2969: u32 = 5938;
pub const Z_UTIL_X2_2970: u32 = 5940;
pub const Z_UTIL_X2_2971: u32 = 5942;
pub const Z_UTIL_X2_2972: u32 = 5944;
pub const Z_UTIL_X2_2973: u32 = 5946;
pub const Z_UTIL_X2_2974: u32 = 5948;
pub const Z_UTIL_X2_2975: u32 = 5950;
pub const Z_UTIL_X2_2976: u32 = 5952;
pub const Z_UTIL_X2_2977: u32 = 5954;
pub const Z_UTIL_X2_2978: u32 = 5956;
pub const Z_UTIL_X2_2979: u32 = 5958;
pub const Z_UTIL_X2_2980: u32 = 5960;
pub const Z_UTIL_X2_2981: u32 = 5962;
pub const Z_UTIL_X2_2982: u32 = 5964;
pub const Z_UTIL_X2_2983: u32 = 5966;
pub const Z_UTIL_X2_2984: u32 = 5968;
pub const Z_UTIL_X2_2985: u32 = 5970;
pub const Z_UTIL_X2_2986: u32 = 5972;
pub const Z_UTIL_X2_2987: u32 = 5974;
pub const Z_UTIL_X2_2988: u32 = 5976;
pub const Z_UTIL_X2_2989: u32 = 5978;
pub const Z_UTIL_X2_2990: u32 = 5980;
pub const Z_UTIL_X2_2991: u32 = 5982;
pub const Z_UTIL_X2_2992: u32 = 5984;
pub const Z_UTIL_X2_2993: u32 = 5986;
pub const Z_UTIL_X2_2994: u32 = 5988;
pub const Z_UTIL_X2_2995: u32 = 5990;
pub const Z_UTIL_X2_2996: u32 = 5992;
pub const Z_UTIL_X2_2997: u32 = 5994;
pub const Z_UTIL_X2_2998: u32 = 5996;
pub const Z_UTIL_X2_2999: u32 = 5998;
pub const Z_UTIL_X2_3000: u32 = 6000;
pub const Z_UTIL_X2_3001: u32 = 6002;
pub const Z_UTIL_X2_3002: u32 = 6004;
pub const Z_UTIL_X2_3003: u32 = 6006;
pub const Z_UTIL_X2_3004: u32 = 6008;
pub const Z_UTIL_X2_3005: u32 = 6010;
pub const Z_UTIL_X2_3006: u32 = 6012;
pub const Z_UTIL_X2_3007: u32 = 6014;
pub const Z_UTIL_X2_3008: u32 = 6016;
pub const Z_UTIL_X2_3009: u32 = 6018;
pub const Z_UTIL_X2_3010: u32 = 6020;
pub const Z_UTIL_X2_3011: u32 = 6022;
pub const Z_UTIL_X2_3012: u32 = 6024;
pub const Z_UTIL_X2_3013: u32 = 6026;
pub const Z_UTIL_X2_3014: u32 = 6028;
pub const Z_UTIL_X2_3015: u32 = 6030;
pub const Z_UTIL_X2_3016: u32 = 6032;
pub const Z_UTIL_X2_3017: u32 = 6034;
pub const Z_UTIL_X2_3018: u32 = 6036;
pub const Z_UTIL_X2_3019: u32 = 6038;
pub const Z_UTIL_X2_3020: u32 = 6040;
pub const Z_UTIL_X2_3021: u32 = 6042;
pub const Z_UTIL_X2_3022: u32 = 6044;
pub const Z_UTIL_X2_3023: u32 = 6046;
pub const Z_UTIL_X2_3024: u32 = 6048;
pub const Z_UTIL_X2_3025: u32 = 6050;
pub const Z_UTIL_X2_3026: u32 = 6052;
pub const Z_UTIL_X2_3027: u32 = 6054;
pub const Z_UTIL_X2_3028: u32 = 6056;
pub const Z_UTIL_X2_3029: u32 = 6058;
pub const Z_UTIL_X2_3030: u32 = 6060;
pub const Z_UTIL_X2_3031: u32 = 6062;
pub const Z_UTIL_X2_3032: u32 = 6064;
pub const Z_UTIL_X2_3033: u32 = 6066;
pub const Z_UTIL_X2_3034: u32 = 6068;
pub const Z_UTIL_X2_3035: u32 = 6070;
pub const Z_UTIL_X2_3036: u32 = 6072;
pub const Z_UTIL_X2_3037: u32 = 6074;
pub const Z_UTIL_X2_3038: u32 = 6076;
pub const Z_UTIL_X2_3039: u32 = 6078;
pub const Z_UTIL_X2_3040: u32 = 6080;
pub const Z_UTIL_X2_3041: u32 = 6082;
pub const Z_UTIL_X2_3042: u32 = 6084;
pub const Z_UTIL_X2_3043: u32 = 6086;
pub const Z_UTIL_X2_3044: u32 = 6088;
pub const Z_UTIL_X2_3045: u32 = 6090;
pub const Z_UTIL_X2_3046: u32 = 6092;
pub const Z_UTIL_X2_3047: u32 = 6094;
pub const Z_UTIL_X2_3048: u32 = 6096;
pub const Z_UTIL_X2_3049: u32 = 6098;
pub const Z_UTIL_X2_3050: u32 = 6100;
pub const Z_UTIL_X2_3051: u32 = 6102;
pub const Z_UTIL_X2_3052: u32 = 6104;
pub const Z_UTIL_X2_3053: u32 = 6106;
pub const Z_UTIL_X2_3054: u32 = 6108;
pub const Z_UTIL_X2_3055: u32 = 6110;
pub const Z_UTIL_X2_3056: u32 = 6112;
pub const Z_UTIL_X2_3057: u32 = 6114;
pub const Z_UTIL_X2_3058: u32 = 6116;
pub const Z_UTIL_X2_3059: u32 = 6118;
pub const Z_UTIL_X2_3060: u32 = 6120;
pub const Z_UTIL_X2_3061: u32 = 6122;
pub const Z_UTIL_X2_3062: u32 = 6124;
pub const Z_UTIL_X2_3063: u32 = 6126;
pub const Z_UTIL_X2_3064: u32 = 6128;
pub const Z_UTIL_X2_3065: u32 = 6130;
pub const Z_UTIL_X2_3066: u32 = 6132;
pub const Z_UTIL_X2_3067: u32 = 6134;
pub const Z_UTIL_X2_3068: u32 = 6136;
pub const Z_UTIL_X2_3069: u32 = 6138;
pub const Z_UTIL_X2_3070: u32 = 6140;
pub const Z_UTIL_X2_3071: u32 = 6142;
pub const Z_UTIL_X2_3072: u32 = 6144;
pub const Z_UTIL_X2_3073: u32 = 6146;
pub const Z_UTIL_X2_3074: u32 = 6148;
pub const Z_UTIL_X2_3075: u32 = 6150;
pub const Z_UTIL_X2_3076: u32 = 6152;
pub const Z_UTIL_X2_3077: u32 = 6154;
pub const Z_UTIL_X2_3078: u32 = 6156;
pub const Z_UTIL_X2_3079: u32 = 6158;
pub const Z_UTIL_X2_3080: u32 = 6160;
pub const Z_UTIL_X2_3081: u32 = 6162;
pub const Z_UTIL_X2_3082: u32 = 6164;
pub const Z_UTIL_X2_3083: u32 = 6166;
pub const Z_UTIL_X2_3084: u32 = 6168;
pub const Z_UTIL_X2_3085: u32 = 6170;
pub const Z_UTIL_X2_3086: u32 = 6172;
pub const Z_UTIL_X2_3087: u32 = 6174;
pub const Z_UTIL_X2_3088: u32 = 6176;
pub const Z_UTIL_X2_3089: u32 = 6178;
pub const Z_UTIL_X2_3090: u32 = 6180;
pub const Z_UTIL_X2_3091: u32 = 6182;
pub const Z_UTIL_X2_3092: u32 = 6184;
pub const Z_UTIL_X2_3093: u32 = 6186;
pub const Z_UTIL_X2_3094: u32 = 6188;
pub const Z_UTIL_X2_3095: u32 = 6190;
pub const Z_UTIL_X2_3096: u32 = 6192;
pub const Z_UTIL_X2_3097: u32 = 6194;
pub const Z_UTIL_X2_3098: u32 = 6196;
pub const Z_UTIL_X2_3099: u32 = 6198;
pub const Z_UTIL_X2_3100: u32 = 6200;
pub const Z_UTIL_X2_3101: u32 = 6202;
pub const Z_UTIL_X2_3102: u32 = 6204;
pub const Z_UTIL_X2_3103: u32 = 6206;
pub const Z_UTIL_X2_3104: u32 = 6208;
pub const Z_UTIL_X2_3105: u32 = 6210;
pub const Z_UTIL_X2_3106: u32 = 6212;
pub const Z_UTIL_X2_3107: u32 = 6214;
pub const Z_UTIL_X2_3108: u32 = 6216;
pub const Z_UTIL_X2_3109: u32 = 6218;
pub const Z_UTIL_X2_3110: u32 = 6220;
pub const Z_UTIL_X2_3111: u32 = 6222;
pub const Z_UTIL_X2_3112: u32 = 6224;
pub const Z_UTIL_X2_3113: u32 = 6226;
pub const Z_UTIL_X2_3114: u32 = 6228;
pub const Z_UTIL_X2_3115: u32 = 6230;
pub const Z_UTIL_X2_3116: u32 = 6232;
pub const Z_UTIL_X2_3117: u32 = 6234;
pub const Z_UTIL_X2_3118: u32 = 6236;
pub const Z_UTIL_X2_3119: u32 = 6238;
pub const Z_UTIL_X2_3120: u32 = 6240;
pub const Z_UTIL_X2_3121: u32 = 6242;
pub const Z_UTIL_X2_3122: u32 = 6244;
pub const Z_UTIL_X2_3123: u32 = 6246;
pub const Z_UTIL_X2_3124: u32 = 6248;
pub const Z_UTIL_X2_3125: u32 = 6250;
pub const Z_UTIL_X2_3126: u32 = 6252;
pub const Z_UTIL_X2_3127: u32 = 6254;
pub const Z_UTIL_X2_3128: u32 = 6256;
pub const Z_UTIL_X2_3129: u32 = 6258;
pub const Z_UTIL_X2_3130: u32 = 6260;
pub const Z_UTIL_X2_3131: u32 = 6262;
pub const Z_UTIL_X2_3132: u32 = 6264;
pub const Z_UTIL_X2_3133: u32 = 6266;
pub const Z_UTIL_X2_3134: u32 = 6268;
pub const Z_UTIL_X2_3135: u32 = 6270;
pub const Z_UTIL_X2_3136: u32 = 6272;
pub const Z_UTIL_X2_3137: u32 = 6274;
pub const Z_UTIL_X2_3138: u32 = 6276;
pub const Z_UTIL_X2_3139: u32 = 6278;
pub const Z_UTIL_X2_3140: u32 = 6280;
pub const Z_UTIL_X2_3141: u32 = 6282;
pub const Z_UTIL_X2_3142: u32 = 6284;
pub const Z_UTIL_X2_3143: u32 = 6286;
pub const Z_UTIL_X2_3144: u32 = 6288;
pub const Z_UTIL_X2_3145: u32 = 6290;
pub const Z_UTIL_X2_3146: u32 = 6292;
pub const Z_UTIL_X2_3147: u32 = 6294;
pub const Z_UTIL_X2_3148: u32 = 6296;
pub const Z_UTIL_X2_3149: u32 = 6298;
pub const Z_UTIL_X2_3150: u32 = 6300;
pub const Z_UTIL_X2_3151: u32 = 6302;
pub const Z_UTIL_X2_3152: u32 = 6304;
pub const Z_UTIL_X2_3153: u32 = 6306;
pub const Z_UTIL_X2_3154: u32 = 6308;
pub const Z_UTIL_X2_3155: u32 = 6310;
pub const Z_UTIL_X2_3156: u32 = 6312;
pub const Z_UTIL_X2_3157: u32 = 6314;
pub const Z_UTIL_X2_3158: u32 = 6316;
pub const Z_UTIL_X2_3159: u32 = 6318;
pub const Z_UTIL_X2_3160: u32 = 6320;
pub const Z_UTIL_X2_3161: u32 = 6322;
pub const Z_UTIL_X2_3162: u32 = 6324;
pub const Z_UTIL_X2_3163: u32 = 6326;
pub const Z_UTIL_X2_3164: u32 = 6328;
pub const Z_UTIL_X2_3165: u32 = 6330;
pub const Z_UTIL_X2_3166: u32 = 6332;
pub const Z_UTIL_X2_3167: u32 = 6334;
pub const Z_UTIL_X2_3168: u32 = 6336;
pub const Z_UTIL_X2_3169: u32 = 6338;
pub const Z_UTIL_X2_3170: u32 = 6340;
pub const Z_UTIL_X2_3171: u32 = 6342;
pub const Z_UTIL_X2_3172: u32 = 6344;
pub const Z_UTIL_X2_3173: u32 = 6346;
pub const Z_UTIL_X2_3174: u32 = 6348;
pub const Z_UTIL_X2_3175: u32 = 6350;
pub const Z_UTIL_X2_3176: u32 = 6352;
pub const Z_UTIL_X2_3177: u32 = 6354;
pub const Z_UTIL_X2_3178: u32 = 6356;
pub const Z_UTIL_X2_3179: u32 = 6358;
pub const Z_UTIL_X2_3180: u32 = 6360;
pub const Z_UTIL_X2_3181: u32 = 6362;
pub const Z_UTIL_X2_3182: u32 = 6364;
pub const Z_UTIL_X2_3183: u32 = 6366;
pub const Z_UTIL_X2_3184: u32 = 6368;
pub const Z_UTIL_X2_3185: u32 = 6370;
pub const Z_UTIL_X2_3186: u32 = 6372;
pub const Z_UTIL_X2_3187: u32 = 6374;
pub const Z_UTIL_X2_3188: u32 = 6376;
pub const Z_UTIL_X2_3189: u32 = 6378;
pub const Z_UTIL_X2_3190: u32 = 6380;
pub const Z_UTIL_X2_3191: u32 = 6382;
pub const Z_UTIL_X2_3192: u32 = 6384;
pub const Z_UTIL_X2_3193: u32 = 6386;
pub const Z_UTIL_X2_3194: u32 = 6388;
pub const Z_UTIL_X2_3195: u32 = 6390;
pub const Z_UTIL_X2_3196: u32 = 6392;
pub const Z_UTIL_X2_3197: u32 = 6394;
pub const Z_UTIL_X2_3198: u32 = 6396;
pub const Z_UTIL_X2_3199: u32 = 6398;
pub const Z_UTIL_X2_3200: u32 = 6400;
pub const Z_UTIL_X2_3201: u32 = 6402;
pub const Z_UTIL_X2_3202: u32 = 6404;
pub const Z_UTIL_X2_3203: u32 = 6406;
pub const Z_UTIL_X2_3204: u32 = 6408;
pub const Z_UTIL_X2_3205: u32 = 6410;
pub const Z_UTIL_X2_3206: u32 = 6412;
pub const Z_UTIL_X2_3207: u32 = 6414;
pub const Z_UTIL_X2_3208: u32 = 6416;
pub const Z_UTIL_X2_3209: u32 = 6418;
pub const Z_UTIL_X2_3210: u32 = 6420;
pub const Z_UTIL_X2_3211: u32 = 6422;
pub const Z_UTIL_X2_3212: u32 = 6424;
pub const Z_UTIL_X2_3213: u32 = 6426;
pub const Z_UTIL_X2_3214: u32 = 6428;
pub const Z_UTIL_X2_3215: u32 = 6430;
pub const Z_UTIL_X2_3216: u32 = 6432;
pub const Z_UTIL_X2_3217: u32 = 6434;
pub const Z_UTIL_X2_3218: u32 = 6436;
pub const Z_UTIL_X2_3219: u32 = 6438;
pub const Z_UTIL_X2_3220: u32 = 6440;
pub const Z_UTIL_X2_3221: u32 = 6442;
pub const Z_UTIL_X2_3222: u32 = 6444;
pub const Z_UTIL_X2_3223: u32 = 6446;
pub const Z_UTIL_X2_3224: u32 = 6448;
pub const Z_UTIL_X2_3225: u32 = 6450;
pub const Z_UTIL_X2_3226: u32 = 6452;
pub const Z_UTIL_X2_3227: u32 = 6454;
pub const Z_UTIL_X2_3228: u32 = 6456;
pub const Z_UTIL_X2_3229: u32 = 6458;
pub const Z_UTIL_X2_3230: u32 = 6460;
pub const Z_UTIL_X2_3231: u32 = 6462;
pub const Z_UTIL_X2_3232: u32 = 6464;
pub const Z_UTIL_X2_3233: u32 = 6466;
pub const Z_UTIL_X2_3234: u32 = 6468;
pub const Z_UTIL_X2_3235: u32 = 6470;
pub const Z_UTIL_X2_3236: u32 = 6472;
pub const Z_UTIL_X2_3237: u32 = 6474;
pub const Z_UTIL_X2_3238: u32 = 6476;
pub const Z_UTIL_X2_3239: u32 = 6478;
pub const Z_UTIL_X2_3240: u32 = 6480;
pub const Z_UTIL_X2_3241: u32 = 6482;
pub const Z_UTIL_X2_3242: u32 = 6484;
pub const Z_UTIL_X2_3243: u32 = 6486;
pub const Z_UTIL_X2_3244: u32 = 6488;
pub const Z_UTIL_X2_3245: u32 = 6490;
pub const Z_UTIL_X2_3246: u32 = 6492;
pub const Z_UTIL_X2_3247: u32 = 6494;
pub const Z_UTIL_X2_3248: u32 = 6496;
pub const Z_UTIL_X2_3249: u32 = 6498;
pub const Z_UTIL_X2_3250: u32 = 6500;
pub const Z_UTIL_X2_3251: u32 = 6502;
pub const Z_UTIL_X2_3252: u32 = 6504;
pub const Z_UTIL_X2_3253: u32 = 6506;
pub const Z_UTIL_X2_3254: u32 = 6508;
pub const Z_UTIL_X2_3255: u32 = 6510;
pub const Z_UTIL_X2_3256: u32 = 6512;
pub const Z_UTIL_X2_3257: u32 = 6514;
pub const Z_UTIL_X2_3258: u32 = 6516;
pub const Z_UTIL_X2_3259: u32 = 6518;
pub const Z_UTIL_X2_3260: u32 = 6520;
pub const Z_UTIL_X2_3261: u32 = 6522;
pub const Z_UTIL_X2_3262: u32 = 6524;
pub const Z_UTIL_X2_3263: u32 = 6526;
pub const Z_UTIL_X2_3264: u32 = 6528;
pub const Z_UTIL_X2_3265: u32 = 6530;
pub const Z_UTIL_X2_3266: u32 = 6532;
pub const Z_UTIL_X2_3267: u32 = 6534;
pub const Z_UTIL_X2_3268: u32 = 6536;
pub const Z_UTIL_X2_3269: u32 = 6538;
pub const Z_UTIL_X2_3270: u32 = 6540;
pub const Z_UTIL_X2_3271: u32 = 6542;
pub const Z_UTIL_X2_3272: u32 = 6544;
pub const Z_UTIL_X2_3273: u32 = 6546;
pub const Z_UTIL_X2_3274: u32 = 6548;
pub const Z_UTIL_X2_3275: u32 = 6550;
pub const Z_UTIL_X2_3276: u32 = 6552;
pub const Z_UTIL_X2_3277: u32 = 6554;
pub const Z_UTIL_X2_3278: u32 = 6556;
pub const Z_UTIL_X2_3279: u32 = 6558;
pub const Z_UTIL_X2_3280: u32 = 6560;
pub const Z_UTIL_X2_3281: u32 = 6562;
pub const Z_UTIL_X2_3282: u32 = 6564;
pub const Z_UTIL_X2_3283: u32 = 6566;
pub const Z_UTIL_X2_3284: u32 = 6568;
pub const Z_UTIL_X2_3285: u32 = 6570;
pub const Z_UTIL_X2_3286: u32 = 6572;
pub const Z_UTIL_X2_3287: u32 = 6574;
pub const Z_UTIL_X2_3288: u32 = 6576;
pub const Z_UTIL_X2_3289: u32 = 6578;
pub const Z_UTIL_X2_3290: u32 = 6580;
pub const Z_UTIL_X2_3291: u32 = 6582;
pub const Z_UTIL_X2_3292: u32 = 6584;
pub const Z_UTIL_X2_3293: u32 = 6586;
pub const Z_UTIL_X2_3294: u32 = 6588;
pub const Z_UTIL_X2_3295: u32 = 6590;
pub const Z_UTIL_X2_3296: u32 = 6592;
pub const Z_UTIL_X2_3297: u32 = 6594;
pub const Z_UTIL_X2_3298: u32 = 6596;
pub const Z_UTIL_X2_3299: u32 = 6598;
pub const Z_UTIL_X2_3300: u32 = 6600;
pub const Z_UTIL_X2_3301: u32 = 6602;
pub const Z_UTIL_X2_3302: u32 = 6604;
pub const Z_UTIL_X2_3303: u32 = 6606;
pub const Z_UTIL_X2_3304: u32 = 6608;
pub const Z_UTIL_X2_3305: u32 = 6610;
pub const Z_UTIL_X2_3306: u32 = 6612;
pub const Z_UTIL_X2_3307: u32 = 6614;
pub const Z_UTIL_X2_3308: u32 = 6616;
pub const Z_UTIL_X2_3309: u32 = 6618;
pub const Z_UTIL_X2_3310: u32 = 6620;
pub const Z_UTIL_X2_3311: u32 = 6622;
pub const Z_UTIL_X2_3312: u32 = 6624;
pub const Z_UTIL_X2_3313: u32 = 6626;
pub const Z_UTIL_X2_3314: u32 = 6628;
pub const Z_UTIL_X2_3315: u32 = 6630;
pub const Z_UTIL_X2_3316: u32 = 6632;
pub const Z_UTIL_X2_3317: u32 = 6634;
pub const Z_UTIL_X2_3318: u32 = 6636;
pub const Z_UTIL_X2_3319: u32 = 6638;
pub const Z_UTIL_X2_3320: u32 = 6640;
pub const Z_UTIL_X2_3321: u32 = 6642;
pub const Z_UTIL_X2_3322: u32 = 6644;
pub const Z_UTIL_X2_3323: u32 = 6646;
pub const Z_UTIL_X2_3324: u32 = 6648;
pub const Z_UTIL_X2_3325: u32 = 6650;
pub const Z_UTIL_X2_3326: u32 = 6652;
pub const Z_UTIL_X2_3327: u32 = 6654;
pub const Z_UTIL_X2_3328: u32 = 6656;
pub const Z_UTIL_X2_3329: u32 = 6658;
pub const Z_UTIL_X2_3330: u32 = 6660;
pub const Z_UTIL_X2_3331: u32 = 6662;
pub const Z_UTIL_X2_3332: u32 = 6664;
pub const Z_UTIL_X2_3333: u32 = 6666;
pub const Z_UTIL_X2_3334: u32 = 6668;
pub const Z_UTIL_X2_3335: u32 = 6670;
pub const Z_UTIL_X2_3336: u32 = 6672;
pub const Z_UTIL_X2_3337: u32 = 6674;
pub const Z_UTIL_X2_3338: u32 = 6676;
pub const Z_UTIL_X2_3339: u32 = 6678;
pub const Z_UTIL_X2_3340: u32 = 6680;
pub const Z_UTIL_X2_3341: u32 = 6682;
pub const Z_UTIL_X2_3342: u32 = 6684;
pub const Z_UTIL_X2_3343: u32 = 6686;
pub const Z_UTIL_X2_3344: u32 = 6688;
pub const Z_UTIL_X2_3345: u32 = 6690;
pub const Z_UTIL_X2_3346: u32 = 6692;
pub const Z_UTIL_X2_3347: u32 = 6694;
pub const Z_UTIL_X2_3348: u32 = 6696;
pub const Z_UTIL_X2_3349: u32 = 6698;
pub const Z_UTIL_X2_3350: u32 = 6700;
pub const Z_UTIL_X2_3351: u32 = 6702;
pub const Z_UTIL_X2_3352: u32 = 6704;
pub const Z_UTIL_X2_3353: u32 = 6706;
pub const Z_UTIL_X2_3354: u32 = 6708;
pub const Z_UTIL_X2_3355: u32 = 6710;
pub const Z_UTIL_X2_3356: u32 = 6712;
pub const Z_UTIL_X2_3357: u32 = 6714;
pub const Z_UTIL_X2_3358: u32 = 6716;
pub const Z_UTIL_X2_3359: u32 = 6718;
pub const Z_UTIL_X2_3360: u32 = 6720;
pub const Z_UTIL_X2_3361: u32 = 6722;
pub const Z_UTIL_X2_3362: u32 = 6724;
pub const Z_UTIL_X2_3363: u32 = 6726;
pub const Z_UTIL_X2_3364: u32 = 6728;
pub const Z_UTIL_X2_3365: u32 = 6730;
pub const Z_UTIL_X2_3366: u32 = 6732;
pub const Z_UTIL_X2_3367: u32 = 6734;
pub const Z_UTIL_X2_3368: u32 = 6736;
pub const Z_UTIL_X2_3369: u32 = 6738;
pub const Z_UTIL_X2_3370: u32 = 6740;
pub const Z_UTIL_X2_3371: u32 = 6742;
pub const Z_UTIL_X2_3372: u32 = 6744;
pub const Z_UTIL_X2_3373: u32 = 6746;
pub const Z_UTIL_X2_3374: u32 = 6748;
pub const Z_UTIL_X2_3375: u32 = 6750;
pub const Z_UTIL_X2_3376: u32 = 6752;
pub const Z_UTIL_X2_3377: u32 = 6754;
pub const Z_UTIL_X2_3378: u32 = 6756;
pub const Z_UTIL_X2_3379: u32 = 6758;
pub const Z_UTIL_X2_3380: u32 = 6760;
pub const Z_UTIL_X2_3381: u32 = 6762;
pub const Z_UTIL_X2_3382: u32 = 6764;
pub const Z_UTIL_X2_3383: u32 = 6766;
pub const Z_UTIL_X2_3384: u32 = 6768;
pub const Z_UTIL_X2_3385: u32 = 6770;
pub const Z_UTIL_X2_3386: u32 = 6772;
pub const Z_UTIL_X2_3387: u32 = 6774;
pub const Z_UTIL_X2_3388: u32 = 6776;
pub const Z_UTIL_X2_3389: u32 = 6778;
pub const Z_UTIL_X2_3390: u32 = 6780;
pub const Z_UTIL_X2_3391: u32 = 6782;
pub const Z_UTIL_X2_3392: u32 = 6784;
pub const Z_UTIL_X2_3393: u32 = 6786;
pub const Z_UTIL_X2_3394: u32 = 6788;
pub const Z_UTIL_X2_3395: u32 = 6790;
pub const Z_UTIL_X2_3396: u32 = 6792;
pub const Z_UTIL_X2_3397: u32 = 6794;
pub const Z_UTIL_X2_3398: u32 = 6796;
pub const Z_UTIL_X2_3399: u32 = 6798;
pub const Z_UTIL_X2_3400: u32 = 6800;
pub const Z_UTIL_X2_3401: u32 = 6802;
pub const Z_UTIL_X2_3402: u32 = 6804;
pub const Z_UTIL_X2_3403: u32 = 6806;
pub const Z_UTIL_X2_3404: u32 = 6808;
pub const Z_UTIL_X2_3405: u32 = 6810;
pub const Z_UTIL_X2_3406: u32 = 6812;
pub const Z_UTIL_X2_3407: u32 = 6814;
pub const Z_UTIL_X2_3408: u32 = 6816;
pub const Z_UTIL_X2_3409: u32 = 6818;
pub const Z_UTIL_X2_3410: u32 = 6820;
pub const Z_UTIL_X2_3411: u32 = 6822;
pub const Z_UTIL_X2_3412: u32 = 6824;
pub const Z_UTIL_X2_3413: u32 = 6826;
pub const Z_UTIL_X2_3414: u32 = 6828;
pub const Z_UTIL_X2_3415: u32 = 6830;
pub const Z_UTIL_X2_3416: u32 = 6832;
pub const Z_UTIL_X2_3417: u32 = 6834;
pub const Z_UTIL_X2_3418: u32 = 6836;
pub const Z_UTIL_X2_3419: u32 = 6838;
pub const Z_UTIL_X2_3420: u32 = 6840;
pub const Z_UTIL_X2_3421: u32 = 6842;
pub const Z_UTIL_X2_3422: u32 = 6844;
pub const Z_UTIL_X2_3423: u32 = 6846;
pub const Z_UTIL_X2_3424: u32 = 6848;
pub const Z_UTIL_X2_3425: u32 = 6850;
pub const Z_UTIL_X2_3426: u32 = 6852;
pub const Z_UTIL_X2_3427: u32 = 6854;
pub const Z_UTIL_X2_3428: u32 = 6856;
pub const Z_UTIL_X2_3429: u32 = 6858;
pub const Z_UTIL_X2_3430: u32 = 6860;
pub const Z_UTIL_X2_3431: u32 = 6862;
pub const Z_UTIL_X2_3432: u32 = 6864;
pub const Z_UTIL_X2_3433: u32 = 6866;
pub const Z_UTIL_X2_3434: u32 = 6868;
pub const Z_UTIL_X2_3435: u32 = 6870;
pub const Z_UTIL_X2_3436: u32 = 6872;
pub const Z_UTIL_X2_3437: u32 = 6874;
pub const Z_UTIL_X2_3438: u32 = 6876;
pub const Z_UTIL_X2_3439: u32 = 6878;
pub const Z_UTIL_X2_3440: u32 = 6880;
pub const Z_UTIL_X2_3441: u32 = 6882;
pub const Z_UTIL_X2_3442: u32 = 6884;
pub const Z_UTIL_X2_3443: u32 = 6886;
pub const Z_UTIL_X2_3444: u32 = 6888;
pub const Z_UTIL_X2_3445: u32 = 6890;
pub const Z_UTIL_X2_3446: u32 = 6892;
pub const Z_UTIL_X2_3447: u32 = 6894;
pub const Z_UTIL_X2_3448: u32 = 6896;
pub const Z_UTIL_X2_3449: u32 = 6898;
pub const Z_UTIL_X2_3450: u32 = 6900;
pub const Z_UTIL_X2_3451: u32 = 6902;
pub const Z_UTIL_X2_3452: u32 = 6904;
pub const Z_UTIL_X2_3453: u32 = 6906;
pub const Z_UTIL_X2_3454: u32 = 6908;
pub const Z_UTIL_X2_3455: u32 = 6910;
pub const Z_UTIL_X2_3456: u32 = 6912;
pub const Z_UTIL_X2_3457: u32 = 6914;
pub const Z_UTIL_X2_3458: u32 = 6916;
pub const Z_UTIL_X2_3459: u32 = 6918;
pub const Z_UTIL_X2_3460: u32 = 6920;
pub const Z_UTIL_X2_3461: u32 = 6922;
pub const Z_UTIL_X2_3462: u32 = 6924;
pub const Z_UTIL_X2_3463: u32 = 6926;
pub const Z_UTIL_X2_3464: u32 = 6928;
pub const Z_UTIL_X2_3465: u32 = 6930;
pub const Z_UTIL_X2_3466: u32 = 6932;
pub const Z_UTIL_X2_3467: u32 = 6934;
pub const Z_UTIL_X2_3468: u32 = 6936;
pub const Z_UTIL_X2_3469: u32 = 6938;
pub const Z_UTIL_X2_3470: u32 = 6940;
pub const Z_UTIL_X2_3471: u32 = 6942;
pub const Z_UTIL_X2_3472: u32 = 6944;
pub const Z_UTIL_X2_3473: u32 = 6946;
pub const Z_UTIL_X2_3474: u32 = 6948;
pub const Z_UTIL_X2_3475: u32 = 6950;
pub const Z_UTIL_X2_3476: u32 = 6952;
pub const Z_UTIL_X2_3477: u32 = 6954;
pub const Z_UTIL_X2_3478: u32 = 6956;
pub const Z_UTIL_X2_3479: u32 = 6958;
pub const Z_UTIL_X2_3480: u32 = 6960;
pub const Z_UTIL_X2_3481: u32 = 6962;
pub const Z_UTIL_X2_3482: u32 = 6964;
pub const Z_UTIL_X2_3483: u32 = 6966;
pub const Z_UTIL_X2_3484: u32 = 6968;
pub const Z_UTIL_X2_3485: u32 = 6970;
pub const Z_UTIL_X2_3486: u32 = 6972;
pub const Z_UTIL_X2_3487: u32 = 6974;
pub const Z_UTIL_X2_3488: u32 = 6976;
pub const Z_UTIL_X2_3489: u32 = 6978;
pub const Z_UTIL_X2_3490: u32 = 6980;
pub const Z_UTIL_X2_3491: u32 = 6982;
pub const Z_UTIL_X2_3492: u32 = 6984;
pub const Z_UTIL_X2_3493: u32 = 6986;
pub const Z_UTIL_X2_3494: u32 = 6988;
pub const Z_UTIL_X2_3495: u32 = 6990;
pub const Z_UTIL_X2_3496: u32 = 6992;
pub const Z_UTIL_X2_3497: u32 = 6994;
pub const Z_UTIL_X2_3498: u32 = 6996;
pub const Z_UTIL_X2_3499: u32 = 6998;
pub const Z_UTIL_X2_3500: u32 = 7000;
pub const Z_UTIL_X2_3501: u32 = 7002;
pub const Z_UTIL_X2_3502: u32 = 7004;
pub const Z_UTIL_X2_3503: u32 = 7006;
pub const Z_UTIL_X2_3504: u32 = 7008;
pub const Z_UTIL_X2_3505: u32 = 7010;
pub const Z_UTIL_X2_3506: u32 = 7012;
pub const Z_UTIL_X2_3507: u32 = 7014;
pub const Z_UTIL_X2_3508: u32 = 7016;
pub const Z_UTIL_X2_3509: u32 = 7018;
pub const Z_UTIL_X2_3510: u32 = 7020;
pub const Z_UTIL_X2_3511: u32 = 7022;
pub const Z_UTIL_X2_3512: u32 = 7024;
pub const Z_UTIL_X2_3513: u32 = 7026;
pub const Z_UTIL_X2_3514: u32 = 7028;
pub const Z_UTIL_X2_3515: u32 = 7030;
pub const Z_UTIL_X2_3516: u32 = 7032;
pub const Z_UTIL_X2_3517: u32 = 7034;
pub const Z_UTIL_X2_3518: u32 = 7036;
pub const Z_UTIL_X2_3519: u32 = 7038;
pub const Z_UTIL_X2_3520: u32 = 7040;
pub const Z_UTIL_X2_3521: u32 = 7042;
pub const Z_UTIL_X2_3522: u32 = 7044;
pub const Z_UTIL_X2_3523: u32 = 7046;
pub const Z_UTIL_X2_3524: u32 = 7048;
pub const Z_UTIL_X2_3525: u32 = 7050;
pub const Z_UTIL_X2_3526: u32 = 7052;
pub const Z_UTIL_X2_3527: u32 = 7054;
pub const Z_UTIL_X2_3528: u32 = 7056;
pub const Z_UTIL_X2_3529: u32 = 7058;
pub const Z_UTIL_X2_3530: u32 = 7060;
pub const Z_UTIL_X2_3531: u32 = 7062;
pub const Z_UTIL_X2_3532: u32 = 7064;
pub const Z_UTIL_X2_3533: u32 = 7066;
pub const Z_UTIL_X2_3534: u32 = 7068;
pub const Z_UTIL_X2_3535: u32 = 7070;
pub const Z_UTIL_X2_3536: u32 = 7072;
pub const Z_UTIL_X2_3537: u32 = 7074;
pub const Z_UTIL_X2_3538: u32 = 7076;
pub const Z_UTIL_X2_3539: u32 = 7078;
pub const Z_UTIL_X2_3540: u32 = 7080;
pub const Z_UTIL_X2_3541: u32 = 7082;
pub const Z_UTIL_X2_3542: u32 = 7084;
pub const Z_UTIL_X2_3543: u32 = 7086;
pub const Z_UTIL_X2_3544: u32 = 7088;
pub const Z_UTIL_X2_3545: u32 = 7090;
pub const Z_UTIL_X2_3546: u32 = 7092;
pub const Z_UTIL_X2_3547: u32 = 7094;
pub const Z_UTIL_X2_3548: u32 = 7096;
pub const Z_UTIL_X2_3549: u32 = 7098;
pub const Z_UTIL_X2_3550: u32 = 7100;
pub const Z_UTIL_X2_3551: u32 = 7102;
pub const Z_UTIL_X2_3552: u32 = 7104;
pub const Z_UTIL_X2_3553: u32 = 7106;
pub const Z_UTIL_X2_3554: u32 = 7108;
pub const Z_UTIL_X2_3555: u32 = 7110;
pub const Z_UTIL_X2_3556: u32 = 7112;
pub const Z_UTIL_X2_3557: u32 = 7114;
pub const Z_UTIL_X2_3558: u32 = 7116;
pub const Z_UTIL_X2_3559: u32 = 7118;
pub const Z_UTIL_X2_3560: u32 = 7120;
pub const Z_UTIL_X2_3561: u32 = 7122;
pub const Z_UTIL_X2_3562: u32 = 7124;
pub const Z_UTIL_X2_3563: u32 = 7126;
pub const Z_UTIL_X2_3564: u32 = 7128;
pub const Z_UTIL_X2_3565: u32 = 7130;
pub const Z_UTIL_X2_3566: u32 = 7132;
pub const Z_UTIL_X2_3567: u32 = 7134;
pub const Z_UTIL_X2_3568: u32 = 7136;
pub const Z_UTIL_X2_3569: u32 = 7138;
pub const Z_UTIL_X2_3570: u32 = 7140;
pub const Z_UTIL_X2_3571: u32 = 7142;
pub const Z_UTIL_X2_3572: u32 = 7144;
pub const Z_UTIL_X2_3573: u32 = 7146;
pub const Z_UTIL_X2_3574: u32 = 7148;
pub const Z_UTIL_X2_3575: u32 = 7150;
pub const Z_UTIL_X2_3576: u32 = 7152;
pub const Z_UTIL_X2_3577: u32 = 7154;
pub const Z_UTIL_X2_3578: u32 = 7156;
pub const Z_UTIL_X2_3579: u32 = 7158;
pub const Z_UTIL_X2_3580: u32 = 7160;
pub const Z_UTIL_X2_3581: u32 = 7162;
pub const Z_UTIL_X2_3582: u32 = 7164;
pub const Z_UTIL_X2_3583: u32 = 7166;
pub const Z_UTIL_X2_3584: u32 = 7168;
pub const Z_UTIL_X2_3585: u32 = 7170;
pub const Z_UTIL_X2_3586: u32 = 7172;
pub const Z_UTIL_X2_3587: u32 = 7174;
pub const Z_UTIL_X2_3588: u32 = 7176;
pub const Z_UTIL_X2_3589: u32 = 7178;
pub const Z_UTIL_X2_3590: u32 = 7180;
pub const Z_UTIL_X2_3591: u32 = 7182;
pub const Z_UTIL_X2_3592: u32 = 7184;
pub const Z_UTIL_X2_3593: u32 = 7186;
pub const Z_UTIL_X2_3594: u32 = 7188;
pub const Z_UTIL_X2_3595: u32 = 7190;
pub const Z_UTIL_X2_3596: u32 = 7192;
pub const Z_UTIL_X2_3597: u32 = 7194;
pub const Z_UTIL_X2_3598: u32 = 7196;
pub const Z_UTIL_X2_3599: u32 = 7198;
pub const Z_UTIL_X2_3600: u32 = 7200;
pub const Z_UTIL_X2_3601: u32 = 7202;
pub const Z_UTIL_X2_3602: u32 = 7204;
pub const Z_UTIL_X2_3603: u32 = 7206;
pub const Z_UTIL_X2_3604: u32 = 7208;
pub const Z_UTIL_X2_3605: u32 = 7210;
pub const Z_UTIL_X2_3606: u32 = 7212;
pub const Z_UTIL_X2_3607: u32 = 7214;
pub const Z_UTIL_X2_3608: u32 = 7216;
pub const Z_UTIL_X2_3609: u32 = 7218;
pub const Z_UTIL_X2_3610: u32 = 7220;
pub const Z_UTIL_X2_3611: u32 = 7222;
pub const Z_UTIL_X2_3612: u32 = 7224;
pub const Z_UTIL_X2_3613: u32 = 7226;
pub const Z_UTIL_X2_3614: u32 = 7228;
pub const Z_UTIL_X2_3615: u32 = 7230;
pub const Z_UTIL_X2_3616: u32 = 7232;
pub const Z_UTIL_X2_3617: u32 = 7234;
pub const Z_UTIL_X2_3618: u32 = 7236;
pub const Z_UTIL_X2_3619: u32 = 7238;
pub const Z_UTIL_X2_3620: u32 = 7240;
pub const Z_UTIL_X2_3621: u32 = 7242;
pub const Z_UTIL_X2_3622: u32 = 7244;
pub const Z_UTIL_X2_3623: u32 = 7246;
pub const Z_UTIL_X2_3624: u32 = 7248;
pub const Z_UTIL_X2_3625: u32 = 7250;
pub const Z_UTIL_X2_3626: u32 = 7252;
pub const Z_UTIL_X2_3627: u32 = 7254;
pub const Z_UTIL_X2_3628: u32 = 7256;
pub const Z_UTIL_X2_3629: u32 = 7258;
pub const Z_UTIL_X2_3630: u32 = 7260;
pub const Z_UTIL_X2_3631: u32 = 7262;
pub const Z_UTIL_X2_3632: u32 = 7264;
pub const Z_UTIL_X2_3633: u32 = 7266;
pub const Z_UTIL_X2_3634: u32 = 7268;
pub const Z_UTIL_X2_3635: u32 = 7270;
pub const Z_UTIL_X2_3636: u32 = 7272;
pub const Z_UTIL_X2_3637: u32 = 7274;
pub const Z_UTIL_X2_3638: u32 = 7276;
pub const Z_UTIL_X2_3639: u32 = 7278;
pub const Z_UTIL_X2_3640: u32 = 7280;
pub const Z_UTIL_X2_3641: u32 = 7282;
pub const Z_UTIL_X2_3642: u32 = 7284;
pub const Z_UTIL_X2_3643: u32 = 7286;
pub const Z_UTIL_X2_3644: u32 = 7288;
pub const Z_UTIL_X2_3645: u32 = 7290;
pub const Z_UTIL_X2_3646: u32 = 7292;
pub const Z_UTIL_X2_3647: u32 = 7294;
pub const Z_UTIL_X2_3648: u32 = 7296;
pub const Z_UTIL_X2_3649: u32 = 7298;
pub const Z_UTIL_X2_3650: u32 = 7300;
pub const Z_UTIL_X2_3651: u32 = 7302;
pub const Z_UTIL_X2_3652: u32 = 7304;
pub const Z_UTIL_X2_3653: u32 = 7306;
pub const Z_UTIL_X2_3654: u32 = 7308;
pub const Z_UTIL_X2_3655: u32 = 7310;
pub const Z_UTIL_X2_3656: u32 = 7312;
pub const Z_UTIL_X2_3657: u32 = 7314;
pub const Z_UTIL_X2_3658: u32 = 7316;
pub const Z_UTIL_X2_3659: u32 = 7318;
pub const Z_UTIL_X2_3660: u32 = 7320;
pub const Z_UTIL_X2_3661: u32 = 7322;
pub const Z_UTIL_X2_3662: u32 = 7324;
pub const Z_UTIL_X2_3663: u32 = 7326;
pub const Z_UTIL_X2_3664: u32 = 7328;
pub const Z_UTIL_X2_3665: u32 = 7330;
pub const Z_UTIL_X2_3666: u32 = 7332;
pub const Z_UTIL_X2_3667: u32 = 7334;
pub const Z_UTIL_X2_3668: u32 = 7336;
pub const Z_UTIL_X2_3669: u32 = 7338;
pub const Z_UTIL_X2_3670: u32 = 7340;
pub const Z_UTIL_X2_3671: u32 = 7342;
pub const Z_UTIL_X2_3672: u32 = 7344;
pub const Z_UTIL_X2_3673: u32 = 7346;
pub const Z_UTIL_X2_3674: u32 = 7348;
pub const Z_UTIL_X2_3675: u32 = 7350;
pub const Z_UTIL_X2_3676: u32 = 7352;
pub const Z_UTIL_X2_3677: u32 = 7354;
pub const Z_UTIL_X2_3678: u32 = 7356;
pub const Z_UTIL_X2_3679: u32 = 7358;
pub const Z_UTIL_X2_3680: u32 = 7360;
pub const Z_UTIL_X2_3681: u32 = 7362;
pub const Z_UTIL_X2_3682: u32 = 7364;
pub const Z_UTIL_X2_3683: u32 = 7366;
pub const Z_UTIL_X2_3684: u32 = 7368;
pub const Z_UTIL_X2_3685: u32 = 7370;
pub const Z_UTIL_X2_3686: u32 = 7372;
pub const Z_UTIL_X2_3687: u32 = 7374;
pub const Z_UTIL_X2_3688: u32 = 7376;
pub const Z_UTIL_X2_3689: u32 = 7378;
pub const Z_UTIL_X2_3690: u32 = 7380;
pub const Z_UTIL_X2_3691: u32 = 7382;
pub const Z_UTIL_X2_3692: u32 = 7384;
pub const Z_UTIL_X2_3693: u32 = 7386;
pub const Z_UTIL_X2_3694: u32 = 7388;
pub const Z_UTIL_X2_3695: u32 = 7390;
pub const Z_UTIL_X2_3696: u32 = 7392;
pub const Z_UTIL_X2_3697: u32 = 7394;
pub const Z_UTIL_X2_3698: u32 = 7396;
pub const Z_UTIL_X2_3699: u32 = 7398;
pub const Z_UTIL_X2_3700: u32 = 7400;
pub const Z_UTIL_X2_3701: u32 = 7402;
pub const Z_UTIL_X2_3702: u32 = 7404;
pub const Z_UTIL_X2_3703: u32 = 7406;
pub const Z_UTIL_X2_3704: u32 = 7408;
pub const Z_UTIL_X2_3705: u32 = 7410;
pub const Z_UTIL_X2_3706: u32 = 7412;
pub const Z_UTIL_X2_3707: u32 = 7414;
pub const Z_UTIL_X2_3708: u32 = 7416;
pub const Z_UTIL_X2_3709: u32 = 7418;
pub const Z_UTIL_X2_3710: u32 = 7420;
pub const Z_UTIL_X2_3711: u32 = 7422;
pub const Z_UTIL_X2_3712: u32 = 7424;
pub const Z_UTIL_X2_3713: u32 = 7426;
pub const Z_UTIL_X2_3714: u32 = 7428;
pub const Z_UTIL_X2_3715: u32 = 7430;
pub const Z_UTIL_X2_3716: u32 = 7432;
pub const Z_UTIL_X2_3717: u32 = 7434;
pub const Z_UTIL_X2_3718: u32 = 7436;
pub const Z_UTIL_X2_3719: u32 = 7438;
pub const Z_UTIL_X2_3720: u32 = 7440;
pub const Z_UTIL_X2_3721: u32 = 7442;
pub const Z_UTIL_X2_3722: u32 = 7444;
pub const Z_UTIL_X2_3723: u32 = 7446;
pub const Z_UTIL_X2_3724: u32 = 7448;
pub const Z_UTIL_X2_3725: u32 = 7450;
pub const Z_UTIL_X2_3726: u32 = 7452;
pub const Z_UTIL_X2_3727: u32 = 7454;
pub const Z_UTIL_X2_3728: u32 = 7456;
pub const Z_UTIL_X2_3729: u32 = 7458;
pub const Z_UTIL_X2_3730: u32 = 7460;
pub const Z_UTIL_X2_3731: u32 = 7462;
pub const Z_UTIL_X2_3732: u32 = 7464;
pub const Z_UTIL_X2_3733: u32 = 7466;
pub const Z_UTIL_X2_3734: u32 = 7468;
pub const Z_UTIL_X2_3735: u32 = 7470;
pub const Z_UTIL_X2_3736: u32 = 7472;
pub const Z_UTIL_X2_3737: u32 = 7474;
pub const Z_UTIL_X2_3738: u32 = 7476;
pub const Z_UTIL_X2_3739: u32 = 7478;
pub const Z_UTIL_X2_3740: u32 = 7480;
pub const Z_UTIL_X2_3741: u32 = 7482;
pub const Z_UTIL_X2_3742: u32 = 7484;
pub const Z_UTIL_X2_3743: u32 = 7486;
pub const Z_UTIL_X2_3744: u32 = 7488;
pub const Z_UTIL_X2_3745: u32 = 7490;
pub const Z_UTIL_X2_3746: u32 = 7492;
pub const Z_UTIL_X2_3747: u32 = 7494;
pub const Z_UTIL_X2_3748: u32 = 7496;
pub const Z_UTIL_X2_3749: u32 = 7498;
pub const Z_UTIL_X2_3750: u32 = 7500;
pub const Z_UTIL_X2_3751: u32 = 7502;
pub const Z_UTIL_X2_3752: u32 = 7504;
pub const Z_UTIL_X2_3753: u32 = 7506;
pub const Z_UTIL_X2_3754: u32 = 7508;
pub const Z_UTIL_X2_3755: u32 = 7510;
pub const Z_UTIL_X2_3756: u32 = 7512;
pub const Z_UTIL_X2_3757: u32 = 7514;
pub const Z_UTIL_X2_3758: u32 = 7516;
pub const Z_UTIL_X2_3759: u32 = 7518;
pub const Z_UTIL_X2_3760: u32 = 7520;
pub const Z_UTIL_X2_3761: u32 = 7522;
pub const Z_UTIL_X2_3762: u32 = 7524;
pub const Z_UTIL_X2_3763: u32 = 7526;
pub const Z_UTIL_X2_3764: u32 = 7528;
pub const Z_UTIL_X2_3765: u32 = 7530;
pub const Z_UTIL_X2_3766: u32 = 7532;
pub const Z_UTIL_X2_3767: u32 = 7534;
pub const Z_UTIL_X2_3768: u32 = 7536;
pub const Z_UTIL_X2_3769: u32 = 7538;
pub const Z_UTIL_X2_3770: u32 = 7540;
pub const Z_UTIL_X2_3771: u32 = 7542;
pub const Z_UTIL_X2_3772: u32 = 7544;
pub const Z_UTIL_X2_3773: u32 = 7546;
pub const Z_UTIL_X2_3774: u32 = 7548;
pub const Z_UTIL_X2_3775: u32 = 7550;
pub const Z_UTIL_X2_3776: u32 = 7552;
pub const Z_UTIL_X2_3777: u32 = 7554;
pub const Z_UTIL_X2_3778: u32 = 7556;
pub const Z_UTIL_X2_3779: u32 = 7558;
pub const Z_UTIL_X2_3780: u32 = 7560;
pub const Z_UTIL_X2_3781: u32 = 7562;
pub const Z_UTIL_X2_3782: u32 = 7564;
pub const Z_UTIL_X2_3783: u32 = 7566;
pub const Z_UTIL_X2_3784: u32 = 7568;
pub const Z_UTIL_X2_3785: u32 = 7570;
pub const Z_UTIL_X2_3786: u32 = 7572;
pub const Z_UTIL_X2_3787: u32 = 7574;
pub const Z_UTIL_X2_3788: u32 = 7576;
pub const Z_UTIL_X2_3789: u32 = 7578;
pub const Z_UTIL_X2_3790: u32 = 7580;
pub const Z_UTIL_X2_3791: u32 = 7582;
pub const Z_UTIL_X2_3792: u32 = 7584;
pub const Z_UTIL_X2_3793: u32 = 7586;
pub const Z_UTIL_X2_3794: u32 = 7588;
pub const Z_UTIL_X2_3795: u32 = 7590;
pub const Z_UTIL_X2_3796: u32 = 7592;
pub const Z_UTIL_X2_3797: u32 = 7594;
pub const Z_UTIL_X2_3798: u32 = 7596;
pub const Z_UTIL_X2_3799: u32 = 7598;
pub const Z_UTIL_X2_3800: u32 = 7600;
pub const Z_UTIL_X2_3801: u32 = 7602;
pub const Z_UTIL_X2_3802: u32 = 7604;
pub const Z_UTIL_X2_3803: u32 = 7606;
pub const Z_UTIL_X2_3804: u32 = 7608;
pub const Z_UTIL_X2_3805: u32 = 7610;
pub const Z_UTIL_X2_3806: u32 = 7612;
pub const Z_UTIL_X2_3807: u32 = 7614;
pub const Z_UTIL_X2_3808: u32 = 7616;
pub const Z_UTIL_X2_3809: u32 = 7618;
pub const Z_UTIL_X2_3810: u32 = 7620;
pub const Z_UTIL_X2_3811: u32 = 7622;
pub const Z_UTIL_X2_3812: u32 = 7624;
pub const Z_UTIL_X2_3813: u32 = 7626;
pub const Z_UTIL_X2_3814: u32 = 7628;
pub const Z_UTIL_X2_3815: u32 = 7630;
pub const Z_UTIL_X2_3816: u32 = 7632;
pub const Z_UTIL_X2_3817: u32 = 7634;
pub const Z_UTIL_X2_3818: u32 = 7636;
pub const Z_UTIL_X2_3819: u32 = 7638;
pub const Z_UTIL_X2_3820: u32 = 7640;
pub const Z_UTIL_X2_3821: u32 = 7642;
pub const Z_UTIL_X2_3822: u32 = 7644;
pub const Z_UTIL_X2_3823: u32 = 7646;
pub const Z_UTIL_X2_3824: u32 = 7648;
pub const Z_UTIL_X2_3825: u32 = 7650;
pub const Z_UTIL_X2_3826: u32 = 7652;
pub const Z_UTIL_X2_3827: u32 = 7654;
pub const Z_UTIL_X2_3828: u32 = 7656;
pub const Z_UTIL_X2_3829: u32 = 7658;
pub const Z_UTIL_X2_3830: u32 = 7660;
pub const Z_UTIL_X2_3831: u32 = 7662;
pub const Z_UTIL_X2_3832: u32 = 7664;
pub const Z_UTIL_X2_3833: u32 = 7666;
pub const Z_UTIL_X2_3834: u32 = 7668;
pub const Z_UTIL_X2_3835: u32 = 7670;
pub const Z_UTIL_X2_3836: u32 = 7672;
pub const Z_UTIL_X2_3837: u32 = 7674;
pub const Z_UTIL_X2_3838: u32 = 7676;
pub const Z_UTIL_X2_3839: u32 = 7678;
pub const Z_UTIL_X2_3840: u32 = 7680;
pub const Z_UTIL_X2_3841: u32 = 7682;
pub const Z_UTIL_X2_3842: u32 = 7684;
pub const Z_UTIL_X2_3843: u32 = 7686;
pub const Z_UTIL_X2_3844: u32 = 7688;
pub const Z_UTIL_X2_3845: u32 = 7690;
pub const Z_UTIL_X2_3846: u32 = 7692;
pub const Z_UTIL_X2_3847: u32 = 7694;
pub const Z_UTIL_X2_3848: u32 = 7696;
pub const Z_UTIL_X2_3849: u32 = 7698;
pub const Z_UTIL_X2_3850: u32 = 7700;
pub const Z_UTIL_X2_3851: u32 = 7702;
pub const Z_UTIL_X2_3852: u32 = 7704;
pub const Z_UTIL_X2_3853: u32 = 7706;
pub const Z_UTIL_X2_3854: u32 = 7708;
pub const Z_UTIL_X2_3855: u32 = 7710;
pub const Z_UTIL_X2_3856: u32 = 7712;
pub const Z_UTIL_X2_3857: u32 = 7714;
pub const Z_UTIL_X2_3858: u32 = 7716;
pub const Z_UTIL_X2_3859: u32 = 7718;
pub const Z_UTIL_X2_3860: u32 = 7720;
pub const Z_UTIL_X2_3861: u32 = 7722;
pub const Z_UTIL_X2_3862: u32 = 7724;
pub const Z_UTIL_X2_3863: u32 = 7726;
pub const Z_UTIL_X2_3864: u32 = 7728;
pub const Z_UTIL_X2_3865: u32 = 7730;
pub const Z_UTIL_X2_3866: u32 = 7732;
pub const Z_UTIL_X2_3867: u32 = 7734;
pub const Z_UTIL_X2_3868: u32 = 7736;
pub const Z_UTIL_X2_3869: u32 = 7738;
pub const Z_UTIL_X2_3870: u32 = 7740;
pub const Z_UTIL_X2_3871: u32 = 7742;
pub const Z_UTIL_X2_3872: u32 = 7744;
pub const Z_UTIL_X2_3873: u32 = 7746;
pub const Z_UTIL_X2_3874: u32 = 7748;
pub const Z_UTIL_X2_3875: u32 = 7750;
pub const Z_UTIL_X2_3876: u32 = 7752;
pub const Z_UTIL_X2_3877: u32 = 7754;
pub const Z_UTIL_X2_3878: u32 = 7756;
pub const Z_UTIL_X2_3879: u32 = 7758;
pub const Z_UTIL_X2_3880: u32 = 7760;
pub const Z_UTIL_X2_3881: u32 = 7762;
pub const Z_UTIL_X2_3882: u32 = 7764;
pub const Z_UTIL_X2_3883: u32 = 7766;
pub const Z_UTIL_X2_3884: u32 = 7768;
pub const Z_UTIL_X2_3885: u32 = 7770;
pub const Z_UTIL_X2_3886: u32 = 7772;
pub const Z_UTIL_X2_3887: u32 = 7774;
pub const Z_UTIL_X2_3888: u32 = 7776;
pub const Z_UTIL_X2_3889: u32 = 7778;
pub const Z_UTIL_X2_3890: u32 = 7780;
pub const Z_UTIL_X2_3891: u32 = 7782;
pub const Z_UTIL_X2_3892: u32 = 7784;
pub const Z_UTIL_X2_3893: u32 = 7786;
pub const Z_UTIL_X2_3894: u32 = 7788;
pub const Z_UTIL_X2_3895: u32 = 7790;
pub const Z_UTIL_X2_3896: u32 = 7792;
pub const Z_UTIL_X2_3897: u32 = 7794;
pub const Z_UTIL_X2_3898: u32 = 7796;
pub const Z_UTIL_X2_3899: u32 = 7798;
pub const Z_UTIL_X2_3900: u32 = 7800;
pub const Z_UTIL_X2_3901: u32 = 7802;
pub const Z_UTIL_X2_3902: u32 = 7804;
pub const Z_UTIL_X2_3903: u32 = 7806;
pub const Z_UTIL_X2_3904: u32 = 7808;
pub const Z_UTIL_X2_3905: u32 = 7810;
pub const Z_UTIL_X2_3906: u32 = 7812;
pub const Z_UTIL_X2_3907: u32 = 7814;
pub const Z_UTIL_X2_3908: u32 = 7816;
pub const Z_UTIL_X2_3909: u32 = 7818;
pub const Z_UTIL_X2_3910: u32 = 7820;
pub const Z_UTIL_X2_3911: u32 = 7822;
pub const Z_UTIL_X2_3912: u32 = 7824;
pub const Z_UTIL_X2_3913: u32 = 7826;
pub const Z_UTIL_X2_3914: u32 = 7828;
pub const Z_UTIL_X2_3915: u32 = 7830;
pub const Z_UTIL_X2_3916: u32 = 7832;
pub const Z_UTIL_X2_3917: u32 = 7834;
pub const Z_UTIL_X2_3918: u32 = 7836;
pub const Z_UTIL_X2_3919: u32 = 7838;
pub const Z_UTIL_X2_3920: u32 = 7840;
pub const Z_UTIL_X2_3921: u32 = 7842;
pub const Z_UTIL_X2_3922: u32 = 7844;
pub const Z_UTIL_X2_3923: u32 = 7846;
pub const Z_UTIL_X2_3924: u32 = 7848;
pub const Z_UTIL_X2_3925: u32 = 7850;
pub const Z_UTIL_X2_3926: u32 = 7852;
pub const Z_UTIL_X2_3927: u32 = 7854;
pub const Z_UTIL_X2_3928: u32 = 7856;
pub const Z_UTIL_X2_3929: u32 = 7858;
pub const Z_UTIL_X2_3930: u32 = 7860;
pub const Z_UTIL_X2_3931: u32 = 7862;
pub const Z_UTIL_X2_3932: u32 = 7864;
pub const Z_UTIL_X2_3933: u32 = 7866;
pub const Z_UTIL_X2_3934: u32 = 7868;
pub const Z_UTIL_X2_3935: u32 = 7870;
pub const Z_UTIL_X2_3936: u32 = 7872;
pub const Z_UTIL_X2_3937: u32 = 7874;
pub const Z_UTIL_X2_3938: u32 = 7876;
pub const Z_UTIL_X2_3939: u32 = 7878;
pub const Z_UTIL_X2_3940: u32 = 7880;
pub const Z_UTIL_X2_3941: u32 = 7882;
pub const Z_UTIL_X2_3942: u32 = 7884;
pub const Z_UTIL_X2_3943: u32 = 7886;
pub const Z_UTIL_X2_3944: u32 = 7888;
pub const Z_UTIL_X2_3945: u32 = 7890;
pub const Z_UTIL_X2_3946: u32 = 7892;
pub const Z_UTIL_X2_3947: u32 = 7894;
pub const Z_UTIL_X2_3948: u32 = 7896;
pub const Z_UTIL_X2_3949: u32 = 7898;
pub const Z_UTIL_X2_3950: u32 = 7900;
pub const Z_UTIL_X2_3951: u32 = 7902;
pub const Z_UTIL_X2_3952: u32 = 7904;
pub const Z_UTIL_X2_3953: u32 = 7906;
pub const Z_UTIL_X2_3954: u32 = 7908;
pub const Z_UTIL_X2_3955: u32 = 7910;
pub const Z_UTIL_X2_3956: u32 = 7912;
pub const Z_UTIL_X2_3957: u32 = 7914;
pub const Z_UTIL_X2_3958: u32 = 7916;
pub const Z_UTIL_X2_3959: u32 = 7918;
pub const Z_UTIL_X2_3960: u32 = 7920;
pub const Z_UTIL_X2_3961: u32 = 7922;
pub const Z_UTIL_X2_3962: u32 = 7924;
pub const Z_UTIL_X2_3963: u32 = 7926;
pub const Z_UTIL_X2_3964: u32 = 7928;
pub const Z_UTIL_X2_3965: u32 = 7930;
pub const Z_UTIL_X2_3966: u32 = 7932;
pub const Z_UTIL_X2_3967: u32 = 7934;
pub const Z_UTIL_X2_3968: u32 = 7936;
pub const Z_UTIL_X2_3969: u32 = 7938;
pub const Z_UTIL_X2_3970: u32 = 7940;
pub const Z_UTIL_X2_3971: u32 = 7942;
pub const Z_UTIL_X2_3972: u32 = 7944;
pub const Z_UTIL_X2_3973: u32 = 7946;
pub const Z_UTIL_X2_3974: u32 = 7948;
pub const Z_UTIL_X2_3975: u32 = 7950;
pub const Z_UTIL_X2_3976: u32 = 7952;
pub const Z_UTIL_X2_3977: u32 = 7954;
pub const Z_UTIL_X2_3978: u32 = 7956;
pub const Z_UTIL_X2_3979: u32 = 7958;
pub const Z_UTIL_X2_3980: u32 = 7960;
pub const Z_UTIL_X2_3981: u32 = 7962;
pub const Z_UTIL_X2_3982: u32 = 7964;
pub const Z_UTIL_X2_3983: u32 = 7966;
pub const Z_UTIL_X2_3984: u32 = 7968;
pub const Z_UTIL_X2_3985: u32 = 7970;
pub const Z_UTIL_X2_3986: u32 = 7972;
pub const Z_UTIL_X2_3987: u32 = 7974;
pub const Z_UTIL_X2_3988: u32 = 7976;
pub const Z_UTIL_X2_3989: u32 = 7978;
pub const Z_UTIL_X2_3990: u32 = 7980;
pub const Z_UTIL_X2_3991: u32 = 7982;
pub const Z_UTIL_X2_3992: u32 = 7984;
pub const Z_UTIL_X2_3993: u32 = 7986;
pub const Z_UTIL_X2_3994: u32 = 7988;
pub const Z_UTIL_X2_3995: u32 = 7990;
pub const Z_UTIL_X2_3996: u32 = 7992;
pub const Z_UTIL_X2_3997: u32 = 7994;
pub const Z_UTIL_X2_3998: u32 = 7996;
pub const Z_UTIL_X2_3999: u32 = 7998;
pub const Z_UTIL_X2_4000: u32 = 8000;
pub const Z_UTIL_X2_4001: u32 = 8002;
pub const Z_UTIL_X2_4002: u32 = 8004;
pub const Z_UTIL_X2_4003: u32 = 8006;
pub const Z_UTIL_X2_4004: u32 = 8008;
pub const Z_UTIL_X2_4005: u32 = 8010;
pub const Z_UTIL_X2_4006: u32 = 8012;
pub const Z_UTIL_X2_4007: u32 = 8014;
pub const Z_UTIL_X2_4008: u32 = 8016;
pub const Z_UTIL_X2_4009: u32 = 8018;
pub const Z_UTIL_X2_4010: u32 = 8020;
pub const Z_UTIL_X2_4011: u32 = 8022;
pub const Z_UTIL_X2_4012: u32 = 8024;
pub const Z_UTIL_X2_4013: u32 = 8026;
pub const Z_UTIL_X2_4014: u32 = 8028;
pub const Z_UTIL_X2_4015: u32 = 8030;
pub const Z_UTIL_X2_4016: u32 = 8032;
pub const Z_UTIL_X2_4017: u32 = 8034;
pub const Z_UTIL_X2_4018: u32 = 8036;
pub const Z_UTIL_X2_4019: u32 = 8038;
pub const Z_UTIL_X2_4020: u32 = 8040;
pub const Z_UTIL_X2_4021: u32 = 8042;
pub const Z_UTIL_X2_4022: u32 = 8044;
pub const Z_UTIL_X2_4023: u32 = 8046;
pub const Z_UTIL_X2_4024: u32 = 8048;
pub const Z_UTIL_X2_4025: u32 = 8050;
pub const Z_UTIL_X2_4026: u32 = 8052;
pub const Z_UTIL_X2_4027: u32 = 8054;
pub const Z_UTIL_X2_4028: u32 = 8056;
pub const Z_UTIL_X2_4029: u32 = 8058;
pub const Z_UTIL_X2_4030: u32 = 8060;
pub const Z_UTIL_X2_4031: u32 = 8062;
pub const Z_UTIL_X2_4032: u32 = 8064;
pub const Z_UTIL_X2_4033: u32 = 8066;
pub const Z_UTIL_X2_4034: u32 = 8068;
pub const Z_UTIL_X2_4035: u32 = 8070;
pub const Z_UTIL_X2_4036: u32 = 8072;
pub const Z_UTIL_X2_4037: u32 = 8074;
pub const Z_UTIL_X2_4038: u32 = 8076;
pub const Z_UTIL_X2_4039: u32 = 8078;
pub const Z_UTIL_X2_4040: u32 = 8080;
pub const Z_UTIL_X2_4041: u32 = 8082;
pub const Z_UTIL_X2_4042: u32 = 8084;
pub const Z_UTIL_X2_4043: u32 = 8086;
pub const Z_UTIL_X2_4044: u32 = 8088;
pub const Z_UTIL_X2_4045: u32 = 8090;
pub const Z_UTIL_X2_4046: u32 = 8092;
pub const Z_UTIL_X2_4047: u32 = 8094;
pub const Z_UTIL_X2_4048: u32 = 8096;
pub const Z_UTIL_X2_4049: u32 = 8098;
pub const Z_UTIL_X2_4050: u32 = 8100;
pub const Z_UTIL_X2_4051: u32 = 8102;
pub const Z_UTIL_X2_4052: u32 = 8104;
pub const Z_UTIL_X2_4053: u32 = 8106;
pub const Z_UTIL_X2_4054: u32 = 8108;
pub const Z_UTIL_X2_4055: u32 = 8110;
pub const Z_UTIL_X2_4056: u32 = 8112;
pub const Z_UTIL_X2_4057: u32 = 8114;
pub const Z_UTIL_X2_4058: u32 = 8116;
pub const Z_UTIL_X2_4059: u32 = 8118;
pub const Z_UTIL_X2_4060: u32 = 8120;
pub const Z_UTIL_X2_4061: u32 = 8122;
pub const Z_UTIL_X2_4062: u32 = 8124;
pub const Z_UTIL_X2_4063: u32 = 8126;
pub const Z_UTIL_X2_4064: u32 = 8128;
pub const Z_UTIL_X2_4065: u32 = 8130;
pub const Z_UTIL_X2_4066: u32 = 8132;
pub const Z_UTIL_X2_4067: u32 = 8134;
pub const Z_UTIL_X2_4068: u32 = 8136;
pub const Z_UTIL_X2_4069: u32 = 8138;
pub const Z_UTIL_X2_4070: u32 = 8140;
pub const Z_UTIL_X2_4071: u32 = 8142;
pub const Z_UTIL_X2_4072: u32 = 8144;
pub const Z_UTIL_X2_4073: u32 = 8146;
pub const Z_UTIL_X2_4074: u32 = 8148;
pub const Z_UTIL_X2_4075: u32 = 8150;
pub const Z_UTIL_X2_4076: u32 = 8152;
pub const Z_UTIL_X2_4077: u32 = 8154;
pub const Z_UTIL_X2_4078: u32 = 8156;
pub const Z_UTIL_X2_4079: u32 = 8158;
pub const Z_UTIL_X2_4080: u32 = 8160;
pub const Z_UTIL_X2_4081: u32 = 8162;
pub const Z_UTIL_X2_4082: u32 = 8164;
pub const Z_UTIL_X2_4083: u32 = 8166;
pub const Z_UTIL_X2_4084: u32 = 8168;
pub const Z_UTIL_X2_4085: u32 = 8170;
pub const Z_UTIL_X2_4086: u32 = 8172;
pub const Z_UTIL_X2_4087: u32 = 8174;
pub const Z_UTIL_X2_4088: u32 = 8176;
pub const Z_UTIL_X2_4089: u32 = 8178;
pub const Z_UTIL_X2_4090: u32 = 8180;
pub const Z_UTIL_X2_4091: u32 = 8182;
pub const Z_UTIL_X2_4092: u32 = 8184;
pub const Z_UTIL_X2_4093: u32 = 8186;
pub const Z_UTIL_X2_4094: u32 = 8188;
pub const Z_UTIL_X2_4095: u32 = 8190;
pub const SYS_FOREVER_MS: i32 = -1;
pub const SYS_FOREVER_US: i32 = -1;
pub const Z_HZ_ms: u32 = 1000;
pub const Z_HZ_us: u32 = 1000000;
pub const Z_HZ_ns: u32 = 1000000000;
pub const Z_HZ_ticks: u32 = 32768;
pub const SYS_SFLIST_FLAGS_MASK: u32 = 3;
pub const _NON_PREEMPT_THRESHOLD: u32 = 128;
pub const _PREEMPT_THRESHOLD: u32 = 127;
pub const K_SYSCALL_CLOCK_GETTIME: u32 = 0;
pub const K_SYSCALL_DEVICE_GET_BINDING: u32 = 1;
pub const K_SYSCALL_DEVICE_IS_READY: u32 = 2;
pub const K_SYSCALL_GPIO_GET_PENDING_INT: u32 = 3;
pub const K_SYSCALL_GPIO_PIN_CONFIGURE: u32 = 4;
pub const K_SYSCALL_GPIO_PIN_GET_CONFIG: u32 = 5;
pub const K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE: u32 = 6;
pub const K_SYSCALL_GPIO_PORT_CLEAR_BITS_RAW: u32 = 7;
pub const K_SYSCALL_GPIO_PORT_GET_DIRECTION: u32 = 8;
pub const K_SYSCALL_GPIO_PORT_GET_RAW: u32 = 9;
pub const K_SYSCALL_GPIO_PORT_SET_BITS_RAW: u32 = 10;
pub const K_SYSCALL_GPIO_PORT_SET_MASKED_RAW: u32 = 11;
pub const K_SYSCALL_GPIO_PORT_TOGGLE_BITS: u32 = 12;
pub const K_SYSCALL_K_BUSY_WAIT: u32 = 13;
pub const K_SYSCALL_K_CONDVAR_BROADCAST: u32 = 14;
pub const K_SYSCALL_K_CONDVAR_INIT: u32 = 15;
pub const K_SYSCALL_K_CONDVAR_SIGNAL: u32 = 16;
pub const K_SYSCALL_K_CONDVAR_WAIT: u32 = 17;
pub const K_SYSCALL_K_EVENT_CLEAR: u32 = 18;
pub const K_SYSCALL_K_EVENT_INIT: u32 = 19;
pub const K_SYSCALL_K_EVENT_POST: u32 = 20;
pub const K_SYSCALL_K_EVENT_SET: u32 = 21;
pub const K_SYSCALL_K_EVENT_SET_MASKED: u32 = 22;
pub const K_SYSCALL_K_EVENT_WAIT: u32 = 23;
pub const K_SYSCALL_K_EVENT_WAIT_ALL: u32 = 24;
pub const K_SYSCALL_K_FLOAT_DISABLE: u32 = 25;
pub const K_SYSCALL_K_FLOAT_ENABLE: u32 = 26;
pub const K_SYSCALL_K_FUTEX_WAIT: u32 = 27;
pub const K_SYSCALL_K_FUTEX_WAKE: u32 = 28;
pub const K_SYSCALL_K_IS_PREEMPT_THREAD: u32 = 29;
pub const K_SYSCALL_K_MSGQ_ALLOC_INIT: u32 = 30;
pub const K_SYSCALL_K_MSGQ_GET: u32 = 31;
pub const K_SYSCALL_K_MSGQ_GET_ATTRS: u32 = 32;
pub const K_SYSCALL_K_MSGQ_NUM_FREE_GET: u32 = 33;
pub const K_SYSCALL_K_MSGQ_NUM_USED_GET: u32 = 34;
pub const K_SYSCALL_K_MSGQ_PEEK: u32 = 35;
pub const K_SYSCALL_K_MSGQ_PEEK_AT: u32 = 36;
pub const K_SYSCALL_K_MSGQ_PURGE: u32 = 37;
pub const K_SYSCALL_K_MSGQ_PUT: u32 = 38;
pub const K_SYSCALL_K_MUTEX_INIT: u32 = 39;
pub const K_SYSCALL_K_MUTEX_LOCK: u32 = 40;
pub const K_SYSCALL_K_MUTEX_UNLOCK: u32 = 41;
pub const K_SYSCALL_K_OBJECT_ACCESS_GRANT: u32 = 42;
pub const K_SYSCALL_K_OBJECT_ALLOC: u32 = 43;
pub const K_SYSCALL_K_OBJECT_ALLOC_SIZE: u32 = 44;
pub const K_SYSCALL_K_OBJECT_RELEASE: u32 = 45;
pub const K_SYSCALL_K_PIPE_ALLOC_INIT: u32 = 46;
pub const K_SYSCALL_K_PIPE_BUFFER_FLUSH: u32 = 47;
pub const K_SYSCALL_K_PIPE_FLUSH: u32 = 48;
pub const K_SYSCALL_K_PIPE_GET: u32 = 49;
pub const K_SYSCALL_K_PIPE_PUT: u32 = 50;
pub const K_SYSCALL_K_PIPE_READ_AVAIL: u32 = 51;
pub const K_SYSCALL_K_PIPE_WRITE_AVAIL: u32 = 52;
pub const K_SYSCALL_K_POLL: u32 = 53;
pub const K_SYSCALL_K_POLL_SIGNAL_CHECK: u32 = 54;
pub const K_SYSCALL_K_POLL_SIGNAL_INIT: u32 = 55;
pub const K_SYSCALL_K_POLL_SIGNAL_RAISE: u32 = 56;
pub const K_SYSCALL_K_POLL_SIGNAL_RESET: u32 = 57;
pub const K_SYSCALL_K_QUEUE_ALLOC_APPEND: u32 = 58;
pub const K_SYSCALL_K_QUEUE_ALLOC_PREPEND: u32 = 59;
pub const K_SYSCALL_K_QUEUE_CANCEL_WAIT: u32 = 60;
pub const K_SYSCALL_K_QUEUE_GET: u32 = 61;
pub const K_SYSCALL_K_QUEUE_INIT: u32 = 62;
pub const K_SYSCALL_K_QUEUE_IS_EMPTY: u32 = 63;
pub const K_SYSCALL_K_QUEUE_PEEK_HEAD: u32 = 64;
pub const K_SYSCALL_K_QUEUE_PEEK_TAIL: u32 = 65;
pub const K_SYSCALL_K_SCHED_CURRENT_THREAD_QUERY: u32 = 66;
pub const K_SYSCALL_K_SEM_COUNT_GET: u32 = 67;
pub const K_SYSCALL_K_SEM_GIVE: u32 = 68;
pub const K_SYSCALL_K_SEM_INIT: u32 = 69;
pub const K_SYSCALL_K_SEM_RESET: u32 = 70;
pub const K_SYSCALL_K_SEM_TAKE: u32 = 71;
pub const K_SYSCALL_K_SLEEP: u32 = 72;
pub const K_SYSCALL_K_STACK_ALLOC_INIT: u32 = 73;
pub const K_SYSCALL_K_STACK_POP: u32 = 74;
pub const K_SYSCALL_K_STACK_PUSH: u32 = 75;
pub const K_SYSCALL_K_STR_OUT: u32 = 76;
pub const K_SYSCALL_K_THREAD_ABORT: u32 = 77;
pub const K_SYSCALL_K_THREAD_CREATE: u32 = 78;
pub const K_SYSCALL_K_THREAD_CUSTOM_DATA_GET: u32 = 79;
pub const K_SYSCALL_K_THREAD_CUSTOM_DATA_SET: u32 = 80;
pub const K_SYSCALL_K_THREAD_DEADLINE_SET: u32 = 81;
pub const K_SYSCALL_K_THREAD_JOIN: u32 = 82;
pub const K_SYSCALL_K_THREAD_NAME_COPY: u32 = 83;
pub const K_SYSCALL_K_THREAD_NAME_SET: u32 = 84;
pub const K_SYSCALL_K_THREAD_PRIORITY_GET: u32 = 85;
pub const K_SYSCALL_K_THREAD_PRIORITY_SET: u32 = 86;
pub const K_SYSCALL_K_THREAD_RESUME: u32 = 87;
pub const K_SYSCALL_K_THREAD_STACK_ALLOC: u32 = 88;
pub const K_SYSCALL_K_THREAD_STACK_FREE: u32 = 89;
pub const K_SYSCALL_K_THREAD_STACK_SPACE_GET: u32 = 90;
pub const K_SYSCALL_K_THREAD_START: u32 = 91;
pub const K_SYSCALL_K_THREAD_SUSPEND: u32 = 92;
pub const K_SYSCALL_K_THREAD_TIMEOUT_EXPIRES_TICKS: u32 = 93;
pub const K_SYSCALL_K_THREAD_TIMEOUT_REMAINING_TICKS: u32 = 94;
pub const K_SYSCALL_K_TIMER_EXPIRES_TICKS: u32 = 95;
pub const K_SYSCALL_K_TIMER_REMAINING_TICKS: u32 = 96;
pub const K_SYSCALL_K_TIMER_START: u32 = 97;
pub const K_SYSCALL_K_TIMER_STATUS_GET: u32 = 98;
pub const K_SYSCALL_K_TIMER_STATUS_SYNC: u32 = 99;
pub const K_SYSCALL_K_TIMER_STOP: u32 = 100;
pub const K_SYSCALL_K_TIMER_USER_DATA_GET: u32 = 101;
pub const K_SYSCALL_K_TIMER_USER_DATA_SET: u32 = 102;
pub const K_SYSCALL_K_UPTIME_TICKS: u32 = 103;
pub const K_SYSCALL_K_USLEEP: u32 = 104;
pub const K_SYSCALL_K_WAKEUP: u32 = 105;
pub const K_SYSCALL_K_YIELD: u32 = 106;
pub const K_SYSCALL_LOG_BUFFERED_CNT: u32 = 107;
pub const K_SYSCALL_LOG_FILTER_SET: u32 = 108;
pub const K_SYSCALL_LOG_PANIC: u32 = 109;
pub const K_SYSCALL_LOG_PROCESS: u32 = 110;
pub const K_SYSCALL_SYS_CLOCK_HW_CYCLES_PER_SEC_RUNTIME_GET: u32 = 111;
pub const K_SYSCALL_UART_CONFIGURE: u32 = 112;
pub const K_SYSCALL_UART_CONFIG_GET: u32 = 113;
pub const K_SYSCALL_UART_DRV_CMD: u32 = 114;
pub const K_SYSCALL_UART_ERR_CHECK: u32 = 115;
pub const K_SYSCALL_UART_IRQ_ERR_DISABLE: u32 = 116;
pub const K_SYSCALL_UART_IRQ_ERR_ENABLE: u32 = 117;
pub const K_SYSCALL_UART_IRQ_IS_PENDING: u32 = 118;
pub const K_SYSCALL_UART_IRQ_RX_DISABLE: u32 = 119;
pub const K_SYSCALL_UART_IRQ_RX_ENABLE: u32 = 120;
pub const K_SYSCALL_UART_IRQ_TX_DISABLE: u32 = 121;
pub const K_SYSCALL_UART_IRQ_TX_ENABLE: u32 = 122;
pub const K_SYSCALL_UART_IRQ_UPDATE: u32 = 123;
pub const K_SYSCALL_UART_LINE_CTRL_GET: u32 = 124;
pub const K_SYSCALL_UART_LINE_CTRL_SET: u32 = 125;
pub const K_SYSCALL_UART_POLL_IN: u32 = 126;
pub const K_SYSCALL_UART_POLL_IN_U16: u32 = 127;
pub const K_SYSCALL_UART_POLL_OUT: u32 = 128;
pub const K_SYSCALL_UART_POLL_OUT_U16: u32 = 129;
pub const K_SYSCALL_UART_RX_DISABLE: u32 = 130;
pub const K_SYSCALL_UART_RX_ENABLE: u32 = 131;
pub const K_SYSCALL_UART_RX_ENABLE_U16: u32 = 132;
pub const K_SYSCALL_UART_TX: u32 = 133;
pub const K_SYSCALL_UART_TX_ABORT: u32 = 134;
pub const K_SYSCALL_UART_TX_U16: u32 = 135;
pub const K_SYSCALL_ZEPHYR_FPUTC: u32 = 136;
pub const K_SYSCALL_ZEPHYR_FWRITE: u32 = 137;
pub const K_SYSCALL_ZEPHYR_READ_STDIN: u32 = 138;
pub const K_SYSCALL_ZEPHYR_WRITE_STDOUT: u32 = 139;
pub const K_SYSCALL_Z_LOG_MSG_SIMPLE_CREATE_0: u32 = 140;
pub const K_SYSCALL_Z_LOG_MSG_SIMPLE_CREATE_1: u32 = 141;
pub const K_SYSCALL_Z_LOG_MSG_SIMPLE_CREATE_2: u32 = 142;
pub const K_SYSCALL_Z_LOG_MSG_STATIC_CREATE: u32 = 143;
pub const K_SYSCALL_Z_SYS_MUTEX_KERNEL_LOCK: u32 = 144;
pub const K_SYSCALL_Z_SYS_MUTEX_KERNEL_UNLOCK: u32 = 145;
pub const K_SYSCALL_BAD: u32 = 146;
pub const K_SYSCALL_LIMIT: u32 = 147;
pub const K_SYSCALL_ADC_CHANNEL_SETUP: u32 = 148;
pub const K_SYSCALL_ADC_READ: u32 = 149;
pub const K_SYSCALL_ADC_READ_ASYNC: u32 = 150;
pub const K_SYSCALL_ATOMIC_ADD: u32 = 151;
pub const K_SYSCALL_ATOMIC_AND: u32 = 152;
pub const K_SYSCALL_ATOMIC_CAS: u32 = 153;
pub const K_SYSCALL_ATOMIC_NAND: u32 = 154;
pub const K_SYSCALL_ATOMIC_OR: u32 = 155;
pub const K_SYSCALL_ATOMIC_PTR_CAS: u32 = 156;
pub const K_SYSCALL_ATOMIC_PTR_SET: u32 = 157;
pub const K_SYSCALL_ATOMIC_SET: u32 = 158;
pub const K_SYSCALL_ATOMIC_SUB: u32 = 159;
pub const K_SYSCALL_ATOMIC_XOR: u32 = 160;
pub const K_SYSCALL_AUXDISPLAY_BACKLIGHT_GET: u32 = 161;
pub const K_SYSCALL_AUXDISPLAY_BACKLIGHT_SET: u32 = 162;
pub const K_SYSCALL_AUXDISPLAY_BRIGHTNESS_GET: u32 = 163;
pub const K_SYSCALL_AUXDISPLAY_BRIGHTNESS_SET: u32 = 164;
pub const K_SYSCALL_AUXDISPLAY_CAPABILITIES_GET: u32 = 165;
pub const K_SYSCALL_AUXDISPLAY_CLEAR: u32 = 166;
pub const K_SYSCALL_AUXDISPLAY_CURSOR_POSITION_GET: u32 = 167;
pub const K_SYSCALL_AUXDISPLAY_CURSOR_POSITION_SET: u32 = 168;
pub const K_SYSCALL_AUXDISPLAY_CURSOR_SET_ENABLED: u32 = 169;
pub const K_SYSCALL_AUXDISPLAY_CURSOR_SHIFT_SET: u32 = 170;
pub const K_SYSCALL_AUXDISPLAY_CUSTOM_CHARACTER_SET: u32 = 171;
pub const K_SYSCALL_AUXDISPLAY_CUSTOM_COMMAND: u32 = 172;
pub const K_SYSCALL_AUXDISPLAY_DISPLAY_OFF: u32 = 173;
pub const K_SYSCALL_AUXDISPLAY_DISPLAY_ON: u32 = 174;
pub const K_SYSCALL_AUXDISPLAY_DISPLAY_POSITION_GET: u32 = 175;
pub const K_SYSCALL_AUXDISPLAY_DISPLAY_POSITION_SET: u32 = 176;
pub const K_SYSCALL_AUXDISPLAY_IS_BUSY: u32 = 177;
pub const K_SYSCALL_AUXDISPLAY_POSITION_BLINKING_SET_ENABLED: u32 = 178;
pub const K_SYSCALL_AUXDISPLAY_WRITE: u32 = 179;
pub const K_SYSCALL_BBRAM_CHECK_INVALID: u32 = 180;
pub const K_SYSCALL_BBRAM_CHECK_POWER: u32 = 181;
pub const K_SYSCALL_BBRAM_CHECK_STANDBY_POWER: u32 = 182;
pub const K_SYSCALL_BBRAM_GET_SIZE: u32 = 183;
pub const K_SYSCALL_BBRAM_READ: u32 = 184;
pub const K_SYSCALL_BBRAM_WRITE: u32 = 185;
pub const K_SYSCALL_BC12_SET_RESULT_CB: u32 = 186;
pub const K_SYSCALL_BC12_SET_ROLE: u32 = 187;
pub const K_SYSCALL_CAN_ADD_RX_FILTER_MSGQ: u32 = 188;
pub const K_SYSCALL_CAN_CALC_TIMING: u32 = 189;
pub const K_SYSCALL_CAN_CALC_TIMING_DATA: u32 = 190;
pub const K_SYSCALL_CAN_GET_CAPABILITIES: u32 = 191;
pub const K_SYSCALL_CAN_GET_CORE_CLOCK: u32 = 192;
pub const K_SYSCALL_CAN_GET_MAX_BITRATE: u32 = 193;
pub const K_SYSCALL_CAN_GET_MAX_FILTERS: u32 = 194;
pub const K_SYSCALL_CAN_GET_STATE: u32 = 195;
pub const K_SYSCALL_CAN_GET_TIMING_DATA_MAX: u32 = 196;
pub const K_SYSCALL_CAN_GET_TIMING_DATA_MIN: u32 = 197;
pub const K_SYSCALL_CAN_GET_TIMING_MAX: u32 = 198;
pub const K_SYSCALL_CAN_GET_TIMING_MIN: u32 = 199;
pub const K_SYSCALL_CAN_RECOVER: u32 = 200;
pub const K_SYSCALL_CAN_REMOVE_RX_FILTER: u32 = 201;
pub const K_SYSCALL_CAN_SEND: u32 = 202;
pub const K_SYSCALL_CAN_SET_BITRATE: u32 = 203;
pub const K_SYSCALL_CAN_SET_BITRATE_DATA: u32 = 204;
pub const K_SYSCALL_CAN_SET_MODE: u32 = 205;
pub const K_SYSCALL_CAN_SET_TIMING: u32 = 206;
pub const K_SYSCALL_CAN_SET_TIMING_DATA: u32 = 207;
pub const K_SYSCALL_CAN_START: u32 = 208;
pub const K_SYSCALL_CAN_STATS_GET_ACK_ERRORS: u32 = 209;
pub const K_SYSCALL_CAN_STATS_GET_BIT0_ERRORS: u32 = 210;
pub const K_SYSCALL_CAN_STATS_GET_BIT1_ERRORS: u32 = 211;
pub const K_SYSCALL_CAN_STATS_GET_BIT_ERRORS: u32 = 212;
pub const K_SYSCALL_CAN_STATS_GET_CRC_ERRORS: u32 = 213;
pub const K_SYSCALL_CAN_STATS_GET_FORM_ERRORS: u32 = 214;
pub const K_SYSCALL_CAN_STATS_GET_RX_OVERRUNS: u32 = 215;
pub const K_SYSCALL_CAN_STATS_GET_STUFF_ERRORS: u32 = 216;
pub const K_SYSCALL_CAN_STOP: u32 = 217;
pub const K_SYSCALL_CHARGER_GET_PROP: u32 = 218;
pub const K_SYSCALL_CHARGER_SET_PROP: u32 = 219;
pub const K_SYSCALL_COUNTER_CANCEL_CHANNEL_ALARM: u32 = 220;
pub const K_SYSCALL_COUNTER_GET_FREQUENCY: u32 = 221;
pub const K_SYSCALL_COUNTER_GET_GUARD_PERIOD: u32 = 222;
pub const K_SYSCALL_COUNTER_GET_MAX_TOP_VALUE: u32 = 223;
pub const K_SYSCALL_COUNTER_GET_NUM_OF_CHANNELS: u32 = 224;
pub const K_SYSCALL_COUNTER_GET_PENDING_INT: u32 = 225;
pub const K_SYSCALL_COUNTER_GET_TOP_VALUE: u32 = 226;
pub const K_SYSCALL_COUNTER_GET_VALUE: u32 = 227;
pub const K_SYSCALL_COUNTER_GET_VALUE_64: u32 = 228;
pub const K_SYSCALL_COUNTER_IS_COUNTING_UP: u32 = 229;
pub const K_SYSCALL_COUNTER_SET_CHANNEL_ALARM: u32 = 230;
pub const K_SYSCALL_COUNTER_SET_GUARD_PERIOD: u32 = 231;
pub const K_SYSCALL_COUNTER_SET_TOP_VALUE: u32 = 232;
pub const K_SYSCALL_COUNTER_START: u32 = 233;
pub const K_SYSCALL_COUNTER_STOP: u32 = 234;
pub const K_SYSCALL_COUNTER_TICKS_TO_US: u32 = 235;
pub const K_SYSCALL_COUNTER_US_TO_TICKS: u32 = 236;
pub const K_SYSCALL_DAC_CHANNEL_SETUP: u32 = 237;
pub const K_SYSCALL_DAC_WRITE_VALUE: u32 = 238;
pub const K_SYSCALL_DEVMUX_SELECT_GET: u32 = 239;
pub const K_SYSCALL_DEVMUX_SELECT_SET: u32 = 240;
pub const K_SYSCALL_DMA_CHAN_FILTER: u32 = 241;
pub const K_SYSCALL_DMA_RELEASE_CHANNEL: u32 = 242;
pub const K_SYSCALL_DMA_REQUEST_CHANNEL: u32 = 243;
pub const K_SYSCALL_DMA_RESUME: u32 = 244;
pub const K_SYSCALL_DMA_START: u32 = 245;
pub const K_SYSCALL_DMA_STOP: u32 = 246;
pub const K_SYSCALL_DMA_SUSPEND: u32 = 247;
pub const K_SYSCALL_EEPROM_GET_SIZE: u32 = 248;
pub const K_SYSCALL_EEPROM_READ: u32 = 249;
pub const K_SYSCALL_EEPROM_WRITE: u32 = 250;
pub const K_SYSCALL_EMUL_FUEL_GAUGE_IS_BATTERY_CUTOFF: u32 = 251;
pub const K_SYSCALL_EMUL_FUEL_GAUGE_SET_BATTERY_CHARGING: u32 = 252;
pub const K_SYSCALL_ENTROPY_GET_ENTROPY: u32 = 253;
pub const K_SYSCALL_ESPI_CONFIG: u32 = 254;
pub const K_SYSCALL_ESPI_FLASH_ERASE: u32 = 255;
pub const K_SYSCALL_ESPI_GET_CHANNEL_STATUS: u32 = 256;
pub const K_SYSCALL_ESPI_READ_FLASH: u32 = 257;
pub const K_SYSCALL_ESPI_READ_LPC_REQUEST: u32 = 258;
pub const K_SYSCALL_ESPI_READ_REQUEST: u32 = 259;
pub const K_SYSCALL_ESPI_RECEIVE_OOB: u32 = 260;
pub const K_SYSCALL_ESPI_RECEIVE_VWIRE: u32 = 261;
pub const K_SYSCALL_ESPI_SAF_ACTIVATE: u32 = 262;
pub const K_SYSCALL_ESPI_SAF_CONFIG: u32 = 263;
pub const K_SYSCALL_ESPI_SAF_FLASH_ERASE: u32 = 264;
pub const K_SYSCALL_ESPI_SAF_FLASH_READ: u32 = 265;
pub const K_SYSCALL_ESPI_SAF_FLASH_WRITE: u32 = 266;
pub const K_SYSCALL_ESPI_SAF_GET_CHANNEL_STATUS: u32 = 267;
pub const K_SYSCALL_ESPI_SAF_SET_PROTECTION_REGIONS: u32 = 268;
pub const K_SYSCALL_ESPI_SEND_OOB: u32 = 269;
pub const K_SYSCALL_ESPI_SEND_VWIRE: u32 = 270;
pub const K_SYSCALL_ESPI_WRITE_FLASH: u32 = 271;
pub const K_SYSCALL_ESPI_WRITE_LPC_REQUEST: u32 = 272;
pub const K_SYSCALL_ESPI_WRITE_REQUEST: u32 = 273;
pub const K_SYSCALL_FLASH_ERASE: u32 = 274;
pub const K_SYSCALL_FLASH_EX_OP: u32 = 275;
pub const K_SYSCALL_FLASH_GET_PAGE_COUNT: u32 = 276;
pub const K_SYSCALL_FLASH_GET_PAGE_INFO_BY_IDX: u32 = 277;
pub const K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS: u32 = 278;
pub const K_SYSCALL_FLASH_GET_PARAMETERS: u32 = 279;
pub const K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE: u32 = 280;
pub const K_SYSCALL_FLASH_READ: u32 = 281;
pub const K_SYSCALL_FLASH_READ_JEDEC_ID: u32 = 282;
pub const K_SYSCALL_FLASH_SFDP_READ: u32 = 283;
pub const K_SYSCALL_FLASH_SIMULATOR_GET_MEMORY: u32 = 284;
pub const K_SYSCALL_FLASH_WRITE: u32 = 285;
pub const K_SYSCALL_FUEL_GAUGE_BATTERY_CUTOFF: u32 = 286;
pub const K_SYSCALL_FUEL_GAUGE_GET_BUFFER_PROP: u32 = 287;
pub const K_SYSCALL_FUEL_GAUGE_GET_PROP: u32 = 288;
pub const K_SYSCALL_FUEL_GAUGE_GET_PROPS: u32 = 289;
pub const K_SYSCALL_FUEL_GAUGE_SET_PROP: u32 = 290;
pub const K_SYSCALL_FUEL_GAUGE_SET_PROPS: u32 = 291;
pub const K_SYSCALL_GNSS_GET_ENABLED_SYSTEMS: u32 = 292;
pub const K_SYSCALL_GNSS_GET_FIX_RATE: u32 = 293;
pub const K_SYSCALL_GNSS_GET_NAVIGATION_MODE: u32 = 294;
pub const K_SYSCALL_GNSS_GET_PERIODIC_CONFIG: u32 = 295;
pub const K_SYSCALL_GNSS_GET_SUPPORTED_SYSTEMS: u32 = 296;
pub const K_SYSCALL_GNSS_SET_ENABLED_SYSTEMS: u32 = 297;
pub const K_SYSCALL_GNSS_SET_FIX_RATE: u32 = 298;
pub const K_SYSCALL_GNSS_SET_NAVIGATION_MODE: u32 = 299;
pub const K_SYSCALL_GNSS_SET_PERIODIC_CONFIG: u32 = 300;
pub const K_SYSCALL_HWINFO_CLEAR_RESET_CAUSE: u32 = 301;
pub const K_SYSCALL_HWINFO_GET_DEVICE_ID: u32 = 302;
pub const K_SYSCALL_HWINFO_GET_RESET_CAUSE: u32 = 303;
pub const K_SYSCALL_HWINFO_GET_SUPPORTED_RESET_CAUSE: u32 = 304;
pub const K_SYSCALL_HWSPINLOCK_GET_MAX_ID: u32 = 305;
pub const K_SYSCALL_HWSPINLOCK_LOCK: u32 = 306;
pub const K_SYSCALL_HWSPINLOCK_TRYLOCK: u32 = 307;
pub const K_SYSCALL_HWSPINLOCK_UNLOCK: u32 = 308;
pub const K_SYSCALL_I2C_CONFIGURE: u32 = 309;
pub const K_SYSCALL_I2C_GET_CONFIG: u32 = 310;
pub const K_SYSCALL_I2C_RECOVER_BUS: u32 = 311;
pub const K_SYSCALL_I2C_TARGET_DRIVER_REGISTER: u32 = 312;
pub const K_SYSCALL_I2C_TARGET_DRIVER_UNREGISTER: u32 = 313;
pub const K_SYSCALL_I2C_TRANSFER: u32 = 314;
pub const K_SYSCALL_I2S_BUF_READ: u32 = 315;
pub const K_SYSCALL_I2S_BUF_WRITE: u32 = 316;
pub const K_SYSCALL_I2S_CONFIGURE: u32 = 317;
pub const K_SYSCALL_I2S_TRIGGER: u32 = 318;
pub const K_SYSCALL_I3C_DO_CCC: u32 = 319;
pub const K_SYSCALL_I3C_TRANSFER: u32 = 320;
pub const K_SYSCALL_IPM_COMPLETE: u32 = 321;
pub const K_SYSCALL_IPM_MAX_DATA_SIZE_GET: u32 = 322;
pub const K_SYSCALL_IPM_MAX_ID_VAL_GET: u32 = 323;
pub const K_SYSCALL_IPM_SEND: u32 = 324;
pub const K_SYSCALL_IPM_SET_ENABLED: u32 = 325;
pub const K_SYSCALL_IVSHMEM_ENABLE_INTERRUPTS: u32 = 326;
pub const K_SYSCALL_IVSHMEM_GET_ID: u32 = 327;
pub const K_SYSCALL_IVSHMEM_GET_MAX_PEERS: u32 = 328;
pub const K_SYSCALL_IVSHMEM_GET_MEM: u32 = 329;
pub const K_SYSCALL_IVSHMEM_GET_OUTPUT_MEM_SECTION: u32 = 330;
pub const K_SYSCALL_IVSHMEM_GET_PROTOCOL: u32 = 331;
pub const K_SYSCALL_IVSHMEM_GET_RW_MEM_SECTION: u32 = 332;
pub const K_SYSCALL_IVSHMEM_GET_STATE: u32 = 333;
pub const K_SYSCALL_IVSHMEM_GET_VECTORS: u32 = 334;
pub const K_SYSCALL_IVSHMEM_INT_PEER: u32 = 335;
pub const K_SYSCALL_IVSHMEM_REGISTER_HANDLER: u32 = 336;
pub const K_SYSCALL_IVSHMEM_SET_STATE: u32 = 337;
pub const K_SYSCALL_KSCAN_CONFIG: u32 = 338;
pub const K_SYSCALL_KSCAN_DISABLE_CALLBACK: u32 = 339;
pub const K_SYSCALL_KSCAN_ENABLE_CALLBACK: u32 = 340;
pub const K_SYSCALL_K_MEM_PAGING_HISTOGRAM_BACKING_STORE_PAGE_IN_GET: u32 = 341;
pub const K_SYSCALL_K_MEM_PAGING_HISTOGRAM_BACKING_STORE_PAGE_OUT_GET: u32 = 342;
pub const K_SYSCALL_K_MEM_PAGING_HISTOGRAM_EVICTION_GET: u32 = 343;
pub const K_SYSCALL_K_MEM_PAGING_STATS_GET: u32 = 344;
pub const K_SYSCALL_K_MEM_PAGING_THREAD_STATS_GET: u32 = 345;
pub const K_SYSCALL_LED_BLINK: u32 = 346;
pub const K_SYSCALL_LED_GET_INFO: u32 = 347;
pub const K_SYSCALL_LED_OFF: u32 = 348;
pub const K_SYSCALL_LED_ON: u32 = 349;
pub const K_SYSCALL_LED_SET_BRIGHTNESS: u32 = 350;
pub const K_SYSCALL_LED_SET_CHANNEL: u32 = 351;
pub const K_SYSCALL_LED_SET_COLOR: u32 = 352;
pub const K_SYSCALL_LED_WRITE_CHANNELS: u32 = 353;
pub const K_SYSCALL_MAXIM_DS3231_GET_SYNCPOINT: u32 = 354;
pub const K_SYSCALL_MAXIM_DS3231_REQ_SYNCPOINT: u32 = 355;
pub const K_SYSCALL_MBOX_MAX_CHANNELS_GET: u32 = 356;
pub const K_SYSCALL_MBOX_MTU_GET: u32 = 357;
pub const K_SYSCALL_MBOX_SEND: u32 = 358;
pub const K_SYSCALL_MBOX_SET_ENABLED: u32 = 359;
pub const K_SYSCALL_MDIO_BUS_DISABLE: u32 = 360;
pub const K_SYSCALL_MDIO_BUS_ENABLE: u32 = 361;
pub const K_SYSCALL_MDIO_READ: u32 = 362;
pub const K_SYSCALL_MDIO_READ_C45: u32 = 363;
pub const K_SYSCALL_MDIO_WRITE: u32 = 364;
pub const K_SYSCALL_MDIO_WRITE_C45: u32 = 365;
pub const K_SYSCALL_NET_ADDR_NTOP: u32 = 366;
pub const K_SYSCALL_NET_ADDR_PTON: u32 = 367;
pub const K_SYSCALL_NET_ETH_GET_PTP_CLOCK_BY_INDEX: u32 = 368;
pub const K_SYSCALL_NET_IF_GET_BY_INDEX: u32 = 369;
pub const K_SYSCALL_NET_IF_IPV4_ADDR_ADD_BY_INDEX: u32 = 370;
pub const K_SYSCALL_NET_IF_IPV4_ADDR_LOOKUP_BY_INDEX: u32 = 371;
pub const K_SYSCALL_NET_IF_IPV4_ADDR_RM_BY_INDEX: u32 = 372;
pub const K_SYSCALL_NET_IF_IPV4_SET_GW_BY_INDEX: u32 = 373;
pub const K_SYSCALL_NET_IF_IPV4_SET_NETMASK_BY_INDEX: u32 = 374;
pub const K_SYSCALL_NET_IF_IPV6_ADDR_ADD_BY_INDEX: u32 = 375;
pub const K_SYSCALL_NET_IF_IPV6_ADDR_LOOKUP_BY_INDEX: u32 = 376;
pub const K_SYSCALL_NET_IF_IPV6_ADDR_RM_BY_INDEX: u32 = 377;
pub const K_SYSCALL_NET_SOCKET_SERVICE_REGISTER: u32 = 378;
pub const K_SYSCALL_NRF_QSPI_NOR_XIP_ENABLE: u32 = 379;
pub const K_SYSCALL_PECI_CONFIG: u32 = 380;
pub const K_SYSCALL_PECI_DISABLE: u32 = 381;
pub const K_SYSCALL_PECI_ENABLE: u32 = 382;
pub const K_SYSCALL_PECI_TRANSFER: u32 = 383;
pub const K_SYSCALL_PHY_CONFIGURE_LINK: u32 = 384;
pub const K_SYSCALL_PHY_GET_LINK_STATE: u32 = 385;
pub const K_SYSCALL_PHY_LINK_CALLBACK_SET: u32 = 386;
pub const K_SYSCALL_PHY_READ: u32 = 387;
pub const K_SYSCALL_PHY_WRITE: u32 = 388;
pub const K_SYSCALL_PS2_CONFIG: u32 = 389;
pub const K_SYSCALL_PS2_DISABLE_CALLBACK: u32 = 390;
pub const K_SYSCALL_PS2_ENABLE_CALLBACK: u32 = 391;
pub const K_SYSCALL_PS2_READ: u32 = 392;
pub const K_SYSCALL_PS2_WRITE: u32 = 393;
pub const K_SYSCALL_PTP_CLOCK_GET: u32 = 394;
pub const K_SYSCALL_PWM_CAPTURE_CYCLES: u32 = 395;
pub const K_SYSCALL_PWM_DISABLE_CAPTURE: u32 = 396;
pub const K_SYSCALL_PWM_ENABLE_CAPTURE: u32 = 397;
pub const K_SYSCALL_PWM_GET_CYCLES_PER_SEC: u32 = 398;
pub const K_SYSCALL_PWM_SET_CYCLES: u32 = 399;
pub const K_SYSCALL_RESET_LINE_ASSERT: u32 = 400;
pub const K_SYSCALL_RESET_LINE_DEASSERT: u32 = 401;
pub const K_SYSCALL_RESET_LINE_TOGGLE: u32 = 402;
pub const K_SYSCALL_RESET_STATUS: u32 = 403;
pub const K_SYSCALL_RETAINED_MEM_CLEAR: u32 = 404;
pub const K_SYSCALL_RETAINED_MEM_READ: u32 = 405;
pub const K_SYSCALL_RETAINED_MEM_SIZE: u32 = 406;
pub const K_SYSCALL_RETAINED_MEM_WRITE: u32 = 407;
pub const K_SYSCALL_RTC_ALARM_GET_SUPPORTED_FIELDS: u32 = 408;
pub const K_SYSCALL_RTC_ALARM_GET_TIME: u32 = 409;
pub const K_SYSCALL_RTC_ALARM_IS_PENDING: u32 = 410;
pub const K_SYSCALL_RTC_ALARM_SET_CALLBACK: u32 = 411;
pub const K_SYSCALL_RTC_ALARM_SET_TIME: u32 = 412;
pub const K_SYSCALL_RTC_GET_CALIBRATION: u32 = 413;
pub const K_SYSCALL_RTC_GET_TIME: u32 = 414;
pub const K_SYSCALL_RTC_SET_CALIBRATION: u32 = 415;
pub const K_SYSCALL_RTC_SET_TIME: u32 = 416;
pub const K_SYSCALL_RTC_UPDATE_SET_CALLBACK: u32 = 417;
pub const K_SYSCALL_RTIO_CQE_COPY_OUT: u32 = 418;
pub const K_SYSCALL_RTIO_CQE_GET_MEMPOOL_BUFFER: u32 = 419;
pub const K_SYSCALL_RTIO_RELEASE_BUFFER: u32 = 420;
pub const K_SYSCALL_RTIO_SQE_CANCEL: u32 = 421;
pub const K_SYSCALL_RTIO_SQE_COPY_IN_GET_HANDLES: u32 = 422;
pub const K_SYSCALL_RTIO_SUBMIT: u32 = 423;
pub const K_SYSCALL_SDHC_CARD_BUSY: u32 = 424;
pub const K_SYSCALL_SDHC_CARD_PRESENT: u32 = 425;
pub const K_SYSCALL_SDHC_DISABLE_INTERRUPT: u32 = 426;
pub const K_SYSCALL_SDHC_ENABLE_INTERRUPT: u32 = 427;
pub const K_SYSCALL_SDHC_EXECUTE_TUNING: u32 = 428;
pub const K_SYSCALL_SDHC_GET_HOST_PROPS: u32 = 429;
pub const K_SYSCALL_SDHC_HW_RESET: u32 = 430;
pub const K_SYSCALL_SDHC_REQUEST: u32 = 431;
pub const K_SYSCALL_SDHC_SET_IO: u32 = 432;
pub const K_SYSCALL_SENSOR_ATTR_GET: u32 = 433;
pub const K_SYSCALL_SENSOR_ATTR_SET: u32 = 434;
pub const K_SYSCALL_SENSOR_CHANNEL_GET: u32 = 435;
pub const K_SYSCALL_SENSOR_GET_DECODER: u32 = 436;
pub const K_SYSCALL_SENSOR_RECONFIGURE_READ_IODEV: u32 = 437;
pub const K_SYSCALL_SENSOR_SAMPLE_FETCH: u32 = 438;
pub const K_SYSCALL_SENSOR_SAMPLE_FETCH_CHAN: u32 = 439;
pub const K_SYSCALL_SIP_SUPERVISORY_CALL: u32 = 440;
pub const K_SYSCALL_SIP_SVC_PLAT_ASYNC_RES_REQ: u32 = 441;
pub const K_SYSCALL_SIP_SVC_PLAT_ASYNC_RES_RES: u32 = 442;
pub const K_SYSCALL_SIP_SVC_PLAT_FORMAT_TRANS_ID: u32 = 443;
pub const K_SYSCALL_SIP_SVC_PLAT_FREE_ASYNC_MEMORY: u32 = 444;
pub const K_SYSCALL_SIP_SVC_PLAT_FUNC_ID_VALID: u32 = 445;
pub const K_SYSCALL_SIP_SVC_PLAT_GET_ERROR_CODE: u32 = 446;
pub const K_SYSCALL_SIP_SVC_PLAT_GET_TRANS_IDX: u32 = 447;
pub const K_SYSCALL_SIP_SVC_PLAT_UPDATE_TRANS_ID: u32 = 448;
pub const K_SYSCALL_SMBUS_BLOCK_PCALL: u32 = 449;
pub const K_SYSCALL_SMBUS_BLOCK_READ: u32 = 450;
pub const K_SYSCALL_SMBUS_BLOCK_WRITE: u32 = 451;
pub const K_SYSCALL_SMBUS_BYTE_DATA_READ: u32 = 452;
pub const K_SYSCALL_SMBUS_BYTE_DATA_WRITE: u32 = 453;
pub const K_SYSCALL_SMBUS_BYTE_READ: u32 = 454;
pub const K_SYSCALL_SMBUS_BYTE_WRITE: u32 = 455;
pub const K_SYSCALL_SMBUS_CONFIGURE: u32 = 456;
pub const K_SYSCALL_SMBUS_GET_CONFIG: u32 = 457;
pub const K_SYSCALL_SMBUS_HOST_NOTIFY_REMOVE_CB: u32 = 458;
pub const K_SYSCALL_SMBUS_PCALL: u32 = 459;
pub const K_SYSCALL_SMBUS_QUICK: u32 = 460;
pub const K_SYSCALL_SMBUS_SMBALERT_REMOVE_CB: u32 = 461;
pub const K_SYSCALL_SMBUS_WORD_DATA_READ: u32 = 462;
pub const K_SYSCALL_SMBUS_WORD_DATA_WRITE: u32 = 463;
pub const K_SYSCALL_SPI_RELEASE: u32 = 464;
pub const K_SYSCALL_SPI_TRANSCEIVE: u32 = 465;
pub const K_SYSCALL_SYSCON_GET_BASE: u32 = 466;
pub const K_SYSCALL_SYSCON_GET_SIZE: u32 = 467;
pub const K_SYSCALL_SYSCON_READ_REG: u32 = 468;
pub const K_SYSCALL_SYSCON_WRITE_REG: u32 = 469;
pub const K_SYSCALL_SYS_CACHE_DATA_FLUSH_AND_INVD_RANGE: u32 = 470;
pub const K_SYSCALL_SYS_CACHE_DATA_FLUSH_RANGE: u32 = 471;
pub const K_SYSCALL_SYS_CACHE_DATA_INVD_RANGE: u32 = 472;
pub const K_SYSCALL_SYS_CSRAND_GET: u32 = 473;
pub const K_SYSCALL_SYS_RAND32_GET: u32 = 474;
pub const K_SYSCALL_SYS_RAND_GET: u32 = 475;
pub const K_SYSCALL_TGPIO_PIN_CONFIG_EXT_TIMESTAMP: u32 = 476;
pub const K_SYSCALL_TGPIO_PIN_DISABLE: u32 = 477;
pub const K_SYSCALL_TGPIO_PIN_PERIODIC_OUTPUT: u32 = 478;
pub const K_SYSCALL_TGPIO_PIN_READ_TS_EC: u32 = 479;
pub const K_SYSCALL_TGPIO_PORT_GET_CYCLES_PER_SECOND: u32 = 480;
pub const K_SYSCALL_TGPIO_PORT_GET_TIME: u32 = 481;
pub const K_SYSCALL_UART_MUX_FIND: u32 = 482;
pub const K_SYSCALL_UPDATEHUB_AUTOHANDLER: u32 = 483;
pub const K_SYSCALL_UPDATEHUB_CONFIRM: u32 = 484;
pub const K_SYSCALL_UPDATEHUB_PROBE: u32 = 485;
pub const K_SYSCALL_UPDATEHUB_REBOOT: u32 = 486;
pub const K_SYSCALL_UPDATEHUB_UPDATE: u32 = 487;
pub const K_SYSCALL_USER_FAULT: u32 = 488;
pub const K_SYSCALL_W1_CHANGE_BUS_LOCK: u32 = 489;
pub const K_SYSCALL_W1_CONFIGURE: u32 = 490;
pub const K_SYSCALL_W1_GET_SLAVE_COUNT: u32 = 491;
pub const K_SYSCALL_W1_READ_BIT: u32 = 492;
pub const K_SYSCALL_W1_READ_BLOCK: u32 = 493;
pub const K_SYSCALL_W1_READ_BYTE: u32 = 494;
pub const K_SYSCALL_W1_RESET_BUS: u32 = 495;
pub const K_SYSCALL_W1_SEARCH_BUS: u32 = 496;
pub const K_SYSCALL_W1_WRITE_BIT: u32 = 497;
pub const K_SYSCALL_W1_WRITE_BLOCK: u32 = 498;
pub const K_SYSCALL_W1_WRITE_BYTE: u32 = 499;
pub const K_SYSCALL_WDT_DISABLE: u32 = 500;
pub const K_SYSCALL_WDT_FEED: u32 = 501;
pub const K_SYSCALL_WDT_SETUP: u32 = 502;
pub const K_SYSCALL_ZSOCK_ACCEPT: u32 = 503;
pub const K_SYSCALL_ZSOCK_BIND: u32 = 504;
pub const K_SYSCALL_ZSOCK_CLOSE: u32 = 505;
pub const K_SYSCALL_ZSOCK_CONNECT: u32 = 506;
pub const K_SYSCALL_ZSOCK_FCNTL: u32 = 507;
pub const K_SYSCALL_ZSOCK_GETHOSTNAME: u32 = 508;
pub const K_SYSCALL_ZSOCK_GETPEERNAME: u32 = 509;
pub const K_SYSCALL_ZSOCK_GETSOCKNAME: u32 = 510;
pub const K_SYSCALL_ZSOCK_GETSOCKOPT: u32 = 511;
pub const K_SYSCALL_ZSOCK_GET_CONTEXT_OBJECT: u32 = 512;
pub const K_SYSCALL_ZSOCK_INET_PTON: u32 = 513;
pub const K_SYSCALL_ZSOCK_IOCTL: u32 = 514;
pub const K_SYSCALL_ZSOCK_LISTEN: u32 = 515;
pub const K_SYSCALL_ZSOCK_POLL: u32 = 516;
pub const K_SYSCALL_ZSOCK_RECVFROM: u32 = 517;
pub const K_SYSCALL_ZSOCK_SELECT: u32 = 518;
pub const K_SYSCALL_ZSOCK_SENDMSG: u32 = 519;
pub const K_SYSCALL_ZSOCK_SENDTO: u32 = 520;
pub const K_SYSCALL_ZSOCK_SETSOCKOPT: u32 = 521;
pub const K_SYSCALL_ZSOCK_SHUTDOWN: u32 = 522;
pub const K_SYSCALL_ZSOCK_SOCKET: u32 = 523;
pub const K_SYSCALL_ZSOCK_SOCKETPAIR: u32 = 524;
pub const K_SYSCALL_Z_ERRNO: u32 = 525;
pub const K_SYSCALL_Z_ZSOCK_GETADDRINFO_INTERNAL: u32 = 526;
pub const _SVC_CALL_CONTEXT_SWITCH: u32 = 0;
pub const _SVC_CALL_IRQ_OFFLOAD: u32 = 1;
pub const _SVC_CALL_RUNTIME_EXCEPT: u32 = 2;
pub const _SVC_CALL_SYSTEM_CALL: u32 = 3;
pub const __OBSOLETE_MATH_DEFAULT: u32 = 1;
pub const __OBSOLETE_MATH: u32 = 1;
pub const __RAND_MAX: u32 = 2147483647;
pub const _NULL: u32 = 0;
pub const _ATEXIT_SIZE: u32 = 32;
pub const _RAND48_SEED_0: u32 = 13070;
pub const _RAND48_SEED_1: u32 = 43981;
pub const _RAND48_SEED_2: u32 = 4660;
pub const _RAND48_MULT_0: u32 = 58989;
pub const _RAND48_MULT_1: u32 = 57068;
pub const _RAND48_MULT_2: u32 = 5;
pub const _RAND48_ADD: u32 = 11;
pub const _REENT_EMERGENCY_SIZE: u32 = 25;
pub const _REENT_ASCTIME_SIZE: u32 = 26;
pub const _REENT_SIGNAL_SIZE: u32 = 24;
pub const _N_LISTS: u32 = 30;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const PTHREAD_SCOPE_PROCESS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CREATE_DETACHED: u32 = 0;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SORD: u32 = 8192;
pub const __SL64: u32 = 32768;
pub const __SNLK: u32 = 1;
pub const __SWID: u32 = 8192;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const EOF: i32 = -1;
pub const BUFSIZ: u32 = 1024;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const L_tmpnam: u32 = 1024;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const TMP_MAX: u32 = 26;
pub const L_ctermid: u32 = 16;
pub const TPIDRURO_CURR_CPU: u32 = 4294967292;
pub const DT_N_PATH: &[u8; 2] = b"/\0";
pub const DT_N_FULL_NAME: &[u8; 2] = b"/\0";
pub const DT_N_ORD: u32 = 0;
pub const DT_N_ORD_STR_SORTABLE: u32 = 0;
pub const DT_N_EXISTS: u32 = 1;
pub const DT_N_REG_NUM: u32 = 0;
pub const DT_N_RANGES_NUM: u32 = 0;
pub const DT_N_IRQ_NUM: u32 = 0;
pub const DT_N_COMPAT_MATCHES_nordic_nrf52840_dk_nrf52840: u32 = 1;
pub const DT_N_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_COMPAT_MODEL_IDX_0: &[u8; 21] = b"nrf52840-dk-nrf52840\0";
pub const DT_N_STATUS_okay: u32 = 1;
pub const DT_N_PINCTRL_NUM: u32 = 0;
pub const DT_N_P_compatible_IDX_0: &[u8; 28] = b"nordic,nrf52840-dk-nrf52840\0";
pub const DT_N_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_P_compatible_LEN: u32 = 1;
pub const DT_N_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_aliases_PATH: &[u8; 9] = b"/aliases\0";
pub const DT_N_S_aliases_FULL_NAME: &[u8; 8] = b"aliases\0";
pub const DT_N_S_aliases_CHILD_IDX: u32 = 1;
pub const DT_N_S_aliases_ORD: u32 = 1;
pub const DT_N_S_aliases_ORD_STR_SORTABLE: u32 = 1;
pub const DT_N_S_aliases_EXISTS: u32 = 1;
pub const DT_N_S_aliases_REG_NUM: u32 = 0;
pub const DT_N_S_aliases_RANGES_NUM: u32 = 0;
pub const DT_N_S_aliases_IRQ_NUM: u32 = 0;
pub const DT_N_S_aliases_STATUS_okay: u32 = 1;
pub const DT_N_S_aliases_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_analog_connector_PATH: &[u8; 18] = b"/analog-connector\0";
pub const DT_N_S_analog_connector_FULL_NAME: &[u8; 17] = b"analog-connector\0";
pub const DT_N_S_analog_connector_CHILD_IDX: u32 = 11;
pub const DT_N_S_analog_connector_ORD: u32 = 2;
pub const DT_N_S_analog_connector_ORD_STR_SORTABLE: u32 = 2;
pub const DT_N_S_analog_connector_EXISTS: u32 = 1;
pub const DT_N_S_analog_connector_REG_NUM: u32 = 0;
pub const DT_N_S_analog_connector_RANGES_NUM: u32 = 0;
pub const DT_N_S_analog_connector_IRQ_NUM: u32 = 0;
pub const DT_N_S_analog_connector_COMPAT_MATCHES_arduino_uno_adc: u32 = 1;
pub const DT_N_S_analog_connector_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_analog_connector_COMPAT_VENDOR_IDX_0: &[u8; 8] = b"Arduino\0";
pub const DT_N_S_analog_connector_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_analog_connector_COMPAT_MODEL_IDX_0: &[u8; 8] = b"uno-adc\0";
pub const DT_N_S_analog_connector_STATUS_okay: u32 = 1;
pub const DT_N_S_analog_connector_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_analog_connector_P_compatible_IDX_0: &[u8; 16] = b"arduino,uno-adc\0";
pub const DT_N_S_analog_connector_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_analog_connector_P_compatible_LEN: u32 = 1;
pub const DT_N_S_analog_connector_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_analog_connector_P_wakeup_source: u32 = 0;
pub const DT_N_S_analog_connector_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_analog_connector_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_analog_connector_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_chosen_PATH: &[u8; 8] = b"/chosen\0";
pub const DT_N_S_chosen_FULL_NAME: &[u8; 7] = b"chosen\0";
pub const DT_N_S_chosen_CHILD_IDX: u32 = 0;
pub const DT_N_S_chosen_ORD: u32 = 3;
pub const DT_N_S_chosen_ORD_STR_SORTABLE: u32 = 3;
pub const DT_N_S_chosen_EXISTS: u32 = 1;
pub const DT_N_S_chosen_REG_NUM: u32 = 0;
pub const DT_N_S_chosen_RANGES_NUM: u32 = 0;
pub const DT_N_S_chosen_IRQ_NUM: u32 = 0;
pub const DT_N_S_chosen_STATUS_okay: u32 = 1;
pub const DT_N_S_chosen_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_connector_PATH: &[u8; 11] = b"/connector\0";
pub const DT_N_S_connector_FULL_NAME: &[u8; 10] = b"connector\0";
pub const DT_N_S_connector_CHILD_IDX: u32 = 10;
pub const DT_N_S_connector_ORD: u32 = 4;
pub const DT_N_S_connector_ORD_STR_SORTABLE: u32 = 4;
pub const DT_N_S_connector_EXISTS: u32 = 1;
pub const DT_N_S_connector_REG_NUM: u32 = 0;
pub const DT_N_S_connector_RANGES_NUM: u32 = 0;
pub const DT_N_S_connector_IRQ_NUM: u32 = 0;
pub const DT_N_S_connector_COMPAT_MATCHES_arduino_header_r3: u32 = 1;
pub const DT_N_S_connector_STATUS_okay: u32 = 1;
pub const DT_N_S_connector_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_connector_P_compatible_IDX_0: &[u8; 18] = b"arduino-header-r3\0";
pub const DT_N_S_connector_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_connector_P_compatible_LEN: u32 = 1;
pub const DT_N_S_connector_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_connector_P_wakeup_source: u32 = 0;
pub const DT_N_S_connector_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_connector_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_connector_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_entropy_bt_hci_PATH: &[u8; 16] = b"/entropy_bt_hci\0";
pub const DT_N_S_entropy_bt_hci_FULL_NAME: &[u8; 15] = b"entropy_bt_hci\0";
pub const DT_N_S_entropy_bt_hci_CHILD_IDX: u32 = 4;
pub const DT_N_S_entropy_bt_hci_ORD: u32 = 5;
pub const DT_N_S_entropy_bt_hci_ORD_STR_SORTABLE: u32 = 5;
pub const DT_N_S_entropy_bt_hci_EXISTS: u32 = 1;
pub const DT_N_S_entropy_bt_hci_REG_NUM: u32 = 0;
pub const DT_N_S_entropy_bt_hci_RANGES_NUM: u32 = 0;
pub const DT_N_S_entropy_bt_hci_IRQ_NUM: u32 = 0;
pub const DT_N_S_entropy_bt_hci_COMPAT_MATCHES_zephyr_bt_hci_entropy: u32 = 1;
pub const DT_N_S_entropy_bt_hci_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_entropy_bt_hci_COMPAT_VENDOR_IDX_0: &[u8; 24] = b"Zephyr-specific binding\0";
pub const DT_N_S_entropy_bt_hci_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_entropy_bt_hci_COMPAT_MODEL_IDX_0: &[u8; 15] = b"bt-hci-entropy\0";
pub const DT_N_S_entropy_bt_hci_STATUS_okay: u32 = 1;
pub const DT_N_S_entropy_bt_hci_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_entropy_bt_hci_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_entropy_bt_hci_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_entropy_bt_hci_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_entropy_bt_hci_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_entropy_bt_hci_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_entropy_bt_hci_P_status_LEN: u32 = 1;
pub const DT_N_S_entropy_bt_hci_P_status_EXISTS: u32 = 1;
pub const DT_N_S_entropy_bt_hci_P_compatible_IDX_0: &[u8; 22] = b"zephyr,bt-hci-entropy\0";
pub const DT_N_S_entropy_bt_hci_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_entropy_bt_hci_P_compatible_LEN: u32 = 1;
pub const DT_N_S_entropy_bt_hci_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_entropy_bt_hci_P_wakeup_source: u32 = 0;
pub const DT_N_S_entropy_bt_hci_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_entropy_bt_hci_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_entropy_bt_hci_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_PATH: &[u8; 5] = b"/soc\0";
pub const DT_N_S_soc_FULL_NAME: &[u8; 4] = b"soc\0";
pub const DT_N_S_soc_CHILD_IDX: u32 = 2;
pub const DT_N_S_soc_ORD: u32 = 6;
pub const DT_N_S_soc_ORD_STR_SORTABLE: u32 = 6;
pub const DT_N_S_soc_EXISTS: u32 = 1;
pub const DT_N_S_soc_REG_NUM: u32 = 0;
pub const DT_N_S_soc_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_COMPAT_MATCHES_nordic_nrf52840_qiaa: u32 = 1;
pub const DT_N_S_soc_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_COMPAT_MODEL_IDX_0: &[u8; 14] = b"nrf52840-qiaa\0";
pub const DT_N_S_soc_COMPAT_MATCHES_nordic_nrf52840: u32 = 1;
pub const DT_N_S_soc_COMPAT_VENDOR_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_COMPAT_VENDOR_IDX_1: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_COMPAT_MODEL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_COMPAT_MODEL_IDX_1: &[u8; 9] = b"nrf52840\0";
pub const DT_N_S_soc_COMPAT_MATCHES_nordic_nrf52: u32 = 1;
pub const DT_N_S_soc_COMPAT_VENDOR_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_COMPAT_VENDOR_IDX_2: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_COMPAT_MODEL_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_COMPAT_MODEL_IDX_2: &[u8; 6] = b"nrf52\0";
pub const DT_N_S_soc_COMPAT_MATCHES_simple_bus: u32 = 1;
pub const DT_N_S_soc_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_P_compatible_IDX_0: &[u8; 21] = b"nordic,nrf52840-qiaa\0";
pub const DT_N_S_soc_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_P_compatible_IDX_1: &[u8; 16] = b"nordic,nrf52840\0";
pub const DT_N_S_soc_P_compatible_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_P_compatible_IDX_2: &[u8; 13] = b"nordic,nrf52\0";
pub const DT_N_S_soc_P_compatible_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_P_compatible_IDX_3: &[u8; 11] = b"simple-bus\0";
pub const DT_N_S_soc_P_compatible_IDX_3_EXISTS: u32 = 1;
pub const DT_N_S_soc_P_compatible_LEN: u32 = 4;
pub const DT_N_S_soc_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_P_ranges_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_PATH: &[u8; 35] =
    b"/soc/interrupt-controller@e000e100\0";
pub const DT_N_S_soc_S_interrupt_controller_e000e100_FULL_NAME: &[u8; 30] =
    b"interrupt-controller@e000e100\0";
pub const DT_N_S_soc_S_interrupt_controller_e000e100_CHILD_IDX: u32 = 0;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_ORD: u32 = 7;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_ORD_STR_SORTABLE: u32 = 7;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_ADDRESS: u32 = 3758153984;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_SIZE: u32 = 3072;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MATCHES_arm_v7m_nvic: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_VENDOR_IDX_0: &[u8; 9] = b"ARM Ltd.\0";
pub const DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MODEL_IDX_0: &[u8; 9] = b"v7m-nvic\0";
pub const DT_N_S_soc_S_interrupt_controller_e000e100_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0: u32 = 3758153984;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1: u32 = 3072;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits: u32 = 3;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0: &[u8; 13] =
    b"arm,v7m-nvic\0";
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_interrupt_controller_e000e100_P_zephyr_pm_device_runtime_auto_EXISTS: u32 =
    1;
pub const DT_N_S_soc_S_timer_40009000_PATH: &[u8; 20] = b"/soc/timer@40009000\0";
pub const DT_N_S_soc_S_timer_40009000_FULL_NAME: &[u8; 15] = b"timer@40009000\0";
pub const DT_N_S_soc_S_timer_40009000_CHILD_IDX: u32 = 17;
pub const DT_N_S_soc_S_timer_40009000_ORD: u32 = 8;
pub const DT_N_S_soc_S_timer_40009000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_REG_IDX_0_VAL_ADDRESS: u32 = 1073778688;
pub const DT_N_S_soc_S_timer_40009000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_timer_40009000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_40009000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_IRQ_IDX_0_VAL_irq: u32 = 9;
pub const DT_N_S_soc_S_timer_40009000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_COMPAT_MATCHES_nordic_nrf_timer: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_timer_40009000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_COMPAT_MODEL_IDX_0: &[u8; 10] = b"nrf-timer\0";
pub const DT_N_S_soc_S_timer_40009000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_40009000_P_reg_IDX_0: u32 = 1073778688;
pub const DT_N_S_soc_S_timer_40009000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_timer_40009000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_cc_num: u32 = 4;
pub const DT_N_S_soc_S_timer_40009000_P_cc_num_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_max_bit_width: u32 = 32;
pub const DT_N_S_soc_S_timer_40009000_P_max_bit_width_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_interrupts_IDX_0: u32 = 9;
pub const DT_N_S_soc_S_timer_40009000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_prescaler: u32 = 0;
pub const DT_N_S_soc_S_timer_40009000_P_prescaler_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_zli: u32 = 0;
pub const DT_N_S_soc_S_timer_40009000_P_zli_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_timer_40009000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_timer_40009000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_timer_40009000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_compatible_IDX_0: &[u8; 17] = b"nordic,nrf-timer\0";
pub const DT_N_S_soc_S_timer_40009000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_timer_40009000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40009000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_timer_40009000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_PATH: &[u8; 8] = b"/sw-pwm\0";
pub const DT_N_S_sw_pwm_FULL_NAME: &[u8; 7] = b"sw-pwm\0";
pub const DT_N_S_sw_pwm_CHILD_IDX: u32 = 5;
pub const DT_N_S_sw_pwm_ORD: u32 = 9;
pub const DT_N_S_sw_pwm_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_REG_NUM: u32 = 0;
pub const DT_N_S_sw_pwm_RANGES_NUM: u32 = 0;
pub const DT_N_S_sw_pwm_IRQ_NUM: u32 = 0;
pub const DT_N_S_sw_pwm_COMPAT_MATCHES_nordic_nrf_sw_pwm: u32 = 1;
pub const DT_N_S_sw_pwm_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_sw_pwm_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_COMPAT_MODEL_IDX_0: &[u8; 11] = b"nrf-sw-pwm\0";
pub const DT_N_S_sw_pwm_STATUS_disabled: u32 = 1;
pub const DT_N_S_sw_pwm_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_sw_pwm_P_generator_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_P_generator_LEN: u32 = 1;
pub const DT_N_S_sw_pwm_P_generator_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_P_clock_prescaler: u32 = 0;
pub const DT_N_S_sw_pwm_P_clock_prescaler_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_sw_pwm_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_sw_pwm_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_sw_pwm_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_P_status_LEN: u32 = 1;
pub const DT_N_S_sw_pwm_P_status_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_P_compatible_IDX_0: &[u8; 18] = b"nordic,nrf-sw-pwm\0";
pub const DT_N_S_sw_pwm_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_P_compatible_LEN: u32 = 1;
pub const DT_N_S_sw_pwm_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_P_wakeup_source: u32 = 0;
pub const DT_N_S_sw_pwm_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_sw_pwm_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_sw_pwm_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_PATH: &[u8; 21] = b"/soc/gpiote@40006000\0";
pub const DT_N_S_soc_S_gpiote_40006000_FULL_NAME: &[u8; 16] = b"gpiote@40006000\0";
pub const DT_N_S_soc_S_gpiote_40006000_CHILD_IDX: u32 = 14;
pub const DT_N_S_soc_S_gpiote_40006000_ORD: u32 = 10;
pub const DT_N_S_soc_S_gpiote_40006000_ORD_STR_SORTABLE: u32 = 8;
pub const DT_N_S_soc_S_gpiote_40006000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_REG_IDX_0_VAL_ADDRESS: u32 = 1073766400;
pub const DT_N_S_soc_S_gpiote_40006000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_gpiote_40006000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_gpiote_40006000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_IRQ_IDX_0_VAL_irq: u32 = 6;
pub const DT_N_S_soc_S_gpiote_40006000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_IRQ_IDX_0_VAL_priority: u32 = 5;
pub const DT_N_S_soc_S_gpiote_40006000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_COMPAT_MATCHES_nordic_nrf_gpiote: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_gpiote_40006000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_COMPAT_MODEL_IDX_0: &[u8; 11] = b"nrf-gpiote\0";
pub const DT_N_S_soc_S_gpiote_40006000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_gpiote_40006000_P_reg_IDX_0: u32 = 1073766400;
pub const DT_N_S_soc_S_gpiote_40006000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_gpiote_40006000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_interrupts_IDX_0: u32 = 6;
pub const DT_N_S_soc_S_gpiote_40006000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_interrupts_IDX_1: u32 = 5;
pub const DT_N_S_soc_S_gpiote_40006000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_instance: u32 = 0;
pub const DT_N_S_soc_S_gpiote_40006000_P_instance_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_gpiote_40006000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_gpiote_40006000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_compatible_IDX_0: &[u8; 18] = b"nordic,nrf-gpiote\0";
pub const DT_N_S_soc_S_gpiote_40006000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_gpiote_40006000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpiote_40006000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_gpiote_40006000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_PATH: &[u8; 19] = b"/soc/gpio@50000000\0";
pub const DT_N_S_soc_S_gpio_50000000_FULL_NAME: &[u8; 14] = b"gpio@50000000\0";
pub const DT_N_S_soc_S_gpio_50000000_CHILD_IDX: u32 = 52;
pub const DT_N_S_soc_S_gpio_50000000_ORD: u32 = 11;
pub const DT_N_S_soc_S_gpio_50000000_ORD_STR_SORTABLE: u32 = 9;
pub const DT_N_S_soc_S_gpio_50000000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_REG_NUM: u32 = 2;
pub const DT_N_S_soc_S_gpio_50000000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_REG_IDX_0_VAL_ADDRESS: u32 = 1342177280;
pub const DT_N_S_soc_S_gpio_50000000_REG_IDX_0_VAL_SIZE: u32 = 512;
pub const DT_N_S_soc_S_gpio_50000000_REG_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_REG_IDX_1_VAL_ADDRESS: u32 = 1342178560;
pub const DT_N_S_soc_S_gpio_50000000_REG_IDX_1_VAL_SIZE: u32 = 768;
pub const DT_N_S_soc_S_gpio_50000000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_gpio_50000000_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_gpio_50000000_COMPAT_MATCHES_nordic_nrf_gpio: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_gpio_50000000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_COMPAT_MODEL_IDX_0: &[u8; 9] = b"nrf-gpio\0";
pub const DT_N_S_soc_S_gpio_50000000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_gpio_50000000_P_reg_IDX_0: u32 = 1342177280;
pub const DT_N_S_soc_S_gpio_50000000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_reg_IDX_1: u32 = 512;
pub const DT_N_S_soc_S_gpio_50000000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_reg_IDX_2: u32 = 1342178560;
pub const DT_N_S_soc_S_gpio_50000000_P_reg_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_reg_IDX_3: u32 = 768;
pub const DT_N_S_soc_S_gpio_50000000_P_reg_IDX_3_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpiote_instance_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpiote_instance_LEN: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpiote_instance_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_port: u32 = 0;
pub const DT_N_S_soc_S_gpio_50000000_P_port_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_controller: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_controller_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_ngpios: u32 = 32;
pub const DT_N_S_soc_S_gpio_50000000_P_ngpios_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_0: u32 = 0;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_1: u32 = 2;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_2: u32 = 6;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_3: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_3_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_4: u32 = 8;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_4_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_5: u32 = 3;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_5_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_6: u32 = 17;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_6_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_7: u32 = 7;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_IDX_7_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_LEN: u32 = 8;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_reserved_ranges_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_0: &[u8; 4] = b"XL1\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_1: &[u8; 4] = b"XL2\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_2: &[u8; 5] = b"AREF\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_3: &[u8; 3] = b"A0\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_3_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_4: &[u8; 3] = b"A1\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_4_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_5: &[u8; 4] = b"RTS\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_5_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_6: &[u8; 4] = b"TXD\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_6_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_7: &[u8; 4] = b"CTS\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_7_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_8: &[u8; 4] = b"RXD\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_8_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_9: &[u8; 5] = b"NFC1\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_9_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_10: &[u8; 5] = b"NFC2\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_10_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_11: &[u8; 8] = b"BUTTON1\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_11_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_12: &[u8; 8] = b"BUTTON2\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_12_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_13: &[u8; 5] = b"LED1\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_13_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_14: &[u8; 5] = b"LED2\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_14_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_15: &[u8; 5] = b"LED3\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_15_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_16: &[u8; 5] = b"LED4\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_16_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_17: &[u8; 8] = b"QSPI CS\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_17_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_18: &[u8; 6] = b"RESET\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_18_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_19: &[u8; 9] = b"QSPI CLK\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_19_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_20: &[u8; 10] = b"QSPI DIO0\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_20_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_21: &[u8; 10] = b"QSPI DIO1\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_21_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_22: &[u8; 10] = b"QSPI DIO2\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_22_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_23: &[u8; 10] = b"QSPI DIO3\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_23_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_24: &[u8; 8] = b"BUTTON3\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_24_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_25: &[u8; 8] = b"BUTTON4\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_25_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_26: &[u8; 4] = b"SDA\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_26_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_27: &[u8; 4] = b"SCL\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_27_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_28: &[u8; 3] = b"A2\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_28_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_29: &[u8; 3] = b"A3\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_29_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_30: &[u8; 3] = b"A4\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_30_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_31: &[u8; 3] = b"A5\0";
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_IDX_31_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_LEN: u32 = 32;
pub const DT_N_S_soc_S_gpio_50000000_P_gpio_line_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_gpio_50000000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_gpio_50000000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_compatible_IDX_0: &[u8; 16] = b"nordic,nrf-gpio\0";
pub const DT_N_S_soc_S_gpio_50000000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_gpio_50000000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_gpio_50000000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_buttons_PATH: &[u8; 9] = b"/buttons\0";
pub const DT_N_S_buttons_FULL_NAME: &[u8; 8] = b"buttons\0";
pub const DT_N_S_buttons_CHILD_IDX: u32 = 9;
pub const DT_N_S_buttons_ORD: u32 = 12;
pub const DT_N_S_buttons_ORD_STR_SORTABLE: u32 = 10;
pub const DT_N_S_buttons_EXISTS: u32 = 1;
pub const DT_N_S_buttons_REG_NUM: u32 = 0;
pub const DT_N_S_buttons_RANGES_NUM: u32 = 0;
pub const DT_N_S_buttons_IRQ_NUM: u32 = 0;
pub const DT_N_S_buttons_COMPAT_MATCHES_gpio_keys: u32 = 1;
pub const DT_N_S_buttons_STATUS_okay: u32 = 1;
pub const DT_N_S_buttons_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_buttons_P_debounce_interval_ms: u32 = 30;
pub const DT_N_S_buttons_P_debounce_interval_ms_EXISTS: u32 = 1;
pub const DT_N_S_buttons_P_compatible_IDX_0: &[u8; 10] = b"gpio-keys\0";
pub const DT_N_S_buttons_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_buttons_P_compatible_LEN: u32 = 1;
pub const DT_N_S_buttons_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_buttons_P_wakeup_source: u32 = 0;
pub const DT_N_S_buttons_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_buttons_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_buttons_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_0_PATH: &[u8; 18] = b"/buttons/button_0\0";
pub const DT_N_S_buttons_S_button_0_FULL_NAME: &[u8; 9] = b"button_0\0";
pub const DT_N_S_buttons_S_button_0_CHILD_IDX: u32 = 0;
pub const DT_N_S_buttons_S_button_0_ORD: u32 = 13;
pub const DT_N_S_buttons_S_button_0_ORD_STR_SORTABLE: u32 = 11;
pub const DT_N_S_buttons_S_button_0_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_0_REG_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_0_RANGES_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_0_IRQ_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_0_STATUS_okay: u32 = 1;
pub const DT_N_S_buttons_S_button_0_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_0_P_gpios_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_pin: u32 = 11;
pub const DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_pin_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_flags: u32 = 17;
pub const DT_N_S_buttons_S_button_0_P_gpios_IDX_0_VAL_flags_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_0_P_gpios_LEN: u32 = 1;
pub const DT_N_S_buttons_S_button_0_P_gpios_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_0_P_label: &[u8; 21] = b"Push button switch 0\0";
pub const DT_N_S_buttons_S_button_0_P_label_IDX_0: &[u8; 21] = b"Push button switch 0\0";
pub const DT_N_S_buttons_S_button_0_P_label_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_0_P_label_LEN: u32 = 1;
pub const DT_N_S_buttons_S_button_0_P_label_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_0_P_zephyr_code: u32 = 11;
pub const DT_N_S_buttons_S_button_0_P_zephyr_code_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_1_PATH: &[u8; 18] = b"/buttons/button_1\0";
pub const DT_N_S_buttons_S_button_1_FULL_NAME: &[u8; 9] = b"button_1\0";
pub const DT_N_S_buttons_S_button_1_CHILD_IDX: u32 = 1;
pub const DT_N_S_buttons_S_button_1_ORD: u32 = 14;
pub const DT_N_S_buttons_S_button_1_ORD_STR_SORTABLE: u32 = 12;
pub const DT_N_S_buttons_S_button_1_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_1_REG_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_1_RANGES_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_1_IRQ_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_1_STATUS_okay: u32 = 1;
pub const DT_N_S_buttons_S_button_1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_1_P_gpios_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_1_P_gpios_IDX_0_VAL_pin: u32 = 12;
pub const DT_N_S_buttons_S_button_1_P_gpios_IDX_0_VAL_pin_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_1_P_gpios_IDX_0_VAL_flags: u32 = 17;
pub const DT_N_S_buttons_S_button_1_P_gpios_IDX_0_VAL_flags_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_1_P_gpios_LEN: u32 = 1;
pub const DT_N_S_buttons_S_button_1_P_gpios_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_1_P_label: &[u8; 21] = b"Push button switch 1\0";
pub const DT_N_S_buttons_S_button_1_P_label_IDX_0: &[u8; 21] = b"Push button switch 1\0";
pub const DT_N_S_buttons_S_button_1_P_label_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_1_P_label_LEN: u32 = 1;
pub const DT_N_S_buttons_S_button_1_P_label_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_1_P_zephyr_code: u32 = 2;
pub const DT_N_S_buttons_S_button_1_P_zephyr_code_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_2_PATH: &[u8; 18] = b"/buttons/button_2\0";
pub const DT_N_S_buttons_S_button_2_FULL_NAME: &[u8; 9] = b"button_2\0";
pub const DT_N_S_buttons_S_button_2_CHILD_IDX: u32 = 2;
pub const DT_N_S_buttons_S_button_2_ORD: u32 = 15;
pub const DT_N_S_buttons_S_button_2_ORD_STR_SORTABLE: u32 = 13;
pub const DT_N_S_buttons_S_button_2_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_2_REG_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_2_RANGES_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_2_IRQ_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_2_STATUS_okay: u32 = 1;
pub const DT_N_S_buttons_S_button_2_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_2_P_gpios_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_2_P_gpios_IDX_0_VAL_pin: u32 = 24;
pub const DT_N_S_buttons_S_button_2_P_gpios_IDX_0_VAL_pin_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_2_P_gpios_IDX_0_VAL_flags: u32 = 17;
pub const DT_N_S_buttons_S_button_2_P_gpios_IDX_0_VAL_flags_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_2_P_gpios_LEN: u32 = 1;
pub const DT_N_S_buttons_S_button_2_P_gpios_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_2_P_label: &[u8; 21] = b"Push button switch 2\0";
pub const DT_N_S_buttons_S_button_2_P_label_IDX_0: &[u8; 21] = b"Push button switch 2\0";
pub const DT_N_S_buttons_S_button_2_P_label_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_2_P_label_LEN: u32 = 1;
pub const DT_N_S_buttons_S_button_2_P_label_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_2_P_zephyr_code: u32 = 3;
pub const DT_N_S_buttons_S_button_2_P_zephyr_code_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_3_PATH: &[u8; 18] = b"/buttons/button_3\0";
pub const DT_N_S_buttons_S_button_3_FULL_NAME: &[u8; 9] = b"button_3\0";
pub const DT_N_S_buttons_S_button_3_CHILD_IDX: u32 = 3;
pub const DT_N_S_buttons_S_button_3_ORD: u32 = 16;
pub const DT_N_S_buttons_S_button_3_ORD_STR_SORTABLE: u32 = 14;
pub const DT_N_S_buttons_S_button_3_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_3_REG_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_3_RANGES_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_3_IRQ_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_3_STATUS_okay: u32 = 1;
pub const DT_N_S_buttons_S_button_3_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_buttons_S_button_3_P_gpios_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_3_P_gpios_IDX_0_VAL_pin: u32 = 25;
pub const DT_N_S_buttons_S_button_3_P_gpios_IDX_0_VAL_pin_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_3_P_gpios_IDX_0_VAL_flags: u32 = 17;
pub const DT_N_S_buttons_S_button_3_P_gpios_IDX_0_VAL_flags_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_3_P_gpios_LEN: u32 = 1;
pub const DT_N_S_buttons_S_button_3_P_gpios_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_3_P_label: &[u8; 21] = b"Push button switch 3\0";
pub const DT_N_S_buttons_S_button_3_P_label_IDX_0: &[u8; 21] = b"Push button switch 3\0";
pub const DT_N_S_buttons_S_button_3_P_label_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_3_P_label_LEN: u32 = 1;
pub const DT_N_S_buttons_S_button_3_P_label_EXISTS: u32 = 1;
pub const DT_N_S_buttons_S_button_3_P_zephyr_code: u32 = 4;
pub const DT_N_S_buttons_S_button_3_P_zephyr_code_EXISTS: u32 = 1;
pub const DT_N_S_cpus_PATH: &[u8; 6] = b"/cpus\0";
pub const DT_N_S_cpus_FULL_NAME: &[u8; 5] = b"cpus\0";
pub const DT_N_S_cpus_CHILD_IDX: u32 = 6;
pub const DT_N_S_cpus_ORD: u32 = 17;
pub const DT_N_S_cpus_ORD_STR_SORTABLE: u32 = 15;
pub const DT_N_S_cpus_EXISTS: u32 = 1;
pub const DT_N_S_cpus_REG_NUM: u32 = 0;
pub const DT_N_S_cpus_RANGES_NUM: u32 = 0;
pub const DT_N_S_cpus_IRQ_NUM: u32 = 0;
pub const DT_N_S_cpus_STATUS_okay: u32 = 1;
pub const DT_N_S_cpus_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_PATH: &[u8; 12] = b"/cpus/cpu@0\0";
pub const DT_N_S_cpus_S_cpu_0_FULL_NAME: &[u8; 6] = b"cpu@0\0";
pub const DT_N_S_cpus_S_cpu_0_CHILD_IDX: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_ORD: u32 = 18;
pub const DT_N_S_cpus_S_cpu_0_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_REG_NUM: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_RANGES_NUM: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_IRQ_NUM: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_arm_cortex_m4f: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0: &[u8; 9] = b"ARM Ltd.\0";
pub const DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0: &[u8; 11] = b"cortex-m4f\0";
pub const DT_N_S_cpus_S_cpu_0_STATUS_okay: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0: &[u8; 15] = b"arm,cortex-m4f\0";
pub const DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_P_compatible_LEN: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_P_reg_IDX_0: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_P_wakeup_source: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_PATH: &[u8; 25] = b"/cpus/cpu@0/itm@e0000000\0";
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_FULL_NAME: &[u8; 13] = b"itm@e0000000\0";
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_CHILD_IDX: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_ORD: u32 = 19;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_REG_NUM: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_REG_IDX_0_VAL_ADDRESS: u32 = 3758096384;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_RANGES_NUM: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_IRQ_NUM: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_COMPAT_MATCHES_arm_armv7m_itm: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_COMPAT_VENDOR_IDX_0: &[u8; 9] = b"ARM Ltd.\0";
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_COMPAT_MODEL_IDX_0: &[u8; 11] = b"armv7m-itm\0";
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_STATUS_okay: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_swo_ref_frequency: u32 = 32000000;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_swo_ref_frequency_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_compatible_IDX_0: &[u8; 15] = b"arm,armv7m-itm\0";
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_reg_IDX_0: u32 = 3758096384;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_wakeup_source: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_cpus_S_cpu_0_S_itm_e0000000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_leds_PATH: &[u8; 6] = b"/leds\0";
pub const DT_N_S_leds_FULL_NAME: &[u8; 5] = b"leds\0";
pub const DT_N_S_leds_CHILD_IDX: u32 = 7;
pub const DT_N_S_leds_ORD: u32 = 20;
pub const DT_N_S_leds_ORD_STR_SORTABLE: u32 = 16;
pub const DT_N_S_leds_EXISTS: u32 = 1;
pub const DT_N_S_leds_REG_NUM: u32 = 0;
pub const DT_N_S_leds_RANGES_NUM: u32 = 0;
pub const DT_N_S_leds_IRQ_NUM: u32 = 0;
pub const DT_N_S_leds_COMPAT_MATCHES_gpio_leds: u32 = 1;
pub const DT_N_S_leds_STATUS_okay: u32 = 1;
pub const DT_N_S_leds_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_leds_P_compatible_IDX_0: &[u8; 10] = b"gpio-leds\0";
pub const DT_N_S_leds_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_leds_P_compatible_LEN: u32 = 1;
pub const DT_N_S_leds_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_0_PATH: &[u8; 12] = b"/leds/led_0\0";
pub const DT_N_S_leds_S_led_0_FULL_NAME: &[u8; 6] = b"led_0\0";
pub const DT_N_S_leds_S_led_0_CHILD_IDX: u32 = 0;
pub const DT_N_S_leds_S_led_0_ORD: u32 = 21;
pub const DT_N_S_leds_S_led_0_ORD_STR_SORTABLE: u32 = 17;
pub const DT_N_S_leds_S_led_0_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_0_REG_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_0_RANGES_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_0_IRQ_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_0_STATUS_okay: u32 = 1;
pub const DT_N_S_leds_S_led_0_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_0_P_gpios_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin: u32 = 13;
pub const DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags: u32 = 1;
pub const DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_0_P_gpios_LEN: u32 = 1;
pub const DT_N_S_leds_S_led_0_P_gpios_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_0_P_label: &[u8; 12] = b"Green LED 0\0";
pub const DT_N_S_leds_S_led_0_P_label_IDX_0: &[u8; 12] = b"Green LED 0\0";
pub const DT_N_S_leds_S_led_0_P_label_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_0_P_label_LEN: u32 = 1;
pub const DT_N_S_leds_S_led_0_P_label_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_1_PATH: &[u8; 12] = b"/leds/led_1\0";
pub const DT_N_S_leds_S_led_1_FULL_NAME: &[u8; 6] = b"led_1\0";
pub const DT_N_S_leds_S_led_1_CHILD_IDX: u32 = 1;
pub const DT_N_S_leds_S_led_1_ORD: u32 = 22;
pub const DT_N_S_leds_S_led_1_ORD_STR_SORTABLE: u32 = 18;
pub const DT_N_S_leds_S_led_1_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_1_REG_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_1_RANGES_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_1_IRQ_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_1_STATUS_okay: u32 = 1;
pub const DT_N_S_leds_S_led_1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_1_P_gpios_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_pin: u32 = 14;
pub const DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_pin_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_flags: u32 = 1;
pub const DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_flags_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_1_P_gpios_LEN: u32 = 1;
pub const DT_N_S_leds_S_led_1_P_gpios_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_1_P_label: &[u8; 12] = b"Green LED 1\0";
pub const DT_N_S_leds_S_led_1_P_label_IDX_0: &[u8; 12] = b"Green LED 1\0";
pub const DT_N_S_leds_S_led_1_P_label_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_1_P_label_LEN: u32 = 1;
pub const DT_N_S_leds_S_led_1_P_label_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_2_PATH: &[u8; 12] = b"/leds/led_2\0";
pub const DT_N_S_leds_S_led_2_FULL_NAME: &[u8; 6] = b"led_2\0";
pub const DT_N_S_leds_S_led_2_CHILD_IDX: u32 = 2;
pub const DT_N_S_leds_S_led_2_ORD: u32 = 23;
pub const DT_N_S_leds_S_led_2_ORD_STR_SORTABLE: u32 = 19;
pub const DT_N_S_leds_S_led_2_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_2_REG_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_2_RANGES_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_2_IRQ_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_2_STATUS_okay: u32 = 1;
pub const DT_N_S_leds_S_led_2_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_2_P_gpios_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_pin: u32 = 15;
pub const DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_pin_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_flags: u32 = 1;
pub const DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_flags_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_2_P_gpios_LEN: u32 = 1;
pub const DT_N_S_leds_S_led_2_P_gpios_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_2_P_label: &[u8; 12] = b"Green LED 2\0";
pub const DT_N_S_leds_S_led_2_P_label_IDX_0: &[u8; 12] = b"Green LED 2\0";
pub const DT_N_S_leds_S_led_2_P_label_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_2_P_label_LEN: u32 = 1;
pub const DT_N_S_leds_S_led_2_P_label_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_3_PATH: &[u8; 12] = b"/leds/led_3\0";
pub const DT_N_S_leds_S_led_3_FULL_NAME: &[u8; 6] = b"led_3\0";
pub const DT_N_S_leds_S_led_3_CHILD_IDX: u32 = 3;
pub const DT_N_S_leds_S_led_3_ORD: u32 = 24;
pub const DT_N_S_leds_S_led_3_ORD_STR_SORTABLE: u32 = 20;
pub const DT_N_S_leds_S_led_3_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_3_REG_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_3_RANGES_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_3_IRQ_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_3_STATUS_okay: u32 = 1;
pub const DT_N_S_leds_S_led_3_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_leds_S_led_3_P_gpios_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_3_P_gpios_IDX_0_VAL_pin: u32 = 16;
pub const DT_N_S_leds_S_led_3_P_gpios_IDX_0_VAL_pin_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_3_P_gpios_IDX_0_VAL_flags: u32 = 1;
pub const DT_N_S_leds_S_led_3_P_gpios_IDX_0_VAL_flags_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_3_P_gpios_LEN: u32 = 1;
pub const DT_N_S_leds_S_led_3_P_gpios_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_3_P_label: &[u8; 12] = b"Green LED 3\0";
pub const DT_N_S_leds_S_led_3_P_label_IDX_0: &[u8; 12] = b"Green LED 3\0";
pub const DT_N_S_leds_S_led_3_P_label_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_leds_S_led_3_P_label_LEN: u32 = 1;
pub const DT_N_S_leds_S_led_3_P_label_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_PATH: &[u8; 16] = b"/pin-controller\0";
pub const DT_N_S_pin_controller_FULL_NAME: &[u8; 15] = b"pin-controller\0";
pub const DT_N_S_pin_controller_CHILD_IDX: u32 = 3;
pub const DT_N_S_pin_controller_ORD: u32 = 25;
pub const DT_N_S_pin_controller_ORD_STR_SORTABLE: u32 = 21;
pub const DT_N_S_pin_controller_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_COMPAT_MATCHES_nordic_nrf_pinctrl: u32 = 1;
pub const DT_N_S_pin_controller_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_pin_controller_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_COMPAT_MODEL_IDX_0: &[u8; 12] = b"nrf-pinctrl\0";
pub const DT_N_S_pin_controller_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_P_compatible_IDX_0: &[u8; 19] = b"nordic,nrf-pinctrl\0";
pub const DT_N_S_pin_controller_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_P_compatible_LEN: u32 = 1;
pub const DT_N_S_pin_controller_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_P_wakeup_source: u32 = 0;
pub const DT_N_S_pin_controller_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_pin_controller_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_PATH: &[u8; 29] = b"/pin-controller/i2c0_default\0";
pub const DT_N_S_pin_controller_S_i2c0_default_FULL_NAME: &[u8; 13] = b"i2c0_default\0";
pub const DT_N_S_pin_controller_S_i2c0_default_CHILD_IDX: u32 = 4;
pub const DT_N_S_pin_controller_S_i2c0_default_ORD: u32 = 26;
pub const DT_N_S_pin_controller_S_i2c0_default_ORD_STR_SORTABLE: u32 = 22;
pub const DT_N_S_pin_controller_S_i2c0_default_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_PATH: &[u8; 36] =
    b"/pin-controller/i2c0_default/group1\0";
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_ORD: u32 = 27;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_ORD_STR_SORTABLE: u32 = 23;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_psels_IDX_0: u32 = 786458;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_psels_IDX_1: u32 = 720923;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_psels_LEN: u32 = 2;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_low_power_enable: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_default_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_PATH: &[u8; 27] = b"/pin-controller/i2c0_sleep\0";
pub const DT_N_S_pin_controller_S_i2c0_sleep_FULL_NAME: &[u8; 11] = b"i2c0_sleep\0";
pub const DT_N_S_pin_controller_S_i2c0_sleep_CHILD_IDX: u32 = 5;
pub const DT_N_S_pin_controller_S_i2c0_sleep_ORD: u32 = 28;
pub const DT_N_S_pin_controller_S_i2c0_sleep_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_PATH: &[u8; 34] =
    b"/pin-controller/i2c0_sleep/group1\0";
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_ORD: u32 = 29;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_psels_IDX_0: u32 = 786458;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_psels_IDX_1: u32 = 720923;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_psels_LEN: u32 = 2;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_low_power_enable: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c0_sleep_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_PATH: &[u8; 29] = b"/pin-controller/i2c1_default\0";
pub const DT_N_S_pin_controller_S_i2c1_default_FULL_NAME: &[u8; 13] = b"i2c1_default\0";
pub const DT_N_S_pin_controller_S_i2c1_default_CHILD_IDX: u32 = 6;
pub const DT_N_S_pin_controller_S_i2c1_default_ORD: u32 = 30;
pub const DT_N_S_pin_controller_S_i2c1_default_ORD_STR_SORTABLE: u32 = 24;
pub const DT_N_S_pin_controller_S_i2c1_default_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_PATH: &[u8; 36] =
    b"/pin-controller/i2c1_default/group1\0";
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_ORD: u32 = 31;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_ORD_STR_SORTABLE: u32 = 25;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_psels_IDX_0: u32 = 786462;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_psels_IDX_1: u32 = 720927;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_psels_LEN: u32 = 2;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_low_power_enable: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_default_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_PATH: &[u8; 27] = b"/pin-controller/i2c1_sleep\0";
pub const DT_N_S_pin_controller_S_i2c1_sleep_FULL_NAME: &[u8; 11] = b"i2c1_sleep\0";
pub const DT_N_S_pin_controller_S_i2c1_sleep_CHILD_IDX: u32 = 7;
pub const DT_N_S_pin_controller_S_i2c1_sleep_ORD: u32 = 32;
pub const DT_N_S_pin_controller_S_i2c1_sleep_ORD_STR_SORTABLE: u32 = 26;
pub const DT_N_S_pin_controller_S_i2c1_sleep_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_PATH: &[u8; 34] =
    b"/pin-controller/i2c1_sleep/group1\0";
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_ORD: u32 = 33;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_ORD_STR_SORTABLE: u32 = 27;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_psels_IDX_0: u32 = 786462;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_psels_IDX_1: u32 = 720927;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_psels_LEN: u32 = 2;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_low_power_enable: u32 = 1;
pub const DT_N_S_pin_controller_S_i2c1_sleep_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_PATH: &[u8; 29] = b"/pin-controller/pwm0_default\0";
pub const DT_N_S_pin_controller_S_pwm0_default_FULL_NAME: &[u8; 13] = b"pwm0_default\0";
pub const DT_N_S_pin_controller_S_pwm0_default_CHILD_IDX: u32 = 8;
pub const DT_N_S_pin_controller_S_pwm0_default_ORD: u32 = 34;
pub const DT_N_S_pin_controller_S_pwm0_default_ORD_STR_SORTABLE: u32 = 28;
pub const DT_N_S_pin_controller_S_pwm0_default_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_PATH: &[u8; 36] =
    b"/pin-controller/pwm0_default/group1\0";
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_ORD: u32 = 35;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_ORD_STR_SORTABLE: u32 = 29;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_psels_IDX_0: u32 = 1441805;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_psels_LEN: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_nordic_invert: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_low_power_enable: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_default_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_PATH: &[u8; 27] = b"/pin-controller/pwm0_sleep\0";
pub const DT_N_S_pin_controller_S_pwm0_sleep_FULL_NAME: &[u8; 11] = b"pwm0_sleep\0";
pub const DT_N_S_pin_controller_S_pwm0_sleep_CHILD_IDX: u32 = 9;
pub const DT_N_S_pin_controller_S_pwm0_sleep_ORD: u32 = 36;
pub const DT_N_S_pin_controller_S_pwm0_sleep_ORD_STR_SORTABLE: u32 = 30;
pub const DT_N_S_pin_controller_S_pwm0_sleep_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_PATH: &[u8; 34] =
    b"/pin-controller/pwm0_sleep/group1\0";
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_ORD: u32 = 37;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_ORD_STR_SORTABLE: u32 = 31;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_psels_IDX_0: u32 = 1441805;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_psels_LEN: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_low_power_enable: u32 = 1;
pub const DT_N_S_pin_controller_S_pwm0_sleep_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_PATH: &[u8; 29] = b"/pin-controller/qspi_default\0";
pub const DT_N_S_pin_controller_S_qspi_default_FULL_NAME: &[u8; 13] = b"qspi_default\0";
pub const DT_N_S_pin_controller_S_qspi_default_CHILD_IDX: u32 = 16;
pub const DT_N_S_pin_controller_S_qspi_default_ORD: u32 = 38;
pub const DT_N_S_pin_controller_S_qspi_default_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_PATH: &[u8; 36] =
    b"/pin-controller/qspi_default/group1\0";
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_ORD: u32 = 39;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_IDX_0: u32 = 1900563;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_IDX_1: u32 = 2031636;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_IDX_2: u32 = 2097173;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_IDX_3: u32 = 2162710;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_IDX_3_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_IDX_4: u32 = 2228247;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_IDX_4_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_IDX_5: u32 = 1966097;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_IDX_5_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_LEN: u32 = 6;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_nordic_drive_mode: u32 = 3;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_low_power_enable: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_default_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_PATH: &[u8; 27] = b"/pin-controller/qspi_sleep\0";
pub const DT_N_S_pin_controller_S_qspi_sleep_FULL_NAME: &[u8; 11] = b"qspi_sleep\0";
pub const DT_N_S_pin_controller_S_qspi_sleep_CHILD_IDX: u32 = 17;
pub const DT_N_S_pin_controller_S_qspi_sleep_ORD: u32 = 40;
pub const DT_N_S_pin_controller_S_qspi_sleep_ORD_STR_SORTABLE: u32 = 32;
pub const DT_N_S_pin_controller_S_qspi_sleep_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_PATH: &[u8; 34] =
    b"/pin-controller/qspi_sleep/group1\0";
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_ORD: u32 = 41;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_ORD_STR_SORTABLE: u32 = 33;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_psels_IDX_0: u32 = 1900563;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_psels_IDX_1: u32 = 2031636;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_psels_IDX_2: u32 = 2097173;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_psels_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_psels_IDX_3: u32 = 2162710;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_psels_IDX_3_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_psels_IDX_4: u32 = 2228247;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_psels_IDX_4_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_psels_LEN: u32 = 5;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_low_power_enable: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_PATH: &[u8; 34] =
    b"/pin-controller/qspi_sleep/group2\0";
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_FULL_NAME: &[u8; 7] = b"group2\0";
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_CHILD_IDX: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_ORD: u32 = 42;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_ORD_STR_SORTABLE: u32 = 34;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_psels_IDX_0: u32 = 1966097;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_psels_LEN: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_bias_pull_up: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_low_power_enable: u32 = 1;
pub const DT_N_S_pin_controller_S_qspi_sleep_S_group2_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_PATH: &[u8; 29] = b"/pin-controller/spi0_default\0";
pub const DT_N_S_pin_controller_S_spi0_default_FULL_NAME: &[u8; 13] = b"spi0_default\0";
pub const DT_N_S_pin_controller_S_spi0_default_CHILD_IDX: u32 = 10;
pub const DT_N_S_pin_controller_S_spi0_default_ORD: u32 = 43;
pub const DT_N_S_pin_controller_S_spi0_default_ORD_STR_SORTABLE: u32 = 35;
pub const DT_N_S_pin_controller_S_spi0_default_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_PATH: &[u8; 36] =
    b"/pin-controller/spi0_default/group1\0";
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_ORD: u32 = 44;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_ORD_STR_SORTABLE: u32 = 36;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_psels_IDX_0: u32 = 262171;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_psels_IDX_1: u32 = 327706;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_psels_IDX_2: u32 = 393245;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_psels_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_psels_LEN: u32 = 3;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_low_power_enable: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_default_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_PATH: &[u8; 27] = b"/pin-controller/spi0_sleep\0";
pub const DT_N_S_pin_controller_S_spi0_sleep_FULL_NAME: &[u8; 11] = b"spi0_sleep\0";
pub const DT_N_S_pin_controller_S_spi0_sleep_CHILD_IDX: u32 = 11;
pub const DT_N_S_pin_controller_S_spi0_sleep_ORD: u32 = 45;
pub const DT_N_S_pin_controller_S_spi0_sleep_ORD_STR_SORTABLE: u32 = 37;
pub const DT_N_S_pin_controller_S_spi0_sleep_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_PATH: &[u8; 34] =
    b"/pin-controller/spi0_sleep/group1\0";
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_ORD: u32 = 46;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_ORD_STR_SORTABLE: u32 = 38;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_psels_IDX_0: u32 = 262171;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_psels_IDX_1: u32 = 327706;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_psels_IDX_2: u32 = 393245;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_psels_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_psels_LEN: u32 = 3;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_low_power_enable: u32 = 1;
pub const DT_N_S_pin_controller_S_spi0_sleep_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_PATH: &[u8; 29] = b"/pin-controller/spi1_default\0";
pub const DT_N_S_pin_controller_S_spi1_default_FULL_NAME: &[u8; 13] = b"spi1_default\0";
pub const DT_N_S_pin_controller_S_spi1_default_CHILD_IDX: u32 = 12;
pub const DT_N_S_pin_controller_S_spi1_default_ORD: u32 = 47;
pub const DT_N_S_pin_controller_S_spi1_default_ORD_STR_SORTABLE: u32 = 39;
pub const DT_N_S_pin_controller_S_spi1_default_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_PATH: &[u8; 36] =
    b"/pin-controller/spi1_default/group1\0";
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_ORD: u32 = 48;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_psels_IDX_0: u32 = 262175;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_psels_IDX_1: u32 = 327710;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_psels_IDX_2: u32 = 393256;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_psels_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_psels_LEN: u32 = 3;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_low_power_enable: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_default_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_PATH: &[u8; 27] = b"/pin-controller/spi1_sleep\0";
pub const DT_N_S_pin_controller_S_spi1_sleep_FULL_NAME: &[u8; 11] = b"spi1_sleep\0";
pub const DT_N_S_pin_controller_S_spi1_sleep_CHILD_IDX: u32 = 13;
pub const DT_N_S_pin_controller_S_spi1_sleep_ORD: u32 = 49;
pub const DT_N_S_pin_controller_S_spi1_sleep_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_PATH: &[u8; 34] =
    b"/pin-controller/spi1_sleep/group1\0";
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_ORD: u32 = 50;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_ORD_STR_SORTABLE: u32 = 40;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_psels_IDX_0: u32 = 262175;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_psels_IDX_1: u32 = 327710;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_psels_IDX_2: u32 = 393256;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_psels_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_psels_LEN: u32 = 3;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_low_power_enable: u32 = 1;
pub const DT_N_S_pin_controller_S_spi1_sleep_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_PATH: &[u8; 29] = b"/pin-controller/spi2_default\0";
pub const DT_N_S_pin_controller_S_spi2_default_FULL_NAME: &[u8; 13] = b"spi2_default\0";
pub const DT_N_S_pin_controller_S_spi2_default_CHILD_IDX: u32 = 14;
pub const DT_N_S_pin_controller_S_spi2_default_ORD: u32 = 51;
pub const DT_N_S_pin_controller_S_spi2_default_ORD_STR_SORTABLE: u32 = 41;
pub const DT_N_S_pin_controller_S_spi2_default_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_PATH: &[u8; 36] =
    b"/pin-controller/spi2_default/group1\0";
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_ORD: u32 = 52;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_ORD_STR_SORTABLE: u32 = 42;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_psels_IDX_0: u32 = 262163;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_psels_IDX_1: u32 = 327700;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_psels_IDX_2: u32 = 393237;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_psels_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_psels_LEN: u32 = 3;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_low_power_enable: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_default_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_PATH: &[u8; 27] = b"/pin-controller/spi2_sleep\0";
pub const DT_N_S_pin_controller_S_spi2_sleep_FULL_NAME: &[u8; 11] = b"spi2_sleep\0";
pub const DT_N_S_pin_controller_S_spi2_sleep_CHILD_IDX: u32 = 15;
pub const DT_N_S_pin_controller_S_spi2_sleep_ORD: u32 = 53;
pub const DT_N_S_pin_controller_S_spi2_sleep_ORD_STR_SORTABLE: u32 = 43;
pub const DT_N_S_pin_controller_S_spi2_sleep_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_PATH: &[u8; 34] =
    b"/pin-controller/spi2_sleep/group1\0";
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_ORD: u32 = 54;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_ORD_STR_SORTABLE: u32 = 44;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_psels_IDX_0: u32 = 262163;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_psels_IDX_1: u32 = 327700;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_psels_IDX_2: u32 = 393237;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_psels_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_psels_LEN: u32 = 3;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_low_power_enable: u32 = 1;
pub const DT_N_S_pin_controller_S_spi2_sleep_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_PATH: &[u8; 29] = b"/pin-controller/spi3_default\0";
pub const DT_N_S_pin_controller_S_spi3_default_FULL_NAME: &[u8; 13] = b"spi3_default\0";
pub const DT_N_S_pin_controller_S_spi3_default_CHILD_IDX: u32 = 18;
pub const DT_N_S_pin_controller_S_spi3_default_ORD: u32 = 55;
pub const DT_N_S_pin_controller_S_spi3_default_ORD_STR_SORTABLE: u32 = 45;
pub const DT_N_S_pin_controller_S_spi3_default_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_PATH: &[u8; 36] =
    b"/pin-controller/spi3_default/group1\0";
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_ORD: u32 = 56;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_ORD_STR_SORTABLE: u32 = 46;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_psels_IDX_0: u32 = 262191;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_psels_IDX_1: u32 = 393262;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_psels_IDX_2: u32 = 327725;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_psels_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_psels_LEN: u32 = 3;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_low_power_enable: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_default_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_PATH: &[u8; 27] = b"/pin-controller/spi3_sleep\0";
pub const DT_N_S_pin_controller_S_spi3_sleep_FULL_NAME: &[u8; 11] = b"spi3_sleep\0";
pub const DT_N_S_pin_controller_S_spi3_sleep_CHILD_IDX: u32 = 19;
pub const DT_N_S_pin_controller_S_spi3_sleep_ORD: u32 = 57;
pub const DT_N_S_pin_controller_S_spi3_sleep_ORD_STR_SORTABLE: u32 = 47;
pub const DT_N_S_pin_controller_S_spi3_sleep_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_PATH: &[u8; 34] =
    b"/pin-controller/spi3_sleep/group1\0";
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_ORD: u32 = 58;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_psels_IDX_0: u32 = 262191;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_psels_IDX_1: u32 = 393262;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_psels_IDX_2: u32 = 327725;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_psels_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_psels_LEN: u32 = 3;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_low_power_enable: u32 = 1;
pub const DT_N_S_pin_controller_S_spi3_sleep_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_PATH: &[u8; 30] =
    b"/pin-controller/uart0_default\0";
pub const DT_N_S_pin_controller_S_uart0_default_FULL_NAME: &[u8; 14] = b"uart0_default\0";
pub const DT_N_S_pin_controller_S_uart0_default_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_ORD: u32 = 59;
pub const DT_N_S_pin_controller_S_uart0_default_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_PATH: &[u8; 37] =
    b"/pin-controller/uart0_default/group1\0";
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_ORD: u32 = 60;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_ORD_STR_SORTABLE: u32 = 48;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_psels_IDX_0: u32 = 6;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_psels_IDX_1: u32 = 131077;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_psels_LEN: u32 = 2;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_low_power_enable: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_PATH: &[u8; 37] =
    b"/pin-controller/uart0_default/group2\0";
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_FULL_NAME: &[u8; 7] = b"group2\0";
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_CHILD_IDX: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_ORD: u32 = 61;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_ORD_STR_SORTABLE: u32 = 49;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_psels_IDX_0: u32 = 65544;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_psels_IDX_1: u32 = 196615;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_psels_LEN: u32 = 2;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_up: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_low_power_enable: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_default_S_group2_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_PATH: &[u8; 28] = b"/pin-controller/uart0_sleep\0";
pub const DT_N_S_pin_controller_S_uart0_sleep_FULL_NAME: &[u8; 12] = b"uart0_sleep\0";
pub const DT_N_S_pin_controller_S_uart0_sleep_CHILD_IDX: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_ORD: u32 = 62;
pub const DT_N_S_pin_controller_S_uart0_sleep_ORD_STR_SORTABLE: u32 = 50;
pub const DT_N_S_pin_controller_S_uart0_sleep_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_PATH: &[u8; 35] =
    b"/pin-controller/uart0_sleep/group1\0";
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_ORD: u32 = 63;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_ORD_STR_SORTABLE: u32 = 51;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_psels_IDX_0: u32 = 6;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_psels_IDX_1: u32 = 65544;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_psels_IDX_2: u32 = 131077;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_psels_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_psels_IDX_3: u32 = 196615;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_psels_IDX_3_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_psels_LEN: u32 = 4;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_low_power_enable: u32 = 1;
pub const DT_N_S_pin_controller_S_uart0_sleep_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_PATH: &[u8; 30] =
    b"/pin-controller/uart1_default\0";
pub const DT_N_S_pin_controller_S_uart1_default_FULL_NAME: &[u8; 14] = b"uart1_default\0";
pub const DT_N_S_pin_controller_S_uart1_default_CHILD_IDX: u32 = 2;
pub const DT_N_S_pin_controller_S_uart1_default_ORD: u32 = 64;
pub const DT_N_S_pin_controller_S_uart1_default_ORD_STR_SORTABLE: u32 = 52;
pub const DT_N_S_pin_controller_S_uart1_default_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_PATH: &[u8; 37] =
    b"/pin-controller/uart1_default/group1\0";
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_ORD: u32 = 65;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_ORD_STR_SORTABLE: u32 = 53;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_psels_IDX_0: u32 = 65569;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_psels_LEN: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_bias_pull_up: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_low_power_enable: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_PATH: &[u8; 37] =
    b"/pin-controller/uart1_default/group2\0";
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_FULL_NAME: &[u8; 7] = b"group2\0";
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_CHILD_IDX: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_ORD: u32 = 66;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_ORD_STR_SORTABLE: u32 = 54;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_psels_IDX_0: u32 = 34;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_psels_LEN: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_low_power_enable: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_default_S_group2_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_PATH: &[u8; 28] = b"/pin-controller/uart1_sleep\0";
pub const DT_N_S_pin_controller_S_uart1_sleep_FULL_NAME: &[u8; 12] = b"uart1_sleep\0";
pub const DT_N_S_pin_controller_S_uart1_sleep_CHILD_IDX: u32 = 3;
pub const DT_N_S_pin_controller_S_uart1_sleep_ORD: u32 = 67;
pub const DT_N_S_pin_controller_S_uart1_sleep_ORD_STR_SORTABLE: u32 = 55;
pub const DT_N_S_pin_controller_S_uart1_sleep_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_PATH: &[u8; 35] =
    b"/pin-controller/uart1_sleep/group1\0";
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_FULL_NAME: &[u8; 7] = b"group1\0";
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_CHILD_IDX: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_ORD: u32 = 68;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_REG_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_RANGES_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_IRQ_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_STATUS_okay: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_psels_IDX_0: u32 = 65569;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_psels_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_psels_IDX_1: u32 = 34;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_psels_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_psels_LEN: u32 = 2;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_psels_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_nordic_drive_mode: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_nordic_drive_mode_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_nordic_invert: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_nordic_invert_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_bias_disable: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_bias_disable_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_bias_pull_up: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_bias_pull_up_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_bias_pull_down: u32 = 0;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_bias_pull_down_EXISTS: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_low_power_enable: u32 = 1;
pub const DT_N_S_pin_controller_S_uart1_sleep_S_group1_P_low_power_enable_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_PATH: &[u8; 18] = b"/soc/pwm@4001c000\0";
pub const DT_N_S_soc_S_pwm_4001c000_FULL_NAME: &[u8; 13] = b"pwm@4001c000\0";
pub const DT_N_S_soc_S_pwm_4001c000_CHILD_IDX: u32 = 36;
pub const DT_N_S_soc_S_pwm_4001c000_ORD: u32 = 69;
pub const DT_N_S_soc_S_pwm_4001c000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_REG_IDX_0_VAL_ADDRESS: u32 = 1073856512;
pub const DT_N_S_soc_S_pwm_4001c000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_pwm_4001c000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_pwm_4001c000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_IRQ_IDX_0_VAL_irq: u32 = 28;
pub const DT_N_S_soc_S_pwm_4001c000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_COMPAT_MATCHES_nordic_nrf_pwm: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_pwm_4001c000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-pwm\0";
pub const DT_N_S_soc_S_pwm_4001c000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_PINCTRL_NUM: u32 = 2;
pub const DT_N_S_soc_S_pwm_4001c000_PINCTRL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_PINCTRL_NAME_default_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_PINCTRL_NAME_default_IDX: u32 = 0;
pub const DT_N_S_soc_S_pwm_4001c000_PINCTRL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_PINCTRL_NAME_sleep_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_PINCTRL_NAME_sleep_IDX: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_reg_IDX_0: u32 = 1073856512;
pub const DT_N_S_soc_S_pwm_4001c000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_pwm_4001c000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_pinctrl_0_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_pinctrl_0_LEN: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_pinctrl_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_center_aligned: u32 = 0;
pub const DT_N_S_soc_S_pwm_4001c000_P_center_aligned_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_pwm_4001c000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_pwm_4001c000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-pwm\0";
pub const DT_N_S_soc_S_pwm_4001c000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_interrupts_IDX_0: u32 = 28;
pub const DT_N_S_soc_S_pwm_4001c000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_pwm_4001c000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_pwm_4001c000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_pinctrl_1_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_pinctrl_1_LEN: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_pinctrl_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_pinctrl_names_IDX_0: &[u8; 8] = b"default\0";
pub const DT_N_S_soc_S_pwm_4001c000_P_pinctrl_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_pinctrl_names_IDX_1: &[u8; 6] = b"sleep\0";
pub const DT_N_S_soc_S_pwm_4001c000_P_pinctrl_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4001c000_P_pinctrl_names_LEN: u32 = 2;
pub const DT_N_S_soc_S_pwm_4001c000_P_pinctrl_names_EXISTS: u32 = 1;
pub const DT_N_S_pwmleds_PATH: &[u8; 9] = b"/pwmleds\0";
pub const DT_N_S_pwmleds_FULL_NAME: &[u8; 8] = b"pwmleds\0";
pub const DT_N_S_pwmleds_CHILD_IDX: u32 = 8;
pub const DT_N_S_pwmleds_ORD: u32 = 70;
pub const DT_N_S_pwmleds_ORD_STR_SORTABLE: u32 = 56;
pub const DT_N_S_pwmleds_EXISTS: u32 = 1;
pub const DT_N_S_pwmleds_REG_NUM: u32 = 0;
pub const DT_N_S_pwmleds_RANGES_NUM: u32 = 0;
pub const DT_N_S_pwmleds_IRQ_NUM: u32 = 0;
pub const DT_N_S_pwmleds_COMPAT_MATCHES_pwm_leds: u32 = 1;
pub const DT_N_S_pwmleds_STATUS_okay: u32 = 1;
pub const DT_N_S_pwmleds_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pwmleds_P_compatible_IDX_0: &[u8; 9] = b"pwm-leds\0";
pub const DT_N_S_pwmleds_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pwmleds_P_compatible_LEN: u32 = 1;
pub const DT_N_S_pwmleds_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_pwmleds_S_pwm_led_0_PATH: &[u8; 19] = b"/pwmleds/pwm_led_0\0";
pub const DT_N_S_pwmleds_S_pwm_led_0_FULL_NAME: &[u8; 10] = b"pwm_led_0\0";
pub const DT_N_S_pwmleds_S_pwm_led_0_CHILD_IDX: u32 = 0;
pub const DT_N_S_pwmleds_S_pwm_led_0_ORD: u32 = 71;
pub const DT_N_S_pwmleds_S_pwm_led_0_ORD_STR_SORTABLE: u32 = 57;
pub const DT_N_S_pwmleds_S_pwm_led_0_EXISTS: u32 = 1;
pub const DT_N_S_pwmleds_S_pwm_led_0_REG_NUM: u32 = 0;
pub const DT_N_S_pwmleds_S_pwm_led_0_RANGES_NUM: u32 = 0;
pub const DT_N_S_pwmleds_S_pwm_led_0_IRQ_NUM: u32 = 0;
pub const DT_N_S_pwmleds_S_pwm_led_0_STATUS_okay: u32 = 1;
pub const DT_N_S_pwmleds_S_pwm_led_0_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_pwmleds_S_pwm_led_0_P_pwms_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_pwmleds_S_pwm_led_0_P_pwms_IDX_0_VAL_channel: u32 = 0;
pub const DT_N_S_pwmleds_S_pwm_led_0_P_pwms_IDX_0_VAL_channel_EXISTS: u32 = 1;
pub const DT_N_S_pwmleds_S_pwm_led_0_P_pwms_IDX_0_VAL_period: u32 = 20000000;
pub const DT_N_S_pwmleds_S_pwm_led_0_P_pwms_IDX_0_VAL_period_EXISTS: u32 = 1;
pub const DT_N_S_pwmleds_S_pwm_led_0_P_pwms_IDX_0_VAL_flags: u32 = 1;
pub const DT_N_S_pwmleds_S_pwm_led_0_P_pwms_IDX_0_VAL_flags_EXISTS: u32 = 1;
pub const DT_N_S_pwmleds_S_pwm_led_0_P_pwms_LEN: u32 = 1;
pub const DT_N_S_pwmleds_S_pwm_led_0_P_pwms_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_PATH: &[u8; 18] = b"/soc/acl@4001e000\0";
pub const DT_N_S_soc_S_acl_4001e000_FULL_NAME: &[u8; 13] = b"acl@4001e000\0";
pub const DT_N_S_soc_S_acl_4001e000_CHILD_IDX: u32 = 38;
pub const DT_N_S_soc_S_acl_4001e000_ORD: u32 = 72;
pub const DT_N_S_soc_S_acl_4001e000_ORD_STR_SORTABLE: u32 = 58;
pub const DT_N_S_soc_S_acl_4001e000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_REG_IDX_0_VAL_ADDRESS: u32 = 1073864704;
pub const DT_N_S_soc_S_acl_4001e000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_acl_4001e000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_acl_4001e000_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_acl_4001e000_COMPAT_MATCHES_nordic_nrf_acl: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_acl_4001e000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-acl\0";
pub const DT_N_S_soc_S_acl_4001e000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_acl_4001e000_P_reg_IDX_0: u32 = 1073864704;
pub const DT_N_S_soc_S_acl_4001e000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_acl_4001e000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_acl_4001e000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_acl_4001e000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-acl\0";
pub const DT_N_S_soc_S_acl_4001e000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_acl_4001e000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_acl_4001e000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_acl_4001e000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_PATH: &[u8; 18] = b"/soc/adc@40007000\0";
pub const DT_N_S_soc_S_adc_40007000_FULL_NAME: &[u8; 13] = b"adc@40007000\0";
pub const DT_N_S_soc_S_adc_40007000_CHILD_IDX: u32 = 15;
pub const DT_N_S_soc_S_adc_40007000_ORD: u32 = 73;
pub const DT_N_S_soc_S_adc_40007000_ORD_STR_SORTABLE: u32 = 59;
pub const DT_N_S_soc_S_adc_40007000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_REG_IDX_0_VAL_ADDRESS: u32 = 1073770496;
pub const DT_N_S_soc_S_adc_40007000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_adc_40007000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_adc_40007000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_IRQ_IDX_0_VAL_irq: u32 = 7;
pub const DT_N_S_soc_S_adc_40007000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_COMPAT_MATCHES_nordic_nrf_saadc: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_adc_40007000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_COMPAT_MODEL_IDX_0: &[u8; 10] = b"nrf-saadc\0";
pub const DT_N_S_soc_S_adc_40007000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_adc_40007000_P_reg_IDX_0: u32 = 1073770496;
pub const DT_N_S_soc_S_adc_40007000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_adc_40007000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_interrupts_IDX_0: u32 = 7;
pub const DT_N_S_soc_S_adc_40007000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_adc_40007000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_adc_40007000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_compatible_IDX_0: &[u8; 17] = b"nordic,nrf-saadc\0";
pub const DT_N_S_soc_S_adc_40007000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_adc_40007000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_adc_40007000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_adc_40007000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_PATH: &[u8; 18] = b"/soc/ccm@4000f000\0";
pub const DT_N_S_soc_S_ccm_4000f000_FULL_NAME: &[u8; 13] = b"ccm@4000f000\0";
pub const DT_N_S_soc_S_ccm_4000f000_CHILD_IDX: u32 = 23;
pub const DT_N_S_soc_S_ccm_4000f000_ORD: u32 = 74;
pub const DT_N_S_soc_S_ccm_4000f000_ORD_STR_SORTABLE: u32 = 60;
pub const DT_N_S_soc_S_ccm_4000f000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_REG_IDX_0_VAL_ADDRESS: u32 = 1073803264;
pub const DT_N_S_soc_S_ccm_4000f000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_ccm_4000f000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_ccm_4000f000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_IRQ_IDX_0_VAL_irq: u32 = 15;
pub const DT_N_S_soc_S_ccm_4000f000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_COMPAT_MATCHES_nordic_nrf_ccm: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_ccm_4000f000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-ccm\0";
pub const DT_N_S_soc_S_ccm_4000f000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_ccm_4000f000_P_reg_IDX_0: u32 = 1073803264;
pub const DT_N_S_soc_S_ccm_4000f000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_ccm_4000f000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_interrupts_IDX_0: u32 = 15;
pub const DT_N_S_soc_S_ccm_4000f000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_length_field_length_8_bits: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_length_field_length_8_bits_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_headermask_supported: u32 = 0;
pub const DT_N_S_soc_S_ccm_4000f000_P_headermask_supported_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_ccm_4000f000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_ccm_4000f000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-ccm\0";
pub const DT_N_S_soc_S_ccm_4000f000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_ccm_4000f000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ccm_4000f000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_ccm_4000f000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_PATH: &[u8; 20] = b"/soc/clock@40000000\0";
pub const DT_N_S_soc_S_clock_40000000_FULL_NAME: &[u8; 15] = b"clock@40000000\0";
pub const DT_N_S_soc_S_clock_40000000_CHILD_IDX: u32 = 5;
pub const DT_N_S_soc_S_clock_40000000_ORD: u32 = 75;
pub const DT_N_S_soc_S_clock_40000000_ORD_STR_SORTABLE: u32 = 61;
pub const DT_N_S_soc_S_clock_40000000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_REG_IDX_0_VAL_ADDRESS: u32 = 1073741824;
pub const DT_N_S_soc_S_clock_40000000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_clock_40000000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_clock_40000000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_IRQ_IDX_0_VAL_irq: u32 = 0;
pub const DT_N_S_soc_S_clock_40000000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_COMPAT_MATCHES_nordic_nrf_clock: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_clock_40000000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_COMPAT_MODEL_IDX_0: &[u8; 10] = b"nrf-clock\0";
pub const DT_N_S_soc_S_clock_40000000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_clock_40000000_P_reg_IDX_0: u32 = 1073741824;
pub const DT_N_S_soc_S_clock_40000000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_clock_40000000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_interrupts_IDX_0: u32 = 0;
pub const DT_N_S_soc_S_clock_40000000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_clock_40000000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_clock_40000000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_compatible_IDX_0: &[u8; 17] = b"nordic,nrf-clock\0";
pub const DT_N_S_soc_S_clock_40000000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_clock_40000000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_clock_40000000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_clock_40000000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_PATH: &[u8; 25] = b"/soc/comparator@40013000\0";
pub const DT_N_S_soc_S_comparator_40013000_FULL_NAME: &[u8; 20] = b"comparator@40013000\0";
pub const DT_N_S_soc_S_comparator_40013000_CHILD_IDX: u32 = 27;
pub const DT_N_S_soc_S_comparator_40013000_ORD: u32 = 76;
pub const DT_N_S_soc_S_comparator_40013000_ORD_STR_SORTABLE: u32 = 62;
pub const DT_N_S_soc_S_comparator_40013000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_REG_IDX_0_VAL_ADDRESS: u32 = 1073819648;
pub const DT_N_S_soc_S_comparator_40013000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_comparator_40013000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_comparator_40013000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_IRQ_IDX_0_VAL_irq: u32 = 19;
pub const DT_N_S_soc_S_comparator_40013000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_COMPAT_MATCHES_nordic_nrf_comp: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_COMPAT_VENDOR_IDX_0: &[u8; 21] =
    b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_comparator_40013000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_COMPAT_MODEL_IDX_0: &[u8; 9] = b"nrf-comp\0";
pub const DT_N_S_soc_S_comparator_40013000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_comparator_40013000_P_reg_IDX_0: u32 = 1073819648;
pub const DT_N_S_soc_S_comparator_40013000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_comparator_40013000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_interrupts_IDX_0: u32 = 19;
pub const DT_N_S_soc_S_comparator_40013000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_comparator_40013000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_comparator_40013000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_comparator_40013000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_compatible_IDX_0: &[u8; 16] = b"nordic,nrf-comp\0";
pub const DT_N_S_soc_S_comparator_40013000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_comparator_40013000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_comparator_40013000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_comparator_40013000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_PATH: &[u8; 21] = b"/soc/crypto@5002a000\0";
pub const DT_N_S_soc_S_crypto_5002a000_FULL_NAME: &[u8; 16] = b"crypto@5002a000\0";
pub const DT_N_S_soc_S_crypto_5002a000_CHILD_IDX: u32 = 54;
pub const DT_N_S_soc_S_crypto_5002a000_ORD: u32 = 77;
pub const DT_N_S_soc_S_crypto_5002a000_ORD_STR_SORTABLE: u32 = 63;
pub const DT_N_S_soc_S_crypto_5002a000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_REG_NUM: u32 = 2;
pub const DT_N_S_soc_S_crypto_5002a000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_REG_IDX_0_VAL_ADDRESS: u32 = 1342349312;
pub const DT_N_S_soc_S_crypto_5002a000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_crypto_5002a000_REG_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_REG_IDX_1_VAL_ADDRESS: u32 = 1342353408;
pub const DT_N_S_soc_S_crypto_5002a000_REG_IDX_1_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_crypto_5002a000_REG_NAME_wrapper_VAL_ADDRESS: u32 = 1342349312;
pub const DT_N_S_soc_S_crypto_5002a000_REG_NAME_wrapper_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_crypto_5002a000_REG_NAME_core_VAL_ADDRESS: u32 = 1342353408;
pub const DT_N_S_soc_S_crypto_5002a000_REG_NAME_core_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_crypto_5002a000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_crypto_5002a000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_IRQ_IDX_0_VAL_irq: u32 = 42;
pub const DT_N_S_soc_S_crypto_5002a000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_COMPAT_MATCHES_nordic_cryptocell: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_crypto_5002a000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_COMPAT_MODEL_IDX_0: &[u8; 11] = b"cryptocell\0";
pub const DT_N_S_soc_S_crypto_5002a000_COMPAT_MATCHES_arm_cryptocell_310: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_COMPAT_VENDOR_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_COMPAT_VENDOR_IDX_1: &[u8; 9] = b"ARM Ltd.\0";
pub const DT_N_S_soc_S_crypto_5002a000_COMPAT_MODEL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_COMPAT_MODEL_IDX_1: &[u8; 15] = b"cryptocell-310\0";
pub const DT_N_S_soc_S_crypto_5002a000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_IDX_0: u32 = 1342349312;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_IDX_2: u32 = 1342353408;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_IDX_3: u32 = 4096;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_IDX_3_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_interrupts_IDX_0: u32 = 42;
pub const DT_N_S_soc_S_crypto_5002a000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_crypto_5002a000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_crypto_5002a000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_compatible_IDX_0: &[u8; 18] = b"nordic,cryptocell\0";
pub const DT_N_S_soc_S_crypto_5002a000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_compatible_IDX_1: &[u8; 19] = b"arm,cryptocell-310\0";
pub const DT_N_S_soc_S_crypto_5002a000_P_compatible_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_compatible_LEN: u32 = 2;
pub const DT_N_S_soc_S_crypto_5002a000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_names_IDX_0: &[u8; 8] = b"wrapper\0";
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_names_IDX_1: &[u8; 5] = b"core\0";
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_names_LEN: u32 = 2;
pub const DT_N_S_soc_S_crypto_5002a000_P_reg_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_crypto_5002a000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_crypto_5002a000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_crypto_5002a000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_PATH: &[u8; 18] = b"/soc/ecb@4000e000\0";
pub const DT_N_S_soc_S_ecb_4000e000_FULL_NAME: &[u8; 13] = b"ecb@4000e000\0";
pub const DT_N_S_soc_S_ecb_4000e000_CHILD_IDX: u32 = 22;
pub const DT_N_S_soc_S_ecb_4000e000_ORD: u32 = 78;
pub const DT_N_S_soc_S_ecb_4000e000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_REG_IDX_0_VAL_ADDRESS: u32 = 1073799168;
pub const DT_N_S_soc_S_ecb_4000e000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_ecb_4000e000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_ecb_4000e000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_IRQ_IDX_0_VAL_irq: u32 = 14;
pub const DT_N_S_soc_S_ecb_4000e000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_COMPAT_MATCHES_nordic_nrf_ecb: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_ecb_4000e000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-ecb\0";
pub const DT_N_S_soc_S_ecb_4000e000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_ecb_4000e000_P_reg_IDX_0: u32 = 1073799168;
pub const DT_N_S_soc_S_ecb_4000e000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_ecb_4000e000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_interrupts_IDX_0: u32 = 14;
pub const DT_N_S_soc_S_ecb_4000e000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_ecb_4000e000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_ecb_4000e000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-ecb\0";
pub const DT_N_S_soc_S_ecb_4000e000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_ecb_4000e000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ecb_4000e000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_ecb_4000e000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_PATH: &[u8; 18] = b"/soc/egu@40014000\0";
pub const DT_N_S_soc_S_egu_40014000_FULL_NAME: &[u8; 13] = b"egu@40014000\0";
pub const DT_N_S_soc_S_egu_40014000_CHILD_IDX: u32 = 28;
pub const DT_N_S_soc_S_egu_40014000_ORD: u32 = 79;
pub const DT_N_S_soc_S_egu_40014000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_REG_IDX_0_VAL_ADDRESS: u32 = 1073823744;
pub const DT_N_S_soc_S_egu_40014000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_egu_40014000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_egu_40014000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_IRQ_IDX_0_VAL_irq: u32 = 20;
pub const DT_N_S_soc_S_egu_40014000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_COMPAT_MATCHES_nordic_nrf_egu: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_egu_40014000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-egu\0";
pub const DT_N_S_soc_S_egu_40014000_COMPAT_MATCHES_nordic_nrf_swi: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_COMPAT_VENDOR_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_COMPAT_VENDOR_IDX_1: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_egu_40014000_COMPAT_MODEL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_COMPAT_MODEL_IDX_1: &[u8; 8] = b"nrf-swi\0";
pub const DT_N_S_soc_S_egu_40014000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_egu_40014000_P_reg_IDX_0: u32 = 1073823744;
pub const DT_N_S_soc_S_egu_40014000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_egu_40014000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_interrupts_IDX_0: u32 = 20;
pub const DT_N_S_soc_S_egu_40014000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_egu_40014000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_egu_40014000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-egu\0";
pub const DT_N_S_soc_S_egu_40014000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_compatible_IDX_1: &[u8; 15] = b"nordic,nrf-swi\0";
pub const DT_N_S_soc_S_egu_40014000_P_compatible_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_compatible_LEN: u32 = 2;
pub const DT_N_S_soc_S_egu_40014000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_egu_40014000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40014000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_egu_40014000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_PATH: &[u8; 18] = b"/soc/egu@40015000\0";
pub const DT_N_S_soc_S_egu_40015000_FULL_NAME: &[u8; 13] = b"egu@40015000\0";
pub const DT_N_S_soc_S_egu_40015000_CHILD_IDX: u32 = 29;
pub const DT_N_S_soc_S_egu_40015000_ORD: u32 = 80;
pub const DT_N_S_soc_S_egu_40015000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_REG_IDX_0_VAL_ADDRESS: u32 = 1073827840;
pub const DT_N_S_soc_S_egu_40015000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_egu_40015000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_egu_40015000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_IRQ_IDX_0_VAL_irq: u32 = 21;
pub const DT_N_S_soc_S_egu_40015000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_COMPAT_MATCHES_nordic_nrf_egu: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_egu_40015000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-egu\0";
pub const DT_N_S_soc_S_egu_40015000_COMPAT_MATCHES_nordic_nrf_swi: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_COMPAT_VENDOR_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_COMPAT_VENDOR_IDX_1: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_egu_40015000_COMPAT_MODEL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_COMPAT_MODEL_IDX_1: &[u8; 8] = b"nrf-swi\0";
pub const DT_N_S_soc_S_egu_40015000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_egu_40015000_P_reg_IDX_0: u32 = 1073827840;
pub const DT_N_S_soc_S_egu_40015000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_egu_40015000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_interrupts_IDX_0: u32 = 21;
pub const DT_N_S_soc_S_egu_40015000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_egu_40015000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_egu_40015000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-egu\0";
pub const DT_N_S_soc_S_egu_40015000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_compatible_IDX_1: &[u8; 15] = b"nordic,nrf-swi\0";
pub const DT_N_S_soc_S_egu_40015000_P_compatible_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_compatible_LEN: u32 = 2;
pub const DT_N_S_soc_S_egu_40015000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_egu_40015000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40015000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_egu_40015000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_PATH: &[u8; 18] = b"/soc/egu@40016000\0";
pub const DT_N_S_soc_S_egu_40016000_FULL_NAME: &[u8; 13] = b"egu@40016000\0";
pub const DT_N_S_soc_S_egu_40016000_CHILD_IDX: u32 = 30;
pub const DT_N_S_soc_S_egu_40016000_ORD: u32 = 81;
pub const DT_N_S_soc_S_egu_40016000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_REG_IDX_0_VAL_ADDRESS: u32 = 1073831936;
pub const DT_N_S_soc_S_egu_40016000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_egu_40016000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_egu_40016000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_IRQ_IDX_0_VAL_irq: u32 = 22;
pub const DT_N_S_soc_S_egu_40016000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_COMPAT_MATCHES_nordic_nrf_egu: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_egu_40016000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-egu\0";
pub const DT_N_S_soc_S_egu_40016000_COMPAT_MATCHES_nordic_nrf_swi: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_COMPAT_VENDOR_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_COMPAT_VENDOR_IDX_1: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_egu_40016000_COMPAT_MODEL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_COMPAT_MODEL_IDX_1: &[u8; 8] = b"nrf-swi\0";
pub const DT_N_S_soc_S_egu_40016000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_egu_40016000_P_reg_IDX_0: u32 = 1073831936;
pub const DT_N_S_soc_S_egu_40016000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_egu_40016000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_interrupts_IDX_0: u32 = 22;
pub const DT_N_S_soc_S_egu_40016000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_egu_40016000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_egu_40016000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-egu\0";
pub const DT_N_S_soc_S_egu_40016000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_compatible_IDX_1: &[u8; 15] = b"nordic,nrf-swi\0";
pub const DT_N_S_soc_S_egu_40016000_P_compatible_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_compatible_LEN: u32 = 2;
pub const DT_N_S_soc_S_egu_40016000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_egu_40016000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40016000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_egu_40016000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_PATH: &[u8; 18] = b"/soc/egu@40017000\0";
pub const DT_N_S_soc_S_egu_40017000_FULL_NAME: &[u8; 13] = b"egu@40017000\0";
pub const DT_N_S_soc_S_egu_40017000_CHILD_IDX: u32 = 31;
pub const DT_N_S_soc_S_egu_40017000_ORD: u32 = 82;
pub const DT_N_S_soc_S_egu_40017000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_REG_IDX_0_VAL_ADDRESS: u32 = 1073836032;
pub const DT_N_S_soc_S_egu_40017000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_egu_40017000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_egu_40017000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_IRQ_IDX_0_VAL_irq: u32 = 23;
pub const DT_N_S_soc_S_egu_40017000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_COMPAT_MATCHES_nordic_nrf_egu: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_egu_40017000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-egu\0";
pub const DT_N_S_soc_S_egu_40017000_COMPAT_MATCHES_nordic_nrf_swi: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_COMPAT_VENDOR_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_COMPAT_VENDOR_IDX_1: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_egu_40017000_COMPAT_MODEL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_COMPAT_MODEL_IDX_1: &[u8; 8] = b"nrf-swi\0";
pub const DT_N_S_soc_S_egu_40017000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_egu_40017000_P_reg_IDX_0: u32 = 1073836032;
pub const DT_N_S_soc_S_egu_40017000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_egu_40017000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_interrupts_IDX_0: u32 = 23;
pub const DT_N_S_soc_S_egu_40017000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_egu_40017000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_egu_40017000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-egu\0";
pub const DT_N_S_soc_S_egu_40017000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_compatible_IDX_1: &[u8; 15] = b"nordic,nrf-swi\0";
pub const DT_N_S_soc_S_egu_40017000_P_compatible_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_compatible_LEN: u32 = 2;
pub const DT_N_S_soc_S_egu_40017000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_egu_40017000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40017000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_egu_40017000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_PATH: &[u8; 18] = b"/soc/egu@40018000\0";
pub const DT_N_S_soc_S_egu_40018000_FULL_NAME: &[u8; 13] = b"egu@40018000\0";
pub const DT_N_S_soc_S_egu_40018000_CHILD_IDX: u32 = 32;
pub const DT_N_S_soc_S_egu_40018000_ORD: u32 = 83;
pub const DT_N_S_soc_S_egu_40018000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_REG_IDX_0_VAL_ADDRESS: u32 = 1073840128;
pub const DT_N_S_soc_S_egu_40018000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_egu_40018000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_egu_40018000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_IRQ_IDX_0_VAL_irq: u32 = 24;
pub const DT_N_S_soc_S_egu_40018000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_COMPAT_MATCHES_nordic_nrf_egu: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_egu_40018000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-egu\0";
pub const DT_N_S_soc_S_egu_40018000_COMPAT_MATCHES_nordic_nrf_swi: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_COMPAT_VENDOR_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_COMPAT_VENDOR_IDX_1: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_egu_40018000_COMPAT_MODEL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_COMPAT_MODEL_IDX_1: &[u8; 8] = b"nrf-swi\0";
pub const DT_N_S_soc_S_egu_40018000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_egu_40018000_P_reg_IDX_0: u32 = 1073840128;
pub const DT_N_S_soc_S_egu_40018000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_egu_40018000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_interrupts_IDX_0: u32 = 24;
pub const DT_N_S_soc_S_egu_40018000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_egu_40018000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_egu_40018000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-egu\0";
pub const DT_N_S_soc_S_egu_40018000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_compatible_IDX_1: &[u8; 15] = b"nordic,nrf-swi\0";
pub const DT_N_S_soc_S_egu_40018000_P_compatible_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_compatible_LEN: u32 = 2;
pub const DT_N_S_soc_S_egu_40018000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_egu_40018000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40018000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_egu_40018000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_PATH: &[u8; 18] = b"/soc/egu@40019000\0";
pub const DT_N_S_soc_S_egu_40019000_FULL_NAME: &[u8; 13] = b"egu@40019000\0";
pub const DT_N_S_soc_S_egu_40019000_CHILD_IDX: u32 = 33;
pub const DT_N_S_soc_S_egu_40019000_ORD: u32 = 84;
pub const DT_N_S_soc_S_egu_40019000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_REG_IDX_0_VAL_ADDRESS: u32 = 1073844224;
pub const DT_N_S_soc_S_egu_40019000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_egu_40019000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_egu_40019000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_IRQ_IDX_0_VAL_irq: u32 = 25;
pub const DT_N_S_soc_S_egu_40019000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_COMPAT_MATCHES_nordic_nrf_egu: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_egu_40019000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-egu\0";
pub const DT_N_S_soc_S_egu_40019000_COMPAT_MATCHES_nordic_nrf_swi: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_COMPAT_VENDOR_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_COMPAT_VENDOR_IDX_1: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_egu_40019000_COMPAT_MODEL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_COMPAT_MODEL_IDX_1: &[u8; 8] = b"nrf-swi\0";
pub const DT_N_S_soc_S_egu_40019000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_egu_40019000_P_reg_IDX_0: u32 = 1073844224;
pub const DT_N_S_soc_S_egu_40019000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_egu_40019000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_interrupts_IDX_0: u32 = 25;
pub const DT_N_S_soc_S_egu_40019000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_egu_40019000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_egu_40019000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-egu\0";
pub const DT_N_S_soc_S_egu_40019000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_compatible_IDX_1: &[u8; 15] = b"nordic,nrf-swi\0";
pub const DT_N_S_soc_S_egu_40019000_P_compatible_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_compatible_LEN: u32 = 2;
pub const DT_N_S_soc_S_egu_40019000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_egu_40019000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_egu_40019000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_egu_40019000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_PATH: &[u8; 19] = b"/soc/ficr@10000000\0";
pub const DT_N_S_soc_S_ficr_10000000_FULL_NAME: &[u8; 14] = b"ficr@10000000\0";
pub const DT_N_S_soc_S_ficr_10000000_CHILD_IDX: u32 = 2;
pub const DT_N_S_soc_S_ficr_10000000_ORD: u32 = 85;
pub const DT_N_S_soc_S_ficr_10000000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_REG_IDX_0_VAL_ADDRESS: u32 = 268435456;
pub const DT_N_S_soc_S_ficr_10000000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_ficr_10000000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_ficr_10000000_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_ficr_10000000_COMPAT_MATCHES_nordic_nrf_ficr: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_ficr_10000000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_COMPAT_MODEL_IDX_0: &[u8; 9] = b"nrf-ficr\0";
pub const DT_N_S_soc_S_ficr_10000000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_ficr_10000000_P_reg_IDX_0: u32 = 268435456;
pub const DT_N_S_soc_S_ficr_10000000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_ficr_10000000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_ficr_10000000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_ficr_10000000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_P_compatible_IDX_0: &[u8; 16] = b"nordic,nrf-ficr\0";
pub const DT_N_S_soc_S_ficr_10000000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_ficr_10000000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ficr_10000000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_ficr_10000000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_PATH: &[u8; 18] = b"/soc/i2c@40003000\0";
pub const DT_N_S_soc_S_i2c_40003000_FULL_NAME: &[u8; 13] = b"i2c@40003000\0";
pub const DT_N_S_soc_S_i2c_40003000_CHILD_IDX: u32 = 9;
pub const DT_N_S_soc_S_i2c_40003000_ORD: u32 = 86;
pub const DT_N_S_soc_S_i2c_40003000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_REG_IDX_0_VAL_ADDRESS: u32 = 1073754112;
pub const DT_N_S_soc_S_i2c_40003000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_i2c_40003000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_i2c_40003000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_IRQ_IDX_0_VAL_irq: u32 = 3;
pub const DT_N_S_soc_S_i2c_40003000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_COMPAT_MATCHES_nordic_nrf_twi: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_i2c_40003000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-twi\0";
pub const DT_N_S_soc_S_i2c_40003000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_PINCTRL_NUM: u32 = 2;
pub const DT_N_S_soc_S_i2c_40003000_PINCTRL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_PINCTRL_NAME_default_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_PINCTRL_NAME_default_IDX: u32 = 0;
pub const DT_N_S_soc_S_i2c_40003000_PINCTRL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_PINCTRL_NAME_sleep_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_PINCTRL_NAME_sleep_IDX: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_reg_IDX_0: u32 = 1073754112;
pub const DT_N_S_soc_S_i2c_40003000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_i2c_40003000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_interrupts_IDX_0: u32 = 3;
pub const DT_N_S_soc_S_i2c_40003000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_pinctrl_0_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_pinctrl_0_LEN: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_pinctrl_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_easydma_maxcnt_bits: u32 = 16;
pub const DT_N_S_soc_S_i2c_40003000_P_easydma_maxcnt_bits_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_clock_frequency: u32 = 100000;
pub const DT_N_S_soc_S_i2c_40003000_P_clock_frequency_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_i2c_40003000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_i2c_40003000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-twi\0";
pub const DT_N_S_soc_S_i2c_40003000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_i2c_40003000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_i2c_40003000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_pinctrl_1_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_pinctrl_1_LEN: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_pinctrl_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_pinctrl_names_IDX_0: &[u8; 8] = b"default\0";
pub const DT_N_S_soc_S_i2c_40003000_P_pinctrl_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_pinctrl_names_IDX_1: &[u8; 6] = b"sleep\0";
pub const DT_N_S_soc_S_i2c_40003000_P_pinctrl_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40003000_P_pinctrl_names_LEN: u32 = 2;
pub const DT_N_S_soc_S_i2c_40003000_P_pinctrl_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_PATH: &[u8; 18] = b"/soc/i2c@40004000\0";
pub const DT_N_S_soc_S_i2c_40004000_FULL_NAME: &[u8; 13] = b"i2c@40004000\0";
pub const DT_N_S_soc_S_i2c_40004000_CHILD_IDX: u32 = 11;
pub const DT_N_S_soc_S_i2c_40004000_ORD: u32 = 87;
pub const DT_N_S_soc_S_i2c_40004000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_REG_IDX_0_VAL_ADDRESS: u32 = 1073758208;
pub const DT_N_S_soc_S_i2c_40004000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_i2c_40004000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_i2c_40004000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_IRQ_IDX_0_VAL_irq: u32 = 4;
pub const DT_N_S_soc_S_i2c_40004000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_COMPAT_MATCHES_nordic_nrf_twi: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_i2c_40004000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-twi\0";
pub const DT_N_S_soc_S_i2c_40004000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_PINCTRL_NUM: u32 = 2;
pub const DT_N_S_soc_S_i2c_40004000_PINCTRL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_PINCTRL_NAME_default_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_PINCTRL_NAME_default_IDX: u32 = 0;
pub const DT_N_S_soc_S_i2c_40004000_PINCTRL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_PINCTRL_NAME_sleep_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_PINCTRL_NAME_sleep_IDX: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_reg_IDX_0: u32 = 1073758208;
pub const DT_N_S_soc_S_i2c_40004000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_i2c_40004000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_interrupts_IDX_0: u32 = 4;
pub const DT_N_S_soc_S_i2c_40004000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_pinctrl_0_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_pinctrl_0_LEN: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_pinctrl_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_easydma_maxcnt_bits: u32 = 16;
pub const DT_N_S_soc_S_i2c_40004000_P_easydma_maxcnt_bits_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_clock_frequency: u32 = 100000;
pub const DT_N_S_soc_S_i2c_40004000_P_clock_frequency_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_i2c_40004000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_i2c_40004000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_i2c_40004000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-twi\0";
pub const DT_N_S_soc_S_i2c_40004000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_i2c_40004000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_i2c_40004000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_pinctrl_1_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_pinctrl_1_LEN: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_pinctrl_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_pinctrl_names_IDX_0: &[u8; 8] = b"default\0";
pub const DT_N_S_soc_S_i2c_40004000_P_pinctrl_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_pinctrl_names_IDX_1: &[u8; 6] = b"sleep\0";
pub const DT_N_S_soc_S_i2c_40004000_P_pinctrl_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2c_40004000_P_pinctrl_names_LEN: u32 = 2;
pub const DT_N_S_soc_S_i2c_40004000_P_pinctrl_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_PATH: &[u8; 18] = b"/soc/i2s@40025000\0";
pub const DT_N_S_soc_S_i2s_40025000_FULL_NAME: &[u8; 13] = b"i2s@40025000\0";
pub const DT_N_S_soc_S_i2s_40025000_CHILD_IDX: u32 = 46;
pub const DT_N_S_soc_S_i2s_40025000_ORD: u32 = 88;
pub const DT_N_S_soc_S_i2s_40025000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_REG_IDX_0_VAL_ADDRESS: u32 = 1073893376;
pub const DT_N_S_soc_S_i2s_40025000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_i2s_40025000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_i2s_40025000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_IRQ_IDX_0_VAL_irq: u32 = 37;
pub const DT_N_S_soc_S_i2s_40025000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_COMPAT_MATCHES_nordic_nrf_i2s: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_i2s_40025000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-i2s\0";
pub const DT_N_S_soc_S_i2s_40025000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_i2s_40025000_P_reg_IDX_0: u32 = 1073893376;
pub const DT_N_S_soc_S_i2s_40025000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_i2s_40025000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_interrupts_IDX_0: u32 = 37;
pub const DT_N_S_soc_S_i2s_40025000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_clock_source: &[u8; 13] = b"PCLK32M_HFXO\0";
pub const DT_N_S_soc_S_i2s_40025000_P_clock_source_IDX_0: &[u8; 13] = b"PCLK32M_HFXO\0";
pub const DT_N_S_soc_S_i2s_40025000_P_clock_source_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_clock_source_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_clock_source_ENUM_VAL_PCLK32M_HFXO_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_clock_source_LEN: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_clock_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_i2s_40025000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_i2s_40025000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_i2s_40025000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-i2s\0";
pub const DT_N_S_soc_S_i2s_40025000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_i2s_40025000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_i2s_40025000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_i2s_40025000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_PATH: &[u8; 21] = b"/soc/memory@20000000\0";
pub const DT_N_S_soc_S_memory_20000000_FULL_NAME: &[u8; 16] = b"memory@20000000\0";
pub const DT_N_S_soc_S_memory_20000000_CHILD_IDX: u32 = 4;
pub const DT_N_S_soc_S_memory_20000000_ORD: u32 = 89;
pub const DT_N_S_soc_S_memory_20000000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_REG_IDX_0_VAL_ADDRESS: u32 = 536870912;
pub const DT_N_S_soc_S_memory_20000000_REG_IDX_0_VAL_SIZE: u32 = 262144;
pub const DT_N_S_soc_S_memory_20000000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_memory_20000000_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_memory_20000000_COMPAT_MATCHES_mmio_sram: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_memory_20000000_P_reg_IDX_0: u32 = 536870912;
pub const DT_N_S_soc_S_memory_20000000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_P_reg_IDX_1: u32 = 262144;
pub const DT_N_S_soc_S_memory_20000000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_P_compatible_IDX_0: &[u8; 10] = b"mmio-sram\0";
pub const DT_N_S_soc_S_memory_20000000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_memory_20000000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_memory_20000000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_memory_20000000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_PATH: &[u8; 18] = b"/soc/mwu@40020000\0";
pub const DT_N_S_soc_S_mwu_40020000_FULL_NAME: &[u8; 13] = b"mwu@40020000\0";
pub const DT_N_S_soc_S_mwu_40020000_CHILD_IDX: u32 = 41;
pub const DT_N_S_soc_S_mwu_40020000_ORD: u32 = 90;
pub const DT_N_S_soc_S_mwu_40020000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_REG_IDX_0_VAL_ADDRESS: u32 = 1073872896;
pub const DT_N_S_soc_S_mwu_40020000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_mwu_40020000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_mwu_40020000_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_mwu_40020000_COMPAT_MATCHES_nordic_nrf_mwu: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_mwu_40020000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-mwu\0";
pub const DT_N_S_soc_S_mwu_40020000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_mwu_40020000_P_reg_IDX_0: u32 = 1073872896;
pub const DT_N_S_soc_S_mwu_40020000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_mwu_40020000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_mwu_40020000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_mwu_40020000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-mwu\0";
pub const DT_N_S_soc_S_mwu_40020000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_mwu_40020000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_mwu_40020000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_mwu_40020000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_PATH: &[u8; 19] = b"/soc/nfct@40005000\0";
pub const DT_N_S_soc_S_nfct_40005000_FULL_NAME: &[u8; 14] = b"nfct@40005000\0";
pub const DT_N_S_soc_S_nfct_40005000_CHILD_IDX: u32 = 13;
pub const DT_N_S_soc_S_nfct_40005000_ORD: u32 = 91;
pub const DT_N_S_soc_S_nfct_40005000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_REG_IDX_0_VAL_ADDRESS: u32 = 1073762304;
pub const DT_N_S_soc_S_nfct_40005000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_nfct_40005000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_nfct_40005000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_IRQ_IDX_0_VAL_irq: u32 = 5;
pub const DT_N_S_soc_S_nfct_40005000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_COMPAT_MATCHES_nordic_nrf_nfct: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_nfct_40005000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_COMPAT_MODEL_IDX_0: &[u8; 9] = b"nrf-nfct\0";
pub const DT_N_S_soc_S_nfct_40005000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_nfct_40005000_P_reg_IDX_0: u32 = 1073762304;
pub const DT_N_S_soc_S_nfct_40005000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_nfct_40005000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_interrupts_IDX_0: u32 = 5;
pub const DT_N_S_soc_S_nfct_40005000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_nfct_40005000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_nfct_40005000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_compatible_IDX_0: &[u8; 16] = b"nordic,nrf-nfct\0";
pub const DT_N_S_soc_S_nfct_40005000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_nfct_40005000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_nfct_40005000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_nfct_40005000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_PATH: &[u8; 18] = b"/soc/pdm@4001d000\0";
pub const DT_N_S_soc_S_pdm_4001d000_FULL_NAME: &[u8; 13] = b"pdm@4001d000\0";
pub const DT_N_S_soc_S_pdm_4001d000_CHILD_IDX: u32 = 37;
pub const DT_N_S_soc_S_pdm_4001d000_ORD: u32 = 92;
pub const DT_N_S_soc_S_pdm_4001d000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_REG_IDX_0_VAL_ADDRESS: u32 = 1073860608;
pub const DT_N_S_soc_S_pdm_4001d000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_pdm_4001d000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_pdm_4001d000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_IRQ_IDX_0_VAL_irq: u32 = 29;
pub const DT_N_S_soc_S_pdm_4001d000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_COMPAT_MATCHES_nordic_nrf_pdm: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_pdm_4001d000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-pdm\0";
pub const DT_N_S_soc_S_pdm_4001d000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_pdm_4001d000_P_reg_IDX_0: u32 = 1073860608;
pub const DT_N_S_soc_S_pdm_4001d000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_pdm_4001d000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_interrupts_IDX_0: u32 = 29;
pub const DT_N_S_soc_S_pdm_4001d000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_clock_source: &[u8; 13] = b"PCLK32M_HFXO\0";
pub const DT_N_S_soc_S_pdm_4001d000_P_clock_source_IDX_0: &[u8; 13] = b"PCLK32M_HFXO\0";
pub const DT_N_S_soc_S_pdm_4001d000_P_clock_source_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_clock_source_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_clock_source_ENUM_VAL_PCLK32M_HFXO_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_clock_source_LEN: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_clock_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_queue_size: u32 = 4;
pub const DT_N_S_soc_S_pdm_4001d000_P_queue_size_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_pdm_4001d000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_pdm_4001d000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_pdm_4001d000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-pdm\0";
pub const DT_N_S_soc_S_pdm_4001d000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_pdm_4001d000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pdm_4001d000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_pdm_4001d000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_PATH: &[u8; 18] = b"/soc/ppi@4001f000\0";
pub const DT_N_S_soc_S_ppi_4001f000_FULL_NAME: &[u8; 13] = b"ppi@4001f000\0";
pub const DT_N_S_soc_S_ppi_4001f000_CHILD_IDX: u32 = 40;
pub const DT_N_S_soc_S_ppi_4001f000_ORD: u32 = 93;
pub const DT_N_S_soc_S_ppi_4001f000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_REG_IDX_0_VAL_ADDRESS: u32 = 1073868800;
pub const DT_N_S_soc_S_ppi_4001f000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_ppi_4001f000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_ppi_4001f000_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_ppi_4001f000_COMPAT_MATCHES_nordic_nrf_ppi: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_ppi_4001f000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-ppi\0";
pub const DT_N_S_soc_S_ppi_4001f000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_ppi_4001f000_P_reg_IDX_0: u32 = 1073868800;
pub const DT_N_S_soc_S_ppi_4001f000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_ppi_4001f000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_ppi_4001f000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_ppi_4001f000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-ppi\0";
pub const DT_N_S_soc_S_ppi_4001f000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_ppi_4001f000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_ppi_4001f000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_ppi_4001f000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_PATH: &[u8; 18] = b"/soc/pwm@40021000\0";
pub const DT_N_S_soc_S_pwm_40021000_FULL_NAME: &[u8; 13] = b"pwm@40021000\0";
pub const DT_N_S_soc_S_pwm_40021000_CHILD_IDX: u32 = 42;
pub const DT_N_S_soc_S_pwm_40021000_ORD: u32 = 94;
pub const DT_N_S_soc_S_pwm_40021000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_REG_IDX_0_VAL_ADDRESS: u32 = 1073876992;
pub const DT_N_S_soc_S_pwm_40021000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_pwm_40021000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_pwm_40021000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_IRQ_IDX_0_VAL_irq: u32 = 33;
pub const DT_N_S_soc_S_pwm_40021000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_COMPAT_MATCHES_nordic_nrf_pwm: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_pwm_40021000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-pwm\0";
pub const DT_N_S_soc_S_pwm_40021000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_pwm_40021000_P_reg_IDX_0: u32 = 1073876992;
pub const DT_N_S_soc_S_pwm_40021000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_pwm_40021000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_center_aligned: u32 = 0;
pub const DT_N_S_soc_S_pwm_40021000_P_center_aligned_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_pwm_40021000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_pwm_40021000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_pwm_40021000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-pwm\0";
pub const DT_N_S_soc_S_pwm_40021000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_interrupts_IDX_0: u32 = 33;
pub const DT_N_S_soc_S_pwm_40021000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_pwm_40021000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40021000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_pwm_40021000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_PATH: &[u8; 18] = b"/soc/pwm@40022000\0";
pub const DT_N_S_soc_S_pwm_40022000_FULL_NAME: &[u8; 13] = b"pwm@40022000\0";
pub const DT_N_S_soc_S_pwm_40022000_CHILD_IDX: u32 = 43;
pub const DT_N_S_soc_S_pwm_40022000_ORD: u32 = 95;
pub const DT_N_S_soc_S_pwm_40022000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_REG_IDX_0_VAL_ADDRESS: u32 = 1073881088;
pub const DT_N_S_soc_S_pwm_40022000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_pwm_40022000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_pwm_40022000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_IRQ_IDX_0_VAL_irq: u32 = 34;
pub const DT_N_S_soc_S_pwm_40022000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_COMPAT_MATCHES_nordic_nrf_pwm: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_pwm_40022000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-pwm\0";
pub const DT_N_S_soc_S_pwm_40022000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_pwm_40022000_P_reg_IDX_0: u32 = 1073881088;
pub const DT_N_S_soc_S_pwm_40022000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_pwm_40022000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_center_aligned: u32 = 0;
pub const DT_N_S_soc_S_pwm_40022000_P_center_aligned_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_pwm_40022000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_pwm_40022000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_pwm_40022000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-pwm\0";
pub const DT_N_S_soc_S_pwm_40022000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_interrupts_IDX_0: u32 = 34;
pub const DT_N_S_soc_S_pwm_40022000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_pwm_40022000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_40022000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_pwm_40022000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_PATH: &[u8; 18] = b"/soc/pwm@4002d000\0";
pub const DT_N_S_soc_S_pwm_4002d000_FULL_NAME: &[u8; 13] = b"pwm@4002d000\0";
pub const DT_N_S_soc_S_pwm_4002d000_CHILD_IDX: u32 = 50;
pub const DT_N_S_soc_S_pwm_4002d000_ORD: u32 = 96;
pub const DT_N_S_soc_S_pwm_4002d000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_REG_IDX_0_VAL_ADDRESS: u32 = 1073926144;
pub const DT_N_S_soc_S_pwm_4002d000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_pwm_4002d000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_pwm_4002d000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_IRQ_IDX_0_VAL_irq: u32 = 45;
pub const DT_N_S_soc_S_pwm_4002d000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_COMPAT_MATCHES_nordic_nrf_pwm: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_pwm_4002d000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-pwm\0";
pub const DT_N_S_soc_S_pwm_4002d000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_pwm_4002d000_P_reg_IDX_0: u32 = 1073926144;
pub const DT_N_S_soc_S_pwm_4002d000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_pwm_4002d000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_center_aligned: u32 = 0;
pub const DT_N_S_soc_S_pwm_4002d000_P_center_aligned_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_pwm_4002d000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_pwm_4002d000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_pwm_4002d000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-pwm\0";
pub const DT_N_S_soc_S_pwm_4002d000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_interrupts_IDX_0: u32 = 45;
pub const DT_N_S_soc_S_pwm_4002d000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_pwm_4002d000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_pwm_4002d000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_pwm_4002d000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_PATH: &[u8; 19] = b"/soc/qdec@40012000\0";
pub const DT_N_S_soc_S_qdec_40012000_FULL_NAME: &[u8; 14] = b"qdec@40012000\0";
pub const DT_N_S_soc_S_qdec_40012000_CHILD_IDX: u32 = 26;
pub const DT_N_S_soc_S_qdec_40012000_ORD: u32 = 97;
pub const DT_N_S_soc_S_qdec_40012000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_REG_IDX_0_VAL_ADDRESS: u32 = 1073815552;
pub const DT_N_S_soc_S_qdec_40012000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_qdec_40012000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_qdec_40012000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_IRQ_IDX_0_VAL_irq: u32 = 18;
pub const DT_N_S_soc_S_qdec_40012000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_COMPAT_MATCHES_nordic_nrf_qdec: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_qdec_40012000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_COMPAT_MODEL_IDX_0: &[u8; 9] = b"nrf-qdec\0";
pub const DT_N_S_soc_S_qdec_40012000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_qdec_40012000_P_reg_IDX_0: u32 = 1073815552;
pub const DT_N_S_soc_S_qdec_40012000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_qdec_40012000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_interrupts_IDX_0: u32 = 18;
pub const DT_N_S_soc_S_qdec_40012000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_qdec_40012000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_qdec_40012000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_qdec_40012000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_compatible_IDX_0: &[u8; 16] = b"nordic,nrf-qdec\0";
pub const DT_N_S_soc_S_qdec_40012000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_qdec_40012000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qdec_40012000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_qdec_40012000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_PATH: &[u8; 21] = b"/soc/random@4000d000\0";
pub const DT_N_S_soc_S_random_4000d000_FULL_NAME: &[u8; 16] = b"random@4000d000\0";
pub const DT_N_S_soc_S_random_4000d000_CHILD_IDX: u32 = 21;
pub const DT_N_S_soc_S_random_4000d000_ORD: u32 = 98;
pub const DT_N_S_soc_S_random_4000d000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_REG_IDX_0_VAL_ADDRESS: u32 = 1073795072;
pub const DT_N_S_soc_S_random_4000d000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_random_4000d000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_random_4000d000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_IRQ_IDX_0_VAL_irq: u32 = 13;
pub const DT_N_S_soc_S_random_4000d000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_COMPAT_MATCHES_nordic_nrf_rng: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_random_4000d000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-rng\0";
pub const DT_N_S_soc_S_random_4000d000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_random_4000d000_P_reg_IDX_0: u32 = 1073795072;
pub const DT_N_S_soc_S_random_4000d000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_random_4000d000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_interrupts_IDX_0: u32 = 13;
pub const DT_N_S_soc_S_random_4000d000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_random_4000d000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_random_4000d000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-rng\0";
pub const DT_N_S_soc_S_random_4000d000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_random_4000d000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_random_4000d000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_random_4000d000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_PATH: &[u8; 18] = b"/soc/rtc@4000b000\0";
pub const DT_N_S_soc_S_rtc_4000b000_FULL_NAME: &[u8; 13] = b"rtc@4000b000\0";
pub const DT_N_S_soc_S_rtc_4000b000_CHILD_IDX: u32 = 19;
pub const DT_N_S_soc_S_rtc_4000b000_ORD: u32 = 99;
pub const DT_N_S_soc_S_rtc_4000b000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_REG_IDX_0_VAL_ADDRESS: u32 = 1073786880;
pub const DT_N_S_soc_S_rtc_4000b000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_rtc_4000b000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_rtc_4000b000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_IRQ_IDX_0_VAL_irq: u32 = 11;
pub const DT_N_S_soc_S_rtc_4000b000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_COMPAT_MATCHES_nordic_nrf_rtc: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_rtc_4000b000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-rtc\0";
pub const DT_N_S_soc_S_rtc_4000b000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_rtc_4000b000_P_reg_IDX_0: u32 = 1073786880;
pub const DT_N_S_soc_S_rtc_4000b000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_rtc_4000b000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_cc_num: u32 = 3;
pub const DT_N_S_soc_S_rtc_4000b000_P_cc_num_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_ppi_wrap: u32 = 0;
pub const DT_N_S_soc_S_rtc_4000b000_P_ppi_wrap_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_fixed_top: u32 = 0;
pub const DT_N_S_soc_S_rtc_4000b000_P_fixed_top_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_zli: u32 = 0;
pub const DT_N_S_soc_S_rtc_4000b000_P_zli_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_clock_frequency: u32 = 32768;
pub const DT_N_S_soc_S_rtc_4000b000_P_clock_frequency_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_interrupts_IDX_0: u32 = 11;
pub const DT_N_S_soc_S_rtc_4000b000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_prescaler: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_prescaler_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_rtc_4000b000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_rtc_4000b000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_rtc_4000b000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-rtc\0";
pub const DT_N_S_soc_S_rtc_4000b000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_rtc_4000b000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_4000b000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_rtc_4000b000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_PATH: &[u8; 18] = b"/soc/rtc@40011000\0";
pub const DT_N_S_soc_S_rtc_40011000_FULL_NAME: &[u8; 13] = b"rtc@40011000\0";
pub const DT_N_S_soc_S_rtc_40011000_CHILD_IDX: u32 = 25;
pub const DT_N_S_soc_S_rtc_40011000_ORD: u32 = 100;
pub const DT_N_S_soc_S_rtc_40011000_ORD_STR_SORTABLE: u32 = 64;
pub const DT_N_S_soc_S_rtc_40011000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_REG_IDX_0_VAL_ADDRESS: u32 = 1073811456;
pub const DT_N_S_soc_S_rtc_40011000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_rtc_40011000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_rtc_40011000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_IRQ_IDX_0_VAL_irq: u32 = 17;
pub const DT_N_S_soc_S_rtc_40011000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_COMPAT_MATCHES_nordic_nrf_rtc: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_rtc_40011000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-rtc\0";
pub const DT_N_S_soc_S_rtc_40011000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_rtc_40011000_P_reg_IDX_0: u32 = 1073811456;
pub const DT_N_S_soc_S_rtc_40011000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_rtc_40011000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_cc_num: u32 = 4;
pub const DT_N_S_soc_S_rtc_40011000_P_cc_num_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_ppi_wrap: u32 = 0;
pub const DT_N_S_soc_S_rtc_40011000_P_ppi_wrap_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_fixed_top: u32 = 0;
pub const DT_N_S_soc_S_rtc_40011000_P_fixed_top_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_zli: u32 = 0;
pub const DT_N_S_soc_S_rtc_40011000_P_zli_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_clock_frequency: u32 = 32768;
pub const DT_N_S_soc_S_rtc_40011000_P_clock_frequency_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_interrupts_IDX_0: u32 = 17;
pub const DT_N_S_soc_S_rtc_40011000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_prescaler: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_prescaler_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_rtc_40011000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_rtc_40011000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_rtc_40011000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-rtc\0";
pub const DT_N_S_soc_S_rtc_40011000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_rtc_40011000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40011000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_rtc_40011000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_PATH: &[u8; 18] = b"/soc/rtc@40024000\0";
pub const DT_N_S_soc_S_rtc_40024000_FULL_NAME: &[u8; 13] = b"rtc@40024000\0";
pub const DT_N_S_soc_S_rtc_40024000_CHILD_IDX: u32 = 45;
pub const DT_N_S_soc_S_rtc_40024000_ORD: u32 = 101;
pub const DT_N_S_soc_S_rtc_40024000_ORD_STR_SORTABLE: u32 = 65;
pub const DT_N_S_soc_S_rtc_40024000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_REG_IDX_0_VAL_ADDRESS: u32 = 1073889280;
pub const DT_N_S_soc_S_rtc_40024000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_rtc_40024000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_rtc_40024000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_IRQ_IDX_0_VAL_irq: u32 = 36;
pub const DT_N_S_soc_S_rtc_40024000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_COMPAT_MATCHES_nordic_nrf_rtc: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_rtc_40024000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-rtc\0";
pub const DT_N_S_soc_S_rtc_40024000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_rtc_40024000_P_reg_IDX_0: u32 = 1073889280;
pub const DT_N_S_soc_S_rtc_40024000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_rtc_40024000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_cc_num: u32 = 4;
pub const DT_N_S_soc_S_rtc_40024000_P_cc_num_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_ppi_wrap: u32 = 0;
pub const DT_N_S_soc_S_rtc_40024000_P_ppi_wrap_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_fixed_top: u32 = 0;
pub const DT_N_S_soc_S_rtc_40024000_P_fixed_top_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_zli: u32 = 0;
pub const DT_N_S_soc_S_rtc_40024000_P_zli_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_clock_frequency: u32 = 32768;
pub const DT_N_S_soc_S_rtc_40024000_P_clock_frequency_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_interrupts_IDX_0: u32 = 36;
pub const DT_N_S_soc_S_rtc_40024000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_prescaler: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_prescaler_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_rtc_40024000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_rtc_40024000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_rtc_40024000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-rtc\0";
pub const DT_N_S_soc_S_rtc_40024000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_rtc_40024000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_rtc_40024000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_rtc_40024000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_PATH: &[u8; 18] = b"/soc/spi@40003000\0";
pub const DT_N_S_soc_S_spi_40003000_FULL_NAME: &[u8; 13] = b"spi@40003000\0";
pub const DT_N_S_soc_S_spi_40003000_CHILD_IDX: u32 = 10;
pub const DT_N_S_soc_S_spi_40003000_ORD: u32 = 102;
pub const DT_N_S_soc_S_spi_40003000_ORD_STR_SORTABLE: u32 = 66;
pub const DT_N_S_soc_S_spi_40003000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_REG_IDX_0_VAL_ADDRESS: u32 = 1073754112;
pub const DT_N_S_soc_S_spi_40003000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_spi_40003000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_spi_40003000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_IRQ_IDX_0_VAL_irq: u32 = 3;
pub const DT_N_S_soc_S_spi_40003000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_COMPAT_MATCHES_nordic_nrf_spi: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_spi_40003000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-spi\0";
pub const DT_N_S_soc_S_spi_40003000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_PINCTRL_NUM: u32 = 2;
pub const DT_N_S_soc_S_spi_40003000_PINCTRL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_PINCTRL_NAME_default_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_PINCTRL_NAME_default_IDX: u32 = 0;
pub const DT_N_S_soc_S_spi_40003000_PINCTRL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_PINCTRL_NAME_sleep_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_PINCTRL_NAME_sleep_IDX: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_reg_IDX_0: u32 = 1073754112;
pub const DT_N_S_soc_S_spi_40003000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_spi_40003000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_interrupts_IDX_0: u32 = 3;
pub const DT_N_S_soc_S_spi_40003000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_pinctrl_0_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_pinctrl_0_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_pinctrl_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_max_frequency: u32 = 8000000;
pub const DT_N_S_soc_S_spi_40003000_P_max_frequency_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_overrun_character: u32 = 255;
pub const DT_N_S_soc_S_spi_40003000_P_overrun_character_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_easydma_maxcnt_bits: u32 = 16;
pub const DT_N_S_soc_S_spi_40003000_P_easydma_maxcnt_bits_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_spi_40003000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_spi_40003000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_spi_40003000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-spi\0";
pub const DT_N_S_soc_S_spi_40003000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_spi_40003000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_spi_40003000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_pinctrl_1_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_pinctrl_1_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_pinctrl_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_pinctrl_names_IDX_0: &[u8; 8] = b"default\0";
pub const DT_N_S_soc_S_spi_40003000_P_pinctrl_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_pinctrl_names_IDX_1: &[u8; 6] = b"sleep\0";
pub const DT_N_S_soc_S_spi_40003000_P_pinctrl_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40003000_P_pinctrl_names_LEN: u32 = 2;
pub const DT_N_S_soc_S_spi_40003000_P_pinctrl_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_PATH: &[u8; 18] = b"/soc/spi@40004000\0";
pub const DT_N_S_soc_S_spi_40004000_FULL_NAME: &[u8; 13] = b"spi@40004000\0";
pub const DT_N_S_soc_S_spi_40004000_CHILD_IDX: u32 = 12;
pub const DT_N_S_soc_S_spi_40004000_ORD: u32 = 103;
pub const DT_N_S_soc_S_spi_40004000_ORD_STR_SORTABLE: u32 = 67;
pub const DT_N_S_soc_S_spi_40004000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_REG_IDX_0_VAL_ADDRESS: u32 = 1073758208;
pub const DT_N_S_soc_S_spi_40004000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_spi_40004000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_spi_40004000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_IRQ_IDX_0_VAL_irq: u32 = 4;
pub const DT_N_S_soc_S_spi_40004000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_COMPAT_MATCHES_nordic_nrf_spi: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_spi_40004000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-spi\0";
pub const DT_N_S_soc_S_spi_40004000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_PINCTRL_NUM: u32 = 2;
pub const DT_N_S_soc_S_spi_40004000_PINCTRL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_PINCTRL_NAME_default_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_PINCTRL_NAME_default_IDX: u32 = 0;
pub const DT_N_S_soc_S_spi_40004000_PINCTRL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_PINCTRL_NAME_sleep_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_PINCTRL_NAME_sleep_IDX: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_reg_IDX_0: u32 = 1073758208;
pub const DT_N_S_soc_S_spi_40004000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_spi_40004000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_interrupts_IDX_0: u32 = 4;
pub const DT_N_S_soc_S_spi_40004000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_pinctrl_0_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_pinctrl_0_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_pinctrl_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_max_frequency: u32 = 8000000;
pub const DT_N_S_soc_S_spi_40004000_P_max_frequency_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_overrun_character: u32 = 255;
pub const DT_N_S_soc_S_spi_40004000_P_overrun_character_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_easydma_maxcnt_bits: u32 = 16;
pub const DT_N_S_soc_S_spi_40004000_P_easydma_maxcnt_bits_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_spi_40004000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_spi_40004000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-spi\0";
pub const DT_N_S_soc_S_spi_40004000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_spi_40004000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_spi_40004000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_pinctrl_1_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_pinctrl_1_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_pinctrl_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_pinctrl_names_IDX_0: &[u8; 8] = b"default\0";
pub const DT_N_S_soc_S_spi_40004000_P_pinctrl_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_pinctrl_names_IDX_1: &[u8; 6] = b"sleep\0";
pub const DT_N_S_soc_S_spi_40004000_P_pinctrl_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40004000_P_pinctrl_names_LEN: u32 = 2;
pub const DT_N_S_soc_S_spi_40004000_P_pinctrl_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_PATH: &[u8; 18] = b"/soc/spi@40023000\0";
pub const DT_N_S_soc_S_spi_40023000_FULL_NAME: &[u8; 13] = b"spi@40023000\0";
pub const DT_N_S_soc_S_spi_40023000_CHILD_IDX: u32 = 44;
pub const DT_N_S_soc_S_spi_40023000_ORD: u32 = 104;
pub const DT_N_S_soc_S_spi_40023000_ORD_STR_SORTABLE: u32 = 68;
pub const DT_N_S_soc_S_spi_40023000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_REG_IDX_0_VAL_ADDRESS: u32 = 1073885184;
pub const DT_N_S_soc_S_spi_40023000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_spi_40023000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_spi_40023000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_IRQ_IDX_0_VAL_irq: u32 = 35;
pub const DT_N_S_soc_S_spi_40023000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_COMPAT_MATCHES_nordic_nrf_spi: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_spi_40023000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-spi\0";
pub const DT_N_S_soc_S_spi_40023000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_PINCTRL_NUM: u32 = 2;
pub const DT_N_S_soc_S_spi_40023000_PINCTRL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_PINCTRL_NAME_default_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_PINCTRL_NAME_default_IDX: u32 = 0;
pub const DT_N_S_soc_S_spi_40023000_PINCTRL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_PINCTRL_NAME_sleep_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_PINCTRL_NAME_sleep_IDX: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_reg_IDX_0: u32 = 1073885184;
pub const DT_N_S_soc_S_spi_40023000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_spi_40023000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_interrupts_IDX_0: u32 = 35;
pub const DT_N_S_soc_S_spi_40023000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_pinctrl_0_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_pinctrl_0_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_pinctrl_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_max_frequency: u32 = 8000000;
pub const DT_N_S_soc_S_spi_40023000_P_max_frequency_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_overrun_character: u32 = 255;
pub const DT_N_S_soc_S_spi_40023000_P_overrun_character_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_easydma_maxcnt_bits: u32 = 16;
pub const DT_N_S_soc_S_spi_40023000_P_easydma_maxcnt_bits_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_spi_40023000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_spi_40023000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_spi_40023000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-spi\0";
pub const DT_N_S_soc_S_spi_40023000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_spi_40023000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_spi_40023000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_pinctrl_1_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_pinctrl_1_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_pinctrl_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_pinctrl_names_IDX_0: &[u8; 8] = b"default\0";
pub const DT_N_S_soc_S_spi_40023000_P_pinctrl_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_pinctrl_names_IDX_1: &[u8; 6] = b"sleep\0";
pub const DT_N_S_soc_S_spi_40023000_P_pinctrl_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_40023000_P_pinctrl_names_LEN: u32 = 2;
pub const DT_N_S_soc_S_spi_40023000_P_pinctrl_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_PATH: &[u8; 19] = b"/soc/gpio@50000300\0";
pub const DT_N_S_soc_S_gpio_50000300_FULL_NAME: &[u8; 14] = b"gpio@50000300\0";
pub const DT_N_S_soc_S_gpio_50000300_CHILD_IDX: u32 = 53;
pub const DT_N_S_soc_S_gpio_50000300_ORD: u32 = 105;
pub const DT_N_S_soc_S_gpio_50000300_ORD_STR_SORTABLE: u32 = 69;
pub const DT_N_S_soc_S_gpio_50000300_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_REG_NUM: u32 = 2;
pub const DT_N_S_soc_S_gpio_50000300_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_REG_IDX_0_VAL_ADDRESS: u32 = 1342178048;
pub const DT_N_S_soc_S_gpio_50000300_REG_IDX_0_VAL_SIZE: u32 = 512;
pub const DT_N_S_soc_S_gpio_50000300_REG_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_REG_IDX_1_VAL_ADDRESS: u32 = 1342179328;
pub const DT_N_S_soc_S_gpio_50000300_REG_IDX_1_VAL_SIZE: u32 = 768;
pub const DT_N_S_soc_S_gpio_50000300_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_gpio_50000300_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_gpio_50000300_COMPAT_MATCHES_nordic_nrf_gpio: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_gpio_50000300_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_COMPAT_MODEL_IDX_0: &[u8; 9] = b"nrf-gpio\0";
pub const DT_N_S_soc_S_gpio_50000300_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_gpio_50000300_P_reg_IDX_0: u32 = 1342178048;
pub const DT_N_S_soc_S_gpio_50000300_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_reg_IDX_1: u32 = 512;
pub const DT_N_S_soc_S_gpio_50000300_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_reg_IDX_2: u32 = 1342179328;
pub const DT_N_S_soc_S_gpio_50000300_P_reg_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_reg_IDX_3: u32 = 768;
pub const DT_N_S_soc_S_gpio_50000300_P_reg_IDX_3_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpiote_instance_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpiote_instance_LEN: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpiote_instance_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_port: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_port_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_controller: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_controller_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_ngpios: u32 = 16;
pub const DT_N_S_soc_S_gpio_50000300_P_ngpios_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_0: &[u8; 1] = b"\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_1: &[u8; 3] = b"D0\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_2: &[u8; 3] = b"D1\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_3: &[u8; 3] = b"D2\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_3_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_4: &[u8; 3] = b"D3\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_4_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_5: &[u8; 3] = b"D4\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_5_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_6: &[u8; 3] = b"D5\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_6_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_7: &[u8; 3] = b"D6\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_7_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_8: &[u8; 3] = b"D7\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_8_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_9: &[u8; 1] = b"\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_9_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_10: &[u8; 3] = b"D8\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_10_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_11: &[u8; 3] = b"D9\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_11_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_12: &[u8; 4] = b"D10\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_12_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_13: &[u8; 4] = b"D11\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_13_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_14: &[u8; 4] = b"D12\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_14_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_15: &[u8; 4] = b"D13\0";
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_IDX_15_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_LEN: u32 = 16;
pub const DT_N_S_soc_S_gpio_50000300_P_gpio_line_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_gpio_50000300_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_gpio_50000300_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_compatible_IDX_0: &[u8; 16] = b"nordic,nrf-gpio\0";
pub const DT_N_S_soc_S_gpio_50000300_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_gpio_50000300_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_gpio_50000300_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_gpio_50000300_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_PATH: &[u8; 18] = b"/soc/spi@4002f000\0";
pub const DT_N_S_soc_S_spi_4002f000_FULL_NAME: &[u8; 13] = b"spi@4002f000\0";
pub const DT_N_S_soc_S_spi_4002f000_CHILD_IDX: u32 = 51;
pub const DT_N_S_soc_S_spi_4002f000_ORD: u32 = 106;
pub const DT_N_S_soc_S_spi_4002f000_ORD_STR_SORTABLE: u32 = 70;
pub const DT_N_S_soc_S_spi_4002f000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_REG_IDX_0_VAL_ADDRESS: u32 = 1073934336;
pub const DT_N_S_soc_S_spi_4002f000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_spi_4002f000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_spi_4002f000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_IRQ_IDX_0_VAL_irq: u32 = 47;
pub const DT_N_S_soc_S_spi_4002f000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_COMPAT_MATCHES_nordic_nrf_spim: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_spi_4002f000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_COMPAT_MODEL_IDX_0: &[u8; 9] = b"nrf-spim\0";
pub const DT_N_S_soc_S_spi_4002f000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_PINCTRL_NUM: u32 = 2;
pub const DT_N_S_soc_S_spi_4002f000_PINCTRL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_PINCTRL_NAME_default_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_PINCTRL_NAME_default_IDX: u32 = 0;
pub const DT_N_S_soc_S_spi_4002f000_PINCTRL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_PINCTRL_NAME_sleep_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_PINCTRL_NAME_sleep_IDX: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_anomaly_58_workaround: u32 = 0;
pub const DT_N_S_soc_S_spi_4002f000_P_anomaly_58_workaround_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_rx_delay_supported: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_rx_delay_supported_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_rx_delay: u32 = 2;
pub const DT_N_S_soc_S_spi_4002f000_P_rx_delay_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_spi_4002f000_P_rx_delay_ENUM_VAL_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_rx_delay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_reg_IDX_0: u32 = 1073934336;
pub const DT_N_S_soc_S_spi_4002f000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_spi_4002f000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_interrupts_IDX_0: u32 = 47;
pub const DT_N_S_soc_S_spi_4002f000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_pinctrl_0_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_pinctrl_0_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_pinctrl_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_max_frequency: u32 = 32000000;
pub const DT_N_S_soc_S_spi_4002f000_P_max_frequency_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_overrun_character: u32 = 255;
pub const DT_N_S_soc_S_spi_4002f000_P_overrun_character_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_easydma_maxcnt_bits: u32 = 16;
pub const DT_N_S_soc_S_spi_4002f000_P_easydma_maxcnt_bits_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_cs_gpios_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_cs_gpios_IDX_0_VAL_pin: u32 = 12;
pub const DT_N_S_soc_S_spi_4002f000_P_cs_gpios_IDX_0_VAL_pin_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_cs_gpios_IDX_0_VAL_flags: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_cs_gpios_IDX_0_VAL_flags_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_cs_gpios_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_cs_gpios_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_spi_4002f000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_spi_4002f000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_compatible_IDX_0: &[u8; 16] = b"nordic,nrf-spim\0";
pub const DT_N_S_soc_S_spi_4002f000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_spi_4002f000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_spi_4002f000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_pinctrl_1_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_pinctrl_1_LEN: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_pinctrl_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_pinctrl_names_IDX_0: &[u8; 8] = b"default\0";
pub const DT_N_S_soc_S_spi_4002f000_P_pinctrl_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_pinctrl_names_IDX_1: &[u8; 6] = b"sleep\0";
pub const DT_N_S_soc_S_spi_4002f000_P_pinctrl_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_spi_4002f000_P_pinctrl_names_LEN: u32 = 2;
pub const DT_N_S_soc_S_spi_4002f000_P_pinctrl_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_PATH: &[u8; 19] = b"/soc/temp@4000c000\0";
pub const DT_N_S_soc_S_temp_4000c000_FULL_NAME: &[u8; 14] = b"temp@4000c000\0";
pub const DT_N_S_soc_S_temp_4000c000_CHILD_IDX: u32 = 20;
pub const DT_N_S_soc_S_temp_4000c000_ORD: u32 = 107;
pub const DT_N_S_soc_S_temp_4000c000_ORD_STR_SORTABLE: u32 = 71;
pub const DT_N_S_soc_S_temp_4000c000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_REG_IDX_0_VAL_ADDRESS: u32 = 1073790976;
pub const DT_N_S_soc_S_temp_4000c000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_temp_4000c000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_temp_4000c000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_IRQ_IDX_0_VAL_irq: u32 = 12;
pub const DT_N_S_soc_S_temp_4000c000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_COMPAT_MATCHES_nordic_nrf_temp: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_temp_4000c000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_COMPAT_MODEL_IDX_0: &[u8; 9] = b"nrf-temp\0";
pub const DT_N_S_soc_S_temp_4000c000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_temp_4000c000_P_reg_IDX_0: u32 = 1073790976;
pub const DT_N_S_soc_S_temp_4000c000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_temp_4000c000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_interrupts_IDX_0: u32 = 12;
pub const DT_N_S_soc_S_temp_4000c000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_temp_4000c000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_temp_4000c000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_compatible_IDX_0: &[u8; 16] = b"nordic,nrf-temp\0";
pub const DT_N_S_soc_S_temp_4000c000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_temp_4000c000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_temp_4000c000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_temp_4000c000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_PATH: &[u8; 20] = b"/soc/timer@40008000\0";
pub const DT_N_S_soc_S_timer_40008000_FULL_NAME: &[u8; 15] = b"timer@40008000\0";
pub const DT_N_S_soc_S_timer_40008000_CHILD_IDX: u32 = 16;
pub const DT_N_S_soc_S_timer_40008000_ORD: u32 = 108;
pub const DT_N_S_soc_S_timer_40008000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_REG_IDX_0_VAL_ADDRESS: u32 = 1073774592;
pub const DT_N_S_soc_S_timer_40008000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_timer_40008000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_40008000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_IRQ_IDX_0_VAL_irq: u32 = 8;
pub const DT_N_S_soc_S_timer_40008000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_COMPAT_MATCHES_nordic_nrf_timer: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_timer_40008000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_COMPAT_MODEL_IDX_0: &[u8; 10] = b"nrf-timer\0";
pub const DT_N_S_soc_S_timer_40008000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_40008000_P_reg_IDX_0: u32 = 1073774592;
pub const DT_N_S_soc_S_timer_40008000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_timer_40008000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_cc_num: u32 = 4;
pub const DT_N_S_soc_S_timer_40008000_P_cc_num_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_max_bit_width: u32 = 32;
pub const DT_N_S_soc_S_timer_40008000_P_max_bit_width_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_interrupts_IDX_0: u32 = 8;
pub const DT_N_S_soc_S_timer_40008000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_prescaler: u32 = 0;
pub const DT_N_S_soc_S_timer_40008000_P_prescaler_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_zli: u32 = 0;
pub const DT_N_S_soc_S_timer_40008000_P_zli_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_timer_40008000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_timer_40008000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_timer_40008000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_compatible_IDX_0: &[u8; 17] = b"nordic,nrf-timer\0";
pub const DT_N_S_soc_S_timer_40008000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_timer_40008000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_40008000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_timer_40008000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_PATH: &[u8; 20] = b"/soc/timer@4000a000\0";
pub const DT_N_S_soc_S_timer_4000a000_FULL_NAME: &[u8; 15] = b"timer@4000a000\0";
pub const DT_N_S_soc_S_timer_4000a000_CHILD_IDX: u32 = 18;
pub const DT_N_S_soc_S_timer_4000a000_ORD: u32 = 109;
pub const DT_N_S_soc_S_timer_4000a000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_REG_IDX_0_VAL_ADDRESS: u32 = 1073782784;
pub const DT_N_S_soc_S_timer_4000a000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_timer_4000a000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_4000a000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_IRQ_IDX_0_VAL_irq: u32 = 10;
pub const DT_N_S_soc_S_timer_4000a000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_COMPAT_MATCHES_nordic_nrf_timer: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_timer_4000a000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_COMPAT_MODEL_IDX_0: &[u8; 10] = b"nrf-timer\0";
pub const DT_N_S_soc_S_timer_4000a000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_4000a000_P_reg_IDX_0: u32 = 1073782784;
pub const DT_N_S_soc_S_timer_4000a000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_timer_4000a000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_cc_num: u32 = 4;
pub const DT_N_S_soc_S_timer_4000a000_P_cc_num_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_max_bit_width: u32 = 32;
pub const DT_N_S_soc_S_timer_4000a000_P_max_bit_width_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_interrupts_IDX_0: u32 = 10;
pub const DT_N_S_soc_S_timer_4000a000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_prescaler: u32 = 0;
pub const DT_N_S_soc_S_timer_4000a000_P_prescaler_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_zli: u32 = 0;
pub const DT_N_S_soc_S_timer_4000a000_P_zli_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_timer_4000a000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_timer_4000a000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_timer_4000a000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_compatible_IDX_0: &[u8; 17] = b"nordic,nrf-timer\0";
pub const DT_N_S_soc_S_timer_4000a000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_timer_4000a000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4000a000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_timer_4000a000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_PATH: &[u8; 20] = b"/soc/timer@4001a000\0";
pub const DT_N_S_soc_S_timer_4001a000_FULL_NAME: &[u8; 15] = b"timer@4001a000\0";
pub const DT_N_S_soc_S_timer_4001a000_CHILD_IDX: u32 = 34;
pub const DT_N_S_soc_S_timer_4001a000_ORD: u32 = 110;
pub const DT_N_S_soc_S_timer_4001a000_ORD_STR_SORTABLE: u32 = 72;
pub const DT_N_S_soc_S_timer_4001a000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_REG_IDX_0_VAL_ADDRESS: u32 = 1073848320;
pub const DT_N_S_soc_S_timer_4001a000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_timer_4001a000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_4001a000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_IRQ_IDX_0_VAL_irq: u32 = 26;
pub const DT_N_S_soc_S_timer_4001a000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_COMPAT_MATCHES_nordic_nrf_timer: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_timer_4001a000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_COMPAT_MODEL_IDX_0: &[u8; 10] = b"nrf-timer\0";
pub const DT_N_S_soc_S_timer_4001a000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_4001a000_P_reg_IDX_0: u32 = 1073848320;
pub const DT_N_S_soc_S_timer_4001a000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_timer_4001a000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_cc_num: u32 = 6;
pub const DT_N_S_soc_S_timer_4001a000_P_cc_num_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_max_bit_width: u32 = 32;
pub const DT_N_S_soc_S_timer_4001a000_P_max_bit_width_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_interrupts_IDX_0: u32 = 26;
pub const DT_N_S_soc_S_timer_4001a000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_prescaler: u32 = 0;
pub const DT_N_S_soc_S_timer_4001a000_P_prescaler_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_zli: u32 = 0;
pub const DT_N_S_soc_S_timer_4001a000_P_zli_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_timer_4001a000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_timer_4001a000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_timer_4001a000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_compatible_IDX_0: &[u8; 17] = b"nordic,nrf-timer\0";
pub const DT_N_S_soc_S_timer_4001a000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_timer_4001a000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001a000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_timer_4001a000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_PATH: &[u8; 20] = b"/soc/timer@4001b000\0";
pub const DT_N_S_soc_S_timer_4001b000_FULL_NAME: &[u8; 15] = b"timer@4001b000\0";
pub const DT_N_S_soc_S_timer_4001b000_CHILD_IDX: u32 = 35;
pub const DT_N_S_soc_S_timer_4001b000_ORD: u32 = 111;
pub const DT_N_S_soc_S_timer_4001b000_ORD_STR_SORTABLE: u32 = 73;
pub const DT_N_S_soc_S_timer_4001b000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_REG_IDX_0_VAL_ADDRESS: u32 = 1073852416;
pub const DT_N_S_soc_S_timer_4001b000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_timer_4001b000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_4001b000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_IRQ_IDX_0_VAL_irq: u32 = 27;
pub const DT_N_S_soc_S_timer_4001b000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_COMPAT_MATCHES_nordic_nrf_timer: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_timer_4001b000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_COMPAT_MODEL_IDX_0: &[u8; 10] = b"nrf-timer\0";
pub const DT_N_S_soc_S_timer_4001b000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_4001b000_P_reg_IDX_0: u32 = 1073852416;
pub const DT_N_S_soc_S_timer_4001b000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_timer_4001b000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_cc_num: u32 = 6;
pub const DT_N_S_soc_S_timer_4001b000_P_cc_num_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_max_bit_width: u32 = 32;
pub const DT_N_S_soc_S_timer_4001b000_P_max_bit_width_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_interrupts_IDX_0: u32 = 27;
pub const DT_N_S_soc_S_timer_4001b000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_prescaler: u32 = 0;
pub const DT_N_S_soc_S_timer_4001b000_P_prescaler_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_zli: u32 = 0;
pub const DT_N_S_soc_S_timer_4001b000_P_zli_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_timer_4001b000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_timer_4001b000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_timer_4001b000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_compatible_IDX_0: &[u8; 17] = b"nordic,nrf-timer\0";
pub const DT_N_S_soc_S_timer_4001b000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_timer_4001b000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_4001b000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_timer_4001b000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_PATH: &[u8; 20] = b"/soc/timer@e000e010\0";
pub const DT_N_S_soc_S_timer_e000e010_FULL_NAME: &[u8; 15] = b"timer@e000e010\0";
pub const DT_N_S_soc_S_timer_e000e010_CHILD_IDX: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_ORD: u32 = 112;
pub const DT_N_S_soc_S_timer_e000e010_ORD_STR_SORTABLE: u32 = 74;
pub const DT_N_S_soc_S_timer_e000e010_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_ADDRESS: u32 = 3758153744;
pub const DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_SIZE: u32 = 16;
pub const DT_N_S_soc_S_timer_e000e010_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_e000e010_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_e000e010_COMPAT_MATCHES_arm_armv7m_systick: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_COMPAT_VENDOR_IDX_0: &[u8; 9] = b"ARM Ltd.\0";
pub const DT_N_S_soc_S_timer_e000e010_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_COMPAT_MODEL_IDX_0: &[u8; 15] = b"armv7m-systick\0";
pub const DT_N_S_soc_S_timer_e000e010_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0: u32 = 3758153744;
pub const DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1: u32 = 16;
pub const DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_timer_e000e010_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_timer_e000e010_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_timer_e000e010_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0: &[u8; 19] = b"arm,armv7m-systick\0";
pub const DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_timer_e000e010_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_timer_e000e010_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_timer_e000e010_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_PATH: &[u8; 19] = b"/soc/uart@40002000\0";
pub const DT_N_S_soc_S_uart_40002000_FULL_NAME: &[u8; 14] = b"uart@40002000\0";
pub const DT_N_S_soc_S_uart_40002000_CHILD_IDX: u32 = 8;
pub const DT_N_S_soc_S_uart_40002000_ORD: u32 = 113;
pub const DT_N_S_soc_S_uart_40002000_ORD_STR_SORTABLE: u32 = 75;
pub const DT_N_S_soc_S_uart_40002000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_REG_IDX_0_VAL_ADDRESS: u32 = 1073750016;
pub const DT_N_S_soc_S_uart_40002000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_uart_40002000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_uart_40002000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_IRQ_IDX_0_VAL_irq: u32 = 2;
pub const DT_N_S_soc_S_uart_40002000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_COMPAT_MATCHES_nordic_nrf_uarte: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_uart_40002000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_COMPAT_MODEL_IDX_0: &[u8; 10] = b"nrf-uarte\0";
pub const DT_N_S_soc_S_uart_40002000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_PINCTRL_NUM: u32 = 2;
pub const DT_N_S_soc_S_uart_40002000_PINCTRL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_PINCTRL_NAME_default_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_PINCTRL_NAME_default_IDX: u32 = 0;
pub const DT_N_S_soc_S_uart_40002000_PINCTRL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_PINCTRL_NAME_sleep_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_PINCTRL_NAME_sleep_IDX: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_reg_IDX_0: u32 = 1073750016;
pub const DT_N_S_soc_S_uart_40002000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_uart_40002000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_interrupts_IDX_0: u32 = 2;
pub const DT_N_S_soc_S_uart_40002000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_pinctrl_0_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_pinctrl_0_LEN: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_pinctrl_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_disable_rx: u32 = 0;
pub const DT_N_S_soc_S_uart_40002000_P_disable_rx_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_current_speed: u32 = 115200;
pub const DT_N_S_soc_S_uart_40002000_P_current_speed_ENUM_IDX: u32 = 12;
pub const DT_N_S_soc_S_uart_40002000_P_current_speed_ENUM_VAL_115200_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_current_speed_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_hw_flow_control: u32 = 0;
pub const DT_N_S_soc_S_uart_40002000_P_hw_flow_control_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_uart_40002000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_uart_40002000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_compatible_IDX_0: &[u8; 17] = b"nordic,nrf-uarte\0";
pub const DT_N_S_soc_S_uart_40002000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_uart_40002000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_uart_40002000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_pinctrl_1_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_pinctrl_1_LEN: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_pinctrl_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_pinctrl_names_IDX_0: &[u8; 8] = b"default\0";
pub const DT_N_S_soc_S_uart_40002000_P_pinctrl_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_pinctrl_names_IDX_1: &[u8; 6] = b"sleep\0";
pub const DT_N_S_soc_S_uart_40002000_P_pinctrl_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40002000_P_pinctrl_names_LEN: u32 = 2;
pub const DT_N_S_soc_S_uart_40002000_P_pinctrl_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_PATH: &[u8; 19] = b"/soc/uart@40028000\0";
pub const DT_N_S_soc_S_uart_40028000_FULL_NAME: &[u8; 14] = b"uart@40028000\0";
pub const DT_N_S_soc_S_uart_40028000_CHILD_IDX: u32 = 48;
pub const DT_N_S_soc_S_uart_40028000_ORD: u32 = 114;
pub const DT_N_S_soc_S_uart_40028000_ORD_STR_SORTABLE: u32 = 76;
pub const DT_N_S_soc_S_uart_40028000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_REG_IDX_0_VAL_ADDRESS: u32 = 1073905664;
pub const DT_N_S_soc_S_uart_40028000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_uart_40028000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_uart_40028000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_IRQ_IDX_0_VAL_irq: u32 = 40;
pub const DT_N_S_soc_S_uart_40028000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_COMPAT_MATCHES_nordic_nrf_uarte: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_uart_40028000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_COMPAT_MODEL_IDX_0: &[u8; 10] = b"nrf-uarte\0";
pub const DT_N_S_soc_S_uart_40028000_STATUS_disabled: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_PINCTRL_NUM: u32 = 2;
pub const DT_N_S_soc_S_uart_40028000_PINCTRL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_PINCTRL_NAME_default_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_PINCTRL_NAME_default_IDX: u32 = 0;
pub const DT_N_S_soc_S_uart_40028000_PINCTRL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_PINCTRL_NAME_sleep_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_PINCTRL_NAME_sleep_IDX: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_reg_IDX_0: u32 = 1073905664;
pub const DT_N_S_soc_S_uart_40028000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_uart_40028000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_interrupts_IDX_0: u32 = 40;
pub const DT_N_S_soc_S_uart_40028000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_pinctrl_0_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_pinctrl_0_LEN: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_pinctrl_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_disable_rx: u32 = 0;
pub const DT_N_S_soc_S_uart_40028000_P_disable_rx_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_current_speed: u32 = 115200;
pub const DT_N_S_soc_S_uart_40028000_P_current_speed_ENUM_IDX: u32 = 12;
pub const DT_N_S_soc_S_uart_40028000_P_current_speed_ENUM_VAL_115200_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_current_speed_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_hw_flow_control: u32 = 0;
pub const DT_N_S_soc_S_uart_40028000_P_hw_flow_control_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_status: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_uart_40028000_P_status_IDX_0: &[u8; 9] = b"disabled\0";
pub const DT_N_S_soc_S_uart_40028000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_status_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_uart_40028000_P_status_ENUM_VAL_disabled_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_compatible_IDX_0: &[u8; 17] = b"nordic,nrf-uarte\0";
pub const DT_N_S_soc_S_uart_40028000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_uart_40028000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_uart_40028000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_pinctrl_1_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_pinctrl_1_LEN: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_pinctrl_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_pinctrl_names_IDX_0: &[u8; 8] = b"default\0";
pub const DT_N_S_soc_S_uart_40028000_P_pinctrl_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_pinctrl_names_IDX_1: &[u8; 6] = b"sleep\0";
pub const DT_N_S_soc_S_uart_40028000_P_pinctrl_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uart_40028000_P_pinctrl_names_LEN: u32 = 2;
pub const DT_N_S_soc_S_uart_40028000_P_pinctrl_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_PATH: &[u8; 19] = b"/soc/uicr@10001000\0";
pub const DT_N_S_soc_S_uicr_10001000_FULL_NAME: &[u8; 14] = b"uicr@10001000\0";
pub const DT_N_S_soc_S_uicr_10001000_CHILD_IDX: u32 = 3;
pub const DT_N_S_soc_S_uicr_10001000_ORD: u32 = 115;
pub const DT_N_S_soc_S_uicr_10001000_ORD_STR_SORTABLE: u32 = 77;
pub const DT_N_S_soc_S_uicr_10001000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_REG_IDX_0_VAL_ADDRESS: u32 = 268439552;
pub const DT_N_S_soc_S_uicr_10001000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_uicr_10001000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_uicr_10001000_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_uicr_10001000_COMPAT_MATCHES_nordic_nrf_uicr: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_uicr_10001000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_COMPAT_MODEL_IDX_0: &[u8; 9] = b"nrf-uicr\0";
pub const DT_N_S_soc_S_uicr_10001000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_uicr_10001000_P_reg_IDX_0: u32 = 268439552;
pub const DT_N_S_soc_S_uicr_10001000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_uicr_10001000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_nfct_pins_as_gpios: u32 = 0;
pub const DT_N_S_soc_S_uicr_10001000_P_nfct_pins_as_gpios_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_gpio_as_nreset: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_gpio_as_nreset_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_uicr_10001000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_uicr_10001000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_compatible_IDX_0: &[u8; 16] = b"nordic,nrf-uicr\0";
pub const DT_N_S_soc_S_uicr_10001000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_uicr_10001000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_uicr_10001000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_uicr_10001000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_PATH: &[u8; 19] = b"/soc/usbd@40027000\0";
pub const DT_N_S_soc_S_usbd_40027000_FULL_NAME: &[u8; 14] = b"usbd@40027000\0";
pub const DT_N_S_soc_S_usbd_40027000_CHILD_IDX: u32 = 47;
pub const DT_N_S_soc_S_usbd_40027000_ORD: u32 = 116;
pub const DT_N_S_soc_S_usbd_40027000_ORD_STR_SORTABLE: u32 = 78;
pub const DT_N_S_soc_S_usbd_40027000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_REG_IDX_0_VAL_ADDRESS: u32 = 1073901568;
pub const DT_N_S_soc_S_usbd_40027000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_usbd_40027000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_usbd_40027000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_IRQ_IDX_0_VAL_irq: u32 = 39;
pub const DT_N_S_soc_S_usbd_40027000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_COMPAT_MATCHES_nordic_nrf_usbd: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_usbd_40027000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_COMPAT_MODEL_IDX_0: &[u8; 9] = b"nrf-usbd\0";
pub const DT_N_S_soc_S_usbd_40027000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_usbd_40027000_P_reg_IDX_0: u32 = 1073901568;
pub const DT_N_S_soc_S_usbd_40027000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_usbd_40027000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_interrupts_IDX_0: u32 = 39;
pub const DT_N_S_soc_S_usbd_40027000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_num_isoin_endpoints: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_num_isoin_endpoints_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_num_isoout_endpoints: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_num_isoout_endpoints_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_num_bidir_endpoints: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_num_bidir_endpoints_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_num_in_endpoints: u32 = 7;
pub const DT_N_S_soc_S_usbd_40027000_P_num_in_endpoints_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_num_out_endpoints: u32 = 7;
pub const DT_N_S_soc_S_usbd_40027000_P_num_out_endpoints_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_usbd_40027000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_usbd_40027000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_compatible_IDX_0: &[u8; 16] = b"nordic,nrf-usbd\0";
pub const DT_N_S_soc_S_usbd_40027000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_usbd_40027000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_usbd_40027000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_usbd_40027000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_PATH: &[u8; 23] = b"/soc/watchdog@40010000\0";
pub const DT_N_S_soc_S_watchdog_40010000_FULL_NAME: &[u8; 18] = b"watchdog@40010000\0";
pub const DT_N_S_soc_S_watchdog_40010000_CHILD_IDX: u32 = 24;
pub const DT_N_S_soc_S_watchdog_40010000_ORD: u32 = 117;
pub const DT_N_S_soc_S_watchdog_40010000_ORD_STR_SORTABLE: u32 = 79;
pub const DT_N_S_soc_S_watchdog_40010000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_REG_IDX_0_VAL_ADDRESS: u32 = 1073807360;
pub const DT_N_S_soc_S_watchdog_40010000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_watchdog_40010000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_watchdog_40010000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_IRQ_IDX_0_VAL_irq: u32 = 16;
pub const DT_N_S_soc_S_watchdog_40010000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_COMPAT_MATCHES_nordic_nrf_wdt: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_watchdog_40010000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_COMPAT_MODEL_IDX_0: &[u8; 8] = b"nrf-wdt\0";
pub const DT_N_S_soc_S_watchdog_40010000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_watchdog_40010000_P_reg_IDX_0: u32 = 1073807360;
pub const DT_N_S_soc_S_watchdog_40010000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_watchdog_40010000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_interrupts_IDX_0: u32 = 16;
pub const DT_N_S_soc_S_watchdog_40010000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_watchdog_40010000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_watchdog_40010000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_compatible_IDX_0: &[u8; 15] = b"nordic,nrf-wdt\0";
pub const DT_N_S_soc_S_watchdog_40010000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_watchdog_40010000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_watchdog_40010000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_watchdog_40010000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_PATH: &[u8; 31] =
    b"/soc/flash-controller@4001e000\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_FULL_NAME: &[u8; 26] =
    b"flash-controller@4001e000\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_CHILD_IDX: u32 = 39;
pub const DT_N_S_soc_S_flash_controller_4001e000_ORD: u32 = 118;
pub const DT_N_S_soc_S_flash_controller_4001e000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_REG_IDX_0_VAL_ADDRESS: u32 = 1073864704;
pub const DT_N_S_soc_S_flash_controller_4001e000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_flash_controller_4001e000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_COMPAT_MATCHES_nordic_nrf52_flash_controller: u32 =
    1;
pub const DT_N_S_soc_S_flash_controller_4001e000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_COMPAT_VENDOR_IDX_0: &[u8; 21] =
    b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_COMPAT_MODEL_IDX_0: &[u8; 23] =
    b"nrf52-flash-controller\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_partial_erase: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_partial_erase_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_reg_IDX_0: u32 = 1073864704;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_compatible_IDX_0: &[u8; 30] =
    b"nordic,nrf52-flash-controller\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_PATH: &[u8; 39] =
    b"/soc/flash-controller@4001e000/flash@0\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_FULL_NAME: &[u8; 8] = b"flash@0\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_CHILD_IDX: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_ORD: u32 = 119;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_REG_IDX_0_VAL_ADDRESS: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_REG_IDX_0_VAL_SIZE: u32 = 1048576;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_COMPAT_MATCHES_soc_nv_flash: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_erase_block_size: u32 = 4096;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_erase_block_size_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_write_block_size: u32 = 4;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_write_block_size_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_compatible_IDX_0: &[u8; 13] =
    b"soc-nv-flash\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_reg_IDX_0: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_reg_IDX_1: u32 = 1048576;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_P_zephyr_pm_device_runtime_auto_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_PATH: &[u8; 50] =
    b"/soc/flash-controller@4001e000/flash@0/partitions\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_FULL_NAME: &[u8; 11] =
    b"partitions\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_CHILD_IDX: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_ORD: u32 = 120;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_ORD_STR_SORTABLE: u32 = 80;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_REG_NUM: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_COMPAT_MATCHES_fixed_partitions : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_PATH:
    &[u8; 62] = b"/soc/flash-controller@4001e000/flash@0/partitions/partition@0\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_FULL_NAME:
    &[u8; 12] = b"partition@0\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_CHILD_IDX:
    u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_ORD: u32 =
    121;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_ORD_STR_SORTABLE : u32 = 81 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_EXISTS: u32 =
    1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_REG_NUM: u32 =
    1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_ADDRESS : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_SIZE : u32 = 49152 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_RANGES_NUM:
    u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_IRQ_NUM: u32 =
    0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_STATUS_okay : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_PINCTRL_NUM : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_PARTITION_ID : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_P_label:
    &[u8; 8] = b"mcuboot\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_P_label_IDX_0 : & [u8 ; 8] = b"mcuboot\0" ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_P_label_IDX_0_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_P_label_LEN : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_P_label_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_P_read_only : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_P_read_only_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0 : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1 : u32 = 49152 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_0_P_reg_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_PATH:
    &[u8; 65] = b"/soc/flash-controller@4001e000/flash@0/partitions/partition@c000\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_FULL_NAME : & [u8 ; 15] = b"partition@c000\0" ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_CHILD_IDX : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_ORD: u32 =
    122;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_ORD_STR_SORTABLE : u32 = 82 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_EXISTS:
    u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_REG_NUM:
    u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_REG_IDX_0_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_REG_IDX_0_VAL_ADDRESS : u32 = 49152 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_REG_IDX_0_VAL_SIZE : u32 = 483328 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_RANGES_NUM : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_IRQ_NUM:
    u32 = 0;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_STATUS_okay : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_PINCTRL_NUM : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_PARTITION_ID : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_P_label:
    &[u8; 8] = b"image-0\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_P_label_IDX_0 : & [u8 ; 8] = b"image-0\0" ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_P_label_IDX_0_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_P_label_LEN : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_P_label_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_P_read_only : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_P_read_only_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_0 : u32 = 49152 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_0_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_1 : u32 = 483328 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_P_reg_IDX_1_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_c000_P_reg_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_PATH:
    &[u8; 66] = b"/soc/flash-controller@4001e000/flash@0/partitions/partition@82000\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_FULL_NAME : & [u8 ; 16] = b"partition@82000\0" ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_CHILD_IDX : u32 = 2 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_ORD: u32 =
    123;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_ORD_STR_SORTABLE : u32 = 83 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_EXISTS:
    u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_REG_NUM : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_REG_IDX_0_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_REG_IDX_0_VAL_ADDRESS : u32 = 532480 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_REG_IDX_0_VAL_SIZE : u32 = 483328 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_RANGES_NUM : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_IRQ_NUM : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_STATUS_okay : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_PINCTRL_NUM : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_PARTITION_ID : u32 = 2 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_P_label : & [u8 ; 8] = b"image-1\0" ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_P_label_IDX_0 : & [u8 ; 8] = b"image-1\0" ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_P_label_IDX_0_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_P_label_LEN : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_P_label_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_P_read_only : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_P_read_only_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_P_reg_IDX_0 : u32 = 532480 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_P_reg_IDX_0_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_P_reg_IDX_1 : u32 = 483328 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_P_reg_IDX_1_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_82000_P_reg_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_PATH:
    &[u8; 66] = b"/soc/flash-controller@4001e000/flash@0/partitions/partition@f8000\0";
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_FULL_NAME : & [u8 ; 16] = b"partition@f8000\0" ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_CHILD_IDX : u32 = 3 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_ORD: u32 =
    124;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_ORD_STR_SORTABLE : u32 = 84 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_EXISTS:
    u32 = 1;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_REG_NUM : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_REG_IDX_0_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_REG_IDX_0_VAL_ADDRESS : u32 = 1015808 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_REG_IDX_0_VAL_SIZE : u32 = 32768 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_RANGES_NUM : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_IRQ_NUM : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_STATUS_okay : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_PINCTRL_NUM : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_PARTITION_ID : u32 = 3 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_P_label : & [u8 ; 8] = b"storage\0" ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_P_label_IDX_0 : & [u8 ; 8] = b"storage\0" ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_P_label_IDX_0_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_P_label_LEN : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_P_label_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_P_read_only : u32 = 0 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_P_read_only_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_P_reg_IDX_0 : u32 = 1015808 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_P_reg_IDX_0_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_P_reg_IDX_1 : u32 = 32768 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_P_reg_IDX_1_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_flash_controller_4001e000_S_flash_0_S_partitions_S_partition_f8000_P_reg_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_power_40000000_PATH: &[u8; 20] = b"/soc/power@40000000\0";
pub const DT_N_S_soc_S_power_40000000_FULL_NAME: &[u8; 15] = b"power@40000000\0";
pub const DT_N_S_soc_S_power_40000000_CHILD_IDX: u32 = 6;
pub const DT_N_S_soc_S_power_40000000_ORD: u32 = 125;
pub const DT_N_S_soc_S_power_40000000_ORD_STR_SORTABLE: u32 = 85;
pub const DT_N_S_soc_S_power_40000000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_REG_IDX_0_VAL_ADDRESS: u32 = 1073741824;
pub const DT_N_S_soc_S_power_40000000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_power_40000000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_IRQ_IDX_0_VAL_irq: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_COMPAT_MATCHES_nordic_nrf_power: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_power_40000000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_COMPAT_MODEL_IDX_0: &[u8; 10] = b"nrf-power\0";
pub const DT_N_S_soc_S_power_40000000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_P_reg_IDX_0: u32 = 1073741824;
pub const DT_N_S_soc_S_power_40000000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_power_40000000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_interrupts_IDX_0: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_power_40000000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_power_40000000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_compatible_IDX_0: &[u8; 17] = b"nordic,nrf-power\0";
pub const DT_N_S_soc_S_power_40000000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_PATH: &[u8; 39] =
    b"/soc/power@40000000/gpregret1@4000051c\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_FULL_NAME: &[u8; 19] =
    b"gpregret1@4000051c\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_CHILD_IDX: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_ORD: u32 = 126;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_ORD_STR_SORTABLE: u32 = 86;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_REG_IDX_0_VAL_ADDRESS: u32 = 1073743132;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_REG_IDX_0_VAL_SIZE: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_COMPAT_MATCHES_nordic_nrf_gpregret: u32 =
    1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_COMPAT_VENDOR_IDX_0: &[u8; 21] =
    b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_COMPAT_MODEL_IDX_0: &[u8; 13] =
    b"nrf-gpregret\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_reg_IDX_0: u32 = 1073743132;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_reg_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_compatible_IDX_0: &[u8; 20] =
    b"nordic,nrf-gpregret\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_S_gpregret1_4000051c_P_zephyr_pm_device_runtime_auto_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_PATH: &[u8; 39] =
    b"/soc/power@40000000/gpregret2@40000520\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_FULL_NAME: &[u8; 19] =
    b"gpregret2@40000520\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_CHILD_IDX: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_ORD: u32 = 127;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_ORD_STR_SORTABLE: u32 = 87;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_REG_IDX_0_VAL_ADDRESS: u32 = 1073743136;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_REG_IDX_0_VAL_SIZE: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_COMPAT_MATCHES_nordic_nrf_gpregret: u32 =
    1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_COMPAT_VENDOR_IDX_0: &[u8; 21] =
    b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_COMPAT_MODEL_IDX_0: &[u8; 13] =
    b"nrf-gpregret\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_reg_IDX_0: u32 = 1073743136;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_reg_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_compatible_IDX_0: &[u8; 20] =
    b"nordic,nrf-gpregret\0";
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_power_40000000_S_gpregret2_40000520_P_zephyr_pm_device_runtime_auto_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_qspi_40029000_PATH: &[u8; 19] = b"/soc/qspi@40029000\0";
pub const DT_N_S_soc_S_qspi_40029000_FULL_NAME: &[u8; 14] = b"qspi@40029000\0";
pub const DT_N_S_soc_S_qspi_40029000_CHILD_IDX: u32 = 49;
pub const DT_N_S_soc_S_qspi_40029000_ORD: u32 = 128;
pub const DT_N_S_soc_S_qspi_40029000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_REG_NUM: u32 = 2;
pub const DT_N_S_soc_S_qspi_40029000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_REG_IDX_0_VAL_ADDRESS: u32 = 1073909760;
pub const DT_N_S_soc_S_qspi_40029000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_qspi_40029000_REG_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_REG_IDX_1_VAL_ADDRESS: u32 = 301989888;
pub const DT_N_S_soc_S_qspi_40029000_REG_IDX_1_VAL_SIZE: u32 = 134217728;
pub const DT_N_S_soc_S_qspi_40029000_REG_NAME_qspi_VAL_ADDRESS: u32 = 1073909760;
pub const DT_N_S_soc_S_qspi_40029000_REG_NAME_qspi_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_qspi_40029000_REG_NAME_qspi_mm_VAL_ADDRESS: u32 = 301989888;
pub const DT_N_S_soc_S_qspi_40029000_REG_NAME_qspi_mm_VAL_SIZE: u32 = 134217728;
pub const DT_N_S_soc_S_qspi_40029000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_IRQ_IDX_0_VAL_irq: u32 = 41;
pub const DT_N_S_soc_S_qspi_40029000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_COMPAT_MATCHES_nordic_nrf_qspi: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_qspi_40029000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_COMPAT_MODEL_IDX_0: &[u8; 9] = b"nrf-qspi\0";
pub const DT_N_S_soc_S_qspi_40029000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_PINCTRL_NUM: u32 = 2;
pub const DT_N_S_soc_S_qspi_40029000_PINCTRL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_PINCTRL_NAME_default_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_PINCTRL_NAME_default_IDX: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_PINCTRL_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_PINCTRL_NAME_sleep_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_PINCTRL_NAME_sleep_IDX: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_interrupts_IDX_0: u32 = 41;
pub const DT_N_S_soc_S_qspi_40029000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_pinctrl_0_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_pinctrl_0_LEN: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_pinctrl_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_IDX_0: u32 = 1073909760;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_IDX_2: u32 = 301989888;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_IDX_3: u32 = 134217728;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_IDX_3_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_qspi_40029000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_qspi_40029000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_compatible_IDX_0: &[u8; 16] = b"nordic,nrf-qspi\0";
pub const DT_N_S_soc_S_qspi_40029000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_names_IDX_0: &[u8; 5] = b"qspi\0";
pub const DT_N_S_soc_S_qspi_40029000_P_reg_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_names_IDX_1: &[u8; 8] = b"qspi_mm\0";
pub const DT_N_S_soc_S_qspi_40029000_P_reg_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_names_LEN: u32 = 2;
pub const DT_N_S_soc_S_qspi_40029000_P_reg_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_pinctrl_1_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_pinctrl_1_LEN: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_pinctrl_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_pinctrl_names_IDX_0: &[u8; 8] = b"default\0";
pub const DT_N_S_soc_S_qspi_40029000_P_pinctrl_names_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_pinctrl_names_IDX_1: &[u8; 6] = b"sleep\0";
pub const DT_N_S_soc_S_qspi_40029000_P_pinctrl_names_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_P_pinctrl_names_LEN: u32 = 2;
pub const DT_N_S_soc_S_qspi_40029000_P_pinctrl_names_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_PATH: &[u8; 32] =
    b"/soc/qspi@40029000/mx25r6435f@0\0";
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_FULL_NAME: &[u8; 13] = b"mx25r6435f@0\0";
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_CHILD_IDX: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_ORD: u32 = 129;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_BUS_qspi: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_REG_IDX_0_VAL_ADDRESS: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_COMPAT_MATCHES_nordic_qspi_nor: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_COMPAT_VENDOR_IDX_0: &[u8; 21] =
    b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_COMPAT_MODEL_IDX_0: &[u8; 9] = b"qspi-nor\0";
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_reg_IDX_0: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_jedec_id_IDX_0: u32 = 194;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_jedec_id_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_jedec_id_IDX_1: u32 = 40;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_jedec_id_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_jedec_id_IDX_2: u32 = 23;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_jedec_id_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_jedec_id_LEN: u32 = 3;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_jedec_id_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_size: u32 = 67108864;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_size_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_quad_enable_requirements: &[u8; 5] =
    b"S1B6\0";
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_quad_enable_requirements_IDX_0: &[u8; 5] =
    b"S1B6\0";
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_quad_enable_requirements_IDX_0_EXISTS: u32 =
    1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_quad_enable_requirements_ENUM_IDX: u32 = 2;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_quad_enable_requirements_ENUM_VAL_S1B6_EXISTS : u32 = 1 ;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_quad_enable_requirements_LEN: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_quad_enable_requirements_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_readoc: &[u8; 8] = b"read4io\0";
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_readoc_IDX_0: &[u8; 8] = b"read4io\0";
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_readoc_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_readoc_ENUM_IDX: u32 = 4;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_readoc_ENUM_VAL_read4io_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_readoc_LEN: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_readoc_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_writeoc: &[u8; 6] = b"pp4io\0";
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_writeoc_IDX_0: &[u8; 6] = b"pp4io\0";
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_writeoc_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_writeoc_ENUM_IDX: u32 = 3;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_writeoc_ENUM_VAL_pp4io_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_writeoc_LEN: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_writeoc_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_address_size_32: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_address_size_32_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_ppsize_512: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_ppsize_512_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sck_delay: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sck_delay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_cpha: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_cpha_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_cpol: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_cpol_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sck_frequency: u32 = 8000000;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sck_frequency_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_compatible_IDX_0: &[u8; 16] =
    b"nordic,qspi-nor\0";
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_requires_ulbpr: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_requires_ulbpr_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_has_dpd: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_has_dpd_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_t_enter_dpd: u32 = 10000;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_t_enter_dpd_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_t_exit_dpd: u32 = 35000;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_t_exit_dpd_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_0: u32 = 229;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_1: u32 = 32;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_2: u32 = 241;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_2_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_3: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_3_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_4: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_4_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_5: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_5_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_6: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_6_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_7: u32 = 3;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_7_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_8: u32 = 68;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_8_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_9: u32 = 235;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_9_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_10: u32 = 8;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_10_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_11: u32 = 107;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_11_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_12: u32 = 8;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_12_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_13: u32 = 59;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_13_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_14: u32 = 4;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_14_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_15: u32 = 187;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_15_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_16: u32 = 238;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_16_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_17: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_17_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_18: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_18_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_19: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_19_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_20: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_20_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_21: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_21_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_22: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_22_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_23: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_23_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_24: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_24_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_25: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_25_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_26: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_26_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_27: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_27_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_28: u32 = 12;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_28_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_29: u32 = 32;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_29_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_30: u32 = 15;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_30_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_31: u32 = 82;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_31_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_32: u32 = 16;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_32_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_33: u32 = 216;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_33_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_34: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_34_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_35: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_35_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_36: u32 = 35;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_36_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_37: u32 = 114;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_37_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_38: u32 = 245;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_38_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_39: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_39_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_40: u32 = 130;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_40_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_41: u32 = 237;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_41_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_42: u32 = 4;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_42_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_43: u32 = 204;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_43_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_44: u32 = 68;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_44_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_45: u32 = 131;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_45_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_46: u32 = 104;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_46_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_47: u32 = 68;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_47_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_48: u32 = 48;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_48_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_49: u32 = 176;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_49_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_50: u32 = 48;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_50_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_51: u32 = 176;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_51_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_52: u32 = 247;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_52_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_53: u32 = 196;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_53_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_54: u32 = 213;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_54_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_55: u32 = 92;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_55_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_56: u32 = 0;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_56_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_57: u32 = 190;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_57_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_58: u32 = 41;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_58_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_59: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_59_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_60: u32 = 240;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_60_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_61: u32 = 208;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_61_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_62: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_62_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_63: u32 = 255;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_IDX_63_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_LEN: u32 = 64;
pub const DT_N_S_soc_S_qspi_40029000_S_mx25r6435f_0_P_sfdp_bfp_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_PATH: &[u8; 20] = b"/soc/radio@40001000\0";
pub const DT_N_S_soc_S_radio_40001000_FULL_NAME: &[u8; 15] = b"radio@40001000\0";
pub const DT_N_S_soc_S_radio_40001000_CHILD_IDX: u32 = 7;
pub const DT_N_S_soc_S_radio_40001000_ORD: u32 = 130;
pub const DT_N_S_soc_S_radio_40001000_ORD_STR_SORTABLE: u32 = 88;
pub const DT_N_S_soc_S_radio_40001000_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_REG_NUM: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_REG_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_REG_IDX_0_VAL_ADDRESS: u32 = 1073745920;
pub const DT_N_S_soc_S_radio_40001000_REG_IDX_0_VAL_SIZE: u32 = 4096;
pub const DT_N_S_soc_S_radio_40001000_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_radio_40001000_IRQ_NUM: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_IRQ_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_IRQ_IDX_0_VAL_irq: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_IRQ_IDX_0_VAL_irq_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_IRQ_IDX_0_VAL_priority: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_IRQ_IDX_0_VAL_priority_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_COMPAT_MATCHES_nordic_nrf_radio: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_COMPAT_VENDOR_IDX_0: &[u8; 21] = b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_radio_40001000_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_COMPAT_MODEL_IDX_0: &[u8; 10] = b"nrf-radio\0";
pub const DT_N_S_soc_S_radio_40001000_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_radio_40001000_P_reg_IDX_0: u32 = 1073745920;
pub const DT_N_S_soc_S_radio_40001000_P_reg_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_reg_IDX_1: u32 = 4096;
pub const DT_N_S_soc_S_radio_40001000_P_reg_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_reg_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_interrupts_IDX_0: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_interrupts_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_interrupts_IDX_1: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_interrupts_IDX_1_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_interrupts_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_dfe_supported: u32 = 0;
pub const DT_N_S_soc_S_radio_40001000_P_dfe_supported_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_ieee802154_supported: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_ieee802154_supported_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_ble_2mbps_supported: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_ble_2mbps_supported_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_ble_coded_phy_supported: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_ble_coded_phy_supported_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_tx_high_power_supported: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_tx_high_power_supported_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_radio_40001000_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_radio_40001000_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_compatible_IDX_0: &[u8; 17] = b"nordic,nrf-radio\0";
pub const DT_N_S_soc_S_radio_40001000_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_radio_40001000_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_radio_40001000_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_PATH: &[u8; 31] =
    b"/soc/radio@40001000/ieee802154\0";
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_FULL_NAME: &[u8; 11] = b"ieee802154\0";
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_CHILD_IDX: u32 = 0;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_ORD: u32 = 131;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_ORD_STR_SORTABLE: u32 = 89;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_REG_NUM: u32 = 0;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_RANGES_NUM: u32 = 0;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_IRQ_NUM: u32 = 0;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_COMPAT_MATCHES_nordic_nrf_ieee802154: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_COMPAT_VENDOR_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_COMPAT_VENDOR_IDX_0: &[u8; 21] =
    b"Nordic Semiconductor\0";
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_COMPAT_MODEL_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_COMPAT_MODEL_IDX_0: &[u8; 15] =
    b"nrf-ieee802154\0";
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_STATUS_okay: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_PINCTRL_NUM: u32 = 0;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_status: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_status_IDX_0: &[u8; 5] = b"okay\0";
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_status_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_status_ENUM_IDX: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_status_ENUM_VAL_okay_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_status_LEN: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_status_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_compatible_IDX_0: &[u8; 22] =
    b"nordic,nrf-ieee802154\0";
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_compatible_IDX_0_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_compatible_LEN: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_compatible_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_wakeup_source: u32 = 0;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_wakeup_source_EXISTS: u32 = 1;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_zephyr_pm_device_runtime_auto: u32 = 0;
pub const DT_N_S_soc_S_radio_40001000_S_ieee802154_P_zephyr_pm_device_runtime_auto_EXISTS: u32 = 1;
pub const DT_CHOSEN_zephyr_entropy_EXISTS: u32 = 1;
pub const DT_CHOSEN_zephyr_flash_controller_EXISTS: u32 = 1;
pub const DT_CHOSEN_zephyr_console_EXISTS: u32 = 1;
pub const DT_CHOSEN_zephyr_shell_uart_EXISTS: u32 = 1;
pub const DT_CHOSEN_zephyr_uart_mcumgr_EXISTS: u32 = 1;
pub const DT_CHOSEN_zephyr_bt_mon_uart_EXISTS: u32 = 1;
pub const DT_CHOSEN_zephyr_bt_c2h_uart_EXISTS: u32 = 1;
pub const DT_CHOSEN_zephyr_sram_EXISTS: u32 = 1;
pub const DT_CHOSEN_zephyr_flash_EXISTS: u32 = 1;
pub const DT_CHOSEN_zephyr_code_partition_EXISTS: u32 = 1;
pub const DT_CHOSEN_zephyr_ieee802154_EXISTS: u32 = 1;
pub const DT_COMPAT_fixed_partitions_LABEL_mcuboot_EXISTS: u32 = 1;
pub const DT_COMPAT_fixed_partitions_LABEL_image_0_EXISTS: u32 = 1;
pub const DT_COMPAT_fixed_partitions_LABEL_image_1_EXISTS: u32 = 1;
pub const DT_COMPAT_fixed_partitions_LABEL_storage_EXISTS: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf52840_dk_nrf52840: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf52840_qiaa: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf52840: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf52: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_simple_bus: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_arm_v7m_nvic: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_ficr: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_uicr: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_mmio_sram: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_clock: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_power: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_gpregret: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_radio: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_ieee802154: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_uarte: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_twi: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_spi: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_nfct: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_gpiote: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_saadc: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_temp: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_rng: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_ecb: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_ccm: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_wdt: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_egu: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_swi: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_pwm: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_acl: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf52_flash_controller: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_soc_nv_flash: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_fixed_partitions: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_ppi: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_mwu: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_usbd: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_qspi: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_qspi_nor: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_spim: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_gpio: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_cryptocell: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_arm_cryptocell_310: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_nordic_nrf_pinctrl: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_zephyr_bt_hci_entropy: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_arm_cortex_m4f: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_arm_armv7m_itm: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_gpio_leds: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_pwm_leds: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_gpio_keys: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_arduino_header_r3: u32 = 1;
pub const DT_COMPAT_HAS_OKAY_arduino_uno_adc: u32 = 1;
pub const DT_N_INST_nordic_nrf52840_dk_nrf52840_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf52840_qiaa_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf52840_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf52_NUM_OKAY: u32 = 1;
pub const DT_N_INST_simple_bus_NUM_OKAY: u32 = 1;
pub const DT_N_INST_arm_v7m_nvic_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_ficr_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_uicr_NUM_OKAY: u32 = 1;
pub const DT_N_INST_mmio_sram_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_clock_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_power_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_gpregret_NUM_OKAY: u32 = 2;
pub const DT_N_INST_nordic_nrf_radio_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_ieee802154_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_uarte_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_twi_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_spi_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_nfct_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_gpiote_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_saadc_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_temp_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_rng_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_ecb_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_ccm_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_wdt_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_egu_NUM_OKAY: u32 = 6;
pub const DT_N_INST_nordic_nrf_swi_NUM_OKAY: u32 = 6;
pub const DT_N_INST_nordic_nrf_pwm_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_acl_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf52_flash_controller_NUM_OKAY: u32 = 1;
pub const DT_N_INST_soc_nv_flash_NUM_OKAY: u32 = 1;
pub const DT_N_INST_fixed_partitions_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_ppi_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_mwu_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_usbd_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_qspi_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_qspi_nor_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_spim_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_gpio_NUM_OKAY: u32 = 2;
pub const DT_N_INST_nordic_cryptocell_NUM_OKAY: u32 = 1;
pub const DT_N_INST_arm_cryptocell_310_NUM_OKAY: u32 = 1;
pub const DT_N_INST_nordic_nrf_pinctrl_NUM_OKAY: u32 = 1;
pub const DT_N_INST_zephyr_bt_hci_entropy_NUM_OKAY: u32 = 1;
pub const DT_N_INST_arm_cortex_m4f_NUM_OKAY: u32 = 1;
pub const DT_N_INST_arm_armv7m_itm_NUM_OKAY: u32 = 1;
pub const DT_N_INST_gpio_leds_NUM_OKAY: u32 = 1;
pub const DT_N_INST_pwm_leds_NUM_OKAY: u32 = 1;
pub const DT_N_INST_gpio_keys_NUM_OKAY: u32 = 1;
pub const DT_N_INST_arduino_header_r3_NUM_OKAY: u32 = 1;
pub const DT_N_INST_arduino_uno_adc_NUM_OKAY: u32 = 1;
pub const DT_COMPAT_nordic_qspi_nor_BUS_qspi: u32 = 1;
pub const _EXCEPTION_RESERVED_PRIO: u32 = 1;
pub const _EXC_FAULT_PRIO: u32 = 0;
pub const _EXC_ZERO_LATENCY_IRQS_PRIO: u32 = 0;
pub const _EXC_PENDSV_PRIO: u32 = 255;
pub const Z_INIT_EARLY_EARLY: u32 = 1;
pub const Z_INIT_PRE_KERNEL_1_PRE_KERNEL_1: u32 = 1;
pub const Z_INIT_PRE_KERNEL_2_PRE_KERNEL_2: u32 = 1;
pub const Z_INIT_POST_KERNEL_POST_KERNEL: u32 = 1;
pub const Z_INIT_APPLICATION_APPLICATION: u32 = 1;
pub const Z_INIT_SMP_SMP: u32 = 1;
pub const Z_INIT_ORD_EARLY: u32 = 0;
pub const Z_INIT_ORD_PRE_KERNEL_1: u32 = 1;
pub const Z_INIT_ORD_PRE_KERNEL_2: u32 = 2;
pub const Z_INIT_ORD_POST_KERNEL: u32 = 3;
pub const Z_INIT_ORD_APPLICATION: u32 = 4;
pub const Z_INIT_ORD_SMP: u32 = 5;
pub const Z_MEM_VM_OFFSET: u32 = 0;
pub const K_MEM_CACHE_NONE: u32 = 2;
pub const K_MEM_CACHE_WT: u32 = 1;
pub const K_MEM_CACHE_WB: u32 = 0;
pub const DEVICE_HANDLE_NULL: u32 = 0;
pub const Z_DEVICE_MAX_NAME_LEN: u32 = 48;
pub const IRQ_TABLE_SIZE: u32 = 48;
pub const ZERO_LATENCY_LEVELS: u32 = 1;
pub const CPACR_CP10_Pos: u32 = 20;
pub const CPACR_CP10_Msk: u32 = 3145728;
pub const CPACR_CP10_NO_ACCESS: u32 = 0;
pub const CPACR_CP10_PRIV_ACCESS: u32 = 1048576;
pub const CPACR_CP10_RESERVED: u32 = 2097152;
pub const CPACR_CP10_FULL_ACCESS: u32 = 3145728;
pub const CPACR_CP11_Pos: u32 = 22;
pub const CPACR_CP11_Msk: u32 = 12582912;
pub const CPACR_CP11_NO_ACCESS: u32 = 0;
pub const CPACR_CP11_PRIV_ACCESS: u32 = 4194304;
pub const CPACR_CP11_RESERVED: u32 = 8388608;
pub const CPACR_CP11_FULL_ACCESS: u32 = 12582912;
pub const _CODE_BASE_ADDR: u32 = 0;
pub const _CODE_END_ADDR: u32 = 536870911;
pub const _SRAM_BASE_ADDR: u32 = 536870912;
pub const _SRAM_BIT_BAND_REGION: u32 = 536870912;
pub const _SRAM_BIT_BAND_REGION_END: u32 = 537919487;
pub const _SRAM_BIT_BAND_ALIAS: u32 = 570425344;
pub const _SRAM_BIT_BAND_ALIAS_END: u32 = 603979775;
pub const _SRAM_END_ADDR: u32 = 1073741823;
pub const _PERI_BASE_ADDR: u32 = 1073741824;
pub const _PERI_BIT_BAND_REGION: u32 = 1073741824;
pub const _PERI_BIT_BAND_REGION_END: u32 = 1074790399;
pub const _PERI_BIT_BAND_ALIAS: u32 = 1107296256;
pub const _PERI_BIT_BAND_ALIAS_END: u32 = 1140850687;
pub const _PERI_END_ADDR: u32 = 1610612735;
pub const _ERAM_BASE_ADDR: u32 = 1610612736;
pub const _ERAM_END_ADDR: u32 = 2684354559;
pub const _EDEV_BASE_ADDR: u32 = 2684354560;
pub const _EDEV_END_ADDR: u32 = 3758096383;
pub const _PPB_INT_BASE_ADDR: u32 = 3758096384;
pub const _PPB_INT_ITM: u32 = 3758096384;
pub const _PPB_INT_DWT: u32 = 3758100480;
pub const _PPB_INT_FPB: u32 = 3758104576;
pub const _PPB_INT_RSVD_1: u32 = 3758108672;
pub const _PPB_INT_SCS: u32 = 3758153728;
pub const _PPB_INT_RSVD_2: u32 = 3758157824;
pub const _PPB_INT_END_ADDR: u32 = 3758358527;
pub const _PPB_EXT_BASE_ADDR: u32 = 3758358528;
pub const _PPB_EXT_TPIU: u32 = 3758358528;
pub const _PPB_EXT_ETM: u32 = 3758362624;
pub const _PPB_EXT_PPB: u32 = 3758366720;
pub const _PPB_EXT_ROM_TABLE: u32 = 3759140864;
pub const _PPB_EXT_END_ADDR: u32 = 3759144959;
pub const _VENDOR_BASE_ADDR: u32 = 3759144960;
pub const _VENDOR_END_ADDR: u32 = 4294967295;
pub const ARCH_STACK_PTR_ALIGN: u32 = 8;
pub const Z_THREAD_MIN_STACK_ALIGN: u32 = 8;
pub const MPU_GUARD_ALIGN_AND_SIZE: u32 = 64;
pub const MPU_GUARD_ALIGN_AND_SIZE_FLOAT: u32 = 0;
pub const ARCH_KERNEL_STACK_RESERVED: u32 = 64;
pub const ARCH_THREAD_STACK_RESERVED: u32 = 0;
pub const NRFX_CLOCK_ENABLED: u32 = 1;
pub const NRFX_CLOCK_CONFIG_LF_SRC: u32 = 1;
pub const NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED: u32 = 1;
pub const NRFX_GPIOTE_ENABLED: u32 = 1;
pub const NRFX_GPIOTE0_ENABLED: u32 = 1;
pub const NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS: u32 = 1;
pub const NRFX_PPI_ENABLED: u32 = 1;
pub const NRFX_SPIM_EXTENDED_ENABLED: u32 = 1;
pub const NRFX_CONFIG_API_VER_MAJOR: u32 = 3;
pub const NRFX_CONFIG_API_VER_MINOR: u32 = 2;
pub const NRFX_CONFIG_API_VER_MICRO: u32 = 0;
pub const NRFX_DEFAULT_IRQ_PRIORITY: u32 = 7;
pub const NRFX_CLOCK_CONFIG_LF_CAL_ENABLED: u32 = 0;
pub const NRFX_CLOCK_CONFIG_CT_ENABLED: u32 = 0;
pub const NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_CLOCK_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_CLOCK_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_COMP_ENABLED: u32 = 0;
pub const NRFX_COMP_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_COMP_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_COMP_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_EGU_ENABLED: u32 = 0;
pub const NRFX_EGU_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_EGU0_ENABLED: u32 = 0;
pub const NRFX_EGU1_ENABLED: u32 = 0;
pub const NRFX_EGU2_ENABLED: u32 = 0;
pub const NRFX_EGU3_ENABLED: u32 = 0;
pub const NRFX_EGU4_ENABLED: u32 = 0;
pub const NRFX_EGU5_ENABLED: u32 = 0;
pub const NRFX_GPIOTE_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_GPIOTE_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_GPIOTE_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_I2S_ENABLED: u32 = 0;
pub const NRFX_I2S_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_I2S_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_I2S_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_LPCOMP_ENABLED: u32 = 0;
pub const NRFX_LPCOMP_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_LPCOMP_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_LPCOMP_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_NFCT_ENABLED: u32 = 0;
pub const NRFX_NFCT_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_NFCT_CONFIG_TIMER_INSTANCE_ID: u32 = 4;
pub const NRFX_NFCT_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_NFCT_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_NVMC_ENABLED: u32 = 0;
pub const NRFX_PDM_ENABLED: u32 = 0;
pub const NRFX_PDM_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_PDM_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_PDM_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_POWER_ENABLED: u32 = 0;
pub const NRFX_POWER_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_PPI_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_PPI_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_PRS_ENABLED: u32 = 0;
pub const NRFX_PRS_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_PRS_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_PRS_BOX_0_ENABLED: u32 = 0;
pub const NRFX_PRS_BOX_1_ENABLED: u32 = 0;
pub const NRFX_PRS_BOX_2_ENABLED: u32 = 0;
pub const NRFX_PRS_BOX_3_ENABLED: u32 = 0;
pub const NRFX_PRS_BOX_4_ENABLED: u32 = 0;
pub const NRFX_PWM_ENABLED: u32 = 0;
pub const NRFX_PWM_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_PWM_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_PWM_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_PWM0_ENABLED: u32 = 0;
pub const NRFX_PWM1_ENABLED: u32 = 0;
pub const NRFX_PWM2_ENABLED: u32 = 0;
pub const NRFX_PWM3_ENABLED: u32 = 0;
pub const NRFX_QDEC_ENABLED: u32 = 0;
pub const NRFX_QDEC_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_QDEC_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_QDEC_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_QSPI_ENABLED: u32 = 0;
pub const NRFX_QSPI_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_RNG_ENABLED: u32 = 0;
pub const NRFX_RNG_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_RNG_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_RNG_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_RTC_ENABLED: u32 = 0;
pub const NRFX_RTC_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_RTC_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_RTC_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_RTC0_ENABLED: u32 = 0;
pub const NRFX_RTC1_ENABLED: u32 = 0;
pub const NRFX_RTC2_ENABLED: u32 = 0;
pub const NRFX_SAADC_ENABLED: u32 = 0;
pub const NRFX_SAADC_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_SAADC_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_SAADC_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_SPI_ENABLED: u32 = 0;
pub const NRFX_SPI_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_SPI_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_SPI_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_SPI0_ENABLED: u32 = 0;
pub const NRFX_SPI1_ENABLED: u32 = 0;
pub const NRFX_SPI2_ENABLED: u32 = 0;
pub const NRFX_SPIM_ENABLED: u32 = 0;
pub const NRFX_SPIM_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_SPIM_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_SPIM_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_SPIM3_NRF52840_ANOMALY_198_WORKAROUND_ENABLED: u32 = 0;
pub const NRFX_SPIM0_ENABLED: u32 = 0;
pub const NRFX_SPIM1_ENABLED: u32 = 0;
pub const NRFX_SPIM2_ENABLED: u32 = 0;
pub const NRFX_SPIM3_ENABLED: u32 = 0;
pub const NRFX_SPIS_ENABLED: u32 = 0;
pub const NRFX_SPIS_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_SPIS_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_SPIS_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_SPIS0_ENABLED: u32 = 0;
pub const NRFX_SPIS1_ENABLED: u32 = 0;
pub const NRFX_SPIS2_ENABLED: u32 = 0;
pub const NRFX_SYSTICK_ENABLED: u32 = 0;
pub const NRFX_TEMP_ENABLED: u32 = 0;
pub const NRFX_TEMP_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_TEMP_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_TEMP_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_TIMER_ENABLED: u32 = 0;
pub const NRFX_TIMER_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_TIMER_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_TIMER_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_TIMER0_ENABLED: u32 = 0;
pub const NRFX_TIMER1_ENABLED: u32 = 0;
pub const NRFX_TIMER2_ENABLED: u32 = 0;
pub const NRFX_TIMER3_ENABLED: u32 = 0;
pub const NRFX_TIMER4_ENABLED: u32 = 0;
pub const NRFX_TWI_ENABLED: u32 = 0;
pub const NRFX_TWI_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_TWI_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_TWI_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_TWI0_ENABLED: u32 = 0;
pub const NRFX_TWI1_ENABLED: u32 = 0;
pub const NRFX_TWIM_ENABLED: u32 = 0;
pub const NRFX_TWIM_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_TWIM_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_TWIM_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_TWIM0_ENABLED: u32 = 0;
pub const NRFX_TWIM1_ENABLED: u32 = 0;
pub const NRFX_TWIS_ENABLED: u32 = 0;
pub const NRFX_TWIS_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_TWIS_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_TWIS_ASSUME_INIT_AFTER_RESET_ONLY: u32 = 0;
pub const NRFX_TWIS_NO_SYNC_MODE: u32 = 0;
pub const NRFX_TWIS_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_TWIS0_ENABLED: u32 = 0;
pub const NRFX_TWIS1_ENABLED: u32 = 0;
pub const NRFX_UART_ENABLED: u32 = 0;
pub const NRFX_UART_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_UART_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_UART_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_UART0_ENABLED: u32 = 0;
pub const NRFX_UARTE_ENABLED: u32 = 0;
pub const NRFX_UARTE_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_UARTE_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_UARTE_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_UARTE0_ENABLED: u32 = 0;
pub const NRFX_UARTE1_ENABLED: u32 = 0;
pub const NRFX_USBD_ENABLED: u32 = 0;
pub const NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST: u32 = 1;
pub const NRFX_USBD_CONFIG_ISO_IN_ZLP: u32 = 0;
pub const NRFX_USBD_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_USBD_CONFIG_LOG_LEVEL: u32 = 3;
pub const NRFX_WDT_ENABLED: u32 = 0;
pub const NRFX_WDT_DEFAULT_CONFIG_IRQ_PRIORITY: u32 = 7;
pub const NRFX_WDT_CONFIG_NO_IRQ: u32 = 0;
pub const NRFX_WDT_CONFIG_LOG_ENABLED: u32 = 0;
pub const NRFX_WDT_CONFIG_LOG_LEVEL: u32 = 3;
pub const MDK_MAJOR_VERSION: u32 = 8;
pub const MDK_MINOR_VERSION: u32 = 60;
pub const MDK_MICRO_VERSION: u32 = 3;
pub const __CM4_REV: u32 = 1;
pub const __INTERRUPTS_MAX: u32 = 112;
pub const __DSP_PRESENT: u32 = 1;
pub const __VTOR_PRESENT: u32 = 1;
pub const __NVIC_PRIO_BITS: u32 = 3;
pub const __Vendor_SysTickConfig: u32 = 0;
pub const __MPU_PRESENT: u32 = 1;
pub const __FPU_PRESENT: u32 = 1;
pub const __CM_CMSIS_VERSION_MAIN: u32 = 5;
pub const __CM_CMSIS_VERSION_SUB: u32 = 6;
pub const __CM_CMSIS_VERSION: u32 = 327686;
pub const __CM4_CMSIS_VERSION_MAIN: u32 = 5;
pub const __CM4_CMSIS_VERSION_SUB: u32 = 6;
pub const __CM4_CMSIS_VERSION: u32 = 327686;
pub const __CORTEX_M: u32 = 4;
pub const __FPU_USED: u32 = 1;
pub const APSR_N_Pos: u32 = 31;
pub const APSR_N_Msk: u32 = 2147483648;
pub const APSR_Z_Pos: u32 = 30;
pub const APSR_Z_Msk: u32 = 1073741824;
pub const APSR_C_Pos: u32 = 29;
pub const APSR_C_Msk: u32 = 536870912;
pub const APSR_V_Pos: u32 = 28;
pub const APSR_V_Msk: u32 = 268435456;
pub const APSR_Q_Pos: u32 = 27;
pub const APSR_Q_Msk: u32 = 134217728;
pub const APSR_GE_Pos: u32 = 16;
pub const APSR_GE_Msk: u32 = 983040;
pub const IPSR_ISR_Pos: u32 = 0;
pub const IPSR_ISR_Msk: u32 = 511;
pub const xPSR_N_Pos: u32 = 31;
pub const xPSR_N_Msk: u32 = 2147483648;
pub const xPSR_Z_Pos: u32 = 30;
pub const xPSR_Z_Msk: u32 = 1073741824;
pub const xPSR_C_Pos: u32 = 29;
pub const xPSR_C_Msk: u32 = 536870912;
pub const xPSR_V_Pos: u32 = 28;
pub const xPSR_V_Msk: u32 = 268435456;
pub const xPSR_Q_Pos: u32 = 27;
pub const xPSR_Q_Msk: u32 = 134217728;
pub const xPSR_ICI_IT_2_Pos: u32 = 25;
pub const xPSR_ICI_IT_2_Msk: u32 = 100663296;
pub const xPSR_T_Pos: u32 = 24;
pub const xPSR_T_Msk: u32 = 16777216;
pub const xPSR_GE_Pos: u32 = 16;
pub const xPSR_GE_Msk: u32 = 983040;
pub const xPSR_ICI_IT_1_Pos: u32 = 10;
pub const xPSR_ICI_IT_1_Msk: u32 = 64512;
pub const xPSR_ISR_Pos: u32 = 0;
pub const xPSR_ISR_Msk: u32 = 511;
pub const CONTROL_FPCA_Pos: u32 = 2;
pub const CONTROL_FPCA_Msk: u32 = 4;
pub const CONTROL_SPSEL_Pos: u32 = 1;
pub const CONTROL_SPSEL_Msk: u32 = 2;
pub const CONTROL_nPRIV_Pos: u32 = 0;
pub const CONTROL_nPRIV_Msk: u32 = 1;
pub const NVIC_STIR_INTID_Pos: u32 = 0;
pub const NVIC_STIR_INTID_Msk: u32 = 511;
pub const SCB_CPUID_IMPLEMENTER_Pos: u32 = 24;
pub const SCB_CPUID_IMPLEMENTER_Msk: u32 = 4278190080;
pub const SCB_CPUID_VARIANT_Pos: u32 = 20;
pub const SCB_CPUID_VARIANT_Msk: u32 = 15728640;
pub const SCB_CPUID_ARCHITECTURE_Pos: u32 = 16;
pub const SCB_CPUID_ARCHITECTURE_Msk: u32 = 983040;
pub const SCB_CPUID_PARTNO_Pos: u32 = 4;
pub const SCB_CPUID_PARTNO_Msk: u32 = 65520;
pub const SCB_CPUID_REVISION_Pos: u32 = 0;
pub const SCB_CPUID_REVISION_Msk: u32 = 15;
pub const SCB_ICSR_NMIPENDSET_Pos: u32 = 31;
pub const SCB_ICSR_NMIPENDSET_Msk: u32 = 2147483648;
pub const SCB_ICSR_PENDSVSET_Pos: u32 = 28;
pub const SCB_ICSR_PENDSVSET_Msk: u32 = 268435456;
pub const SCB_ICSR_PENDSVCLR_Pos: u32 = 27;
pub const SCB_ICSR_PENDSVCLR_Msk: u32 = 134217728;
pub const SCB_ICSR_PENDSTSET_Pos: u32 = 26;
pub const SCB_ICSR_PENDSTSET_Msk: u32 = 67108864;
pub const SCB_ICSR_PENDSTCLR_Pos: u32 = 25;
pub const SCB_ICSR_PENDSTCLR_Msk: u32 = 33554432;
pub const SCB_ICSR_ISRPREEMPT_Pos: u32 = 23;
pub const SCB_ICSR_ISRPREEMPT_Msk: u32 = 8388608;
pub const SCB_ICSR_ISRPENDING_Pos: u32 = 22;
pub const SCB_ICSR_ISRPENDING_Msk: u32 = 4194304;
pub const SCB_ICSR_VECTPENDING_Pos: u32 = 12;
pub const SCB_ICSR_VECTPENDING_Msk: u32 = 2093056;
pub const SCB_ICSR_RETTOBASE_Pos: u32 = 11;
pub const SCB_ICSR_RETTOBASE_Msk: u32 = 2048;
pub const SCB_ICSR_VECTACTIVE_Pos: u32 = 0;
pub const SCB_ICSR_VECTACTIVE_Msk: u32 = 511;
pub const SCB_VTOR_TBLOFF_Pos: u32 = 7;
pub const SCB_VTOR_TBLOFF_Msk: u32 = 4294967168;
pub const SCB_AIRCR_VECTKEY_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEY_Msk: u32 = 4294901760;
pub const SCB_AIRCR_VECTKEYSTAT_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEYSTAT_Msk: u32 = 4294901760;
pub const SCB_AIRCR_ENDIANESS_Pos: u32 = 15;
pub const SCB_AIRCR_ENDIANESS_Msk: u32 = 32768;
pub const SCB_AIRCR_PRIGROUP_Pos: u32 = 8;
pub const SCB_AIRCR_PRIGROUP_Msk: u32 = 1792;
pub const SCB_AIRCR_SYSRESETREQ_Pos: u32 = 2;
pub const SCB_AIRCR_SYSRESETREQ_Msk: u32 = 4;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos: u32 = 1;
pub const SCB_AIRCR_VECTCLRACTIVE_Msk: u32 = 2;
pub const SCB_AIRCR_VECTRESET_Pos: u32 = 0;
pub const SCB_AIRCR_VECTRESET_Msk: u32 = 1;
pub const SCB_SCR_SEVONPEND_Pos: u32 = 4;
pub const SCB_SCR_SEVONPEND_Msk: u32 = 16;
pub const SCB_SCR_SLEEPDEEP_Pos: u32 = 2;
pub const SCB_SCR_SLEEPDEEP_Msk: u32 = 4;
pub const SCB_SCR_SLEEPONEXIT_Pos: u32 = 1;
pub const SCB_SCR_SLEEPONEXIT_Msk: u32 = 2;
pub const SCB_CCR_STKALIGN_Pos: u32 = 9;
pub const SCB_CCR_STKALIGN_Msk: u32 = 512;
pub const SCB_CCR_BFHFNMIGN_Pos: u32 = 8;
pub const SCB_CCR_BFHFNMIGN_Msk: u32 = 256;
pub const SCB_CCR_DIV_0_TRP_Pos: u32 = 4;
pub const SCB_CCR_DIV_0_TRP_Msk: u32 = 16;
pub const SCB_CCR_UNALIGN_TRP_Pos: u32 = 3;
pub const SCB_CCR_UNALIGN_TRP_Msk: u32 = 8;
pub const SCB_CCR_USERSETMPEND_Pos: u32 = 1;
pub const SCB_CCR_USERSETMPEND_Msk: u32 = 2;
pub const SCB_CCR_NONBASETHRDENA_Pos: u32 = 0;
pub const SCB_CCR_NONBASETHRDENA_Msk: u32 = 1;
pub const SCB_SHCSR_USGFAULTENA_Pos: u32 = 18;
pub const SCB_SHCSR_USGFAULTENA_Msk: u32 = 262144;
pub const SCB_SHCSR_BUSFAULTENA_Pos: u32 = 17;
pub const SCB_SHCSR_BUSFAULTENA_Msk: u32 = 131072;
pub const SCB_SHCSR_MEMFAULTENA_Pos: u32 = 16;
pub const SCB_SHCSR_MEMFAULTENA_Msk: u32 = 65536;
pub const SCB_SHCSR_SVCALLPENDED_Pos: u32 = 15;
pub const SCB_SHCSR_SVCALLPENDED_Msk: u32 = 32768;
pub const SCB_SHCSR_BUSFAULTPENDED_Pos: u32 = 14;
pub const SCB_SHCSR_BUSFAULTPENDED_Msk: u32 = 16384;
pub const SCB_SHCSR_MEMFAULTPENDED_Pos: u32 = 13;
pub const SCB_SHCSR_MEMFAULTPENDED_Msk: u32 = 8192;
pub const SCB_SHCSR_USGFAULTPENDED_Pos: u32 = 12;
pub const SCB_SHCSR_USGFAULTPENDED_Msk: u32 = 4096;
pub const SCB_SHCSR_SYSTICKACT_Pos: u32 = 11;
pub const SCB_SHCSR_SYSTICKACT_Msk: u32 = 2048;
pub const SCB_SHCSR_PENDSVACT_Pos: u32 = 10;
pub const SCB_SHCSR_PENDSVACT_Msk: u32 = 1024;
pub const SCB_SHCSR_MONITORACT_Pos: u32 = 8;
pub const SCB_SHCSR_MONITORACT_Msk: u32 = 256;
pub const SCB_SHCSR_SVCALLACT_Pos: u32 = 7;
pub const SCB_SHCSR_SVCALLACT_Msk: u32 = 128;
pub const SCB_SHCSR_USGFAULTACT_Pos: u32 = 3;
pub const SCB_SHCSR_USGFAULTACT_Msk: u32 = 8;
pub const SCB_SHCSR_BUSFAULTACT_Pos: u32 = 1;
pub const SCB_SHCSR_BUSFAULTACT_Msk: u32 = 2;
pub const SCB_SHCSR_MEMFAULTACT_Pos: u32 = 0;
pub const SCB_SHCSR_MEMFAULTACT_Msk: u32 = 1;
pub const SCB_CFSR_USGFAULTSR_Pos: u32 = 16;
pub const SCB_CFSR_USGFAULTSR_Msk: u32 = 4294901760;
pub const SCB_CFSR_BUSFAULTSR_Pos: u32 = 8;
pub const SCB_CFSR_BUSFAULTSR_Msk: u32 = 65280;
pub const SCB_CFSR_MEMFAULTSR_Pos: u32 = 0;
pub const SCB_CFSR_MEMFAULTSR_Msk: u32 = 255;
pub const SCB_CFSR_MMARVALID_Pos: u32 = 7;
pub const SCB_CFSR_MMARVALID_Msk: u32 = 128;
pub const SCB_CFSR_MLSPERR_Pos: u32 = 5;
pub const SCB_CFSR_MLSPERR_Msk: u32 = 32;
pub const SCB_CFSR_MSTKERR_Pos: u32 = 4;
pub const SCB_CFSR_MSTKERR_Msk: u32 = 16;
pub const SCB_CFSR_MUNSTKERR_Pos: u32 = 3;
pub const SCB_CFSR_MUNSTKERR_Msk: u32 = 8;
pub const SCB_CFSR_DACCVIOL_Pos: u32 = 1;
pub const SCB_CFSR_DACCVIOL_Msk: u32 = 2;
pub const SCB_CFSR_IACCVIOL_Pos: u32 = 0;
pub const SCB_CFSR_IACCVIOL_Msk: u32 = 1;
pub const SCB_CFSR_BFARVALID_Pos: u32 = 15;
pub const SCB_CFSR_BFARVALID_Msk: u32 = 32768;
pub const SCB_CFSR_LSPERR_Pos: u32 = 13;
pub const SCB_CFSR_LSPERR_Msk: u32 = 8192;
pub const SCB_CFSR_STKERR_Pos: u32 = 12;
pub const SCB_CFSR_STKERR_Msk: u32 = 4096;
pub const SCB_CFSR_UNSTKERR_Pos: u32 = 11;
pub const SCB_CFSR_UNSTKERR_Msk: u32 = 2048;
pub const SCB_CFSR_IMPRECISERR_Pos: u32 = 10;
pub const SCB_CFSR_IMPRECISERR_Msk: u32 = 1024;
pub const SCB_CFSR_PRECISERR_Pos: u32 = 9;
pub const SCB_CFSR_PRECISERR_Msk: u32 = 512;
pub const SCB_CFSR_IBUSERR_Pos: u32 = 8;
pub const SCB_CFSR_IBUSERR_Msk: u32 = 256;
pub const SCB_CFSR_DIVBYZERO_Pos: u32 = 25;
pub const SCB_CFSR_DIVBYZERO_Msk: u32 = 33554432;
pub const SCB_CFSR_UNALIGNED_Pos: u32 = 24;
pub const SCB_CFSR_UNALIGNED_Msk: u32 = 16777216;
pub const SCB_CFSR_NOCP_Pos: u32 = 19;
pub const SCB_CFSR_NOCP_Msk: u32 = 524288;
pub const SCB_CFSR_INVPC_Pos: u32 = 18;
pub const SCB_CFSR_INVPC_Msk: u32 = 262144;
pub const SCB_CFSR_INVSTATE_Pos: u32 = 17;
pub const SCB_CFSR_INVSTATE_Msk: u32 = 131072;
pub const SCB_CFSR_UNDEFINSTR_Pos: u32 = 16;
pub const SCB_CFSR_UNDEFINSTR_Msk: u32 = 65536;
pub const SCB_HFSR_DEBUGEVT_Pos: u32 = 31;
pub const SCB_HFSR_DEBUGEVT_Msk: u32 = 2147483648;
pub const SCB_HFSR_FORCED_Pos: u32 = 30;
pub const SCB_HFSR_FORCED_Msk: u32 = 1073741824;
pub const SCB_HFSR_VECTTBL_Pos: u32 = 1;
pub const SCB_HFSR_VECTTBL_Msk: u32 = 2;
pub const SCB_DFSR_EXTERNAL_Pos: u32 = 4;
pub const SCB_DFSR_EXTERNAL_Msk: u32 = 16;
pub const SCB_DFSR_VCATCH_Pos: u32 = 3;
pub const SCB_DFSR_VCATCH_Msk: u32 = 8;
pub const SCB_DFSR_DWTTRAP_Pos: u32 = 2;
pub const SCB_DFSR_DWTTRAP_Msk: u32 = 4;
pub const SCB_DFSR_BKPT_Pos: u32 = 1;
pub const SCB_DFSR_BKPT_Msk: u32 = 2;
pub const SCB_DFSR_HALTED_Pos: u32 = 0;
pub const SCB_DFSR_HALTED_Msk: u32 = 1;
pub const SCnSCB_ICTR_INTLINESNUM_Pos: u32 = 0;
pub const SCnSCB_ICTR_INTLINESNUM_Msk: u32 = 15;
pub const SCnSCB_ACTLR_DISOOFP_Pos: u32 = 9;
pub const SCnSCB_ACTLR_DISOOFP_Msk: u32 = 512;
pub const SCnSCB_ACTLR_DISFPCA_Pos: u32 = 8;
pub const SCnSCB_ACTLR_DISFPCA_Msk: u32 = 256;
pub const SCnSCB_ACTLR_DISFOLD_Pos: u32 = 2;
pub const SCnSCB_ACTLR_DISFOLD_Msk: u32 = 4;
pub const SCnSCB_ACTLR_DISDEFWBUF_Pos: u32 = 1;
pub const SCnSCB_ACTLR_DISDEFWBUF_Msk: u32 = 2;
pub const SCnSCB_ACTLR_DISMCYCINT_Pos: u32 = 0;
pub const SCnSCB_ACTLR_DISMCYCINT_Msk: u32 = 1;
pub const SysTick_CTRL_COUNTFLAG_Pos: u32 = 16;
pub const SysTick_CTRL_COUNTFLAG_Msk: u32 = 65536;
pub const SysTick_CTRL_CLKSOURCE_Pos: u32 = 2;
pub const SysTick_CTRL_CLKSOURCE_Msk: u32 = 4;
pub const SysTick_CTRL_TICKINT_Pos: u32 = 1;
pub const SysTick_CTRL_TICKINT_Msk: u32 = 2;
pub const SysTick_CTRL_ENABLE_Pos: u32 = 0;
pub const SysTick_CTRL_ENABLE_Msk: u32 = 1;
pub const SysTick_LOAD_RELOAD_Pos: u32 = 0;
pub const SysTick_LOAD_RELOAD_Msk: u32 = 16777215;
pub const SysTick_VAL_CURRENT_Pos: u32 = 0;
pub const SysTick_VAL_CURRENT_Msk: u32 = 16777215;
pub const SysTick_CALIB_NOREF_Pos: u32 = 31;
pub const SysTick_CALIB_NOREF_Msk: u32 = 2147483648;
pub const SysTick_CALIB_SKEW_Pos: u32 = 30;
pub const SysTick_CALIB_SKEW_Msk: u32 = 1073741824;
pub const SysTick_CALIB_TENMS_Pos: u32 = 0;
pub const SysTick_CALIB_TENMS_Msk: u32 = 16777215;
pub const ITM_TPR_PRIVMASK_Pos: u32 = 0;
pub const ITM_TPR_PRIVMASK_Msk: u32 = 4294967295;
pub const ITM_TCR_BUSY_Pos: u32 = 23;
pub const ITM_TCR_BUSY_Msk: u32 = 8388608;
pub const ITM_TCR_TraceBusID_Pos: u32 = 16;
pub const ITM_TCR_TraceBusID_Msk: u32 = 8323072;
pub const ITM_TCR_GTSFREQ_Pos: u32 = 10;
pub const ITM_TCR_GTSFREQ_Msk: u32 = 3072;
pub const ITM_TCR_TSPrescale_Pos: u32 = 8;
pub const ITM_TCR_TSPrescale_Msk: u32 = 768;
pub const ITM_TCR_SWOENA_Pos: u32 = 4;
pub const ITM_TCR_SWOENA_Msk: u32 = 16;
pub const ITM_TCR_DWTENA_Pos: u32 = 3;
pub const ITM_TCR_DWTENA_Msk: u32 = 8;
pub const ITM_TCR_SYNCENA_Pos: u32 = 2;
pub const ITM_TCR_SYNCENA_Msk: u32 = 4;
pub const ITM_TCR_TSENA_Pos: u32 = 1;
pub const ITM_TCR_TSENA_Msk: u32 = 2;
pub const ITM_TCR_ITMENA_Pos: u32 = 0;
pub const ITM_TCR_ITMENA_Msk: u32 = 1;
pub const ITM_LSR_ByteAcc_Pos: u32 = 2;
pub const ITM_LSR_ByteAcc_Msk: u32 = 4;
pub const ITM_LSR_Access_Pos: u32 = 1;
pub const ITM_LSR_Access_Msk: u32 = 2;
pub const ITM_LSR_Present_Pos: u32 = 0;
pub const ITM_LSR_Present_Msk: u32 = 1;
pub const DWT_CTRL_NUMCOMP_Pos: u32 = 28;
pub const DWT_CTRL_NUMCOMP_Msk: u32 = 4026531840;
pub const DWT_CTRL_NOTRCPKT_Pos: u32 = 27;
pub const DWT_CTRL_NOTRCPKT_Msk: u32 = 134217728;
pub const DWT_CTRL_NOEXTTRIG_Pos: u32 = 26;
pub const DWT_CTRL_NOEXTTRIG_Msk: u32 = 67108864;
pub const DWT_CTRL_NOCYCCNT_Pos: u32 = 25;
pub const DWT_CTRL_NOCYCCNT_Msk: u32 = 33554432;
pub const DWT_CTRL_NOPRFCNT_Pos: u32 = 24;
pub const DWT_CTRL_NOPRFCNT_Msk: u32 = 16777216;
pub const DWT_CTRL_CYCEVTENA_Pos: u32 = 22;
pub const DWT_CTRL_CYCEVTENA_Msk: u32 = 4194304;
pub const DWT_CTRL_FOLDEVTENA_Pos: u32 = 21;
pub const DWT_CTRL_FOLDEVTENA_Msk: u32 = 2097152;
pub const DWT_CTRL_LSUEVTENA_Pos: u32 = 20;
pub const DWT_CTRL_LSUEVTENA_Msk: u32 = 1048576;
pub const DWT_CTRL_SLEEPEVTENA_Pos: u32 = 19;
pub const DWT_CTRL_SLEEPEVTENA_Msk: u32 = 524288;
pub const DWT_CTRL_EXCEVTENA_Pos: u32 = 18;
pub const DWT_CTRL_EXCEVTENA_Msk: u32 = 262144;
pub const DWT_CTRL_CPIEVTENA_Pos: u32 = 17;
pub const DWT_CTRL_CPIEVTENA_Msk: u32 = 131072;
pub const DWT_CTRL_EXCTRCENA_Pos: u32 = 16;
pub const DWT_CTRL_EXCTRCENA_Msk: u32 = 65536;
pub const DWT_CTRL_PCSAMPLENA_Pos: u32 = 12;
pub const DWT_CTRL_PCSAMPLENA_Msk: u32 = 4096;
pub const DWT_CTRL_SYNCTAP_Pos: u32 = 10;
pub const DWT_CTRL_SYNCTAP_Msk: u32 = 3072;
pub const DWT_CTRL_CYCTAP_Pos: u32 = 9;
pub const DWT_CTRL_CYCTAP_Msk: u32 = 512;
pub const DWT_CTRL_POSTINIT_Pos: u32 = 5;
pub const DWT_CTRL_POSTINIT_Msk: u32 = 480;
pub const DWT_CTRL_POSTPRESET_Pos: u32 = 1;
pub const DWT_CTRL_POSTPRESET_Msk: u32 = 30;
pub const DWT_CTRL_CYCCNTENA_Pos: u32 = 0;
pub const DWT_CTRL_CYCCNTENA_Msk: u32 = 1;
pub const DWT_CPICNT_CPICNT_Pos: u32 = 0;
pub const DWT_CPICNT_CPICNT_Msk: u32 = 255;
pub const DWT_EXCCNT_EXCCNT_Pos: u32 = 0;
pub const DWT_EXCCNT_EXCCNT_Msk: u32 = 255;
pub const DWT_SLEEPCNT_SLEEPCNT_Pos: u32 = 0;
pub const DWT_SLEEPCNT_SLEEPCNT_Msk: u32 = 255;
pub const DWT_LSUCNT_LSUCNT_Pos: u32 = 0;
pub const DWT_LSUCNT_LSUCNT_Msk: u32 = 255;
pub const DWT_FOLDCNT_FOLDCNT_Pos: u32 = 0;
pub const DWT_FOLDCNT_FOLDCNT_Msk: u32 = 255;
pub const DWT_MASK_MASK_Pos: u32 = 0;
pub const DWT_MASK_MASK_Msk: u32 = 31;
pub const DWT_FUNCTION_MATCHED_Pos: u32 = 24;
pub const DWT_FUNCTION_MATCHED_Msk: u32 = 16777216;
pub const DWT_FUNCTION_DATAVADDR1_Pos: u32 = 16;
pub const DWT_FUNCTION_DATAVADDR1_Msk: u32 = 983040;
pub const DWT_FUNCTION_DATAVADDR0_Pos: u32 = 12;
pub const DWT_FUNCTION_DATAVADDR0_Msk: u32 = 61440;
pub const DWT_FUNCTION_DATAVSIZE_Pos: u32 = 10;
pub const DWT_FUNCTION_DATAVSIZE_Msk: u32 = 3072;
pub const DWT_FUNCTION_LNK1ENA_Pos: u32 = 9;
pub const DWT_FUNCTION_LNK1ENA_Msk: u32 = 512;
pub const DWT_FUNCTION_DATAVMATCH_Pos: u32 = 8;
pub const DWT_FUNCTION_DATAVMATCH_Msk: u32 = 256;
pub const DWT_FUNCTION_CYCMATCH_Pos: u32 = 7;
pub const DWT_FUNCTION_CYCMATCH_Msk: u32 = 128;
pub const DWT_FUNCTION_EMITRANGE_Pos: u32 = 5;
pub const DWT_FUNCTION_EMITRANGE_Msk: u32 = 32;
pub const DWT_FUNCTION_FUNCTION_Pos: u32 = 0;
pub const DWT_FUNCTION_FUNCTION_Msk: u32 = 15;
pub const TPI_ACPR_PRESCALER_Pos: u32 = 0;
pub const TPI_ACPR_PRESCALER_Msk: u32 = 8191;
pub const TPI_SPPR_TXMODE_Pos: u32 = 0;
pub const TPI_SPPR_TXMODE_Msk: u32 = 3;
pub const TPI_FFSR_FtNonStop_Pos: u32 = 3;
pub const TPI_FFSR_FtNonStop_Msk: u32 = 8;
pub const TPI_FFSR_TCPresent_Pos: u32 = 2;
pub const TPI_FFSR_TCPresent_Msk: u32 = 4;
pub const TPI_FFSR_FtStopped_Pos: u32 = 1;
pub const TPI_FFSR_FtStopped_Msk: u32 = 2;
pub const TPI_FFSR_FlInProg_Pos: u32 = 0;
pub const TPI_FFSR_FlInProg_Msk: u32 = 1;
pub const TPI_FFCR_TrigIn_Pos: u32 = 8;
pub const TPI_FFCR_TrigIn_Msk: u32 = 256;
pub const TPI_FFCR_EnFCont_Pos: u32 = 1;
pub const TPI_FFCR_EnFCont_Msk: u32 = 2;
pub const TPI_TRIGGER_TRIGGER_Pos: u32 = 0;
pub const TPI_TRIGGER_TRIGGER_Msk: u32 = 1;
pub const TPI_FIFO0_ITM_ATVALID_Pos: u32 = 29;
pub const TPI_FIFO0_ITM_ATVALID_Msk: u32 = 536870912;
pub const TPI_FIFO0_ITM_bytecount_Pos: u32 = 27;
pub const TPI_FIFO0_ITM_bytecount_Msk: u32 = 402653184;
pub const TPI_FIFO0_ETM_ATVALID_Pos: u32 = 26;
pub const TPI_FIFO0_ETM_ATVALID_Msk: u32 = 67108864;
pub const TPI_FIFO0_ETM_bytecount_Pos: u32 = 24;
pub const TPI_FIFO0_ETM_bytecount_Msk: u32 = 50331648;
pub const TPI_FIFO0_ETM2_Pos: u32 = 16;
pub const TPI_FIFO0_ETM2_Msk: u32 = 16711680;
pub const TPI_FIFO0_ETM1_Pos: u32 = 8;
pub const TPI_FIFO0_ETM1_Msk: u32 = 65280;
pub const TPI_FIFO0_ETM0_Pos: u32 = 0;
pub const TPI_FIFO0_ETM0_Msk: u32 = 255;
pub const TPI_ITATBCTR2_ATREADY2_Pos: u32 = 0;
pub const TPI_ITATBCTR2_ATREADY2_Msk: u32 = 1;
pub const TPI_ITATBCTR2_ATREADY1_Pos: u32 = 0;
pub const TPI_ITATBCTR2_ATREADY1_Msk: u32 = 1;
pub const TPI_FIFO1_ITM_ATVALID_Pos: u32 = 29;
pub const TPI_FIFO1_ITM_ATVALID_Msk: u32 = 536870912;
pub const TPI_FIFO1_ITM_bytecount_Pos: u32 = 27;
pub const TPI_FIFO1_ITM_bytecount_Msk: u32 = 402653184;
pub const TPI_FIFO1_ETM_ATVALID_Pos: u32 = 26;
pub const TPI_FIFO1_ETM_ATVALID_Msk: u32 = 67108864;
pub const TPI_FIFO1_ETM_bytecount_Pos: u32 = 24;
pub const TPI_FIFO1_ETM_bytecount_Msk: u32 = 50331648;
pub const TPI_FIFO1_ITM2_Pos: u32 = 16;
pub const TPI_FIFO1_ITM2_Msk: u32 = 16711680;
pub const TPI_FIFO1_ITM1_Pos: u32 = 8;
pub const TPI_FIFO1_ITM1_Msk: u32 = 65280;
pub const TPI_FIFO1_ITM0_Pos: u32 = 0;
pub const TPI_FIFO1_ITM0_Msk: u32 = 255;
pub const TPI_ITATBCTR0_ATREADY2_Pos: u32 = 0;
pub const TPI_ITATBCTR0_ATREADY2_Msk: u32 = 1;
pub const TPI_ITATBCTR0_ATREADY1_Pos: u32 = 0;
pub const TPI_ITATBCTR0_ATREADY1_Msk: u32 = 1;
pub const TPI_ITCTRL_Mode_Pos: u32 = 0;
pub const TPI_ITCTRL_Mode_Msk: u32 = 3;
pub const TPI_DEVID_NRZVALID_Pos: u32 = 11;
pub const TPI_DEVID_NRZVALID_Msk: u32 = 2048;
pub const TPI_DEVID_MANCVALID_Pos: u32 = 10;
pub const TPI_DEVID_MANCVALID_Msk: u32 = 1024;
pub const TPI_DEVID_PTINVALID_Pos: u32 = 9;
pub const TPI_DEVID_PTINVALID_Msk: u32 = 512;
pub const TPI_DEVID_MinBufSz_Pos: u32 = 6;
pub const TPI_DEVID_MinBufSz_Msk: u32 = 448;
pub const TPI_DEVID_AsynClkIn_Pos: u32 = 5;
pub const TPI_DEVID_AsynClkIn_Msk: u32 = 32;
pub const TPI_DEVID_NrTraceInput_Pos: u32 = 0;
pub const TPI_DEVID_NrTraceInput_Msk: u32 = 31;
pub const TPI_DEVTYPE_SubType_Pos: u32 = 4;
pub const TPI_DEVTYPE_SubType_Msk: u32 = 15;
pub const TPI_DEVTYPE_MajorType_Pos: u32 = 0;
pub const TPI_DEVTYPE_MajorType_Msk: u32 = 15;
pub const MPU_TYPE_RALIASES: u32 = 4;
pub const MPU_TYPE_IREGION_Pos: u32 = 16;
pub const MPU_TYPE_IREGION_Msk: u32 = 16711680;
pub const MPU_TYPE_DREGION_Pos: u32 = 8;
pub const MPU_TYPE_DREGION_Msk: u32 = 65280;
pub const MPU_TYPE_SEPARATE_Pos: u32 = 0;
pub const MPU_TYPE_SEPARATE_Msk: u32 = 1;
pub const MPU_CTRL_PRIVDEFENA_Pos: u32 = 2;
pub const MPU_CTRL_PRIVDEFENA_Msk: u32 = 4;
pub const MPU_CTRL_HFNMIENA_Pos: u32 = 1;
pub const MPU_CTRL_HFNMIENA_Msk: u32 = 2;
pub const MPU_CTRL_ENABLE_Pos: u32 = 0;
pub const MPU_CTRL_ENABLE_Msk: u32 = 1;
pub const MPU_RNR_REGION_Pos: u32 = 0;
pub const MPU_RNR_REGION_Msk: u32 = 255;
pub const MPU_RBAR_ADDR_Pos: u32 = 5;
pub const MPU_RBAR_ADDR_Msk: u32 = 4294967264;
pub const MPU_RBAR_VALID_Pos: u32 = 4;
pub const MPU_RBAR_VALID_Msk: u32 = 16;
pub const MPU_RBAR_REGION_Pos: u32 = 0;
pub const MPU_RBAR_REGION_Msk: u32 = 15;
pub const MPU_RASR_ATTRS_Pos: u32 = 16;
pub const MPU_RASR_ATTRS_Msk: u32 = 4294901760;
pub const MPU_RASR_XN_Pos: u32 = 28;
pub const MPU_RASR_XN_Msk: u32 = 268435456;
pub const MPU_RASR_AP_Pos: u32 = 24;
pub const MPU_RASR_AP_Msk: u32 = 117440512;
pub const MPU_RASR_TEX_Pos: u32 = 19;
pub const MPU_RASR_TEX_Msk: u32 = 3670016;
pub const MPU_RASR_S_Pos: u32 = 18;
pub const MPU_RASR_S_Msk: u32 = 262144;
pub const MPU_RASR_C_Pos: u32 = 17;
pub const MPU_RASR_C_Msk: u32 = 131072;
pub const MPU_RASR_B_Pos: u32 = 16;
pub const MPU_RASR_B_Msk: u32 = 65536;
pub const MPU_RASR_SRD_Pos: u32 = 8;
pub const MPU_RASR_SRD_Msk: u32 = 65280;
pub const MPU_RASR_SIZE_Pos: u32 = 1;
pub const MPU_RASR_SIZE_Msk: u32 = 62;
pub const MPU_RASR_ENABLE_Pos: u32 = 0;
pub const MPU_RASR_ENABLE_Msk: u32 = 1;
pub const FPU_FPCCR_ASPEN_Pos: u32 = 31;
pub const FPU_FPCCR_ASPEN_Msk: u32 = 2147483648;
pub const FPU_FPCCR_LSPEN_Pos: u32 = 30;
pub const FPU_FPCCR_LSPEN_Msk: u32 = 1073741824;
pub const FPU_FPCCR_MONRDY_Pos: u32 = 8;
pub const FPU_FPCCR_MONRDY_Msk: u32 = 256;
pub const FPU_FPCCR_BFRDY_Pos: u32 = 6;
pub const FPU_FPCCR_BFRDY_Msk: u32 = 64;
pub const FPU_FPCCR_MMRDY_Pos: u32 = 5;
pub const FPU_FPCCR_MMRDY_Msk: u32 = 32;
pub const FPU_FPCCR_HFRDY_Pos: u32 = 4;
pub const FPU_FPCCR_HFRDY_Msk: u32 = 16;
pub const FPU_FPCCR_THREAD_Pos: u32 = 3;
pub const FPU_FPCCR_THREAD_Msk: u32 = 8;
pub const FPU_FPCCR_USER_Pos: u32 = 1;
pub const FPU_FPCCR_USER_Msk: u32 = 2;
pub const FPU_FPCCR_LSPACT_Pos: u32 = 0;
pub const FPU_FPCCR_LSPACT_Msk: u32 = 1;
pub const FPU_FPCAR_ADDRESS_Pos: u32 = 3;
pub const FPU_FPCAR_ADDRESS_Msk: u32 = 4294967288;
pub const FPU_FPDSCR_AHP_Pos: u32 = 26;
pub const FPU_FPDSCR_AHP_Msk: u32 = 67108864;
pub const FPU_FPDSCR_DN_Pos: u32 = 25;
pub const FPU_FPDSCR_DN_Msk: u32 = 33554432;
pub const FPU_FPDSCR_FZ_Pos: u32 = 24;
pub const FPU_FPDSCR_FZ_Msk: u32 = 16777216;
pub const FPU_FPDSCR_RMode_Pos: u32 = 22;
pub const FPU_FPDSCR_RMode_Msk: u32 = 12582912;
pub const FPU_MVFR0_FP_rounding_modes_Pos: u32 = 28;
pub const FPU_MVFR0_FP_rounding_modes_Msk: u32 = 4026531840;
pub const FPU_MVFR0_Short_vectors_Pos: u32 = 24;
pub const FPU_MVFR0_Short_vectors_Msk: u32 = 251658240;
pub const FPU_MVFR0_Square_root_Pos: u32 = 20;
pub const FPU_MVFR0_Square_root_Msk: u32 = 15728640;
pub const FPU_MVFR0_Divide_Pos: u32 = 16;
pub const FPU_MVFR0_Divide_Msk: u32 = 983040;
pub const FPU_MVFR0_FP_excep_trapping_Pos: u32 = 12;
pub const FPU_MVFR0_FP_excep_trapping_Msk: u32 = 61440;
pub const FPU_MVFR0_Double_precision_Pos: u32 = 8;
pub const FPU_MVFR0_Double_precision_Msk: u32 = 3840;
pub const FPU_MVFR0_Single_precision_Pos: u32 = 4;
pub const FPU_MVFR0_Single_precision_Msk: u32 = 240;
pub const FPU_MVFR0_A_SIMD_registers_Pos: u32 = 0;
pub const FPU_MVFR0_A_SIMD_registers_Msk: u32 = 15;
pub const FPU_MVFR1_FP_fused_MAC_Pos: u32 = 28;
pub const FPU_MVFR1_FP_fused_MAC_Msk: u32 = 4026531840;
pub const FPU_MVFR1_FP_HPFP_Pos: u32 = 24;
pub const FPU_MVFR1_FP_HPFP_Msk: u32 = 251658240;
pub const FPU_MVFR1_D_NaN_mode_Pos: u32 = 4;
pub const FPU_MVFR1_D_NaN_mode_Msk: u32 = 240;
pub const FPU_MVFR1_FtZ_mode_Pos: u32 = 0;
pub const FPU_MVFR1_FtZ_mode_Msk: u32 = 15;
pub const FPU_MVFR2_VFP_Misc_Pos: u32 = 4;
pub const FPU_MVFR2_VFP_Misc_Msk: u32 = 240;
pub const CoreDebug_DHCSR_DBGKEY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_DBGKEY_Msk: u32 = 4294901760;
pub const CoreDebug_DHCSR_S_RESET_ST_Pos: u32 = 25;
pub const CoreDebug_DHCSR_S_RESET_ST_Msk: u32 = 33554432;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Pos: u32 = 24;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Msk: u32 = 16777216;
pub const CoreDebug_DHCSR_S_LOCKUP_Pos: u32 = 19;
pub const CoreDebug_DHCSR_S_LOCKUP_Msk: u32 = 524288;
pub const CoreDebug_DHCSR_S_SLEEP_Pos: u32 = 18;
pub const CoreDebug_DHCSR_S_SLEEP_Msk: u32 = 262144;
pub const CoreDebug_DHCSR_S_HALT_Pos: u32 = 17;
pub const CoreDebug_DHCSR_S_HALT_Msk: u32 = 131072;
pub const CoreDebug_DHCSR_S_REGRDY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_S_REGRDY_Msk: u32 = 65536;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Pos: u32 = 5;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Msk: u32 = 32;
pub const CoreDebug_DHCSR_C_MASKINTS_Pos: u32 = 3;
pub const CoreDebug_DHCSR_C_MASKINTS_Msk: u32 = 8;
pub const CoreDebug_DHCSR_C_STEP_Pos: u32 = 2;
pub const CoreDebug_DHCSR_C_STEP_Msk: u32 = 4;
pub const CoreDebug_DHCSR_C_HALT_Pos: u32 = 1;
pub const CoreDebug_DHCSR_C_HALT_Msk: u32 = 2;
pub const CoreDebug_DHCSR_C_DEBUGEN_Pos: u32 = 0;
pub const CoreDebug_DHCSR_C_DEBUGEN_Msk: u32 = 1;
pub const CoreDebug_DCRSR_REGWnR_Pos: u32 = 16;
pub const CoreDebug_DCRSR_REGWnR_Msk: u32 = 65536;
pub const CoreDebug_DCRSR_REGSEL_Pos: u32 = 0;
pub const CoreDebug_DCRSR_REGSEL_Msk: u32 = 31;
pub const CoreDebug_DEMCR_TRCENA_Pos: u32 = 24;
pub const CoreDebug_DEMCR_TRCENA_Msk: u32 = 16777216;
pub const CoreDebug_DEMCR_MON_REQ_Pos: u32 = 19;
pub const CoreDebug_DEMCR_MON_REQ_Msk: u32 = 524288;
pub const CoreDebug_DEMCR_MON_STEP_Pos: u32 = 18;
pub const CoreDebug_DEMCR_MON_STEP_Msk: u32 = 262144;
pub const CoreDebug_DEMCR_MON_PEND_Pos: u32 = 17;
pub const CoreDebug_DEMCR_MON_PEND_Msk: u32 = 131072;
pub const CoreDebug_DEMCR_MON_EN_Pos: u32 = 16;
pub const CoreDebug_DEMCR_MON_EN_Msk: u32 = 65536;
pub const CoreDebug_DEMCR_VC_HARDERR_Pos: u32 = 10;
pub const CoreDebug_DEMCR_VC_HARDERR_Msk: u32 = 1024;
pub const CoreDebug_DEMCR_VC_INTERR_Pos: u32 = 9;
pub const CoreDebug_DEMCR_VC_INTERR_Msk: u32 = 512;
pub const CoreDebug_DEMCR_VC_BUSERR_Pos: u32 = 8;
pub const CoreDebug_DEMCR_VC_BUSERR_Msk: u32 = 256;
pub const CoreDebug_DEMCR_VC_STATERR_Pos: u32 = 7;
pub const CoreDebug_DEMCR_VC_STATERR_Msk: u32 = 128;
pub const CoreDebug_DEMCR_VC_CHKERR_Pos: u32 = 6;
pub const CoreDebug_DEMCR_VC_CHKERR_Msk: u32 = 64;
pub const CoreDebug_DEMCR_VC_NOCPERR_Pos: u32 = 5;
pub const CoreDebug_DEMCR_VC_NOCPERR_Msk: u32 = 32;
pub const CoreDebug_DEMCR_VC_MMERR_Pos: u32 = 4;
pub const CoreDebug_DEMCR_VC_MMERR_Msk: u32 = 16;
pub const CoreDebug_DEMCR_VC_CORERESET_Pos: u32 = 0;
pub const CoreDebug_DEMCR_VC_CORERESET_Msk: u32 = 1;
pub const SCS_BASE: u32 = 3758153728;
pub const ITM_BASE: u32 = 3758096384;
pub const DWT_BASE: u32 = 3758100480;
pub const TPI_BASE: u32 = 3758358528;
pub const CoreDebug_BASE: u32 = 3758157296;
pub const SysTick_BASE: u32 = 3758153744;
pub const NVIC_BASE: u32 = 3758153984;
pub const SCB_BASE: u32 = 3758157056;
pub const MPU_BASE: u32 = 3758157200;
pub const FPU_BASE: u32 = 3758157616;
pub const NVIC_USER_IRQ_OFFSET: u32 = 16;
pub const EXC_RETURN_HANDLER: u32 = 4294967281;
pub const EXC_RETURN_THREAD_MSP: u32 = 4294967289;
pub const EXC_RETURN_THREAD_PSP: u32 = 4294967293;
pub const EXC_RETURN_HANDLER_FPU: u32 = 4294967265;
pub const EXC_RETURN_THREAD_MSP_FPU: u32 = 4294967273;
pub const EXC_RETURN_THREAD_PSP_FPU: u32 = 4294967277;
pub const ARM_MPU_AP_NONE: u32 = 0;
pub const ARM_MPU_AP_PRIV: u32 = 1;
pub const ARM_MPU_AP_URO: u32 = 2;
pub const ARM_MPU_AP_FULL: u32 = 3;
pub const ARM_MPU_AP_PRO: u32 = 5;
pub const ARM_MPU_AP_RO: u32 = 6;
pub const ARM_MPU_CACHEP_NOCACHE: u32 = 0;
pub const ARM_MPU_CACHEP_WB_WRA: u32 = 1;
pub const ARM_MPU_CACHEP_WT_NWA: u32 = 2;
pub const ARM_MPU_CACHEP_WB_NWA: u32 = 3;
pub const NRF_FICR_BASE: u32 = 268435456;
pub const NRF_UICR_BASE: u32 = 268439552;
pub const NRF_APPROTECT_BASE: u32 = 1073741824;
pub const NRF_CLOCK_BASE: u32 = 1073741824;
pub const NRF_POWER_BASE: u32 = 1073741824;
pub const NRF_P0_BASE: u32 = 1342177280;
pub const NRF_P1_BASE: u32 = 1342178048;
pub const NRF_RADIO_BASE: u32 = 1073745920;
pub const NRF_UART0_BASE: u32 = 1073750016;
pub const NRF_UARTE0_BASE: u32 = 1073750016;
pub const NRF_SPI0_BASE: u32 = 1073754112;
pub const NRF_SPIM0_BASE: u32 = 1073754112;
pub const NRF_SPIS0_BASE: u32 = 1073754112;
pub const NRF_TWI0_BASE: u32 = 1073754112;
pub const NRF_TWIM0_BASE: u32 = 1073754112;
pub const NRF_TWIS0_BASE: u32 = 1073754112;
pub const NRF_SPI1_BASE: u32 = 1073758208;
pub const NRF_SPIM1_BASE: u32 = 1073758208;
pub const NRF_SPIS1_BASE: u32 = 1073758208;
pub const NRF_TWI1_BASE: u32 = 1073758208;
pub const NRF_TWIM1_BASE: u32 = 1073758208;
pub const NRF_TWIS1_BASE: u32 = 1073758208;
pub const NRF_NFCT_BASE: u32 = 1073762304;
pub const NRF_GPIOTE_BASE: u32 = 1073766400;
pub const NRF_SAADC_BASE: u32 = 1073770496;
pub const NRF_TIMER0_BASE: u32 = 1073774592;
pub const NRF_TIMER1_BASE: u32 = 1073778688;
pub const NRF_TIMER2_BASE: u32 = 1073782784;
pub const NRF_RTC0_BASE: u32 = 1073786880;
pub const NRF_TEMP_BASE: u32 = 1073790976;
pub const NRF_RNG_BASE: u32 = 1073795072;
pub const NRF_ECB_BASE: u32 = 1073799168;
pub const NRF_AAR_BASE: u32 = 1073803264;
pub const NRF_CCM_BASE: u32 = 1073803264;
pub const NRF_WDT_BASE: u32 = 1073807360;
pub const NRF_RTC1_BASE: u32 = 1073811456;
pub const NRF_QDEC_BASE: u32 = 1073815552;
pub const NRF_COMP_BASE: u32 = 1073819648;
pub const NRF_LPCOMP_BASE: u32 = 1073819648;
pub const NRF_EGU0_BASE: u32 = 1073823744;
pub const NRF_SWI0_BASE: u32 = 1073823744;
pub const NRF_EGU1_BASE: u32 = 1073827840;
pub const NRF_SWI1_BASE: u32 = 1073827840;
pub const NRF_EGU2_BASE: u32 = 1073831936;
pub const NRF_SWI2_BASE: u32 = 1073831936;
pub const NRF_EGU3_BASE: u32 = 1073836032;
pub const NRF_SWI3_BASE: u32 = 1073836032;
pub const NRF_EGU4_BASE: u32 = 1073840128;
pub const NRF_SWI4_BASE: u32 = 1073840128;
pub const NRF_EGU5_BASE: u32 = 1073844224;
pub const NRF_SWI5_BASE: u32 = 1073844224;
pub const NRF_TIMER3_BASE: u32 = 1073848320;
pub const NRF_TIMER4_BASE: u32 = 1073852416;
pub const NRF_PWM0_BASE: u32 = 1073856512;
pub const NRF_PDM_BASE: u32 = 1073860608;
pub const NRF_ACL_BASE: u32 = 1073864704;
pub const NRF_NVMC_BASE: u32 = 1073864704;
pub const NRF_PPI_BASE: u32 = 1073868800;
pub const NRF_MWU_BASE: u32 = 1073872896;
pub const NRF_PWM1_BASE: u32 = 1073876992;
pub const NRF_PWM2_BASE: u32 = 1073881088;
pub const NRF_SPI2_BASE: u32 = 1073885184;
pub const NRF_SPIM2_BASE: u32 = 1073885184;
pub const NRF_SPIS2_BASE: u32 = 1073885184;
pub const NRF_RTC2_BASE: u32 = 1073889280;
pub const NRF_I2S_BASE: u32 = 1073893376;
pub const NRF_FPU_BASE: u32 = 1073897472;
pub const NRF_USBD_BASE: u32 = 1073901568;
pub const NRF_UARTE1_BASE: u32 = 1073905664;
pub const NRF_QSPI_BASE: u32 = 1073909760;
pub const NRF_CC_HOST_RGF_BASE: u32 = 1342349312;
pub const NRF_CRYPTOCELL_BASE: u32 = 1342349312;
pub const NRF_PWM3_BASE: u32 = 1073926144;
pub const NRF_SPIM3_BASE: u32 = 1073934336;
pub const AAR_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const AAR_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const AAR_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const AAR_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const AAR_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const AAR_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const AAR_EVENTS_END_EVENTS_END_Pos: u32 = 0;
pub const AAR_EVENTS_END_EVENTS_END_Msk: u32 = 1;
pub const AAR_EVENTS_END_EVENTS_END_NotGenerated: u32 = 0;
pub const AAR_EVENTS_END_EVENTS_END_Generated: u32 = 1;
pub const AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Pos: u32 = 0;
pub const AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Msk: u32 = 1;
pub const AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_NotGenerated: u32 = 0;
pub const AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Generated: u32 = 1;
pub const AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Pos: u32 = 0;
pub const AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Msk: u32 = 1;
pub const AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_NotGenerated: u32 = 0;
pub const AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Generated: u32 = 1;
pub const AAR_INTENSET_NOTRESOLVED_Pos: u32 = 2;
pub const AAR_INTENSET_NOTRESOLVED_Msk: u32 = 4;
pub const AAR_INTENSET_NOTRESOLVED_Disabled: u32 = 0;
pub const AAR_INTENSET_NOTRESOLVED_Enabled: u32 = 1;
pub const AAR_INTENSET_NOTRESOLVED_Set: u32 = 1;
pub const AAR_INTENSET_RESOLVED_Pos: u32 = 1;
pub const AAR_INTENSET_RESOLVED_Msk: u32 = 2;
pub const AAR_INTENSET_RESOLVED_Disabled: u32 = 0;
pub const AAR_INTENSET_RESOLVED_Enabled: u32 = 1;
pub const AAR_INTENSET_RESOLVED_Set: u32 = 1;
pub const AAR_INTENSET_END_Pos: u32 = 0;
pub const AAR_INTENSET_END_Msk: u32 = 1;
pub const AAR_INTENSET_END_Disabled: u32 = 0;
pub const AAR_INTENSET_END_Enabled: u32 = 1;
pub const AAR_INTENSET_END_Set: u32 = 1;
pub const AAR_INTENCLR_NOTRESOLVED_Pos: u32 = 2;
pub const AAR_INTENCLR_NOTRESOLVED_Msk: u32 = 4;
pub const AAR_INTENCLR_NOTRESOLVED_Disabled: u32 = 0;
pub const AAR_INTENCLR_NOTRESOLVED_Enabled: u32 = 1;
pub const AAR_INTENCLR_NOTRESOLVED_Clear: u32 = 1;
pub const AAR_INTENCLR_RESOLVED_Pos: u32 = 1;
pub const AAR_INTENCLR_RESOLVED_Msk: u32 = 2;
pub const AAR_INTENCLR_RESOLVED_Disabled: u32 = 0;
pub const AAR_INTENCLR_RESOLVED_Enabled: u32 = 1;
pub const AAR_INTENCLR_RESOLVED_Clear: u32 = 1;
pub const AAR_INTENCLR_END_Pos: u32 = 0;
pub const AAR_INTENCLR_END_Msk: u32 = 1;
pub const AAR_INTENCLR_END_Disabled: u32 = 0;
pub const AAR_INTENCLR_END_Enabled: u32 = 1;
pub const AAR_INTENCLR_END_Clear: u32 = 1;
pub const AAR_STATUS_STATUS_Pos: u32 = 0;
pub const AAR_STATUS_STATUS_Msk: u32 = 15;
pub const AAR_ENABLE_ENABLE_Pos: u32 = 0;
pub const AAR_ENABLE_ENABLE_Msk: u32 = 3;
pub const AAR_ENABLE_ENABLE_Disabled: u32 = 0;
pub const AAR_ENABLE_ENABLE_Enabled: u32 = 3;
pub const AAR_NIRK_NIRK_Pos: u32 = 0;
pub const AAR_NIRK_NIRK_Msk: u32 = 31;
pub const AAR_IRKPTR_IRKPTR_Pos: u32 = 0;
pub const AAR_IRKPTR_IRKPTR_Msk: u32 = 4294967295;
pub const AAR_ADDRPTR_ADDRPTR_Pos: u32 = 0;
pub const AAR_ADDRPTR_ADDRPTR_Msk: u32 = 4294967295;
pub const AAR_SCRATCHPTR_SCRATCHPTR_Pos: u32 = 0;
pub const AAR_SCRATCHPTR_SCRATCHPTR_Msk: u32 = 4294967295;
pub const ACL_ACL_ADDR_ADDR_Pos: u32 = 0;
pub const ACL_ACL_ADDR_ADDR_Msk: u32 = 4294967295;
pub const ACL_ACL_SIZE_SIZE_Pos: u32 = 0;
pub const ACL_ACL_SIZE_SIZE_Msk: u32 = 4294967295;
pub const ACL_ACL_PERM_READ_Pos: u32 = 2;
pub const ACL_ACL_PERM_READ_Msk: u32 = 4;
pub const ACL_ACL_PERM_READ_Enable: u32 = 0;
pub const ACL_ACL_PERM_READ_Disable: u32 = 1;
pub const ACL_ACL_PERM_WRITE_Pos: u32 = 1;
pub const ACL_ACL_PERM_WRITE_Msk: u32 = 2;
pub const ACL_ACL_PERM_WRITE_Enable: u32 = 0;
pub const ACL_ACL_PERM_WRITE_Disable: u32 = 1;
pub const APPROTECT_FORCEPROTECT_FORCEPROTECT_Pos: u32 = 0;
pub const APPROTECT_FORCEPROTECT_FORCEPROTECT_Msk: u32 = 255;
pub const APPROTECT_FORCEPROTECT_FORCEPROTECT_Force: u32 = 0;
pub const APPROTECT_DISABLE_DISABLE_Pos: u32 = 0;
pub const APPROTECT_DISABLE_DISABLE_Msk: u32 = 255;
pub const APPROTECT_DISABLE_DISABLE_SwDisable: u32 = 90;
pub const CCM_TASKS_KSGEN_TASKS_KSGEN_Pos: u32 = 0;
pub const CCM_TASKS_KSGEN_TASKS_KSGEN_Msk: u32 = 1;
pub const CCM_TASKS_KSGEN_TASKS_KSGEN_Trigger: u32 = 1;
pub const CCM_TASKS_CRYPT_TASKS_CRYPT_Pos: u32 = 0;
pub const CCM_TASKS_CRYPT_TASKS_CRYPT_Msk: u32 = 1;
pub const CCM_TASKS_CRYPT_TASKS_CRYPT_Trigger: u32 = 1;
pub const CCM_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const CCM_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const CCM_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Pos: u32 = 0;
pub const CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Msk: u32 = 1;
pub const CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Trigger: u32 = 1;
pub const CCM_EVENTS_ENDKSGEN_EVENTS_ENDKSGEN_Pos: u32 = 0;
pub const CCM_EVENTS_ENDKSGEN_EVENTS_ENDKSGEN_Msk: u32 = 1;
pub const CCM_EVENTS_ENDKSGEN_EVENTS_ENDKSGEN_NotGenerated: u32 = 0;
pub const CCM_EVENTS_ENDKSGEN_EVENTS_ENDKSGEN_Generated: u32 = 1;
pub const CCM_EVENTS_ENDCRYPT_EVENTS_ENDCRYPT_Pos: u32 = 0;
pub const CCM_EVENTS_ENDCRYPT_EVENTS_ENDCRYPT_Msk: u32 = 1;
pub const CCM_EVENTS_ENDCRYPT_EVENTS_ENDCRYPT_NotGenerated: u32 = 0;
pub const CCM_EVENTS_ENDCRYPT_EVENTS_ENDCRYPT_Generated: u32 = 1;
pub const CCM_EVENTS_ERROR_EVENTS_ERROR_Pos: u32 = 0;
pub const CCM_EVENTS_ERROR_EVENTS_ERROR_Msk: u32 = 1;
pub const CCM_EVENTS_ERROR_EVENTS_ERROR_NotGenerated: u32 = 0;
pub const CCM_EVENTS_ERROR_EVENTS_ERROR_Generated: u32 = 1;
pub const CCM_SHORTS_ENDKSGEN_CRYPT_Pos: u32 = 0;
pub const CCM_SHORTS_ENDKSGEN_CRYPT_Msk: u32 = 1;
pub const CCM_SHORTS_ENDKSGEN_CRYPT_Disabled: u32 = 0;
pub const CCM_SHORTS_ENDKSGEN_CRYPT_Enabled: u32 = 1;
pub const CCM_INTENSET_ERROR_Pos: u32 = 2;
pub const CCM_INTENSET_ERROR_Msk: u32 = 4;
pub const CCM_INTENSET_ERROR_Disabled: u32 = 0;
pub const CCM_INTENSET_ERROR_Enabled: u32 = 1;
pub const CCM_INTENSET_ERROR_Set: u32 = 1;
pub const CCM_INTENSET_ENDCRYPT_Pos: u32 = 1;
pub const CCM_INTENSET_ENDCRYPT_Msk: u32 = 2;
pub const CCM_INTENSET_ENDCRYPT_Disabled: u32 = 0;
pub const CCM_INTENSET_ENDCRYPT_Enabled: u32 = 1;
pub const CCM_INTENSET_ENDCRYPT_Set: u32 = 1;
pub const CCM_INTENSET_ENDKSGEN_Pos: u32 = 0;
pub const CCM_INTENSET_ENDKSGEN_Msk: u32 = 1;
pub const CCM_INTENSET_ENDKSGEN_Disabled: u32 = 0;
pub const CCM_INTENSET_ENDKSGEN_Enabled: u32 = 1;
pub const CCM_INTENSET_ENDKSGEN_Set: u32 = 1;
pub const CCM_INTENCLR_ERROR_Pos: u32 = 2;
pub const CCM_INTENCLR_ERROR_Msk: u32 = 4;
pub const CCM_INTENCLR_ERROR_Disabled: u32 = 0;
pub const CCM_INTENCLR_ERROR_Enabled: u32 = 1;
pub const CCM_INTENCLR_ERROR_Clear: u32 = 1;
pub const CCM_INTENCLR_ENDCRYPT_Pos: u32 = 1;
pub const CCM_INTENCLR_ENDCRYPT_Msk: u32 = 2;
pub const CCM_INTENCLR_ENDCRYPT_Disabled: u32 = 0;
pub const CCM_INTENCLR_ENDCRYPT_Enabled: u32 = 1;
pub const CCM_INTENCLR_ENDCRYPT_Clear: u32 = 1;
pub const CCM_INTENCLR_ENDKSGEN_Pos: u32 = 0;
pub const CCM_INTENCLR_ENDKSGEN_Msk: u32 = 1;
pub const CCM_INTENCLR_ENDKSGEN_Disabled: u32 = 0;
pub const CCM_INTENCLR_ENDKSGEN_Enabled: u32 = 1;
pub const CCM_INTENCLR_ENDKSGEN_Clear: u32 = 1;
pub const CCM_MICSTATUS_MICSTATUS_Pos: u32 = 0;
pub const CCM_MICSTATUS_MICSTATUS_Msk: u32 = 1;
pub const CCM_MICSTATUS_MICSTATUS_CheckFailed: u32 = 0;
pub const CCM_MICSTATUS_MICSTATUS_CheckPassed: u32 = 1;
pub const CCM_ENABLE_ENABLE_Pos: u32 = 0;
pub const CCM_ENABLE_ENABLE_Msk: u32 = 3;
pub const CCM_ENABLE_ENABLE_Disabled: u32 = 0;
pub const CCM_ENABLE_ENABLE_Enabled: u32 = 2;
pub const CCM_MODE_LENGTH_Pos: u32 = 24;
pub const CCM_MODE_LENGTH_Msk: u32 = 16777216;
pub const CCM_MODE_LENGTH_Default: u32 = 0;
pub const CCM_MODE_LENGTH_Extended: u32 = 1;
pub const CCM_MODE_DATARATE_Pos: u32 = 16;
pub const CCM_MODE_DATARATE_Msk: u32 = 196608;
pub const CCM_MODE_DATARATE_1Mbit: u32 = 0;
pub const CCM_MODE_DATARATE_2Mbit: u32 = 1;
pub const CCM_MODE_DATARATE_125Kbps: u32 = 2;
pub const CCM_MODE_DATARATE_500Kbps: u32 = 3;
pub const CCM_MODE_MODE_Pos: u32 = 0;
pub const CCM_MODE_MODE_Msk: u32 = 1;
pub const CCM_MODE_MODE_Encryption: u32 = 0;
pub const CCM_MODE_MODE_Decryption: u32 = 1;
pub const CCM_CNFPTR_CNFPTR_Pos: u32 = 0;
pub const CCM_CNFPTR_CNFPTR_Msk: u32 = 4294967295;
pub const CCM_INPTR_INPTR_Pos: u32 = 0;
pub const CCM_INPTR_INPTR_Msk: u32 = 4294967295;
pub const CCM_OUTPTR_OUTPTR_Pos: u32 = 0;
pub const CCM_OUTPTR_OUTPTR_Msk: u32 = 4294967295;
pub const CCM_SCRATCHPTR_SCRATCHPTR_Pos: u32 = 0;
pub const CCM_SCRATCHPTR_SCRATCHPTR_Msk: u32 = 4294967295;
pub const CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos: u32 = 0;
pub const CCM_MAXPACKETSIZE_MAXPACKETSIZE_Msk: u32 = 255;
pub const CCM_RATEOVERRIDE_RATEOVERRIDE_Pos: u32 = 0;
pub const CCM_RATEOVERRIDE_RATEOVERRIDE_Msk: u32 = 3;
pub const CCM_RATEOVERRIDE_RATEOVERRIDE_1Mbit: u32 = 0;
pub const CCM_RATEOVERRIDE_RATEOVERRIDE_2Mbit: u32 = 1;
pub const CCM_RATEOVERRIDE_RATEOVERRIDE_125Kbps: u32 = 2;
pub const CCM_RATEOVERRIDE_RATEOVERRIDE_500Kbps: u32 = 3;
pub const CC_HOST_RGF_HOST_CRYPTOKEY_SEL_HOST_CRYPTOKEY_SEL_Pos: u32 = 0;
pub const CC_HOST_RGF_HOST_CRYPTOKEY_SEL_HOST_CRYPTOKEY_SEL_Msk: u32 = 3;
pub const CC_HOST_RGF_HOST_CRYPTOKEY_SEL_HOST_CRYPTOKEY_SEL_K_DR: u32 = 0;
pub const CC_HOST_RGF_HOST_CRYPTOKEY_SEL_HOST_CRYPTOKEY_SEL_K_PRTL: u32 = 1;
pub const CC_HOST_RGF_HOST_CRYPTOKEY_SEL_HOST_CRYPTOKEY_SEL_Session: u32 = 2;
pub const CC_HOST_RGF_HOST_IOT_KPRTL_LOCK_HOST_IOT_KPRTL_LOCK_Pos: u32 = 0;
pub const CC_HOST_RGF_HOST_IOT_KPRTL_LOCK_HOST_IOT_KPRTL_LOCK_Msk: u32 = 1;
pub const CC_HOST_RGF_HOST_IOT_KPRTL_LOCK_HOST_IOT_KPRTL_LOCK_Disabled: u32 = 0;
pub const CC_HOST_RGF_HOST_IOT_KPRTL_LOCK_HOST_IOT_KPRTL_LOCK_Enabled: u32 = 1;
pub const CC_HOST_RGF_HOST_IOT_KDR0_HOST_IOT_KDR0_Pos: u32 = 0;
pub const CC_HOST_RGF_HOST_IOT_KDR0_HOST_IOT_KDR0_Msk: u32 = 4294967295;
pub const CC_HOST_RGF_HOST_IOT_KDR1_HOST_IOT_KDR1_Pos: u32 = 0;
pub const CC_HOST_RGF_HOST_IOT_KDR1_HOST_IOT_KDR1_Msk: u32 = 4294967295;
pub const CC_HOST_RGF_HOST_IOT_KDR2_HOST_IOT_KDR2_Pos: u32 = 0;
pub const CC_HOST_RGF_HOST_IOT_KDR2_HOST_IOT_KDR2_Msk: u32 = 4294967295;
pub const CC_HOST_RGF_HOST_IOT_KDR3_HOST_IOT_KDR3_Pos: u32 = 0;
pub const CC_HOST_RGF_HOST_IOT_KDR3_HOST_IOT_KDR3_Msk: u32 = 4294967295;
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_IS_VALID_Pos: u32 = 8;
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_IS_VALID_Msk: u32 = 256;
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_IS_VALID_Invalid: u32 = 0;
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_IS_VALID_Valid: u32 = 1;
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_Pos: u32 = 0;
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_Msk: u32 = 7;
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_Debug: u32 = 0;
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_Secure: u32 = 2;
pub const CLOCK_TASKS_HFCLKSTART_TASKS_HFCLKSTART_Pos: u32 = 0;
pub const CLOCK_TASKS_HFCLKSTART_TASKS_HFCLKSTART_Msk: u32 = 1;
pub const CLOCK_TASKS_HFCLKSTART_TASKS_HFCLKSTART_Trigger: u32 = 1;
pub const CLOCK_TASKS_HFCLKSTOP_TASKS_HFCLKSTOP_Pos: u32 = 0;
pub const CLOCK_TASKS_HFCLKSTOP_TASKS_HFCLKSTOP_Msk: u32 = 1;
pub const CLOCK_TASKS_HFCLKSTOP_TASKS_HFCLKSTOP_Trigger: u32 = 1;
pub const CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Pos: u32 = 0;
pub const CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Msk: u32 = 1;
pub const CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Trigger: u32 = 1;
pub const CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Pos: u32 = 0;
pub const CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Msk: u32 = 1;
pub const CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Trigger: u32 = 1;
pub const CLOCK_TASKS_CAL_TASKS_CAL_Pos: u32 = 0;
pub const CLOCK_TASKS_CAL_TASKS_CAL_Msk: u32 = 1;
pub const CLOCK_TASKS_CAL_TASKS_CAL_Trigger: u32 = 1;
pub const CLOCK_TASKS_CTSTART_TASKS_CTSTART_Pos: u32 = 0;
pub const CLOCK_TASKS_CTSTART_TASKS_CTSTART_Msk: u32 = 1;
pub const CLOCK_TASKS_CTSTART_TASKS_CTSTART_Trigger: u32 = 1;
pub const CLOCK_TASKS_CTSTOP_TASKS_CTSTOP_Pos: u32 = 0;
pub const CLOCK_TASKS_CTSTOP_TASKS_CTSTOP_Msk: u32 = 1;
pub const CLOCK_TASKS_CTSTOP_TASKS_CTSTOP_Trigger: u32 = 1;
pub const CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_Pos: u32 = 0;
pub const CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_Msk: u32 = 1;
pub const CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_NotGenerated: u32 = 0;
pub const CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_Generated: u32 = 1;
pub const CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Pos: u32 = 0;
pub const CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Msk: u32 = 1;
pub const CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_NotGenerated: u32 = 0;
pub const CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Generated: u32 = 1;
pub const CLOCK_EVENTS_DONE_EVENTS_DONE_Pos: u32 = 0;
pub const CLOCK_EVENTS_DONE_EVENTS_DONE_Msk: u32 = 1;
pub const CLOCK_EVENTS_DONE_EVENTS_DONE_NotGenerated: u32 = 0;
pub const CLOCK_EVENTS_DONE_EVENTS_DONE_Generated: u32 = 1;
pub const CLOCK_EVENTS_CTTO_EVENTS_CTTO_Pos: u32 = 0;
pub const CLOCK_EVENTS_CTTO_EVENTS_CTTO_Msk: u32 = 1;
pub const CLOCK_EVENTS_CTTO_EVENTS_CTTO_NotGenerated: u32 = 0;
pub const CLOCK_EVENTS_CTTO_EVENTS_CTTO_Generated: u32 = 1;
pub const CLOCK_EVENTS_CTSTARTED_EVENTS_CTSTARTED_Pos: u32 = 0;
pub const CLOCK_EVENTS_CTSTARTED_EVENTS_CTSTARTED_Msk: u32 = 1;
pub const CLOCK_EVENTS_CTSTARTED_EVENTS_CTSTARTED_NotGenerated: u32 = 0;
pub const CLOCK_EVENTS_CTSTARTED_EVENTS_CTSTARTED_Generated: u32 = 1;
pub const CLOCK_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_Pos: u32 = 0;
pub const CLOCK_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_Msk: u32 = 1;
pub const CLOCK_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_NotGenerated: u32 = 0;
pub const CLOCK_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_Generated: u32 = 1;
pub const CLOCK_INTENSET_CTSTOPPED_Pos: u32 = 11;
pub const CLOCK_INTENSET_CTSTOPPED_Msk: u32 = 2048;
pub const CLOCK_INTENSET_CTSTOPPED_Disabled: u32 = 0;
pub const CLOCK_INTENSET_CTSTOPPED_Enabled: u32 = 1;
pub const CLOCK_INTENSET_CTSTOPPED_Set: u32 = 1;
pub const CLOCK_INTENSET_CTSTARTED_Pos: u32 = 10;
pub const CLOCK_INTENSET_CTSTARTED_Msk: u32 = 1024;
pub const CLOCK_INTENSET_CTSTARTED_Disabled: u32 = 0;
pub const CLOCK_INTENSET_CTSTARTED_Enabled: u32 = 1;
pub const CLOCK_INTENSET_CTSTARTED_Set: u32 = 1;
pub const CLOCK_INTENSET_CTTO_Pos: u32 = 4;
pub const CLOCK_INTENSET_CTTO_Msk: u32 = 16;
pub const CLOCK_INTENSET_CTTO_Disabled: u32 = 0;
pub const CLOCK_INTENSET_CTTO_Enabled: u32 = 1;
pub const CLOCK_INTENSET_CTTO_Set: u32 = 1;
pub const CLOCK_INTENSET_DONE_Pos: u32 = 3;
pub const CLOCK_INTENSET_DONE_Msk: u32 = 8;
pub const CLOCK_INTENSET_DONE_Disabled: u32 = 0;
pub const CLOCK_INTENSET_DONE_Enabled: u32 = 1;
pub const CLOCK_INTENSET_DONE_Set: u32 = 1;
pub const CLOCK_INTENSET_LFCLKSTARTED_Pos: u32 = 1;
pub const CLOCK_INTENSET_LFCLKSTARTED_Msk: u32 = 2;
pub const CLOCK_INTENSET_LFCLKSTARTED_Disabled: u32 = 0;
pub const CLOCK_INTENSET_LFCLKSTARTED_Enabled: u32 = 1;
pub const CLOCK_INTENSET_LFCLKSTARTED_Set: u32 = 1;
pub const CLOCK_INTENSET_HFCLKSTARTED_Pos: u32 = 0;
pub const CLOCK_INTENSET_HFCLKSTARTED_Msk: u32 = 1;
pub const CLOCK_INTENSET_HFCLKSTARTED_Disabled: u32 = 0;
pub const CLOCK_INTENSET_HFCLKSTARTED_Enabled: u32 = 1;
pub const CLOCK_INTENSET_HFCLKSTARTED_Set: u32 = 1;
pub const CLOCK_INTENCLR_CTSTOPPED_Pos: u32 = 11;
pub const CLOCK_INTENCLR_CTSTOPPED_Msk: u32 = 2048;
pub const CLOCK_INTENCLR_CTSTOPPED_Disabled: u32 = 0;
pub const CLOCK_INTENCLR_CTSTOPPED_Enabled: u32 = 1;
pub const CLOCK_INTENCLR_CTSTOPPED_Clear: u32 = 1;
pub const CLOCK_INTENCLR_CTSTARTED_Pos: u32 = 10;
pub const CLOCK_INTENCLR_CTSTARTED_Msk: u32 = 1024;
pub const CLOCK_INTENCLR_CTSTARTED_Disabled: u32 = 0;
pub const CLOCK_INTENCLR_CTSTARTED_Enabled: u32 = 1;
pub const CLOCK_INTENCLR_CTSTARTED_Clear: u32 = 1;
pub const CLOCK_INTENCLR_CTTO_Pos: u32 = 4;
pub const CLOCK_INTENCLR_CTTO_Msk: u32 = 16;
pub const CLOCK_INTENCLR_CTTO_Disabled: u32 = 0;
pub const CLOCK_INTENCLR_CTTO_Enabled: u32 = 1;
pub const CLOCK_INTENCLR_CTTO_Clear: u32 = 1;
pub const CLOCK_INTENCLR_DONE_Pos: u32 = 3;
pub const CLOCK_INTENCLR_DONE_Msk: u32 = 8;
pub const CLOCK_INTENCLR_DONE_Disabled: u32 = 0;
pub const CLOCK_INTENCLR_DONE_Enabled: u32 = 1;
pub const CLOCK_INTENCLR_DONE_Clear: u32 = 1;
pub const CLOCK_INTENCLR_LFCLKSTARTED_Pos: u32 = 1;
pub const CLOCK_INTENCLR_LFCLKSTARTED_Msk: u32 = 2;
pub const CLOCK_INTENCLR_LFCLKSTARTED_Disabled: u32 = 0;
pub const CLOCK_INTENCLR_LFCLKSTARTED_Enabled: u32 = 1;
pub const CLOCK_INTENCLR_LFCLKSTARTED_Clear: u32 = 1;
pub const CLOCK_INTENCLR_HFCLKSTARTED_Pos: u32 = 0;
pub const CLOCK_INTENCLR_HFCLKSTARTED_Msk: u32 = 1;
pub const CLOCK_INTENCLR_HFCLKSTARTED_Disabled: u32 = 0;
pub const CLOCK_INTENCLR_HFCLKSTARTED_Enabled: u32 = 1;
pub const CLOCK_INTENCLR_HFCLKSTARTED_Clear: u32 = 1;
pub const CLOCK_HFCLKRUN_STATUS_Pos: u32 = 0;
pub const CLOCK_HFCLKRUN_STATUS_Msk: u32 = 1;
pub const CLOCK_HFCLKRUN_STATUS_NotTriggered: u32 = 0;
pub const CLOCK_HFCLKRUN_STATUS_Triggered: u32 = 1;
pub const CLOCK_HFCLKSTAT_STATE_Pos: u32 = 16;
pub const CLOCK_HFCLKSTAT_STATE_Msk: u32 = 65536;
pub const CLOCK_HFCLKSTAT_STATE_NotRunning: u32 = 0;
pub const CLOCK_HFCLKSTAT_STATE_Running: u32 = 1;
pub const CLOCK_HFCLKSTAT_SRC_Pos: u32 = 0;
pub const CLOCK_HFCLKSTAT_SRC_Msk: u32 = 1;
pub const CLOCK_HFCLKSTAT_SRC_RC: u32 = 0;
pub const CLOCK_HFCLKSTAT_SRC_Xtal: u32 = 1;
pub const CLOCK_LFCLKRUN_STATUS_Pos: u32 = 0;
pub const CLOCK_LFCLKRUN_STATUS_Msk: u32 = 1;
pub const CLOCK_LFCLKRUN_STATUS_NotTriggered: u32 = 0;
pub const CLOCK_LFCLKRUN_STATUS_Triggered: u32 = 1;
pub const CLOCK_LFCLKSTAT_STATE_Pos: u32 = 16;
pub const CLOCK_LFCLKSTAT_STATE_Msk: u32 = 65536;
pub const CLOCK_LFCLKSTAT_STATE_NotRunning: u32 = 0;
pub const CLOCK_LFCLKSTAT_STATE_Running: u32 = 1;
pub const CLOCK_LFCLKSTAT_SRC_Pos: u32 = 0;
pub const CLOCK_LFCLKSTAT_SRC_Msk: u32 = 3;
pub const CLOCK_LFCLKSTAT_SRC_RC: u32 = 0;
pub const CLOCK_LFCLKSTAT_SRC_Xtal: u32 = 1;
pub const CLOCK_LFCLKSTAT_SRC_Synth: u32 = 2;
pub const CLOCK_LFCLKSRCCOPY_SRC_Pos: u32 = 0;
pub const CLOCK_LFCLKSRCCOPY_SRC_Msk: u32 = 3;
pub const CLOCK_LFCLKSRCCOPY_SRC_RC: u32 = 0;
pub const CLOCK_LFCLKSRCCOPY_SRC_Xtal: u32 = 1;
pub const CLOCK_LFCLKSRCCOPY_SRC_Synth: u32 = 2;
pub const CLOCK_LFCLKSRC_EXTERNAL_Pos: u32 = 17;
pub const CLOCK_LFCLKSRC_EXTERNAL_Msk: u32 = 131072;
pub const CLOCK_LFCLKSRC_EXTERNAL_Disabled: u32 = 0;
pub const CLOCK_LFCLKSRC_EXTERNAL_Enabled: u32 = 1;
pub const CLOCK_LFCLKSRC_BYPASS_Pos: u32 = 16;
pub const CLOCK_LFCLKSRC_BYPASS_Msk: u32 = 65536;
pub const CLOCK_LFCLKSRC_BYPASS_Disabled: u32 = 0;
pub const CLOCK_LFCLKSRC_BYPASS_Enabled: u32 = 1;
pub const CLOCK_LFCLKSRC_SRC_Pos: u32 = 0;
pub const CLOCK_LFCLKSRC_SRC_Msk: u32 = 3;
pub const CLOCK_LFCLKSRC_SRC_RC: u32 = 0;
pub const CLOCK_LFCLKSRC_SRC_Xtal: u32 = 1;
pub const CLOCK_LFCLKSRC_SRC_Synth: u32 = 2;
pub const CLOCK_HFXODEBOUNCE_HFXODEBOUNCE_Pos: u32 = 0;
pub const CLOCK_HFXODEBOUNCE_HFXODEBOUNCE_Msk: u32 = 255;
pub const CLOCK_HFXODEBOUNCE_HFXODEBOUNCE_Db256us: u32 = 16;
pub const CLOCK_HFXODEBOUNCE_HFXODEBOUNCE_Db1024us: u32 = 64;
pub const CLOCK_CTIV_CTIV_Pos: u32 = 0;
pub const CLOCK_CTIV_CTIV_Msk: u32 = 127;
pub const CLOCK_TRACECONFIG_TRACEMUX_Pos: u32 = 16;
pub const CLOCK_TRACECONFIG_TRACEMUX_Msk: u32 = 196608;
pub const CLOCK_TRACECONFIG_TRACEMUX_GPIO: u32 = 0;
pub const CLOCK_TRACECONFIG_TRACEMUX_Serial: u32 = 1;
pub const CLOCK_TRACECONFIG_TRACEMUX_Parallel: u32 = 2;
pub const CLOCK_TRACECONFIG_TRACEPORTSPEED_Pos: u32 = 0;
pub const CLOCK_TRACECONFIG_TRACEPORTSPEED_Msk: u32 = 3;
pub const CLOCK_TRACECONFIG_TRACEPORTSPEED_32MHz: u32 = 0;
pub const CLOCK_TRACECONFIG_TRACEPORTSPEED_16MHz: u32 = 1;
pub const CLOCK_TRACECONFIG_TRACEPORTSPEED_8MHz: u32 = 2;
pub const CLOCK_TRACECONFIG_TRACEPORTSPEED_4MHz: u32 = 3;
pub const CLOCK_LFRCMODE_STATUS_Pos: u32 = 16;
pub const CLOCK_LFRCMODE_STATUS_Msk: u32 = 65536;
pub const CLOCK_LFRCMODE_STATUS_Normal: u32 = 0;
pub const CLOCK_LFRCMODE_STATUS_ULP: u32 = 1;
pub const CLOCK_LFRCMODE_MODE_Pos: u32 = 0;
pub const CLOCK_LFRCMODE_MODE_Msk: u32 = 1;
pub const CLOCK_LFRCMODE_MODE_Normal: u32 = 0;
pub const CLOCK_LFRCMODE_MODE_ULP: u32 = 1;
pub const COMP_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const COMP_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const COMP_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const COMP_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const COMP_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const COMP_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const COMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos: u32 = 0;
pub const COMP_TASKS_SAMPLE_TASKS_SAMPLE_Msk: u32 = 1;
pub const COMP_TASKS_SAMPLE_TASKS_SAMPLE_Trigger: u32 = 1;
pub const COMP_EVENTS_READY_EVENTS_READY_Pos: u32 = 0;
pub const COMP_EVENTS_READY_EVENTS_READY_Msk: u32 = 1;
pub const COMP_EVENTS_READY_EVENTS_READY_NotGenerated: u32 = 0;
pub const COMP_EVENTS_READY_EVENTS_READY_Generated: u32 = 1;
pub const COMP_EVENTS_DOWN_EVENTS_DOWN_Pos: u32 = 0;
pub const COMP_EVENTS_DOWN_EVENTS_DOWN_Msk: u32 = 1;
pub const COMP_EVENTS_DOWN_EVENTS_DOWN_NotGenerated: u32 = 0;
pub const COMP_EVENTS_DOWN_EVENTS_DOWN_Generated: u32 = 1;
pub const COMP_EVENTS_UP_EVENTS_UP_Pos: u32 = 0;
pub const COMP_EVENTS_UP_EVENTS_UP_Msk: u32 = 1;
pub const COMP_EVENTS_UP_EVENTS_UP_NotGenerated: u32 = 0;
pub const COMP_EVENTS_UP_EVENTS_UP_Generated: u32 = 1;
pub const COMP_EVENTS_CROSS_EVENTS_CROSS_Pos: u32 = 0;
pub const COMP_EVENTS_CROSS_EVENTS_CROSS_Msk: u32 = 1;
pub const COMP_EVENTS_CROSS_EVENTS_CROSS_NotGenerated: u32 = 0;
pub const COMP_EVENTS_CROSS_EVENTS_CROSS_Generated: u32 = 1;
pub const COMP_SHORTS_CROSS_STOP_Pos: u32 = 4;
pub const COMP_SHORTS_CROSS_STOP_Msk: u32 = 16;
pub const COMP_SHORTS_CROSS_STOP_Disabled: u32 = 0;
pub const COMP_SHORTS_CROSS_STOP_Enabled: u32 = 1;
pub const COMP_SHORTS_UP_STOP_Pos: u32 = 3;
pub const COMP_SHORTS_UP_STOP_Msk: u32 = 8;
pub const COMP_SHORTS_UP_STOP_Disabled: u32 = 0;
pub const COMP_SHORTS_UP_STOP_Enabled: u32 = 1;
pub const COMP_SHORTS_DOWN_STOP_Pos: u32 = 2;
pub const COMP_SHORTS_DOWN_STOP_Msk: u32 = 4;
pub const COMP_SHORTS_DOWN_STOP_Disabled: u32 = 0;
pub const COMP_SHORTS_DOWN_STOP_Enabled: u32 = 1;
pub const COMP_SHORTS_READY_STOP_Pos: u32 = 1;
pub const COMP_SHORTS_READY_STOP_Msk: u32 = 2;
pub const COMP_SHORTS_READY_STOP_Disabled: u32 = 0;
pub const COMP_SHORTS_READY_STOP_Enabled: u32 = 1;
pub const COMP_SHORTS_READY_SAMPLE_Pos: u32 = 0;
pub const COMP_SHORTS_READY_SAMPLE_Msk: u32 = 1;
pub const COMP_SHORTS_READY_SAMPLE_Disabled: u32 = 0;
pub const COMP_SHORTS_READY_SAMPLE_Enabled: u32 = 1;
pub const COMP_INTEN_CROSS_Pos: u32 = 3;
pub const COMP_INTEN_CROSS_Msk: u32 = 8;
pub const COMP_INTEN_CROSS_Disabled: u32 = 0;
pub const COMP_INTEN_CROSS_Enabled: u32 = 1;
pub const COMP_INTEN_UP_Pos: u32 = 2;
pub const COMP_INTEN_UP_Msk: u32 = 4;
pub const COMP_INTEN_UP_Disabled: u32 = 0;
pub const COMP_INTEN_UP_Enabled: u32 = 1;
pub const COMP_INTEN_DOWN_Pos: u32 = 1;
pub const COMP_INTEN_DOWN_Msk: u32 = 2;
pub const COMP_INTEN_DOWN_Disabled: u32 = 0;
pub const COMP_INTEN_DOWN_Enabled: u32 = 1;
pub const COMP_INTEN_READY_Pos: u32 = 0;
pub const COMP_INTEN_READY_Msk: u32 = 1;
pub const COMP_INTEN_READY_Disabled: u32 = 0;
pub const COMP_INTEN_READY_Enabled: u32 = 1;
pub const COMP_INTENSET_CROSS_Pos: u32 = 3;
pub const COMP_INTENSET_CROSS_Msk: u32 = 8;
pub const COMP_INTENSET_CROSS_Disabled: u32 = 0;
pub const COMP_INTENSET_CROSS_Enabled: u32 = 1;
pub const COMP_INTENSET_CROSS_Set: u32 = 1;
pub const COMP_INTENSET_UP_Pos: u32 = 2;
pub const COMP_INTENSET_UP_Msk: u32 = 4;
pub const COMP_INTENSET_UP_Disabled: u32 = 0;
pub const COMP_INTENSET_UP_Enabled: u32 = 1;
pub const COMP_INTENSET_UP_Set: u32 = 1;
pub const COMP_INTENSET_DOWN_Pos: u32 = 1;
pub const COMP_INTENSET_DOWN_Msk: u32 = 2;
pub const COMP_INTENSET_DOWN_Disabled: u32 = 0;
pub const COMP_INTENSET_DOWN_Enabled: u32 = 1;
pub const COMP_INTENSET_DOWN_Set: u32 = 1;
pub const COMP_INTENSET_READY_Pos: u32 = 0;
pub const COMP_INTENSET_READY_Msk: u32 = 1;
pub const COMP_INTENSET_READY_Disabled: u32 = 0;
pub const COMP_INTENSET_READY_Enabled: u32 = 1;
pub const COMP_INTENSET_READY_Set: u32 = 1;
pub const COMP_INTENCLR_CROSS_Pos: u32 = 3;
pub const COMP_INTENCLR_CROSS_Msk: u32 = 8;
pub const COMP_INTENCLR_CROSS_Disabled: u32 = 0;
pub const COMP_INTENCLR_CROSS_Enabled: u32 = 1;
pub const COMP_INTENCLR_CROSS_Clear: u32 = 1;
pub const COMP_INTENCLR_UP_Pos: u32 = 2;
pub const COMP_INTENCLR_UP_Msk: u32 = 4;
pub const COMP_INTENCLR_UP_Disabled: u32 = 0;
pub const COMP_INTENCLR_UP_Enabled: u32 = 1;
pub const COMP_INTENCLR_UP_Clear: u32 = 1;
pub const COMP_INTENCLR_DOWN_Pos: u32 = 1;
pub const COMP_INTENCLR_DOWN_Msk: u32 = 2;
pub const COMP_INTENCLR_DOWN_Disabled: u32 = 0;
pub const COMP_INTENCLR_DOWN_Enabled: u32 = 1;
pub const COMP_INTENCLR_DOWN_Clear: u32 = 1;
pub const COMP_INTENCLR_READY_Pos: u32 = 0;
pub const COMP_INTENCLR_READY_Msk: u32 = 1;
pub const COMP_INTENCLR_READY_Disabled: u32 = 0;
pub const COMP_INTENCLR_READY_Enabled: u32 = 1;
pub const COMP_INTENCLR_READY_Clear: u32 = 1;
pub const COMP_RESULT_RESULT_Pos: u32 = 0;
pub const COMP_RESULT_RESULT_Msk: u32 = 1;
pub const COMP_RESULT_RESULT_Below: u32 = 0;
pub const COMP_RESULT_RESULT_Above: u32 = 1;
pub const COMP_ENABLE_ENABLE_Pos: u32 = 0;
pub const COMP_ENABLE_ENABLE_Msk: u32 = 3;
pub const COMP_ENABLE_ENABLE_Disabled: u32 = 0;
pub const COMP_ENABLE_ENABLE_Enabled: u32 = 2;
pub const COMP_PSEL_PSEL_Pos: u32 = 0;
pub const COMP_PSEL_PSEL_Msk: u32 = 7;
pub const COMP_PSEL_PSEL_AnalogInput0: u32 = 0;
pub const COMP_PSEL_PSEL_AnalogInput1: u32 = 1;
pub const COMP_PSEL_PSEL_AnalogInput2: u32 = 2;
pub const COMP_PSEL_PSEL_AnalogInput3: u32 = 3;
pub const COMP_PSEL_PSEL_AnalogInput4: u32 = 4;
pub const COMP_PSEL_PSEL_AnalogInput5: u32 = 5;
pub const COMP_PSEL_PSEL_AnalogInput6: u32 = 6;
pub const COMP_PSEL_PSEL_AnalogInput7: u32 = 7;
pub const COMP_REFSEL_REFSEL_Pos: u32 = 0;
pub const COMP_REFSEL_REFSEL_Msk: u32 = 7;
pub const COMP_REFSEL_REFSEL_Int1V2: u32 = 0;
pub const COMP_REFSEL_REFSEL_Int1V8: u32 = 1;
pub const COMP_REFSEL_REFSEL_Int2V4: u32 = 2;
pub const COMP_REFSEL_REFSEL_VDD: u32 = 4;
pub const COMP_REFSEL_REFSEL_ARef: u32 = 5;
pub const COMP_EXTREFSEL_EXTREFSEL_Pos: u32 = 0;
pub const COMP_EXTREFSEL_EXTREFSEL_Msk: u32 = 7;
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference0: u32 = 0;
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference1: u32 = 1;
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference2: u32 = 2;
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference3: u32 = 3;
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference4: u32 = 4;
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference5: u32 = 5;
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference6: u32 = 6;
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference7: u32 = 7;
pub const COMP_TH_THUP_Pos: u32 = 8;
pub const COMP_TH_THUP_Msk: u32 = 16128;
pub const COMP_TH_THDOWN_Pos: u32 = 0;
pub const COMP_TH_THDOWN_Msk: u32 = 63;
pub const COMP_MODE_MAIN_Pos: u32 = 8;
pub const COMP_MODE_MAIN_Msk: u32 = 256;
pub const COMP_MODE_MAIN_SE: u32 = 0;
pub const COMP_MODE_MAIN_Diff: u32 = 1;
pub const COMP_MODE_SP_Pos: u32 = 0;
pub const COMP_MODE_SP_Msk: u32 = 3;
pub const COMP_MODE_SP_Low: u32 = 0;
pub const COMP_MODE_SP_Normal: u32 = 1;
pub const COMP_MODE_SP_High: u32 = 2;
pub const COMP_HYST_HYST_Pos: u32 = 0;
pub const COMP_HYST_HYST_Msk: u32 = 1;
pub const COMP_HYST_HYST_NoHyst: u32 = 0;
pub const COMP_HYST_HYST_Hyst50mV: u32 = 1;
pub const CRYPTOCELL_ENABLE_ENABLE_Pos: u32 = 0;
pub const CRYPTOCELL_ENABLE_ENABLE_Msk: u32 = 1;
pub const CRYPTOCELL_ENABLE_ENABLE_Disabled: u32 = 0;
pub const CRYPTOCELL_ENABLE_ENABLE_Enabled: u32 = 1;
pub const ECB_TASKS_STARTECB_TASKS_STARTECB_Pos: u32 = 0;
pub const ECB_TASKS_STARTECB_TASKS_STARTECB_Msk: u32 = 1;
pub const ECB_TASKS_STARTECB_TASKS_STARTECB_Trigger: u32 = 1;
pub const ECB_TASKS_STOPECB_TASKS_STOPECB_Pos: u32 = 0;
pub const ECB_TASKS_STOPECB_TASKS_STOPECB_Msk: u32 = 1;
pub const ECB_TASKS_STOPECB_TASKS_STOPECB_Trigger: u32 = 1;
pub const ECB_EVENTS_ENDECB_EVENTS_ENDECB_Pos: u32 = 0;
pub const ECB_EVENTS_ENDECB_EVENTS_ENDECB_Msk: u32 = 1;
pub const ECB_EVENTS_ENDECB_EVENTS_ENDECB_NotGenerated: u32 = 0;
pub const ECB_EVENTS_ENDECB_EVENTS_ENDECB_Generated: u32 = 1;
pub const ECB_EVENTS_ERRORECB_EVENTS_ERRORECB_Pos: u32 = 0;
pub const ECB_EVENTS_ERRORECB_EVENTS_ERRORECB_Msk: u32 = 1;
pub const ECB_EVENTS_ERRORECB_EVENTS_ERRORECB_NotGenerated: u32 = 0;
pub const ECB_EVENTS_ERRORECB_EVENTS_ERRORECB_Generated: u32 = 1;
pub const ECB_INTENSET_ERRORECB_Pos: u32 = 1;
pub const ECB_INTENSET_ERRORECB_Msk: u32 = 2;
pub const ECB_INTENSET_ERRORECB_Disabled: u32 = 0;
pub const ECB_INTENSET_ERRORECB_Enabled: u32 = 1;
pub const ECB_INTENSET_ERRORECB_Set: u32 = 1;
pub const ECB_INTENSET_ENDECB_Pos: u32 = 0;
pub const ECB_INTENSET_ENDECB_Msk: u32 = 1;
pub const ECB_INTENSET_ENDECB_Disabled: u32 = 0;
pub const ECB_INTENSET_ENDECB_Enabled: u32 = 1;
pub const ECB_INTENSET_ENDECB_Set: u32 = 1;
pub const ECB_INTENCLR_ERRORECB_Pos: u32 = 1;
pub const ECB_INTENCLR_ERRORECB_Msk: u32 = 2;
pub const ECB_INTENCLR_ERRORECB_Disabled: u32 = 0;
pub const ECB_INTENCLR_ERRORECB_Enabled: u32 = 1;
pub const ECB_INTENCLR_ERRORECB_Clear: u32 = 1;
pub const ECB_INTENCLR_ENDECB_Pos: u32 = 0;
pub const ECB_INTENCLR_ENDECB_Msk: u32 = 1;
pub const ECB_INTENCLR_ENDECB_Disabled: u32 = 0;
pub const ECB_INTENCLR_ENDECB_Enabled: u32 = 1;
pub const ECB_INTENCLR_ENDECB_Clear: u32 = 1;
pub const ECB_ECBDATAPTR_ECBDATAPTR_Pos: u32 = 0;
pub const ECB_ECBDATAPTR_ECBDATAPTR_Msk: u32 = 4294967295;
pub const EGU_TASKS_TRIGGER_TASKS_TRIGGER_Pos: u32 = 0;
pub const EGU_TASKS_TRIGGER_TASKS_TRIGGER_Msk: u32 = 1;
pub const EGU_TASKS_TRIGGER_TASKS_TRIGGER_Trigger: u32 = 1;
pub const EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos: u32 = 0;
pub const EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Msk: u32 = 1;
pub const EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_NotGenerated: u32 = 0;
pub const EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Generated: u32 = 1;
pub const EGU_INTEN_TRIGGERED15_Pos: u32 = 15;
pub const EGU_INTEN_TRIGGERED15_Msk: u32 = 32768;
pub const EGU_INTEN_TRIGGERED15_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED15_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED14_Pos: u32 = 14;
pub const EGU_INTEN_TRIGGERED14_Msk: u32 = 16384;
pub const EGU_INTEN_TRIGGERED14_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED14_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED13_Pos: u32 = 13;
pub const EGU_INTEN_TRIGGERED13_Msk: u32 = 8192;
pub const EGU_INTEN_TRIGGERED13_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED13_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED12_Pos: u32 = 12;
pub const EGU_INTEN_TRIGGERED12_Msk: u32 = 4096;
pub const EGU_INTEN_TRIGGERED12_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED12_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED11_Pos: u32 = 11;
pub const EGU_INTEN_TRIGGERED11_Msk: u32 = 2048;
pub const EGU_INTEN_TRIGGERED11_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED11_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED10_Pos: u32 = 10;
pub const EGU_INTEN_TRIGGERED10_Msk: u32 = 1024;
pub const EGU_INTEN_TRIGGERED10_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED10_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED9_Pos: u32 = 9;
pub const EGU_INTEN_TRIGGERED9_Msk: u32 = 512;
pub const EGU_INTEN_TRIGGERED9_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED9_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED8_Pos: u32 = 8;
pub const EGU_INTEN_TRIGGERED8_Msk: u32 = 256;
pub const EGU_INTEN_TRIGGERED8_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED8_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED7_Pos: u32 = 7;
pub const EGU_INTEN_TRIGGERED7_Msk: u32 = 128;
pub const EGU_INTEN_TRIGGERED7_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED7_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED6_Pos: u32 = 6;
pub const EGU_INTEN_TRIGGERED6_Msk: u32 = 64;
pub const EGU_INTEN_TRIGGERED6_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED6_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED5_Pos: u32 = 5;
pub const EGU_INTEN_TRIGGERED5_Msk: u32 = 32;
pub const EGU_INTEN_TRIGGERED5_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED5_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED4_Pos: u32 = 4;
pub const EGU_INTEN_TRIGGERED4_Msk: u32 = 16;
pub const EGU_INTEN_TRIGGERED4_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED4_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED3_Pos: u32 = 3;
pub const EGU_INTEN_TRIGGERED3_Msk: u32 = 8;
pub const EGU_INTEN_TRIGGERED3_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED3_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED2_Pos: u32 = 2;
pub const EGU_INTEN_TRIGGERED2_Msk: u32 = 4;
pub const EGU_INTEN_TRIGGERED2_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED2_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED1_Pos: u32 = 1;
pub const EGU_INTEN_TRIGGERED1_Msk: u32 = 2;
pub const EGU_INTEN_TRIGGERED1_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED1_Enabled: u32 = 1;
pub const EGU_INTEN_TRIGGERED0_Pos: u32 = 0;
pub const EGU_INTEN_TRIGGERED0_Msk: u32 = 1;
pub const EGU_INTEN_TRIGGERED0_Disabled: u32 = 0;
pub const EGU_INTEN_TRIGGERED0_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED15_Pos: u32 = 15;
pub const EGU_INTENSET_TRIGGERED15_Msk: u32 = 32768;
pub const EGU_INTENSET_TRIGGERED15_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED15_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED15_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED14_Pos: u32 = 14;
pub const EGU_INTENSET_TRIGGERED14_Msk: u32 = 16384;
pub const EGU_INTENSET_TRIGGERED14_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED14_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED14_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED13_Pos: u32 = 13;
pub const EGU_INTENSET_TRIGGERED13_Msk: u32 = 8192;
pub const EGU_INTENSET_TRIGGERED13_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED13_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED13_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED12_Pos: u32 = 12;
pub const EGU_INTENSET_TRIGGERED12_Msk: u32 = 4096;
pub const EGU_INTENSET_TRIGGERED12_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED12_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED12_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED11_Pos: u32 = 11;
pub const EGU_INTENSET_TRIGGERED11_Msk: u32 = 2048;
pub const EGU_INTENSET_TRIGGERED11_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED11_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED11_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED10_Pos: u32 = 10;
pub const EGU_INTENSET_TRIGGERED10_Msk: u32 = 1024;
pub const EGU_INTENSET_TRIGGERED10_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED10_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED10_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED9_Pos: u32 = 9;
pub const EGU_INTENSET_TRIGGERED9_Msk: u32 = 512;
pub const EGU_INTENSET_TRIGGERED9_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED9_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED9_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED8_Pos: u32 = 8;
pub const EGU_INTENSET_TRIGGERED8_Msk: u32 = 256;
pub const EGU_INTENSET_TRIGGERED8_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED8_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED8_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED7_Pos: u32 = 7;
pub const EGU_INTENSET_TRIGGERED7_Msk: u32 = 128;
pub const EGU_INTENSET_TRIGGERED7_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED7_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED7_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED6_Pos: u32 = 6;
pub const EGU_INTENSET_TRIGGERED6_Msk: u32 = 64;
pub const EGU_INTENSET_TRIGGERED6_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED6_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED6_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED5_Pos: u32 = 5;
pub const EGU_INTENSET_TRIGGERED5_Msk: u32 = 32;
pub const EGU_INTENSET_TRIGGERED5_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED5_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED5_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED4_Pos: u32 = 4;
pub const EGU_INTENSET_TRIGGERED4_Msk: u32 = 16;
pub const EGU_INTENSET_TRIGGERED4_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED4_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED4_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED3_Pos: u32 = 3;
pub const EGU_INTENSET_TRIGGERED3_Msk: u32 = 8;
pub const EGU_INTENSET_TRIGGERED3_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED3_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED3_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED2_Pos: u32 = 2;
pub const EGU_INTENSET_TRIGGERED2_Msk: u32 = 4;
pub const EGU_INTENSET_TRIGGERED2_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED2_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED2_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED1_Pos: u32 = 1;
pub const EGU_INTENSET_TRIGGERED1_Msk: u32 = 2;
pub const EGU_INTENSET_TRIGGERED1_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED1_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED1_Set: u32 = 1;
pub const EGU_INTENSET_TRIGGERED0_Pos: u32 = 0;
pub const EGU_INTENSET_TRIGGERED0_Msk: u32 = 1;
pub const EGU_INTENSET_TRIGGERED0_Disabled: u32 = 0;
pub const EGU_INTENSET_TRIGGERED0_Enabled: u32 = 1;
pub const EGU_INTENSET_TRIGGERED0_Set: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED15_Pos: u32 = 15;
pub const EGU_INTENCLR_TRIGGERED15_Msk: u32 = 32768;
pub const EGU_INTENCLR_TRIGGERED15_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED15_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED15_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED14_Pos: u32 = 14;
pub const EGU_INTENCLR_TRIGGERED14_Msk: u32 = 16384;
pub const EGU_INTENCLR_TRIGGERED14_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED14_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED14_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED13_Pos: u32 = 13;
pub const EGU_INTENCLR_TRIGGERED13_Msk: u32 = 8192;
pub const EGU_INTENCLR_TRIGGERED13_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED13_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED13_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED12_Pos: u32 = 12;
pub const EGU_INTENCLR_TRIGGERED12_Msk: u32 = 4096;
pub const EGU_INTENCLR_TRIGGERED12_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED12_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED12_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED11_Pos: u32 = 11;
pub const EGU_INTENCLR_TRIGGERED11_Msk: u32 = 2048;
pub const EGU_INTENCLR_TRIGGERED11_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED11_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED11_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED10_Pos: u32 = 10;
pub const EGU_INTENCLR_TRIGGERED10_Msk: u32 = 1024;
pub const EGU_INTENCLR_TRIGGERED10_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED10_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED10_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED9_Pos: u32 = 9;
pub const EGU_INTENCLR_TRIGGERED9_Msk: u32 = 512;
pub const EGU_INTENCLR_TRIGGERED9_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED9_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED9_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED8_Pos: u32 = 8;
pub const EGU_INTENCLR_TRIGGERED8_Msk: u32 = 256;
pub const EGU_INTENCLR_TRIGGERED8_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED8_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED8_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED7_Pos: u32 = 7;
pub const EGU_INTENCLR_TRIGGERED7_Msk: u32 = 128;
pub const EGU_INTENCLR_TRIGGERED7_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED7_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED7_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED6_Pos: u32 = 6;
pub const EGU_INTENCLR_TRIGGERED6_Msk: u32 = 64;
pub const EGU_INTENCLR_TRIGGERED6_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED6_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED6_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED5_Pos: u32 = 5;
pub const EGU_INTENCLR_TRIGGERED5_Msk: u32 = 32;
pub const EGU_INTENCLR_TRIGGERED5_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED5_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED5_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED4_Pos: u32 = 4;
pub const EGU_INTENCLR_TRIGGERED4_Msk: u32 = 16;
pub const EGU_INTENCLR_TRIGGERED4_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED4_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED4_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED3_Pos: u32 = 3;
pub const EGU_INTENCLR_TRIGGERED3_Msk: u32 = 8;
pub const EGU_INTENCLR_TRIGGERED3_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED3_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED3_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED2_Pos: u32 = 2;
pub const EGU_INTENCLR_TRIGGERED2_Msk: u32 = 4;
pub const EGU_INTENCLR_TRIGGERED2_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED2_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED2_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED1_Pos: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED1_Msk: u32 = 2;
pub const EGU_INTENCLR_TRIGGERED1_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED1_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED1_Clear: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED0_Pos: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED0_Msk: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED0_Disabled: u32 = 0;
pub const EGU_INTENCLR_TRIGGERED0_Enabled: u32 = 1;
pub const EGU_INTENCLR_TRIGGERED0_Clear: u32 = 1;
pub const FICR_CODEPAGESIZE_CODEPAGESIZE_Pos: u32 = 0;
pub const FICR_CODEPAGESIZE_CODEPAGESIZE_Msk: u32 = 4294967295;
pub const FICR_CODESIZE_CODESIZE_Pos: u32 = 0;
pub const FICR_CODESIZE_CODESIZE_Msk: u32 = 4294967295;
pub const FICR_DEVICEID_DEVICEID_Pos: u32 = 0;
pub const FICR_DEVICEID_DEVICEID_Msk: u32 = 4294967295;
pub const FICR_ER_ER_Pos: u32 = 0;
pub const FICR_ER_ER_Msk: u32 = 4294967295;
pub const FICR_IR_IR_Pos: u32 = 0;
pub const FICR_IR_IR_Msk: u32 = 4294967295;
pub const FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos: u32 = 0;
pub const FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Msk: u32 = 1;
pub const FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Public: u32 = 0;
pub const FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Random: u32 = 1;
pub const FICR_DEVICEADDR_DEVICEADDR_Pos: u32 = 0;
pub const FICR_DEVICEADDR_DEVICEADDR_Msk: u32 = 4294967295;
pub const FICR_INFO_PART_PART_Pos: u32 = 0;
pub const FICR_INFO_PART_PART_Msk: u32 = 4294967295;
pub const FICR_INFO_PART_PART_N52820: u32 = 337952;
pub const FICR_INFO_PART_PART_N52833: u32 = 337971;
pub const FICR_INFO_PART_PART_N52840: u32 = 337984;
pub const FICR_INFO_PART_PART_Unspecified: u32 = 4294967295;
pub const FICR_INFO_VARIANT_VARIANT_Pos: u32 = 0;
pub const FICR_INFO_VARIANT_VARIANT_Msk: u32 = 4294967295;
pub const FICR_INFO_VARIANT_VARIANT_AAAA: u32 = 1094795585;
pub const FICR_INFO_VARIANT_VARIANT_AAAB: u32 = 1094795586;
pub const FICR_INFO_VARIANT_VARIANT_AABA: u32 = 1094795841;
pub const FICR_INFO_VARIANT_VARIANT_AABB: u32 = 1094795842;
pub const FICR_INFO_VARIANT_VARIANT_AAC0: u32 = 1094796080;
pub const FICR_INFO_VARIANT_VARIANT_AACA: u32 = 1094796097;
pub const FICR_INFO_VARIANT_VARIANT_AAD0: u32 = 1094796336;
pub const FICR_INFO_VARIANT_VARIANT_AAD1: u32 = 1094796337;
pub const FICR_INFO_VARIANT_VARIANT_AADA: u32 = 1094796353;
pub const FICR_INFO_VARIANT_VARIANT_AAEA: u32 = 1094796609;
pub const FICR_INFO_VARIANT_VARIANT_AAF0: u32 = 1094796848;
pub const FICR_INFO_VARIANT_VARIANT_AAFA: u32 = 1094796865;
pub const FICR_INFO_VARIANT_VARIANT_BAAA: u32 = 1111572801;
pub const FICR_INFO_VARIANT_VARIANT_CAAA: u32 = 1128350017;
pub const FICR_INFO_VARIANT_VARIANT_Unspecified: u32 = 4294967295;
pub const FICR_INFO_PACKAGE_PACKAGE_Pos: u32 = 0;
pub const FICR_INFO_PACKAGE_PACKAGE_Msk: u32 = 4294967295;
pub const FICR_INFO_PACKAGE_PACKAGE_QF: u32 = 8192;
pub const FICR_INFO_PACKAGE_PACKAGE_QI: u32 = 8196;
pub const FICR_INFO_PACKAGE_PACKAGE_CK: u32 = 8197;
pub const FICR_INFO_PACKAGE_PACKAGE_Unspecified: u32 = 4294967295;
pub const FICR_INFO_RAM_RAM_Pos: u32 = 0;
pub const FICR_INFO_RAM_RAM_Msk: u32 = 4294967295;
pub const FICR_INFO_RAM_RAM_K16: u32 = 16;
pub const FICR_INFO_RAM_RAM_K32: u32 = 32;
pub const FICR_INFO_RAM_RAM_K64: u32 = 64;
pub const FICR_INFO_RAM_RAM_K128: u32 = 128;
pub const FICR_INFO_RAM_RAM_K256: u32 = 256;
pub const FICR_INFO_RAM_RAM_Unspecified: u32 = 4294967295;
pub const FICR_INFO_FLASH_FLASH_Pos: u32 = 0;
pub const FICR_INFO_FLASH_FLASH_Msk: u32 = 4294967295;
pub const FICR_INFO_FLASH_FLASH_K128: u32 = 128;
pub const FICR_INFO_FLASH_FLASH_K256: u32 = 256;
pub const FICR_INFO_FLASH_FLASH_K512: u32 = 512;
pub const FICR_INFO_FLASH_FLASH_K1024: u32 = 1024;
pub const FICR_INFO_FLASH_FLASH_K2048: u32 = 2048;
pub const FICR_INFO_FLASH_FLASH_Unspecified: u32 = 4294967295;
pub const FICR_PRODTEST_PRODTEST_Pos: u32 = 0;
pub const FICR_PRODTEST_PRODTEST_Msk: u32 = 4294967295;
pub const FICR_PRODTEST_PRODTEST_Done: u32 = 3141677471;
pub const FICR_PRODTEST_PRODTEST_NotDone: u32 = 4294967295;
pub const FICR_TEMP_A0_A_Pos: u32 = 0;
pub const FICR_TEMP_A0_A_Msk: u32 = 4095;
pub const FICR_TEMP_A1_A_Pos: u32 = 0;
pub const FICR_TEMP_A1_A_Msk: u32 = 4095;
pub const FICR_TEMP_A2_A_Pos: u32 = 0;
pub const FICR_TEMP_A2_A_Msk: u32 = 4095;
pub const FICR_TEMP_A3_A_Pos: u32 = 0;
pub const FICR_TEMP_A3_A_Msk: u32 = 4095;
pub const FICR_TEMP_A4_A_Pos: u32 = 0;
pub const FICR_TEMP_A4_A_Msk: u32 = 4095;
pub const FICR_TEMP_A5_A_Pos: u32 = 0;
pub const FICR_TEMP_A5_A_Msk: u32 = 4095;
pub const FICR_TEMP_B0_B_Pos: u32 = 0;
pub const FICR_TEMP_B0_B_Msk: u32 = 16383;
pub const FICR_TEMP_B1_B_Pos: u32 = 0;
pub const FICR_TEMP_B1_B_Msk: u32 = 16383;
pub const FICR_TEMP_B2_B_Pos: u32 = 0;
pub const FICR_TEMP_B2_B_Msk: u32 = 16383;
pub const FICR_TEMP_B3_B_Pos: u32 = 0;
pub const FICR_TEMP_B3_B_Msk: u32 = 16383;
pub const FICR_TEMP_B4_B_Pos: u32 = 0;
pub const FICR_TEMP_B4_B_Msk: u32 = 16383;
pub const FICR_TEMP_B5_B_Pos: u32 = 0;
pub const FICR_TEMP_B5_B_Msk: u32 = 16383;
pub const FICR_TEMP_T0_T_Pos: u32 = 0;
pub const FICR_TEMP_T0_T_Msk: u32 = 255;
pub const FICR_TEMP_T1_T_Pos: u32 = 0;
pub const FICR_TEMP_T1_T_Msk: u32 = 255;
pub const FICR_TEMP_T2_T_Pos: u32 = 0;
pub const FICR_TEMP_T2_T_Msk: u32 = 255;
pub const FICR_TEMP_T3_T_Pos: u32 = 0;
pub const FICR_TEMP_T3_T_Msk: u32 = 255;
pub const FICR_TEMP_T4_T_Pos: u32 = 0;
pub const FICR_TEMP_T4_T_Msk: u32 = 255;
pub const FICR_NFC_TAGHEADER0_UD3_Pos: u32 = 24;
pub const FICR_NFC_TAGHEADER0_UD3_Msk: u32 = 4278190080;
pub const FICR_NFC_TAGHEADER0_UD2_Pos: u32 = 16;
pub const FICR_NFC_TAGHEADER0_UD2_Msk: u32 = 16711680;
pub const FICR_NFC_TAGHEADER0_UD1_Pos: u32 = 8;
pub const FICR_NFC_TAGHEADER0_UD1_Msk: u32 = 65280;
pub const FICR_NFC_TAGHEADER0_MFGID_Pos: u32 = 0;
pub const FICR_NFC_TAGHEADER0_MFGID_Msk: u32 = 255;
pub const FICR_NFC_TAGHEADER1_UD7_Pos: u32 = 24;
pub const FICR_NFC_TAGHEADER1_UD7_Msk: u32 = 4278190080;
pub const FICR_NFC_TAGHEADER1_UD6_Pos: u32 = 16;
pub const FICR_NFC_TAGHEADER1_UD6_Msk: u32 = 16711680;
pub const FICR_NFC_TAGHEADER1_UD5_Pos: u32 = 8;
pub const FICR_NFC_TAGHEADER1_UD5_Msk: u32 = 65280;
pub const FICR_NFC_TAGHEADER1_UD4_Pos: u32 = 0;
pub const FICR_NFC_TAGHEADER1_UD4_Msk: u32 = 255;
pub const FICR_NFC_TAGHEADER2_UD11_Pos: u32 = 24;
pub const FICR_NFC_TAGHEADER2_UD11_Msk: u32 = 4278190080;
pub const FICR_NFC_TAGHEADER2_UD10_Pos: u32 = 16;
pub const FICR_NFC_TAGHEADER2_UD10_Msk: u32 = 16711680;
pub const FICR_NFC_TAGHEADER2_UD9_Pos: u32 = 8;
pub const FICR_NFC_TAGHEADER2_UD9_Msk: u32 = 65280;
pub const FICR_NFC_TAGHEADER2_UD8_Pos: u32 = 0;
pub const FICR_NFC_TAGHEADER2_UD8_Msk: u32 = 255;
pub const FICR_NFC_TAGHEADER3_UD15_Pos: u32 = 24;
pub const FICR_NFC_TAGHEADER3_UD15_Msk: u32 = 4278190080;
pub const FICR_NFC_TAGHEADER3_UD14_Pos: u32 = 16;
pub const FICR_NFC_TAGHEADER3_UD14_Msk: u32 = 16711680;
pub const FICR_NFC_TAGHEADER3_UD13_Pos: u32 = 8;
pub const FICR_NFC_TAGHEADER3_UD13_Msk: u32 = 65280;
pub const FICR_NFC_TAGHEADER3_UD12_Pos: u32 = 0;
pub const FICR_NFC_TAGHEADER3_UD12_Msk: u32 = 255;
pub const FICR_TRNG90B_BYTES_BYTES_Pos: u32 = 0;
pub const FICR_TRNG90B_BYTES_BYTES_Msk: u32 = 4294967295;
pub const FICR_TRNG90B_RCCUTOFF_RCCUTOFF_Pos: u32 = 0;
pub const FICR_TRNG90B_RCCUTOFF_RCCUTOFF_Msk: u32 = 4294967295;
pub const FICR_TRNG90B_APCUTOFF_APCUTOFF_Pos: u32 = 0;
pub const FICR_TRNG90B_APCUTOFF_APCUTOFF_Msk: u32 = 4294967295;
pub const FICR_TRNG90B_STARTUP_STARTUP_Pos: u32 = 0;
pub const FICR_TRNG90B_STARTUP_STARTUP_Msk: u32 = 4294967295;
pub const FICR_TRNG90B_ROSC1_ROSC1_Pos: u32 = 0;
pub const FICR_TRNG90B_ROSC1_ROSC1_Msk: u32 = 4294967295;
pub const FICR_TRNG90B_ROSC2_ROSC2_Pos: u32 = 0;
pub const FICR_TRNG90B_ROSC2_ROSC2_Msk: u32 = 4294967295;
pub const FICR_TRNG90B_ROSC3_ROSC3_Pos: u32 = 0;
pub const FICR_TRNG90B_ROSC3_ROSC3_Msk: u32 = 4294967295;
pub const FICR_TRNG90B_ROSC4_ROSC4_Pos: u32 = 0;
pub const FICR_TRNG90B_ROSC4_ROSC4_Msk: u32 = 4294967295;
pub const GPIOTE_TASKS_OUT_TASKS_OUT_Pos: u32 = 0;
pub const GPIOTE_TASKS_OUT_TASKS_OUT_Msk: u32 = 1;
pub const GPIOTE_TASKS_OUT_TASKS_OUT_Trigger: u32 = 1;
pub const GPIOTE_TASKS_SET_TASKS_SET_Pos: u32 = 0;
pub const GPIOTE_TASKS_SET_TASKS_SET_Msk: u32 = 1;
pub const GPIOTE_TASKS_SET_TASKS_SET_Trigger: u32 = 1;
pub const GPIOTE_TASKS_CLR_TASKS_CLR_Pos: u32 = 0;
pub const GPIOTE_TASKS_CLR_TASKS_CLR_Msk: u32 = 1;
pub const GPIOTE_TASKS_CLR_TASKS_CLR_Trigger: u32 = 1;
pub const GPIOTE_EVENTS_IN_EVENTS_IN_Pos: u32 = 0;
pub const GPIOTE_EVENTS_IN_EVENTS_IN_Msk: u32 = 1;
pub const GPIOTE_EVENTS_IN_EVENTS_IN_NotGenerated: u32 = 0;
pub const GPIOTE_EVENTS_IN_EVENTS_IN_Generated: u32 = 1;
pub const GPIOTE_EVENTS_PORT_EVENTS_PORT_Pos: u32 = 0;
pub const GPIOTE_EVENTS_PORT_EVENTS_PORT_Msk: u32 = 1;
pub const GPIOTE_EVENTS_PORT_EVENTS_PORT_NotGenerated: u32 = 0;
pub const GPIOTE_EVENTS_PORT_EVENTS_PORT_Generated: u32 = 1;
pub const GPIOTE_INTENSET_PORT_Pos: u32 = 31;
pub const GPIOTE_INTENSET_PORT_Msk: u32 = 2147483648;
pub const GPIOTE_INTENSET_PORT_Disabled: u32 = 0;
pub const GPIOTE_INTENSET_PORT_Enabled: u32 = 1;
pub const GPIOTE_INTENSET_PORT_Set: u32 = 1;
pub const GPIOTE_INTENSET_IN7_Pos: u32 = 7;
pub const GPIOTE_INTENSET_IN7_Msk: u32 = 128;
pub const GPIOTE_INTENSET_IN7_Disabled: u32 = 0;
pub const GPIOTE_INTENSET_IN7_Enabled: u32 = 1;
pub const GPIOTE_INTENSET_IN7_Set: u32 = 1;
pub const GPIOTE_INTENSET_IN6_Pos: u32 = 6;
pub const GPIOTE_INTENSET_IN6_Msk: u32 = 64;
pub const GPIOTE_INTENSET_IN6_Disabled: u32 = 0;
pub const GPIOTE_INTENSET_IN6_Enabled: u32 = 1;
pub const GPIOTE_INTENSET_IN6_Set: u32 = 1;
pub const GPIOTE_INTENSET_IN5_Pos: u32 = 5;
pub const GPIOTE_INTENSET_IN5_Msk: u32 = 32;
pub const GPIOTE_INTENSET_IN5_Disabled: u32 = 0;
pub const GPIOTE_INTENSET_IN5_Enabled: u32 = 1;
pub const GPIOTE_INTENSET_IN5_Set: u32 = 1;
pub const GPIOTE_INTENSET_IN4_Pos: u32 = 4;
pub const GPIOTE_INTENSET_IN4_Msk: u32 = 16;
pub const GPIOTE_INTENSET_IN4_Disabled: u32 = 0;
pub const GPIOTE_INTENSET_IN4_Enabled: u32 = 1;
pub const GPIOTE_INTENSET_IN4_Set: u32 = 1;
pub const GPIOTE_INTENSET_IN3_Pos: u32 = 3;
pub const GPIOTE_INTENSET_IN3_Msk: u32 = 8;
pub const GPIOTE_INTENSET_IN3_Disabled: u32 = 0;
pub const GPIOTE_INTENSET_IN3_Enabled: u32 = 1;
pub const GPIOTE_INTENSET_IN3_Set: u32 = 1;
pub const GPIOTE_INTENSET_IN2_Pos: u32 = 2;
pub const GPIOTE_INTENSET_IN2_Msk: u32 = 4;
pub const GPIOTE_INTENSET_IN2_Disabled: u32 = 0;
pub const GPIOTE_INTENSET_IN2_Enabled: u32 = 1;
pub const GPIOTE_INTENSET_IN2_Set: u32 = 1;
pub const GPIOTE_INTENSET_IN1_Pos: u32 = 1;
pub const GPIOTE_INTENSET_IN1_Msk: u32 = 2;
pub const GPIOTE_INTENSET_IN1_Disabled: u32 = 0;
pub const GPIOTE_INTENSET_IN1_Enabled: u32 = 1;
pub const GPIOTE_INTENSET_IN1_Set: u32 = 1;
pub const GPIOTE_INTENSET_IN0_Pos: u32 = 0;
pub const GPIOTE_INTENSET_IN0_Msk: u32 = 1;
pub const GPIOTE_INTENSET_IN0_Disabled: u32 = 0;
pub const GPIOTE_INTENSET_IN0_Enabled: u32 = 1;
pub const GPIOTE_INTENSET_IN0_Set: u32 = 1;
pub const GPIOTE_INTENCLR_PORT_Pos: u32 = 31;
pub const GPIOTE_INTENCLR_PORT_Msk: u32 = 2147483648;
pub const GPIOTE_INTENCLR_PORT_Disabled: u32 = 0;
pub const GPIOTE_INTENCLR_PORT_Enabled: u32 = 1;
pub const GPIOTE_INTENCLR_PORT_Clear: u32 = 1;
pub const GPIOTE_INTENCLR_IN7_Pos: u32 = 7;
pub const GPIOTE_INTENCLR_IN7_Msk: u32 = 128;
pub const GPIOTE_INTENCLR_IN7_Disabled: u32 = 0;
pub const GPIOTE_INTENCLR_IN7_Enabled: u32 = 1;
pub const GPIOTE_INTENCLR_IN7_Clear: u32 = 1;
pub const GPIOTE_INTENCLR_IN6_Pos: u32 = 6;
pub const GPIOTE_INTENCLR_IN6_Msk: u32 = 64;
pub const GPIOTE_INTENCLR_IN6_Disabled: u32 = 0;
pub const GPIOTE_INTENCLR_IN6_Enabled: u32 = 1;
pub const GPIOTE_INTENCLR_IN6_Clear: u32 = 1;
pub const GPIOTE_INTENCLR_IN5_Pos: u32 = 5;
pub const GPIOTE_INTENCLR_IN5_Msk: u32 = 32;
pub const GPIOTE_INTENCLR_IN5_Disabled: u32 = 0;
pub const GPIOTE_INTENCLR_IN5_Enabled: u32 = 1;
pub const GPIOTE_INTENCLR_IN5_Clear: u32 = 1;
pub const GPIOTE_INTENCLR_IN4_Pos: u32 = 4;
pub const GPIOTE_INTENCLR_IN4_Msk: u32 = 16;
pub const GPIOTE_INTENCLR_IN4_Disabled: u32 = 0;
pub const GPIOTE_INTENCLR_IN4_Enabled: u32 = 1;
pub const GPIOTE_INTENCLR_IN4_Clear: u32 = 1;
pub const GPIOTE_INTENCLR_IN3_Pos: u32 = 3;
pub const GPIOTE_INTENCLR_IN3_Msk: u32 = 8;
pub const GPIOTE_INTENCLR_IN3_Disabled: u32 = 0;
pub const GPIOTE_INTENCLR_IN3_Enabled: u32 = 1;
pub const GPIOTE_INTENCLR_IN3_Clear: u32 = 1;
pub const GPIOTE_INTENCLR_IN2_Pos: u32 = 2;
pub const GPIOTE_INTENCLR_IN2_Msk: u32 = 4;
pub const GPIOTE_INTENCLR_IN2_Disabled: u32 = 0;
pub const GPIOTE_INTENCLR_IN2_Enabled: u32 = 1;
pub const GPIOTE_INTENCLR_IN2_Clear: u32 = 1;
pub const GPIOTE_INTENCLR_IN1_Pos: u32 = 1;
pub const GPIOTE_INTENCLR_IN1_Msk: u32 = 2;
pub const GPIOTE_INTENCLR_IN1_Disabled: u32 = 0;
pub const GPIOTE_INTENCLR_IN1_Enabled: u32 = 1;
pub const GPIOTE_INTENCLR_IN1_Clear: u32 = 1;
pub const GPIOTE_INTENCLR_IN0_Pos: u32 = 0;
pub const GPIOTE_INTENCLR_IN0_Msk: u32 = 1;
pub const GPIOTE_INTENCLR_IN0_Disabled: u32 = 0;
pub const GPIOTE_INTENCLR_IN0_Enabled: u32 = 1;
pub const GPIOTE_INTENCLR_IN0_Clear: u32 = 1;
pub const GPIOTE_CONFIG_OUTINIT_Pos: u32 = 20;
pub const GPIOTE_CONFIG_OUTINIT_Msk: u32 = 1048576;
pub const GPIOTE_CONFIG_OUTINIT_Low: u32 = 0;
pub const GPIOTE_CONFIG_OUTINIT_High: u32 = 1;
pub const GPIOTE_CONFIG_POLARITY_Pos: u32 = 16;
pub const GPIOTE_CONFIG_POLARITY_Msk: u32 = 196608;
pub const GPIOTE_CONFIG_POLARITY_None: u32 = 0;
pub const GPIOTE_CONFIG_POLARITY_LoToHi: u32 = 1;
pub const GPIOTE_CONFIG_POLARITY_HiToLo: u32 = 2;
pub const GPIOTE_CONFIG_POLARITY_Toggle: u32 = 3;
pub const GPIOTE_CONFIG_PORT_Pos: u32 = 13;
pub const GPIOTE_CONFIG_PORT_Msk: u32 = 8192;
pub const GPIOTE_CONFIG_PSEL_Pos: u32 = 8;
pub const GPIOTE_CONFIG_PSEL_Msk: u32 = 7936;
pub const GPIOTE_CONFIG_MODE_Pos: u32 = 0;
pub const GPIOTE_CONFIG_MODE_Msk: u32 = 3;
pub const GPIOTE_CONFIG_MODE_Disabled: u32 = 0;
pub const GPIOTE_CONFIG_MODE_Event: u32 = 1;
pub const GPIOTE_CONFIG_MODE_Task: u32 = 3;
pub const I2S_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const I2S_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const I2S_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const I2S_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const I2S_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const I2S_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Pos: u32 = 0;
pub const I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Msk: u32 = 1;
pub const I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_NotGenerated: u32 = 0;
pub const I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Generated: u32 = 1;
pub const I2S_EVENTS_STOPPED_EVENTS_STOPPED_Pos: u32 = 0;
pub const I2S_EVENTS_STOPPED_EVENTS_STOPPED_Msk: u32 = 1;
pub const I2S_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated: u32 = 0;
pub const I2S_EVENTS_STOPPED_EVENTS_STOPPED_Generated: u32 = 1;
pub const I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Pos: u32 = 0;
pub const I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Msk: u32 = 1;
pub const I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_NotGenerated: u32 = 0;
pub const I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Generated: u32 = 1;
pub const I2S_INTEN_TXPTRUPD_Pos: u32 = 5;
pub const I2S_INTEN_TXPTRUPD_Msk: u32 = 32;
pub const I2S_INTEN_TXPTRUPD_Disabled: u32 = 0;
pub const I2S_INTEN_TXPTRUPD_Enabled: u32 = 1;
pub const I2S_INTEN_STOPPED_Pos: u32 = 2;
pub const I2S_INTEN_STOPPED_Msk: u32 = 4;
pub const I2S_INTEN_STOPPED_Disabled: u32 = 0;
pub const I2S_INTEN_STOPPED_Enabled: u32 = 1;
pub const I2S_INTEN_RXPTRUPD_Pos: u32 = 1;
pub const I2S_INTEN_RXPTRUPD_Msk: u32 = 2;
pub const I2S_INTEN_RXPTRUPD_Disabled: u32 = 0;
pub const I2S_INTEN_RXPTRUPD_Enabled: u32 = 1;
pub const I2S_INTENSET_TXPTRUPD_Pos: u32 = 5;
pub const I2S_INTENSET_TXPTRUPD_Msk: u32 = 32;
pub const I2S_INTENSET_TXPTRUPD_Disabled: u32 = 0;
pub const I2S_INTENSET_TXPTRUPD_Enabled: u32 = 1;
pub const I2S_INTENSET_TXPTRUPD_Set: u32 = 1;
pub const I2S_INTENSET_STOPPED_Pos: u32 = 2;
pub const I2S_INTENSET_STOPPED_Msk: u32 = 4;
pub const I2S_INTENSET_STOPPED_Disabled: u32 = 0;
pub const I2S_INTENSET_STOPPED_Enabled: u32 = 1;
pub const I2S_INTENSET_STOPPED_Set: u32 = 1;
pub const I2S_INTENSET_RXPTRUPD_Pos: u32 = 1;
pub const I2S_INTENSET_RXPTRUPD_Msk: u32 = 2;
pub const I2S_INTENSET_RXPTRUPD_Disabled: u32 = 0;
pub const I2S_INTENSET_RXPTRUPD_Enabled: u32 = 1;
pub const I2S_INTENSET_RXPTRUPD_Set: u32 = 1;
pub const I2S_INTENCLR_TXPTRUPD_Pos: u32 = 5;
pub const I2S_INTENCLR_TXPTRUPD_Msk: u32 = 32;
pub const I2S_INTENCLR_TXPTRUPD_Disabled: u32 = 0;
pub const I2S_INTENCLR_TXPTRUPD_Enabled: u32 = 1;
pub const I2S_INTENCLR_TXPTRUPD_Clear: u32 = 1;
pub const I2S_INTENCLR_STOPPED_Pos: u32 = 2;
pub const I2S_INTENCLR_STOPPED_Msk: u32 = 4;
pub const I2S_INTENCLR_STOPPED_Disabled: u32 = 0;
pub const I2S_INTENCLR_STOPPED_Enabled: u32 = 1;
pub const I2S_INTENCLR_STOPPED_Clear: u32 = 1;
pub const I2S_INTENCLR_RXPTRUPD_Pos: u32 = 1;
pub const I2S_INTENCLR_RXPTRUPD_Msk: u32 = 2;
pub const I2S_INTENCLR_RXPTRUPD_Disabled: u32 = 0;
pub const I2S_INTENCLR_RXPTRUPD_Enabled: u32 = 1;
pub const I2S_INTENCLR_RXPTRUPD_Clear: u32 = 1;
pub const I2S_ENABLE_ENABLE_Pos: u32 = 0;
pub const I2S_ENABLE_ENABLE_Msk: u32 = 1;
pub const I2S_ENABLE_ENABLE_Disabled: u32 = 0;
pub const I2S_ENABLE_ENABLE_Enabled: u32 = 1;
pub const I2S_CONFIG_MODE_MODE_Pos: u32 = 0;
pub const I2S_CONFIG_MODE_MODE_Msk: u32 = 1;
pub const I2S_CONFIG_MODE_MODE_Master: u32 = 0;
pub const I2S_CONFIG_MODE_MODE_Slave: u32 = 1;
pub const I2S_CONFIG_RXEN_RXEN_Pos: u32 = 0;
pub const I2S_CONFIG_RXEN_RXEN_Msk: u32 = 1;
pub const I2S_CONFIG_RXEN_RXEN_Disabled: u32 = 0;
pub const I2S_CONFIG_RXEN_RXEN_Enabled: u32 = 1;
pub const I2S_CONFIG_TXEN_TXEN_Pos: u32 = 0;
pub const I2S_CONFIG_TXEN_TXEN_Msk: u32 = 1;
pub const I2S_CONFIG_TXEN_TXEN_Disabled: u32 = 0;
pub const I2S_CONFIG_TXEN_TXEN_Enabled: u32 = 1;
pub const I2S_CONFIG_MCKEN_MCKEN_Pos: u32 = 0;
pub const I2S_CONFIG_MCKEN_MCKEN_Msk: u32 = 1;
pub const I2S_CONFIG_MCKEN_MCKEN_Disabled: u32 = 0;
pub const I2S_CONFIG_MCKEN_MCKEN_Enabled: u32 = 1;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_Pos: u32 = 0;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_Msk: u32 = 4294967295;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV125: u32 = 34340864;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV63: u32 = 68157440;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV42: u32 = 100663296;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV32: u32 = 134217728;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV31: u32 = 138412032;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV30: u32 = 142606336;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV23: u32 = 184549376;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV21: u32 = 201326592;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV16: u32 = 268435456;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV15: u32 = 285212672;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV11: u32 = 369098752;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV10: u32 = 402653184;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV8: u32 = 536870912;
pub const I2S_CONFIG_RATIO_RATIO_Pos: u32 = 0;
pub const I2S_CONFIG_RATIO_RATIO_Msk: u32 = 15;
pub const I2S_CONFIG_RATIO_RATIO_32X: u32 = 0;
pub const I2S_CONFIG_RATIO_RATIO_48X: u32 = 1;
pub const I2S_CONFIG_RATIO_RATIO_64X: u32 = 2;
pub const I2S_CONFIG_RATIO_RATIO_96X: u32 = 3;
pub const I2S_CONFIG_RATIO_RATIO_128X: u32 = 4;
pub const I2S_CONFIG_RATIO_RATIO_192X: u32 = 5;
pub const I2S_CONFIG_RATIO_RATIO_256X: u32 = 6;
pub const I2S_CONFIG_RATIO_RATIO_384X: u32 = 7;
pub const I2S_CONFIG_RATIO_RATIO_512X: u32 = 8;
pub const I2S_CONFIG_SWIDTH_SWIDTH_Pos: u32 = 0;
pub const I2S_CONFIG_SWIDTH_SWIDTH_Msk: u32 = 3;
pub const I2S_CONFIG_SWIDTH_SWIDTH_8Bit: u32 = 0;
pub const I2S_CONFIG_SWIDTH_SWIDTH_16Bit: u32 = 1;
pub const I2S_CONFIG_SWIDTH_SWIDTH_24Bit: u32 = 2;
pub const I2S_CONFIG_ALIGN_ALIGN_Pos: u32 = 0;
pub const I2S_CONFIG_ALIGN_ALIGN_Msk: u32 = 1;
pub const I2S_CONFIG_ALIGN_ALIGN_Left: u32 = 0;
pub const I2S_CONFIG_ALIGN_ALIGN_Right: u32 = 1;
pub const I2S_CONFIG_FORMAT_FORMAT_Pos: u32 = 0;
pub const I2S_CONFIG_FORMAT_FORMAT_Msk: u32 = 1;
pub const I2S_CONFIG_FORMAT_FORMAT_I2S: u32 = 0;
pub const I2S_CONFIG_FORMAT_FORMAT_Aligned: u32 = 1;
pub const I2S_CONFIG_CHANNELS_CHANNELS_Pos: u32 = 0;
pub const I2S_CONFIG_CHANNELS_CHANNELS_Msk: u32 = 3;
pub const I2S_CONFIG_CHANNELS_CHANNELS_Stereo: u32 = 0;
pub const I2S_CONFIG_CHANNELS_CHANNELS_Left: u32 = 1;
pub const I2S_CONFIG_CHANNELS_CHANNELS_Right: u32 = 2;
pub const I2S_RXD_PTR_PTR_Pos: u32 = 0;
pub const I2S_RXD_PTR_PTR_Msk: u32 = 4294967295;
pub const I2S_TXD_PTR_PTR_Pos: u32 = 0;
pub const I2S_TXD_PTR_PTR_Msk: u32 = 4294967295;
pub const I2S_RXTXD_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const I2S_RXTXD_MAXCNT_MAXCNT_Msk: u32 = 16383;
pub const I2S_PSEL_MCK_CONNECT_Pos: u32 = 31;
pub const I2S_PSEL_MCK_CONNECT_Msk: u32 = 2147483648;
pub const I2S_PSEL_MCK_CONNECT_Connected: u32 = 0;
pub const I2S_PSEL_MCK_CONNECT_Disconnected: u32 = 1;
pub const I2S_PSEL_MCK_PORT_Pos: u32 = 5;
pub const I2S_PSEL_MCK_PORT_Msk: u32 = 32;
pub const I2S_PSEL_MCK_PIN_Pos: u32 = 0;
pub const I2S_PSEL_MCK_PIN_Msk: u32 = 31;
pub const I2S_PSEL_SCK_CONNECT_Pos: u32 = 31;
pub const I2S_PSEL_SCK_CONNECT_Msk: u32 = 2147483648;
pub const I2S_PSEL_SCK_CONNECT_Connected: u32 = 0;
pub const I2S_PSEL_SCK_CONNECT_Disconnected: u32 = 1;
pub const I2S_PSEL_SCK_PORT_Pos: u32 = 5;
pub const I2S_PSEL_SCK_PORT_Msk: u32 = 32;
pub const I2S_PSEL_SCK_PIN_Pos: u32 = 0;
pub const I2S_PSEL_SCK_PIN_Msk: u32 = 31;
pub const I2S_PSEL_LRCK_CONNECT_Pos: u32 = 31;
pub const I2S_PSEL_LRCK_CONNECT_Msk: u32 = 2147483648;
pub const I2S_PSEL_LRCK_CONNECT_Connected: u32 = 0;
pub const I2S_PSEL_LRCK_CONNECT_Disconnected: u32 = 1;
pub const I2S_PSEL_LRCK_PORT_Pos: u32 = 5;
pub const I2S_PSEL_LRCK_PORT_Msk: u32 = 32;
pub const I2S_PSEL_LRCK_PIN_Pos: u32 = 0;
pub const I2S_PSEL_LRCK_PIN_Msk: u32 = 31;
pub const I2S_PSEL_SDIN_CONNECT_Pos: u32 = 31;
pub const I2S_PSEL_SDIN_CONNECT_Msk: u32 = 2147483648;
pub const I2S_PSEL_SDIN_CONNECT_Connected: u32 = 0;
pub const I2S_PSEL_SDIN_CONNECT_Disconnected: u32 = 1;
pub const I2S_PSEL_SDIN_PORT_Pos: u32 = 5;
pub const I2S_PSEL_SDIN_PORT_Msk: u32 = 32;
pub const I2S_PSEL_SDIN_PIN_Pos: u32 = 0;
pub const I2S_PSEL_SDIN_PIN_Msk: u32 = 31;
pub const I2S_PSEL_SDOUT_CONNECT_Pos: u32 = 31;
pub const I2S_PSEL_SDOUT_CONNECT_Msk: u32 = 2147483648;
pub const I2S_PSEL_SDOUT_CONNECT_Connected: u32 = 0;
pub const I2S_PSEL_SDOUT_CONNECT_Disconnected: u32 = 1;
pub const I2S_PSEL_SDOUT_PORT_Pos: u32 = 5;
pub const I2S_PSEL_SDOUT_PORT_Msk: u32 = 32;
pub const I2S_PSEL_SDOUT_PIN_Pos: u32 = 0;
pub const I2S_PSEL_SDOUT_PIN_Msk: u32 = 31;
pub const LPCOMP_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const LPCOMP_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const LPCOMP_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const LPCOMP_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const LPCOMP_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const LPCOMP_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos: u32 = 0;
pub const LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Msk: u32 = 1;
pub const LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Trigger: u32 = 1;
pub const LPCOMP_EVENTS_READY_EVENTS_READY_Pos: u32 = 0;
pub const LPCOMP_EVENTS_READY_EVENTS_READY_Msk: u32 = 1;
pub const LPCOMP_EVENTS_READY_EVENTS_READY_NotGenerated: u32 = 0;
pub const LPCOMP_EVENTS_READY_EVENTS_READY_Generated: u32 = 1;
pub const LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Pos: u32 = 0;
pub const LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Msk: u32 = 1;
pub const LPCOMP_EVENTS_DOWN_EVENTS_DOWN_NotGenerated: u32 = 0;
pub const LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Generated: u32 = 1;
pub const LPCOMP_EVENTS_UP_EVENTS_UP_Pos: u32 = 0;
pub const LPCOMP_EVENTS_UP_EVENTS_UP_Msk: u32 = 1;
pub const LPCOMP_EVENTS_UP_EVENTS_UP_NotGenerated: u32 = 0;
pub const LPCOMP_EVENTS_UP_EVENTS_UP_Generated: u32 = 1;
pub const LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Pos: u32 = 0;
pub const LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Msk: u32 = 1;
pub const LPCOMP_EVENTS_CROSS_EVENTS_CROSS_NotGenerated: u32 = 0;
pub const LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Generated: u32 = 1;
pub const LPCOMP_SHORTS_CROSS_STOP_Pos: u32 = 4;
pub const LPCOMP_SHORTS_CROSS_STOP_Msk: u32 = 16;
pub const LPCOMP_SHORTS_CROSS_STOP_Disabled: u32 = 0;
pub const LPCOMP_SHORTS_CROSS_STOP_Enabled: u32 = 1;
pub const LPCOMP_SHORTS_UP_STOP_Pos: u32 = 3;
pub const LPCOMP_SHORTS_UP_STOP_Msk: u32 = 8;
pub const LPCOMP_SHORTS_UP_STOP_Disabled: u32 = 0;
pub const LPCOMP_SHORTS_UP_STOP_Enabled: u32 = 1;
pub const LPCOMP_SHORTS_DOWN_STOP_Pos: u32 = 2;
pub const LPCOMP_SHORTS_DOWN_STOP_Msk: u32 = 4;
pub const LPCOMP_SHORTS_DOWN_STOP_Disabled: u32 = 0;
pub const LPCOMP_SHORTS_DOWN_STOP_Enabled: u32 = 1;
pub const LPCOMP_SHORTS_READY_STOP_Pos: u32 = 1;
pub const LPCOMP_SHORTS_READY_STOP_Msk: u32 = 2;
pub const LPCOMP_SHORTS_READY_STOP_Disabled: u32 = 0;
pub const LPCOMP_SHORTS_READY_STOP_Enabled: u32 = 1;
pub const LPCOMP_SHORTS_READY_SAMPLE_Pos: u32 = 0;
pub const LPCOMP_SHORTS_READY_SAMPLE_Msk: u32 = 1;
pub const LPCOMP_SHORTS_READY_SAMPLE_Disabled: u32 = 0;
pub const LPCOMP_SHORTS_READY_SAMPLE_Enabled: u32 = 1;
pub const LPCOMP_INTENSET_CROSS_Pos: u32 = 3;
pub const LPCOMP_INTENSET_CROSS_Msk: u32 = 8;
pub const LPCOMP_INTENSET_CROSS_Disabled: u32 = 0;
pub const LPCOMP_INTENSET_CROSS_Enabled: u32 = 1;
pub const LPCOMP_INTENSET_CROSS_Set: u32 = 1;
pub const LPCOMP_INTENSET_UP_Pos: u32 = 2;
pub const LPCOMP_INTENSET_UP_Msk: u32 = 4;
pub const LPCOMP_INTENSET_UP_Disabled: u32 = 0;
pub const LPCOMP_INTENSET_UP_Enabled: u32 = 1;
pub const LPCOMP_INTENSET_UP_Set: u32 = 1;
pub const LPCOMP_INTENSET_DOWN_Pos: u32 = 1;
pub const LPCOMP_INTENSET_DOWN_Msk: u32 = 2;
pub const LPCOMP_INTENSET_DOWN_Disabled: u32 = 0;
pub const LPCOMP_INTENSET_DOWN_Enabled: u32 = 1;
pub const LPCOMP_INTENSET_DOWN_Set: u32 = 1;
pub const LPCOMP_INTENSET_READY_Pos: u32 = 0;
pub const LPCOMP_INTENSET_READY_Msk: u32 = 1;
pub const LPCOMP_INTENSET_READY_Disabled: u32 = 0;
pub const LPCOMP_INTENSET_READY_Enabled: u32 = 1;
pub const LPCOMP_INTENSET_READY_Set: u32 = 1;
pub const LPCOMP_INTENCLR_CROSS_Pos: u32 = 3;
pub const LPCOMP_INTENCLR_CROSS_Msk: u32 = 8;
pub const LPCOMP_INTENCLR_CROSS_Disabled: u32 = 0;
pub const LPCOMP_INTENCLR_CROSS_Enabled: u32 = 1;
pub const LPCOMP_INTENCLR_CROSS_Clear: u32 = 1;
pub const LPCOMP_INTENCLR_UP_Pos: u32 = 2;
pub const LPCOMP_INTENCLR_UP_Msk: u32 = 4;
pub const LPCOMP_INTENCLR_UP_Disabled: u32 = 0;
pub const LPCOMP_INTENCLR_UP_Enabled: u32 = 1;
pub const LPCOMP_INTENCLR_UP_Clear: u32 = 1;
pub const LPCOMP_INTENCLR_DOWN_Pos: u32 = 1;
pub const LPCOMP_INTENCLR_DOWN_Msk: u32 = 2;
pub const LPCOMP_INTENCLR_DOWN_Disabled: u32 = 0;
pub const LPCOMP_INTENCLR_DOWN_Enabled: u32 = 1;
pub const LPCOMP_INTENCLR_DOWN_Clear: u32 = 1;
pub const LPCOMP_INTENCLR_READY_Pos: u32 = 0;
pub const LPCOMP_INTENCLR_READY_Msk: u32 = 1;
pub const LPCOMP_INTENCLR_READY_Disabled: u32 = 0;
pub const LPCOMP_INTENCLR_READY_Enabled: u32 = 1;
pub const LPCOMP_INTENCLR_READY_Clear: u32 = 1;
pub const LPCOMP_RESULT_RESULT_Pos: u32 = 0;
pub const LPCOMP_RESULT_RESULT_Msk: u32 = 1;
pub const LPCOMP_RESULT_RESULT_Below: u32 = 0;
pub const LPCOMP_RESULT_RESULT_Above: u32 = 1;
pub const LPCOMP_ENABLE_ENABLE_Pos: u32 = 0;
pub const LPCOMP_ENABLE_ENABLE_Msk: u32 = 3;
pub const LPCOMP_ENABLE_ENABLE_Disabled: u32 = 0;
pub const LPCOMP_ENABLE_ENABLE_Enabled: u32 = 1;
pub const LPCOMP_PSEL_PSEL_Pos: u32 = 0;
pub const LPCOMP_PSEL_PSEL_Msk: u32 = 7;
pub const LPCOMP_PSEL_PSEL_AnalogInput0: u32 = 0;
pub const LPCOMP_PSEL_PSEL_AnalogInput1: u32 = 1;
pub const LPCOMP_PSEL_PSEL_AnalogInput2: u32 = 2;
pub const LPCOMP_PSEL_PSEL_AnalogInput3: u32 = 3;
pub const LPCOMP_PSEL_PSEL_AnalogInput4: u32 = 4;
pub const LPCOMP_PSEL_PSEL_AnalogInput5: u32 = 5;
pub const LPCOMP_PSEL_PSEL_AnalogInput6: u32 = 6;
pub const LPCOMP_PSEL_PSEL_AnalogInput7: u32 = 7;
pub const LPCOMP_REFSEL_REFSEL_Pos: u32 = 0;
pub const LPCOMP_REFSEL_REFSEL_Msk: u32 = 15;
pub const LPCOMP_REFSEL_REFSEL_Ref1_8Vdd: u32 = 0;
pub const LPCOMP_REFSEL_REFSEL_Ref2_8Vdd: u32 = 1;
pub const LPCOMP_REFSEL_REFSEL_Ref3_8Vdd: u32 = 2;
pub const LPCOMP_REFSEL_REFSEL_Ref4_8Vdd: u32 = 3;
pub const LPCOMP_REFSEL_REFSEL_Ref5_8Vdd: u32 = 4;
pub const LPCOMP_REFSEL_REFSEL_Ref6_8Vdd: u32 = 5;
pub const LPCOMP_REFSEL_REFSEL_Ref7_8Vdd: u32 = 6;
pub const LPCOMP_REFSEL_REFSEL_ARef: u32 = 7;
pub const LPCOMP_REFSEL_REFSEL_Ref1_16Vdd: u32 = 8;
pub const LPCOMP_REFSEL_REFSEL_Ref3_16Vdd: u32 = 9;
pub const LPCOMP_REFSEL_REFSEL_Ref5_16Vdd: u32 = 10;
pub const LPCOMP_REFSEL_REFSEL_Ref7_16Vdd: u32 = 11;
pub const LPCOMP_REFSEL_REFSEL_Ref9_16Vdd: u32 = 12;
pub const LPCOMP_REFSEL_REFSEL_Ref11_16Vdd: u32 = 13;
pub const LPCOMP_REFSEL_REFSEL_Ref13_16Vdd: u32 = 14;
pub const LPCOMP_REFSEL_REFSEL_Ref15_16Vdd: u32 = 15;
pub const LPCOMP_EXTREFSEL_EXTREFSEL_Pos: u32 = 0;
pub const LPCOMP_EXTREFSEL_EXTREFSEL_Msk: u32 = 1;
pub const LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference0: u32 = 0;
pub const LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference1: u32 = 1;
pub const LPCOMP_ANADETECT_ANADETECT_Pos: u32 = 0;
pub const LPCOMP_ANADETECT_ANADETECT_Msk: u32 = 3;
pub const LPCOMP_ANADETECT_ANADETECT_Cross: u32 = 0;
pub const LPCOMP_ANADETECT_ANADETECT_Up: u32 = 1;
pub const LPCOMP_ANADETECT_ANADETECT_Down: u32 = 2;
pub const LPCOMP_HYST_HYST_Pos: u32 = 0;
pub const LPCOMP_HYST_HYST_Msk: u32 = 1;
pub const LPCOMP_HYST_HYST_Disabled: u32 = 0;
pub const LPCOMP_HYST_HYST_Enabled: u32 = 1;
pub const MWU_EVENTS_REGION_WA_WA_Pos: u32 = 0;
pub const MWU_EVENTS_REGION_WA_WA_Msk: u32 = 1;
pub const MWU_EVENTS_REGION_WA_WA_NotGenerated: u32 = 0;
pub const MWU_EVENTS_REGION_WA_WA_Generated: u32 = 1;
pub const MWU_EVENTS_REGION_RA_RA_Pos: u32 = 0;
pub const MWU_EVENTS_REGION_RA_RA_Msk: u32 = 1;
pub const MWU_EVENTS_REGION_RA_RA_NotGenerated: u32 = 0;
pub const MWU_EVENTS_REGION_RA_RA_Generated: u32 = 1;
pub const MWU_EVENTS_PREGION_WA_WA_Pos: u32 = 0;
pub const MWU_EVENTS_PREGION_WA_WA_Msk: u32 = 1;
pub const MWU_EVENTS_PREGION_WA_WA_NotGenerated: u32 = 0;
pub const MWU_EVENTS_PREGION_WA_WA_Generated: u32 = 1;
pub const MWU_EVENTS_PREGION_RA_RA_Pos: u32 = 0;
pub const MWU_EVENTS_PREGION_RA_RA_Msk: u32 = 1;
pub const MWU_EVENTS_PREGION_RA_RA_NotGenerated: u32 = 0;
pub const MWU_EVENTS_PREGION_RA_RA_Generated: u32 = 1;
pub const MWU_INTEN_PREGION1RA_Pos: u32 = 27;
pub const MWU_INTEN_PREGION1RA_Msk: u32 = 134217728;
pub const MWU_INTEN_PREGION1RA_Disabled: u32 = 0;
pub const MWU_INTEN_PREGION1RA_Enabled: u32 = 1;
pub const MWU_INTEN_PREGION1WA_Pos: u32 = 26;
pub const MWU_INTEN_PREGION1WA_Msk: u32 = 67108864;
pub const MWU_INTEN_PREGION1WA_Disabled: u32 = 0;
pub const MWU_INTEN_PREGION1WA_Enabled: u32 = 1;
pub const MWU_INTEN_PREGION0RA_Pos: u32 = 25;
pub const MWU_INTEN_PREGION0RA_Msk: u32 = 33554432;
pub const MWU_INTEN_PREGION0RA_Disabled: u32 = 0;
pub const MWU_INTEN_PREGION0RA_Enabled: u32 = 1;
pub const MWU_INTEN_PREGION0WA_Pos: u32 = 24;
pub const MWU_INTEN_PREGION0WA_Msk: u32 = 16777216;
pub const MWU_INTEN_PREGION0WA_Disabled: u32 = 0;
pub const MWU_INTEN_PREGION0WA_Enabled: u32 = 1;
pub const MWU_INTEN_REGION3RA_Pos: u32 = 7;
pub const MWU_INTEN_REGION3RA_Msk: u32 = 128;
pub const MWU_INTEN_REGION3RA_Disabled: u32 = 0;
pub const MWU_INTEN_REGION3RA_Enabled: u32 = 1;
pub const MWU_INTEN_REGION3WA_Pos: u32 = 6;
pub const MWU_INTEN_REGION3WA_Msk: u32 = 64;
pub const MWU_INTEN_REGION3WA_Disabled: u32 = 0;
pub const MWU_INTEN_REGION3WA_Enabled: u32 = 1;
pub const MWU_INTEN_REGION2RA_Pos: u32 = 5;
pub const MWU_INTEN_REGION2RA_Msk: u32 = 32;
pub const MWU_INTEN_REGION2RA_Disabled: u32 = 0;
pub const MWU_INTEN_REGION2RA_Enabled: u32 = 1;
pub const MWU_INTEN_REGION2WA_Pos: u32 = 4;
pub const MWU_INTEN_REGION2WA_Msk: u32 = 16;
pub const MWU_INTEN_REGION2WA_Disabled: u32 = 0;
pub const MWU_INTEN_REGION2WA_Enabled: u32 = 1;
pub const MWU_INTEN_REGION1RA_Pos: u32 = 3;
pub const MWU_INTEN_REGION1RA_Msk: u32 = 8;
pub const MWU_INTEN_REGION1RA_Disabled: u32 = 0;
pub const MWU_INTEN_REGION1RA_Enabled: u32 = 1;
pub const MWU_INTEN_REGION1WA_Pos: u32 = 2;
pub const MWU_INTEN_REGION1WA_Msk: u32 = 4;
pub const MWU_INTEN_REGION1WA_Disabled: u32 = 0;
pub const MWU_INTEN_REGION1WA_Enabled: u32 = 1;
pub const MWU_INTEN_REGION0RA_Pos: u32 = 1;
pub const MWU_INTEN_REGION0RA_Msk: u32 = 2;
pub const MWU_INTEN_REGION0RA_Disabled: u32 = 0;
pub const MWU_INTEN_REGION0RA_Enabled: u32 = 1;
pub const MWU_INTEN_REGION0WA_Pos: u32 = 0;
pub const MWU_INTEN_REGION0WA_Msk: u32 = 1;
pub const MWU_INTEN_REGION0WA_Disabled: u32 = 0;
pub const MWU_INTEN_REGION0WA_Enabled: u32 = 1;
pub const MWU_INTENSET_PREGION1RA_Pos: u32 = 27;
pub const MWU_INTENSET_PREGION1RA_Msk: u32 = 134217728;
pub const MWU_INTENSET_PREGION1RA_Disabled: u32 = 0;
pub const MWU_INTENSET_PREGION1RA_Enabled: u32 = 1;
pub const MWU_INTENSET_PREGION1RA_Set: u32 = 1;
pub const MWU_INTENSET_PREGION1WA_Pos: u32 = 26;
pub const MWU_INTENSET_PREGION1WA_Msk: u32 = 67108864;
pub const MWU_INTENSET_PREGION1WA_Disabled: u32 = 0;
pub const MWU_INTENSET_PREGION1WA_Enabled: u32 = 1;
pub const MWU_INTENSET_PREGION1WA_Set: u32 = 1;
pub const MWU_INTENSET_PREGION0RA_Pos: u32 = 25;
pub const MWU_INTENSET_PREGION0RA_Msk: u32 = 33554432;
pub const MWU_INTENSET_PREGION0RA_Disabled: u32 = 0;
pub const MWU_INTENSET_PREGION0RA_Enabled: u32 = 1;
pub const MWU_INTENSET_PREGION0RA_Set: u32 = 1;
pub const MWU_INTENSET_PREGION0WA_Pos: u32 = 24;
pub const MWU_INTENSET_PREGION0WA_Msk: u32 = 16777216;
pub const MWU_INTENSET_PREGION0WA_Disabled: u32 = 0;
pub const MWU_INTENSET_PREGION0WA_Enabled: u32 = 1;
pub const MWU_INTENSET_PREGION0WA_Set: u32 = 1;
pub const MWU_INTENSET_REGION3RA_Pos: u32 = 7;
pub const MWU_INTENSET_REGION3RA_Msk: u32 = 128;
pub const MWU_INTENSET_REGION3RA_Disabled: u32 = 0;
pub const MWU_INTENSET_REGION3RA_Enabled: u32 = 1;
pub const MWU_INTENSET_REGION3RA_Set: u32 = 1;
pub const MWU_INTENSET_REGION3WA_Pos: u32 = 6;
pub const MWU_INTENSET_REGION3WA_Msk: u32 = 64;
pub const MWU_INTENSET_REGION3WA_Disabled: u32 = 0;
pub const MWU_INTENSET_REGION3WA_Enabled: u32 = 1;
pub const MWU_INTENSET_REGION3WA_Set: u32 = 1;
pub const MWU_INTENSET_REGION2RA_Pos: u32 = 5;
pub const MWU_INTENSET_REGION2RA_Msk: u32 = 32;
pub const MWU_INTENSET_REGION2RA_Disabled: u32 = 0;
pub const MWU_INTENSET_REGION2RA_Enabled: u32 = 1;
pub const MWU_INTENSET_REGION2RA_Set: u32 = 1;
pub const MWU_INTENSET_REGION2WA_Pos: u32 = 4;
pub const MWU_INTENSET_REGION2WA_Msk: u32 = 16;
pub const MWU_INTENSET_REGION2WA_Disabled: u32 = 0;
pub const MWU_INTENSET_REGION2WA_Enabled: u32 = 1;
pub const MWU_INTENSET_REGION2WA_Set: u32 = 1;
pub const MWU_INTENSET_REGION1RA_Pos: u32 = 3;
pub const MWU_INTENSET_REGION1RA_Msk: u32 = 8;
pub const MWU_INTENSET_REGION1RA_Disabled: u32 = 0;
pub const MWU_INTENSET_REGION1RA_Enabled: u32 = 1;
pub const MWU_INTENSET_REGION1RA_Set: u32 = 1;
pub const MWU_INTENSET_REGION1WA_Pos: u32 = 2;
pub const MWU_INTENSET_REGION1WA_Msk: u32 = 4;
pub const MWU_INTENSET_REGION1WA_Disabled: u32 = 0;
pub const MWU_INTENSET_REGION1WA_Enabled: u32 = 1;
pub const MWU_INTENSET_REGION1WA_Set: u32 = 1;
pub const MWU_INTENSET_REGION0RA_Pos: u32 = 1;
pub const MWU_INTENSET_REGION0RA_Msk: u32 = 2;
pub const MWU_INTENSET_REGION0RA_Disabled: u32 = 0;
pub const MWU_INTENSET_REGION0RA_Enabled: u32 = 1;
pub const MWU_INTENSET_REGION0RA_Set: u32 = 1;
pub const MWU_INTENSET_REGION0WA_Pos: u32 = 0;
pub const MWU_INTENSET_REGION0WA_Msk: u32 = 1;
pub const MWU_INTENSET_REGION0WA_Disabled: u32 = 0;
pub const MWU_INTENSET_REGION0WA_Enabled: u32 = 1;
pub const MWU_INTENSET_REGION0WA_Set: u32 = 1;
pub const MWU_INTENCLR_PREGION1RA_Pos: u32 = 27;
pub const MWU_INTENCLR_PREGION1RA_Msk: u32 = 134217728;
pub const MWU_INTENCLR_PREGION1RA_Disabled: u32 = 0;
pub const MWU_INTENCLR_PREGION1RA_Enabled: u32 = 1;
pub const MWU_INTENCLR_PREGION1RA_Clear: u32 = 1;
pub const MWU_INTENCLR_PREGION1WA_Pos: u32 = 26;
pub const MWU_INTENCLR_PREGION1WA_Msk: u32 = 67108864;
pub const MWU_INTENCLR_PREGION1WA_Disabled: u32 = 0;
pub const MWU_INTENCLR_PREGION1WA_Enabled: u32 = 1;
pub const MWU_INTENCLR_PREGION1WA_Clear: u32 = 1;
pub const MWU_INTENCLR_PREGION0RA_Pos: u32 = 25;
pub const MWU_INTENCLR_PREGION0RA_Msk: u32 = 33554432;
pub const MWU_INTENCLR_PREGION0RA_Disabled: u32 = 0;
pub const MWU_INTENCLR_PREGION0RA_Enabled: u32 = 1;
pub const MWU_INTENCLR_PREGION0RA_Clear: u32 = 1;
pub const MWU_INTENCLR_PREGION0WA_Pos: u32 = 24;
pub const MWU_INTENCLR_PREGION0WA_Msk: u32 = 16777216;
pub const MWU_INTENCLR_PREGION0WA_Disabled: u32 = 0;
pub const MWU_INTENCLR_PREGION0WA_Enabled: u32 = 1;
pub const MWU_INTENCLR_PREGION0WA_Clear: u32 = 1;
pub const MWU_INTENCLR_REGION3RA_Pos: u32 = 7;
pub const MWU_INTENCLR_REGION3RA_Msk: u32 = 128;
pub const MWU_INTENCLR_REGION3RA_Disabled: u32 = 0;
pub const MWU_INTENCLR_REGION3RA_Enabled: u32 = 1;
pub const MWU_INTENCLR_REGION3RA_Clear: u32 = 1;
pub const MWU_INTENCLR_REGION3WA_Pos: u32 = 6;
pub const MWU_INTENCLR_REGION3WA_Msk: u32 = 64;
pub const MWU_INTENCLR_REGION3WA_Disabled: u32 = 0;
pub const MWU_INTENCLR_REGION3WA_Enabled: u32 = 1;
pub const MWU_INTENCLR_REGION3WA_Clear: u32 = 1;
pub const MWU_INTENCLR_REGION2RA_Pos: u32 = 5;
pub const MWU_INTENCLR_REGION2RA_Msk: u32 = 32;
pub const MWU_INTENCLR_REGION2RA_Disabled: u32 = 0;
pub const MWU_INTENCLR_REGION2RA_Enabled: u32 = 1;
pub const MWU_INTENCLR_REGION2RA_Clear: u32 = 1;
pub const MWU_INTENCLR_REGION2WA_Pos: u32 = 4;
pub const MWU_INTENCLR_REGION2WA_Msk: u32 = 16;
pub const MWU_INTENCLR_REGION2WA_Disabled: u32 = 0;
pub const MWU_INTENCLR_REGION2WA_Enabled: u32 = 1;
pub const MWU_INTENCLR_REGION2WA_Clear: u32 = 1;
pub const MWU_INTENCLR_REGION1RA_Pos: u32 = 3;
pub const MWU_INTENCLR_REGION1RA_Msk: u32 = 8;
pub const MWU_INTENCLR_REGION1RA_Disabled: u32 = 0;
pub const MWU_INTENCLR_REGION1RA_Enabled: u32 = 1;
pub const MWU_INTENCLR_REGION1RA_Clear: u32 = 1;
pub const MWU_INTENCLR_REGION1WA_Pos: u32 = 2;
pub const MWU_INTENCLR_REGION1WA_Msk: u32 = 4;
pub const MWU_INTENCLR_REGION1WA_Disabled: u32 = 0;
pub const MWU_INTENCLR_REGION1WA_Enabled: u32 = 1;
pub const MWU_INTENCLR_REGION1WA_Clear: u32 = 1;
pub const MWU_INTENCLR_REGION0RA_Pos: u32 = 1;
pub const MWU_INTENCLR_REGION0RA_Msk: u32 = 2;
pub const MWU_INTENCLR_REGION0RA_Disabled: u32 = 0;
pub const MWU_INTENCLR_REGION0RA_Enabled: u32 = 1;
pub const MWU_INTENCLR_REGION0RA_Clear: u32 = 1;
pub const MWU_INTENCLR_REGION0WA_Pos: u32 = 0;
pub const MWU_INTENCLR_REGION0WA_Msk: u32 = 1;
pub const MWU_INTENCLR_REGION0WA_Disabled: u32 = 0;
pub const MWU_INTENCLR_REGION0WA_Enabled: u32 = 1;
pub const MWU_INTENCLR_REGION0WA_Clear: u32 = 1;
pub const MWU_NMIEN_PREGION1RA_Pos: u32 = 27;
pub const MWU_NMIEN_PREGION1RA_Msk: u32 = 134217728;
pub const MWU_NMIEN_PREGION1RA_Disabled: u32 = 0;
pub const MWU_NMIEN_PREGION1RA_Enabled: u32 = 1;
pub const MWU_NMIEN_PREGION1WA_Pos: u32 = 26;
pub const MWU_NMIEN_PREGION1WA_Msk: u32 = 67108864;
pub const MWU_NMIEN_PREGION1WA_Disabled: u32 = 0;
pub const MWU_NMIEN_PREGION1WA_Enabled: u32 = 1;
pub const MWU_NMIEN_PREGION0RA_Pos: u32 = 25;
pub const MWU_NMIEN_PREGION0RA_Msk: u32 = 33554432;
pub const MWU_NMIEN_PREGION0RA_Disabled: u32 = 0;
pub const MWU_NMIEN_PREGION0RA_Enabled: u32 = 1;
pub const MWU_NMIEN_PREGION0WA_Pos: u32 = 24;
pub const MWU_NMIEN_PREGION0WA_Msk: u32 = 16777216;
pub const MWU_NMIEN_PREGION0WA_Disabled: u32 = 0;
pub const MWU_NMIEN_PREGION0WA_Enabled: u32 = 1;
pub const MWU_NMIEN_REGION3RA_Pos: u32 = 7;
pub const MWU_NMIEN_REGION3RA_Msk: u32 = 128;
pub const MWU_NMIEN_REGION3RA_Disabled: u32 = 0;
pub const MWU_NMIEN_REGION3RA_Enabled: u32 = 1;
pub const MWU_NMIEN_REGION3WA_Pos: u32 = 6;
pub const MWU_NMIEN_REGION3WA_Msk: u32 = 64;
pub const MWU_NMIEN_REGION3WA_Disabled: u32 = 0;
pub const MWU_NMIEN_REGION3WA_Enabled: u32 = 1;
pub const MWU_NMIEN_REGION2RA_Pos: u32 = 5;
pub const MWU_NMIEN_REGION2RA_Msk: u32 = 32;
pub const MWU_NMIEN_REGION2RA_Disabled: u32 = 0;
pub const MWU_NMIEN_REGION2RA_Enabled: u32 = 1;
pub const MWU_NMIEN_REGION2WA_Pos: u32 = 4;
pub const MWU_NMIEN_REGION2WA_Msk: u32 = 16;
pub const MWU_NMIEN_REGION2WA_Disabled: u32 = 0;
pub const MWU_NMIEN_REGION2WA_Enabled: u32 = 1;
pub const MWU_NMIEN_REGION1RA_Pos: u32 = 3;
pub const MWU_NMIEN_REGION1RA_Msk: u32 = 8;
pub const MWU_NMIEN_REGION1RA_Disabled: u32 = 0;
pub const MWU_NMIEN_REGION1RA_Enabled: u32 = 1;
pub const MWU_NMIEN_REGION1WA_Pos: u32 = 2;
pub const MWU_NMIEN_REGION1WA_Msk: u32 = 4;
pub const MWU_NMIEN_REGION1WA_Disabled: u32 = 0;
pub const MWU_NMIEN_REGION1WA_Enabled: u32 = 1;
pub const MWU_NMIEN_REGION0RA_Pos: u32 = 1;
pub const MWU_NMIEN_REGION0RA_Msk: u32 = 2;
pub const MWU_NMIEN_REGION0RA_Disabled: u32 = 0;
pub const MWU_NMIEN_REGION0RA_Enabled: u32 = 1;
pub const MWU_NMIEN_REGION0WA_Pos: u32 = 0;
pub const MWU_NMIEN_REGION0WA_Msk: u32 = 1;
pub const MWU_NMIEN_REGION0WA_Disabled: u32 = 0;
pub const MWU_NMIEN_REGION0WA_Enabled: u32 = 1;
pub const MWU_NMIENSET_PREGION1RA_Pos: u32 = 27;
pub const MWU_NMIENSET_PREGION1RA_Msk: u32 = 134217728;
pub const MWU_NMIENSET_PREGION1RA_Disabled: u32 = 0;
pub const MWU_NMIENSET_PREGION1RA_Enabled: u32 = 1;
pub const MWU_NMIENSET_PREGION1RA_Set: u32 = 1;
pub const MWU_NMIENSET_PREGION1WA_Pos: u32 = 26;
pub const MWU_NMIENSET_PREGION1WA_Msk: u32 = 67108864;
pub const MWU_NMIENSET_PREGION1WA_Disabled: u32 = 0;
pub const MWU_NMIENSET_PREGION1WA_Enabled: u32 = 1;
pub const MWU_NMIENSET_PREGION1WA_Set: u32 = 1;
pub const MWU_NMIENSET_PREGION0RA_Pos: u32 = 25;
pub const MWU_NMIENSET_PREGION0RA_Msk: u32 = 33554432;
pub const MWU_NMIENSET_PREGION0RA_Disabled: u32 = 0;
pub const MWU_NMIENSET_PREGION0RA_Enabled: u32 = 1;
pub const MWU_NMIENSET_PREGION0RA_Set: u32 = 1;
pub const MWU_NMIENSET_PREGION0WA_Pos: u32 = 24;
pub const MWU_NMIENSET_PREGION0WA_Msk: u32 = 16777216;
pub const MWU_NMIENSET_PREGION0WA_Disabled: u32 = 0;
pub const MWU_NMIENSET_PREGION0WA_Enabled: u32 = 1;
pub const MWU_NMIENSET_PREGION0WA_Set: u32 = 1;
pub const MWU_NMIENSET_REGION3RA_Pos: u32 = 7;
pub const MWU_NMIENSET_REGION3RA_Msk: u32 = 128;
pub const MWU_NMIENSET_REGION3RA_Disabled: u32 = 0;
pub const MWU_NMIENSET_REGION3RA_Enabled: u32 = 1;
pub const MWU_NMIENSET_REGION3RA_Set: u32 = 1;
pub const MWU_NMIENSET_REGION3WA_Pos: u32 = 6;
pub const MWU_NMIENSET_REGION3WA_Msk: u32 = 64;
pub const MWU_NMIENSET_REGION3WA_Disabled: u32 = 0;
pub const MWU_NMIENSET_REGION3WA_Enabled: u32 = 1;
pub const MWU_NMIENSET_REGION3WA_Set: u32 = 1;
pub const MWU_NMIENSET_REGION2RA_Pos: u32 = 5;
pub const MWU_NMIENSET_REGION2RA_Msk: u32 = 32;
pub const MWU_NMIENSET_REGION2RA_Disabled: u32 = 0;
pub const MWU_NMIENSET_REGION2RA_Enabled: u32 = 1;
pub const MWU_NMIENSET_REGION2RA_Set: u32 = 1;
pub const MWU_NMIENSET_REGION2WA_Pos: u32 = 4;
pub const MWU_NMIENSET_REGION2WA_Msk: u32 = 16;
pub const MWU_NMIENSET_REGION2WA_Disabled: u32 = 0;
pub const MWU_NMIENSET_REGION2WA_Enabled: u32 = 1;
pub const MWU_NMIENSET_REGION2WA_Set: u32 = 1;
pub const MWU_NMIENSET_REGION1RA_Pos: u32 = 3;
pub const MWU_NMIENSET_REGION1RA_Msk: u32 = 8;
pub const MWU_NMIENSET_REGION1RA_Disabled: u32 = 0;
pub const MWU_NMIENSET_REGION1RA_Enabled: u32 = 1;
pub const MWU_NMIENSET_REGION1RA_Set: u32 = 1;
pub const MWU_NMIENSET_REGION1WA_Pos: u32 = 2;
pub const MWU_NMIENSET_REGION1WA_Msk: u32 = 4;
pub const MWU_NMIENSET_REGION1WA_Disabled: u32 = 0;
pub const MWU_NMIENSET_REGION1WA_Enabled: u32 = 1;
pub const MWU_NMIENSET_REGION1WA_Set: u32 = 1;
pub const MWU_NMIENSET_REGION0RA_Pos: u32 = 1;
pub const MWU_NMIENSET_REGION0RA_Msk: u32 = 2;
pub const MWU_NMIENSET_REGION0RA_Disabled: u32 = 0;
pub const MWU_NMIENSET_REGION0RA_Enabled: u32 = 1;
pub const MWU_NMIENSET_REGION0RA_Set: u32 = 1;
pub const MWU_NMIENSET_REGION0WA_Pos: u32 = 0;
pub const MWU_NMIENSET_REGION0WA_Msk: u32 = 1;
pub const MWU_NMIENSET_REGION0WA_Disabled: u32 = 0;
pub const MWU_NMIENSET_REGION0WA_Enabled: u32 = 1;
pub const MWU_NMIENSET_REGION0WA_Set: u32 = 1;
pub const MWU_NMIENCLR_PREGION1RA_Pos: u32 = 27;
pub const MWU_NMIENCLR_PREGION1RA_Msk: u32 = 134217728;
pub const MWU_NMIENCLR_PREGION1RA_Disabled: u32 = 0;
pub const MWU_NMIENCLR_PREGION1RA_Enabled: u32 = 1;
pub const MWU_NMIENCLR_PREGION1RA_Clear: u32 = 1;
pub const MWU_NMIENCLR_PREGION1WA_Pos: u32 = 26;
pub const MWU_NMIENCLR_PREGION1WA_Msk: u32 = 67108864;
pub const MWU_NMIENCLR_PREGION1WA_Disabled: u32 = 0;
pub const MWU_NMIENCLR_PREGION1WA_Enabled: u32 = 1;
pub const MWU_NMIENCLR_PREGION1WA_Clear: u32 = 1;
pub const MWU_NMIENCLR_PREGION0RA_Pos: u32 = 25;
pub const MWU_NMIENCLR_PREGION0RA_Msk: u32 = 33554432;
pub const MWU_NMIENCLR_PREGION0RA_Disabled: u32 = 0;
pub const MWU_NMIENCLR_PREGION0RA_Enabled: u32 = 1;
pub const MWU_NMIENCLR_PREGION0RA_Clear: u32 = 1;
pub const MWU_NMIENCLR_PREGION0WA_Pos: u32 = 24;
pub const MWU_NMIENCLR_PREGION0WA_Msk: u32 = 16777216;
pub const MWU_NMIENCLR_PREGION0WA_Disabled: u32 = 0;
pub const MWU_NMIENCLR_PREGION0WA_Enabled: u32 = 1;
pub const MWU_NMIENCLR_PREGION0WA_Clear: u32 = 1;
pub const MWU_NMIENCLR_REGION3RA_Pos: u32 = 7;
pub const MWU_NMIENCLR_REGION3RA_Msk: u32 = 128;
pub const MWU_NMIENCLR_REGION3RA_Disabled: u32 = 0;
pub const MWU_NMIENCLR_REGION3RA_Enabled: u32 = 1;
pub const MWU_NMIENCLR_REGION3RA_Clear: u32 = 1;
pub const MWU_NMIENCLR_REGION3WA_Pos: u32 = 6;
pub const MWU_NMIENCLR_REGION3WA_Msk: u32 = 64;
pub const MWU_NMIENCLR_REGION3WA_Disabled: u32 = 0;
pub const MWU_NMIENCLR_REGION3WA_Enabled: u32 = 1;
pub const MWU_NMIENCLR_REGION3WA_Clear: u32 = 1;
pub const MWU_NMIENCLR_REGION2RA_Pos: u32 = 5;
pub const MWU_NMIENCLR_REGION2RA_Msk: u32 = 32;
pub const MWU_NMIENCLR_REGION2RA_Disabled: u32 = 0;
pub const MWU_NMIENCLR_REGION2RA_Enabled: u32 = 1;
pub const MWU_NMIENCLR_REGION2RA_Clear: u32 = 1;
pub const MWU_NMIENCLR_REGION2WA_Pos: u32 = 4;
pub const MWU_NMIENCLR_REGION2WA_Msk: u32 = 16;
pub const MWU_NMIENCLR_REGION2WA_Disabled: u32 = 0;
pub const MWU_NMIENCLR_REGION2WA_Enabled: u32 = 1;
pub const MWU_NMIENCLR_REGION2WA_Clear: u32 = 1;
pub const MWU_NMIENCLR_REGION1RA_Pos: u32 = 3;
pub const MWU_NMIENCLR_REGION1RA_Msk: u32 = 8;
pub const MWU_NMIENCLR_REGION1RA_Disabled: u32 = 0;
pub const MWU_NMIENCLR_REGION1RA_Enabled: u32 = 1;
pub const MWU_NMIENCLR_REGION1RA_Clear: u32 = 1;
pub const MWU_NMIENCLR_REGION1WA_Pos: u32 = 2;
pub const MWU_NMIENCLR_REGION1WA_Msk: u32 = 4;
pub const MWU_NMIENCLR_REGION1WA_Disabled: u32 = 0;
pub const MWU_NMIENCLR_REGION1WA_Enabled: u32 = 1;
pub const MWU_NMIENCLR_REGION1WA_Clear: u32 = 1;
pub const MWU_NMIENCLR_REGION0RA_Pos: u32 = 1;
pub const MWU_NMIENCLR_REGION0RA_Msk: u32 = 2;
pub const MWU_NMIENCLR_REGION0RA_Disabled: u32 = 0;
pub const MWU_NMIENCLR_REGION0RA_Enabled: u32 = 1;
pub const MWU_NMIENCLR_REGION0RA_Clear: u32 = 1;
pub const MWU_NMIENCLR_REGION0WA_Pos: u32 = 0;
pub const MWU_NMIENCLR_REGION0WA_Msk: u32 = 1;
pub const MWU_NMIENCLR_REGION0WA_Disabled: u32 = 0;
pub const MWU_NMIENCLR_REGION0WA_Enabled: u32 = 1;
pub const MWU_NMIENCLR_REGION0WA_Clear: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR31_Pos: u32 = 31;
pub const MWU_PERREGION_SUBSTATWA_SR31_Msk: u32 = 2147483648;
pub const MWU_PERREGION_SUBSTATWA_SR31_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR31_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR30_Pos: u32 = 30;
pub const MWU_PERREGION_SUBSTATWA_SR30_Msk: u32 = 1073741824;
pub const MWU_PERREGION_SUBSTATWA_SR30_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR30_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR29_Pos: u32 = 29;
pub const MWU_PERREGION_SUBSTATWA_SR29_Msk: u32 = 536870912;
pub const MWU_PERREGION_SUBSTATWA_SR29_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR29_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR28_Pos: u32 = 28;
pub const MWU_PERREGION_SUBSTATWA_SR28_Msk: u32 = 268435456;
pub const MWU_PERREGION_SUBSTATWA_SR28_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR28_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR27_Pos: u32 = 27;
pub const MWU_PERREGION_SUBSTATWA_SR27_Msk: u32 = 134217728;
pub const MWU_PERREGION_SUBSTATWA_SR27_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR27_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR26_Pos: u32 = 26;
pub const MWU_PERREGION_SUBSTATWA_SR26_Msk: u32 = 67108864;
pub const MWU_PERREGION_SUBSTATWA_SR26_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR26_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR25_Pos: u32 = 25;
pub const MWU_PERREGION_SUBSTATWA_SR25_Msk: u32 = 33554432;
pub const MWU_PERREGION_SUBSTATWA_SR25_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR25_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR24_Pos: u32 = 24;
pub const MWU_PERREGION_SUBSTATWA_SR24_Msk: u32 = 16777216;
pub const MWU_PERREGION_SUBSTATWA_SR24_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR24_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR23_Pos: u32 = 23;
pub const MWU_PERREGION_SUBSTATWA_SR23_Msk: u32 = 8388608;
pub const MWU_PERREGION_SUBSTATWA_SR23_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR23_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR22_Pos: u32 = 22;
pub const MWU_PERREGION_SUBSTATWA_SR22_Msk: u32 = 4194304;
pub const MWU_PERREGION_SUBSTATWA_SR22_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR22_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR21_Pos: u32 = 21;
pub const MWU_PERREGION_SUBSTATWA_SR21_Msk: u32 = 2097152;
pub const MWU_PERREGION_SUBSTATWA_SR21_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR21_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR20_Pos: u32 = 20;
pub const MWU_PERREGION_SUBSTATWA_SR20_Msk: u32 = 1048576;
pub const MWU_PERREGION_SUBSTATWA_SR20_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR20_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR19_Pos: u32 = 19;
pub const MWU_PERREGION_SUBSTATWA_SR19_Msk: u32 = 524288;
pub const MWU_PERREGION_SUBSTATWA_SR19_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR19_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR18_Pos: u32 = 18;
pub const MWU_PERREGION_SUBSTATWA_SR18_Msk: u32 = 262144;
pub const MWU_PERREGION_SUBSTATWA_SR18_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR18_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR17_Pos: u32 = 17;
pub const MWU_PERREGION_SUBSTATWA_SR17_Msk: u32 = 131072;
pub const MWU_PERREGION_SUBSTATWA_SR17_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR17_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR16_Pos: u32 = 16;
pub const MWU_PERREGION_SUBSTATWA_SR16_Msk: u32 = 65536;
pub const MWU_PERREGION_SUBSTATWA_SR16_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR16_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR15_Pos: u32 = 15;
pub const MWU_PERREGION_SUBSTATWA_SR15_Msk: u32 = 32768;
pub const MWU_PERREGION_SUBSTATWA_SR15_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR15_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR14_Pos: u32 = 14;
pub const MWU_PERREGION_SUBSTATWA_SR14_Msk: u32 = 16384;
pub const MWU_PERREGION_SUBSTATWA_SR14_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR14_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR13_Pos: u32 = 13;
pub const MWU_PERREGION_SUBSTATWA_SR13_Msk: u32 = 8192;
pub const MWU_PERREGION_SUBSTATWA_SR13_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR13_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR12_Pos: u32 = 12;
pub const MWU_PERREGION_SUBSTATWA_SR12_Msk: u32 = 4096;
pub const MWU_PERREGION_SUBSTATWA_SR12_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR12_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR11_Pos: u32 = 11;
pub const MWU_PERREGION_SUBSTATWA_SR11_Msk: u32 = 2048;
pub const MWU_PERREGION_SUBSTATWA_SR11_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR11_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR10_Pos: u32 = 10;
pub const MWU_PERREGION_SUBSTATWA_SR10_Msk: u32 = 1024;
pub const MWU_PERREGION_SUBSTATWA_SR10_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR10_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR9_Pos: u32 = 9;
pub const MWU_PERREGION_SUBSTATWA_SR9_Msk: u32 = 512;
pub const MWU_PERREGION_SUBSTATWA_SR9_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR9_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR8_Pos: u32 = 8;
pub const MWU_PERREGION_SUBSTATWA_SR8_Msk: u32 = 256;
pub const MWU_PERREGION_SUBSTATWA_SR8_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR8_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR7_Pos: u32 = 7;
pub const MWU_PERREGION_SUBSTATWA_SR7_Msk: u32 = 128;
pub const MWU_PERREGION_SUBSTATWA_SR7_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR7_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR6_Pos: u32 = 6;
pub const MWU_PERREGION_SUBSTATWA_SR6_Msk: u32 = 64;
pub const MWU_PERREGION_SUBSTATWA_SR6_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR6_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR5_Pos: u32 = 5;
pub const MWU_PERREGION_SUBSTATWA_SR5_Msk: u32 = 32;
pub const MWU_PERREGION_SUBSTATWA_SR5_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR5_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR4_Pos: u32 = 4;
pub const MWU_PERREGION_SUBSTATWA_SR4_Msk: u32 = 16;
pub const MWU_PERREGION_SUBSTATWA_SR4_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR4_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR3_Pos: u32 = 3;
pub const MWU_PERREGION_SUBSTATWA_SR3_Msk: u32 = 8;
pub const MWU_PERREGION_SUBSTATWA_SR3_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR3_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR2_Pos: u32 = 2;
pub const MWU_PERREGION_SUBSTATWA_SR2_Msk: u32 = 4;
pub const MWU_PERREGION_SUBSTATWA_SR2_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR2_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR1_Pos: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR1_Msk: u32 = 2;
pub const MWU_PERREGION_SUBSTATWA_SR1_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR1_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR0_Pos: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR0_Msk: u32 = 1;
pub const MWU_PERREGION_SUBSTATWA_SR0_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATWA_SR0_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR31_Pos: u32 = 31;
pub const MWU_PERREGION_SUBSTATRA_SR31_Msk: u32 = 2147483648;
pub const MWU_PERREGION_SUBSTATRA_SR31_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR31_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR30_Pos: u32 = 30;
pub const MWU_PERREGION_SUBSTATRA_SR30_Msk: u32 = 1073741824;
pub const MWU_PERREGION_SUBSTATRA_SR30_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR30_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR29_Pos: u32 = 29;
pub const MWU_PERREGION_SUBSTATRA_SR29_Msk: u32 = 536870912;
pub const MWU_PERREGION_SUBSTATRA_SR29_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR29_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR28_Pos: u32 = 28;
pub const MWU_PERREGION_SUBSTATRA_SR28_Msk: u32 = 268435456;
pub const MWU_PERREGION_SUBSTATRA_SR28_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR28_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR27_Pos: u32 = 27;
pub const MWU_PERREGION_SUBSTATRA_SR27_Msk: u32 = 134217728;
pub const MWU_PERREGION_SUBSTATRA_SR27_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR27_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR26_Pos: u32 = 26;
pub const MWU_PERREGION_SUBSTATRA_SR26_Msk: u32 = 67108864;
pub const MWU_PERREGION_SUBSTATRA_SR26_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR26_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR25_Pos: u32 = 25;
pub const MWU_PERREGION_SUBSTATRA_SR25_Msk: u32 = 33554432;
pub const MWU_PERREGION_SUBSTATRA_SR25_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR25_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR24_Pos: u32 = 24;
pub const MWU_PERREGION_SUBSTATRA_SR24_Msk: u32 = 16777216;
pub const MWU_PERREGION_SUBSTATRA_SR24_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR24_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR23_Pos: u32 = 23;
pub const MWU_PERREGION_SUBSTATRA_SR23_Msk: u32 = 8388608;
pub const MWU_PERREGION_SUBSTATRA_SR23_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR23_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR22_Pos: u32 = 22;
pub const MWU_PERREGION_SUBSTATRA_SR22_Msk: u32 = 4194304;
pub const MWU_PERREGION_SUBSTATRA_SR22_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR22_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR21_Pos: u32 = 21;
pub const MWU_PERREGION_SUBSTATRA_SR21_Msk: u32 = 2097152;
pub const MWU_PERREGION_SUBSTATRA_SR21_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR21_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR20_Pos: u32 = 20;
pub const MWU_PERREGION_SUBSTATRA_SR20_Msk: u32 = 1048576;
pub const MWU_PERREGION_SUBSTATRA_SR20_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR20_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR19_Pos: u32 = 19;
pub const MWU_PERREGION_SUBSTATRA_SR19_Msk: u32 = 524288;
pub const MWU_PERREGION_SUBSTATRA_SR19_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR19_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR18_Pos: u32 = 18;
pub const MWU_PERREGION_SUBSTATRA_SR18_Msk: u32 = 262144;
pub const MWU_PERREGION_SUBSTATRA_SR18_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR18_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR17_Pos: u32 = 17;
pub const MWU_PERREGION_SUBSTATRA_SR17_Msk: u32 = 131072;
pub const MWU_PERREGION_SUBSTATRA_SR17_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR17_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR16_Pos: u32 = 16;
pub const MWU_PERREGION_SUBSTATRA_SR16_Msk: u32 = 65536;
pub const MWU_PERREGION_SUBSTATRA_SR16_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR16_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR15_Pos: u32 = 15;
pub const MWU_PERREGION_SUBSTATRA_SR15_Msk: u32 = 32768;
pub const MWU_PERREGION_SUBSTATRA_SR15_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR15_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR14_Pos: u32 = 14;
pub const MWU_PERREGION_SUBSTATRA_SR14_Msk: u32 = 16384;
pub const MWU_PERREGION_SUBSTATRA_SR14_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR14_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR13_Pos: u32 = 13;
pub const MWU_PERREGION_SUBSTATRA_SR13_Msk: u32 = 8192;
pub const MWU_PERREGION_SUBSTATRA_SR13_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR13_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR12_Pos: u32 = 12;
pub const MWU_PERREGION_SUBSTATRA_SR12_Msk: u32 = 4096;
pub const MWU_PERREGION_SUBSTATRA_SR12_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR12_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR11_Pos: u32 = 11;
pub const MWU_PERREGION_SUBSTATRA_SR11_Msk: u32 = 2048;
pub const MWU_PERREGION_SUBSTATRA_SR11_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR11_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR10_Pos: u32 = 10;
pub const MWU_PERREGION_SUBSTATRA_SR10_Msk: u32 = 1024;
pub const MWU_PERREGION_SUBSTATRA_SR10_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR10_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR9_Pos: u32 = 9;
pub const MWU_PERREGION_SUBSTATRA_SR9_Msk: u32 = 512;
pub const MWU_PERREGION_SUBSTATRA_SR9_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR9_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR8_Pos: u32 = 8;
pub const MWU_PERREGION_SUBSTATRA_SR8_Msk: u32 = 256;
pub const MWU_PERREGION_SUBSTATRA_SR8_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR8_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR7_Pos: u32 = 7;
pub const MWU_PERREGION_SUBSTATRA_SR7_Msk: u32 = 128;
pub const MWU_PERREGION_SUBSTATRA_SR7_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR7_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR6_Pos: u32 = 6;
pub const MWU_PERREGION_SUBSTATRA_SR6_Msk: u32 = 64;
pub const MWU_PERREGION_SUBSTATRA_SR6_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR6_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR5_Pos: u32 = 5;
pub const MWU_PERREGION_SUBSTATRA_SR5_Msk: u32 = 32;
pub const MWU_PERREGION_SUBSTATRA_SR5_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR5_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR4_Pos: u32 = 4;
pub const MWU_PERREGION_SUBSTATRA_SR4_Msk: u32 = 16;
pub const MWU_PERREGION_SUBSTATRA_SR4_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR4_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR3_Pos: u32 = 3;
pub const MWU_PERREGION_SUBSTATRA_SR3_Msk: u32 = 8;
pub const MWU_PERREGION_SUBSTATRA_SR3_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR3_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR2_Pos: u32 = 2;
pub const MWU_PERREGION_SUBSTATRA_SR2_Msk: u32 = 4;
pub const MWU_PERREGION_SUBSTATRA_SR2_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR2_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR1_Pos: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR1_Msk: u32 = 2;
pub const MWU_PERREGION_SUBSTATRA_SR1_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR1_Access: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR0_Pos: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR0_Msk: u32 = 1;
pub const MWU_PERREGION_SUBSTATRA_SR0_NoAccess: u32 = 0;
pub const MWU_PERREGION_SUBSTATRA_SR0_Access: u32 = 1;
pub const MWU_REGIONEN_PRGN1RA_Pos: u32 = 27;
pub const MWU_REGIONEN_PRGN1RA_Msk: u32 = 134217728;
pub const MWU_REGIONEN_PRGN1RA_Disable: u32 = 0;
pub const MWU_REGIONEN_PRGN1RA_Enable: u32 = 1;
pub const MWU_REGIONEN_PRGN1WA_Pos: u32 = 26;
pub const MWU_REGIONEN_PRGN1WA_Msk: u32 = 67108864;
pub const MWU_REGIONEN_PRGN1WA_Disable: u32 = 0;
pub const MWU_REGIONEN_PRGN1WA_Enable: u32 = 1;
pub const MWU_REGIONEN_PRGN0RA_Pos: u32 = 25;
pub const MWU_REGIONEN_PRGN0RA_Msk: u32 = 33554432;
pub const MWU_REGIONEN_PRGN0RA_Disable: u32 = 0;
pub const MWU_REGIONEN_PRGN0RA_Enable: u32 = 1;
pub const MWU_REGIONEN_PRGN0WA_Pos: u32 = 24;
pub const MWU_REGIONEN_PRGN0WA_Msk: u32 = 16777216;
pub const MWU_REGIONEN_PRGN0WA_Disable: u32 = 0;
pub const MWU_REGIONEN_PRGN0WA_Enable: u32 = 1;
pub const MWU_REGIONEN_RGN3RA_Pos: u32 = 7;
pub const MWU_REGIONEN_RGN3RA_Msk: u32 = 128;
pub const MWU_REGIONEN_RGN3RA_Disable: u32 = 0;
pub const MWU_REGIONEN_RGN3RA_Enable: u32 = 1;
pub const MWU_REGIONEN_RGN3WA_Pos: u32 = 6;
pub const MWU_REGIONEN_RGN3WA_Msk: u32 = 64;
pub const MWU_REGIONEN_RGN3WA_Disable: u32 = 0;
pub const MWU_REGIONEN_RGN3WA_Enable: u32 = 1;
pub const MWU_REGIONEN_RGN2RA_Pos: u32 = 5;
pub const MWU_REGIONEN_RGN2RA_Msk: u32 = 32;
pub const MWU_REGIONEN_RGN2RA_Disable: u32 = 0;
pub const MWU_REGIONEN_RGN2RA_Enable: u32 = 1;
pub const MWU_REGIONEN_RGN2WA_Pos: u32 = 4;
pub const MWU_REGIONEN_RGN2WA_Msk: u32 = 16;
pub const MWU_REGIONEN_RGN2WA_Disable: u32 = 0;
pub const MWU_REGIONEN_RGN2WA_Enable: u32 = 1;
pub const MWU_REGIONEN_RGN1RA_Pos: u32 = 3;
pub const MWU_REGIONEN_RGN1RA_Msk: u32 = 8;
pub const MWU_REGIONEN_RGN1RA_Disable: u32 = 0;
pub const MWU_REGIONEN_RGN1RA_Enable: u32 = 1;
pub const MWU_REGIONEN_RGN1WA_Pos: u32 = 2;
pub const MWU_REGIONEN_RGN1WA_Msk: u32 = 4;
pub const MWU_REGIONEN_RGN1WA_Disable: u32 = 0;
pub const MWU_REGIONEN_RGN1WA_Enable: u32 = 1;
pub const MWU_REGIONEN_RGN0RA_Pos: u32 = 1;
pub const MWU_REGIONEN_RGN0RA_Msk: u32 = 2;
pub const MWU_REGIONEN_RGN0RA_Disable: u32 = 0;
pub const MWU_REGIONEN_RGN0RA_Enable: u32 = 1;
pub const MWU_REGIONEN_RGN0WA_Pos: u32 = 0;
pub const MWU_REGIONEN_RGN0WA_Msk: u32 = 1;
pub const MWU_REGIONEN_RGN0WA_Disable: u32 = 0;
pub const MWU_REGIONEN_RGN0WA_Enable: u32 = 1;
pub const MWU_REGIONENSET_PRGN1RA_Pos: u32 = 27;
pub const MWU_REGIONENSET_PRGN1RA_Msk: u32 = 134217728;
pub const MWU_REGIONENSET_PRGN1RA_Disabled: u32 = 0;
pub const MWU_REGIONENSET_PRGN1RA_Enabled: u32 = 1;
pub const MWU_REGIONENSET_PRGN1RA_Set: u32 = 1;
pub const MWU_REGIONENSET_PRGN1WA_Pos: u32 = 26;
pub const MWU_REGIONENSET_PRGN1WA_Msk: u32 = 67108864;
pub const MWU_REGIONENSET_PRGN1WA_Disabled: u32 = 0;
pub const MWU_REGIONENSET_PRGN1WA_Enabled: u32 = 1;
pub const MWU_REGIONENSET_PRGN1WA_Set: u32 = 1;
pub const MWU_REGIONENSET_PRGN0RA_Pos: u32 = 25;
pub const MWU_REGIONENSET_PRGN0RA_Msk: u32 = 33554432;
pub const MWU_REGIONENSET_PRGN0RA_Disabled: u32 = 0;
pub const MWU_REGIONENSET_PRGN0RA_Enabled: u32 = 1;
pub const MWU_REGIONENSET_PRGN0RA_Set: u32 = 1;
pub const MWU_REGIONENSET_PRGN0WA_Pos: u32 = 24;
pub const MWU_REGIONENSET_PRGN0WA_Msk: u32 = 16777216;
pub const MWU_REGIONENSET_PRGN0WA_Disabled: u32 = 0;
pub const MWU_REGIONENSET_PRGN0WA_Enabled: u32 = 1;
pub const MWU_REGIONENSET_PRGN0WA_Set: u32 = 1;
pub const MWU_REGIONENSET_RGN3RA_Pos: u32 = 7;
pub const MWU_REGIONENSET_RGN3RA_Msk: u32 = 128;
pub const MWU_REGIONENSET_RGN3RA_Disabled: u32 = 0;
pub const MWU_REGIONENSET_RGN3RA_Enabled: u32 = 1;
pub const MWU_REGIONENSET_RGN3RA_Set: u32 = 1;
pub const MWU_REGIONENSET_RGN3WA_Pos: u32 = 6;
pub const MWU_REGIONENSET_RGN3WA_Msk: u32 = 64;
pub const MWU_REGIONENSET_RGN3WA_Disabled: u32 = 0;
pub const MWU_REGIONENSET_RGN3WA_Enabled: u32 = 1;
pub const MWU_REGIONENSET_RGN3WA_Set: u32 = 1;
pub const MWU_REGIONENSET_RGN2RA_Pos: u32 = 5;
pub const MWU_REGIONENSET_RGN2RA_Msk: u32 = 32;
pub const MWU_REGIONENSET_RGN2RA_Disabled: u32 = 0;
pub const MWU_REGIONENSET_RGN2RA_Enabled: u32 = 1;
pub const MWU_REGIONENSET_RGN2RA_Set: u32 = 1;
pub const MWU_REGIONENSET_RGN2WA_Pos: u32 = 4;
pub const MWU_REGIONENSET_RGN2WA_Msk: u32 = 16;
pub const MWU_REGIONENSET_RGN2WA_Disabled: u32 = 0;
pub const MWU_REGIONENSET_RGN2WA_Enabled: u32 = 1;
pub const MWU_REGIONENSET_RGN2WA_Set: u32 = 1;
pub const MWU_REGIONENSET_RGN1RA_Pos: u32 = 3;
pub const MWU_REGIONENSET_RGN1RA_Msk: u32 = 8;
pub const MWU_REGIONENSET_RGN1RA_Disabled: u32 = 0;
pub const MWU_REGIONENSET_RGN1RA_Enabled: u32 = 1;
pub const MWU_REGIONENSET_RGN1RA_Set: u32 = 1;
pub const MWU_REGIONENSET_RGN1WA_Pos: u32 = 2;
pub const MWU_REGIONENSET_RGN1WA_Msk: u32 = 4;
pub const MWU_REGIONENSET_RGN1WA_Disabled: u32 = 0;
pub const MWU_REGIONENSET_RGN1WA_Enabled: u32 = 1;
pub const MWU_REGIONENSET_RGN1WA_Set: u32 = 1;
pub const MWU_REGIONENSET_RGN0RA_Pos: u32 = 1;
pub const MWU_REGIONENSET_RGN0RA_Msk: u32 = 2;
pub const MWU_REGIONENSET_RGN0RA_Disabled: u32 = 0;
pub const MWU_REGIONENSET_RGN0RA_Enabled: u32 = 1;
pub const MWU_REGIONENSET_RGN0RA_Set: u32 = 1;
pub const MWU_REGIONENSET_RGN0WA_Pos: u32 = 0;
pub const MWU_REGIONENSET_RGN0WA_Msk: u32 = 1;
pub const MWU_REGIONENSET_RGN0WA_Disabled: u32 = 0;
pub const MWU_REGIONENSET_RGN0WA_Enabled: u32 = 1;
pub const MWU_REGIONENSET_RGN0WA_Set: u32 = 1;
pub const MWU_REGIONENCLR_PRGN1RA_Pos: u32 = 27;
pub const MWU_REGIONENCLR_PRGN1RA_Msk: u32 = 134217728;
pub const MWU_REGIONENCLR_PRGN1RA_Disabled: u32 = 0;
pub const MWU_REGIONENCLR_PRGN1RA_Enabled: u32 = 1;
pub const MWU_REGIONENCLR_PRGN1RA_Clear: u32 = 1;
pub const MWU_REGIONENCLR_PRGN1WA_Pos: u32 = 26;
pub const MWU_REGIONENCLR_PRGN1WA_Msk: u32 = 67108864;
pub const MWU_REGIONENCLR_PRGN1WA_Disabled: u32 = 0;
pub const MWU_REGIONENCLR_PRGN1WA_Enabled: u32 = 1;
pub const MWU_REGIONENCLR_PRGN1WA_Clear: u32 = 1;
pub const MWU_REGIONENCLR_PRGN0RA_Pos: u32 = 25;
pub const MWU_REGIONENCLR_PRGN0RA_Msk: u32 = 33554432;
pub const MWU_REGIONENCLR_PRGN0RA_Disabled: u32 = 0;
pub const MWU_REGIONENCLR_PRGN0RA_Enabled: u32 = 1;
pub const MWU_REGIONENCLR_PRGN0RA_Clear: u32 = 1;
pub const MWU_REGIONENCLR_PRGN0WA_Pos: u32 = 24;
pub const MWU_REGIONENCLR_PRGN0WA_Msk: u32 = 16777216;
pub const MWU_REGIONENCLR_PRGN0WA_Disabled: u32 = 0;
pub const MWU_REGIONENCLR_PRGN0WA_Enabled: u32 = 1;
pub const MWU_REGIONENCLR_PRGN0WA_Clear: u32 = 1;
pub const MWU_REGIONENCLR_RGN3RA_Pos: u32 = 7;
pub const MWU_REGIONENCLR_RGN3RA_Msk: u32 = 128;
pub const MWU_REGIONENCLR_RGN3RA_Disabled: u32 = 0;
pub const MWU_REGIONENCLR_RGN3RA_Enabled: u32 = 1;
pub const MWU_REGIONENCLR_RGN3RA_Clear: u32 = 1;
pub const MWU_REGIONENCLR_RGN3WA_Pos: u32 = 6;
pub const MWU_REGIONENCLR_RGN3WA_Msk: u32 = 64;
pub const MWU_REGIONENCLR_RGN3WA_Disabled: u32 = 0;
pub const MWU_REGIONENCLR_RGN3WA_Enabled: u32 = 1;
pub const MWU_REGIONENCLR_RGN3WA_Clear: u32 = 1;
pub const MWU_REGIONENCLR_RGN2RA_Pos: u32 = 5;
pub const MWU_REGIONENCLR_RGN2RA_Msk: u32 = 32;
pub const MWU_REGIONENCLR_RGN2RA_Disabled: u32 = 0;
pub const MWU_REGIONENCLR_RGN2RA_Enabled: u32 = 1;
pub const MWU_REGIONENCLR_RGN2RA_Clear: u32 = 1;
pub const MWU_REGIONENCLR_RGN2WA_Pos: u32 = 4;
pub const MWU_REGIONENCLR_RGN2WA_Msk: u32 = 16;
pub const MWU_REGIONENCLR_RGN2WA_Disabled: u32 = 0;
pub const MWU_REGIONENCLR_RGN2WA_Enabled: u32 = 1;
pub const MWU_REGIONENCLR_RGN2WA_Clear: u32 = 1;
pub const MWU_REGIONENCLR_RGN1RA_Pos: u32 = 3;
pub const MWU_REGIONENCLR_RGN1RA_Msk: u32 = 8;
pub const MWU_REGIONENCLR_RGN1RA_Disabled: u32 = 0;
pub const MWU_REGIONENCLR_RGN1RA_Enabled: u32 = 1;
pub const MWU_REGIONENCLR_RGN1RA_Clear: u32 = 1;
pub const MWU_REGIONENCLR_RGN1WA_Pos: u32 = 2;
pub const MWU_REGIONENCLR_RGN1WA_Msk: u32 = 4;
pub const MWU_REGIONENCLR_RGN1WA_Disabled: u32 = 0;
pub const MWU_REGIONENCLR_RGN1WA_Enabled: u32 = 1;
pub const MWU_REGIONENCLR_RGN1WA_Clear: u32 = 1;
pub const MWU_REGIONENCLR_RGN0RA_Pos: u32 = 1;
pub const MWU_REGIONENCLR_RGN0RA_Msk: u32 = 2;
pub const MWU_REGIONENCLR_RGN0RA_Disabled: u32 = 0;
pub const MWU_REGIONENCLR_RGN0RA_Enabled: u32 = 1;
pub const MWU_REGIONENCLR_RGN0RA_Clear: u32 = 1;
pub const MWU_REGIONENCLR_RGN0WA_Pos: u32 = 0;
pub const MWU_REGIONENCLR_RGN0WA_Msk: u32 = 1;
pub const MWU_REGIONENCLR_RGN0WA_Disabled: u32 = 0;
pub const MWU_REGIONENCLR_RGN0WA_Enabled: u32 = 1;
pub const MWU_REGIONENCLR_RGN0WA_Clear: u32 = 1;
pub const MWU_REGION_START_START_Pos: u32 = 0;
pub const MWU_REGION_START_START_Msk: u32 = 4294967295;
pub const MWU_REGION_END_END_Pos: u32 = 0;
pub const MWU_REGION_END_END_Msk: u32 = 4294967295;
pub const MWU_PREGION_START_START_Pos: u32 = 0;
pub const MWU_PREGION_START_START_Msk: u32 = 4294967295;
pub const MWU_PREGION_END_END_Pos: u32 = 0;
pub const MWU_PREGION_END_END_Msk: u32 = 4294967295;
pub const MWU_PREGION_SUBS_SR31_Pos: u32 = 31;
pub const MWU_PREGION_SUBS_SR31_Msk: u32 = 2147483648;
pub const MWU_PREGION_SUBS_SR31_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR31_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR30_Pos: u32 = 30;
pub const MWU_PREGION_SUBS_SR30_Msk: u32 = 1073741824;
pub const MWU_PREGION_SUBS_SR30_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR30_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR29_Pos: u32 = 29;
pub const MWU_PREGION_SUBS_SR29_Msk: u32 = 536870912;
pub const MWU_PREGION_SUBS_SR29_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR29_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR28_Pos: u32 = 28;
pub const MWU_PREGION_SUBS_SR28_Msk: u32 = 268435456;
pub const MWU_PREGION_SUBS_SR28_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR28_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR27_Pos: u32 = 27;
pub const MWU_PREGION_SUBS_SR27_Msk: u32 = 134217728;
pub const MWU_PREGION_SUBS_SR27_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR27_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR26_Pos: u32 = 26;
pub const MWU_PREGION_SUBS_SR26_Msk: u32 = 67108864;
pub const MWU_PREGION_SUBS_SR26_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR26_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR25_Pos: u32 = 25;
pub const MWU_PREGION_SUBS_SR25_Msk: u32 = 33554432;
pub const MWU_PREGION_SUBS_SR25_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR25_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR24_Pos: u32 = 24;
pub const MWU_PREGION_SUBS_SR24_Msk: u32 = 16777216;
pub const MWU_PREGION_SUBS_SR24_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR24_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR23_Pos: u32 = 23;
pub const MWU_PREGION_SUBS_SR23_Msk: u32 = 8388608;
pub const MWU_PREGION_SUBS_SR23_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR23_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR22_Pos: u32 = 22;
pub const MWU_PREGION_SUBS_SR22_Msk: u32 = 4194304;
pub const MWU_PREGION_SUBS_SR22_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR22_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR21_Pos: u32 = 21;
pub const MWU_PREGION_SUBS_SR21_Msk: u32 = 2097152;
pub const MWU_PREGION_SUBS_SR21_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR21_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR20_Pos: u32 = 20;
pub const MWU_PREGION_SUBS_SR20_Msk: u32 = 1048576;
pub const MWU_PREGION_SUBS_SR20_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR20_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR19_Pos: u32 = 19;
pub const MWU_PREGION_SUBS_SR19_Msk: u32 = 524288;
pub const MWU_PREGION_SUBS_SR19_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR19_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR18_Pos: u32 = 18;
pub const MWU_PREGION_SUBS_SR18_Msk: u32 = 262144;
pub const MWU_PREGION_SUBS_SR18_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR18_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR17_Pos: u32 = 17;
pub const MWU_PREGION_SUBS_SR17_Msk: u32 = 131072;
pub const MWU_PREGION_SUBS_SR17_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR17_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR16_Pos: u32 = 16;
pub const MWU_PREGION_SUBS_SR16_Msk: u32 = 65536;
pub const MWU_PREGION_SUBS_SR16_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR16_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR15_Pos: u32 = 15;
pub const MWU_PREGION_SUBS_SR15_Msk: u32 = 32768;
pub const MWU_PREGION_SUBS_SR15_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR15_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR14_Pos: u32 = 14;
pub const MWU_PREGION_SUBS_SR14_Msk: u32 = 16384;
pub const MWU_PREGION_SUBS_SR14_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR14_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR13_Pos: u32 = 13;
pub const MWU_PREGION_SUBS_SR13_Msk: u32 = 8192;
pub const MWU_PREGION_SUBS_SR13_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR13_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR12_Pos: u32 = 12;
pub const MWU_PREGION_SUBS_SR12_Msk: u32 = 4096;
pub const MWU_PREGION_SUBS_SR12_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR12_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR11_Pos: u32 = 11;
pub const MWU_PREGION_SUBS_SR11_Msk: u32 = 2048;
pub const MWU_PREGION_SUBS_SR11_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR11_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR10_Pos: u32 = 10;
pub const MWU_PREGION_SUBS_SR10_Msk: u32 = 1024;
pub const MWU_PREGION_SUBS_SR10_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR10_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR9_Pos: u32 = 9;
pub const MWU_PREGION_SUBS_SR9_Msk: u32 = 512;
pub const MWU_PREGION_SUBS_SR9_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR9_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR8_Pos: u32 = 8;
pub const MWU_PREGION_SUBS_SR8_Msk: u32 = 256;
pub const MWU_PREGION_SUBS_SR8_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR8_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR7_Pos: u32 = 7;
pub const MWU_PREGION_SUBS_SR7_Msk: u32 = 128;
pub const MWU_PREGION_SUBS_SR7_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR7_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR6_Pos: u32 = 6;
pub const MWU_PREGION_SUBS_SR6_Msk: u32 = 64;
pub const MWU_PREGION_SUBS_SR6_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR6_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR5_Pos: u32 = 5;
pub const MWU_PREGION_SUBS_SR5_Msk: u32 = 32;
pub const MWU_PREGION_SUBS_SR5_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR5_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR4_Pos: u32 = 4;
pub const MWU_PREGION_SUBS_SR4_Msk: u32 = 16;
pub const MWU_PREGION_SUBS_SR4_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR4_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR3_Pos: u32 = 3;
pub const MWU_PREGION_SUBS_SR3_Msk: u32 = 8;
pub const MWU_PREGION_SUBS_SR3_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR3_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR2_Pos: u32 = 2;
pub const MWU_PREGION_SUBS_SR2_Msk: u32 = 4;
pub const MWU_PREGION_SUBS_SR2_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR2_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR1_Pos: u32 = 1;
pub const MWU_PREGION_SUBS_SR1_Msk: u32 = 2;
pub const MWU_PREGION_SUBS_SR1_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR1_Include: u32 = 1;
pub const MWU_PREGION_SUBS_SR0_Pos: u32 = 0;
pub const MWU_PREGION_SUBS_SR0_Msk: u32 = 1;
pub const MWU_PREGION_SUBS_SR0_Exclude: u32 = 0;
pub const MWU_PREGION_SUBS_SR0_Include: u32 = 1;
pub const NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Pos: u32 = 0;
pub const NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Msk: u32 = 1;
pub const NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Trigger: u32 = 1;
pub const NFCT_TASKS_DISABLE_TASKS_DISABLE_Pos: u32 = 0;
pub const NFCT_TASKS_DISABLE_TASKS_DISABLE_Msk: u32 = 1;
pub const NFCT_TASKS_DISABLE_TASKS_DISABLE_Trigger: u32 = 1;
pub const NFCT_TASKS_SENSE_TASKS_SENSE_Pos: u32 = 0;
pub const NFCT_TASKS_SENSE_TASKS_SENSE_Msk: u32 = 1;
pub const NFCT_TASKS_SENSE_TASKS_SENSE_Trigger: u32 = 1;
pub const NFCT_TASKS_STARTTX_TASKS_STARTTX_Pos: u32 = 0;
pub const NFCT_TASKS_STARTTX_TASKS_STARTTX_Msk: u32 = 1;
pub const NFCT_TASKS_STARTTX_TASKS_STARTTX_Trigger: u32 = 1;
pub const NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Pos: u32 = 0;
pub const NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Msk: u32 = 1;
pub const NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Trigger: u32 = 1;
pub const NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Pos: u32 = 0;
pub const NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Msk: u32 = 1;
pub const NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Trigger: u32 = 1;
pub const NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Pos: u32 = 0;
pub const NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Msk: u32 = 1;
pub const NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Trigger: u32 = 1;
pub const NFCT_EVENTS_READY_EVENTS_READY_Pos: u32 = 0;
pub const NFCT_EVENTS_READY_EVENTS_READY_Msk: u32 = 1;
pub const NFCT_EVENTS_READY_EVENTS_READY_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_READY_EVENTS_READY_Generated: u32 = 1;
pub const NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Pos: u32 = 0;
pub const NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Msk: u32 = 1;
pub const NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Generated: u32 = 1;
pub const NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Pos: u32 = 0;
pub const NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Msk: u32 = 1;
pub const NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Generated: u32 = 1;
pub const NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Pos: u32 = 0;
pub const NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Msk: u32 = 1;
pub const NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Generated: u32 = 1;
pub const NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Pos: u32 = 0;
pub const NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Msk: u32 = 1;
pub const NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Generated: u32 = 1;
pub const NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Pos: u32 = 0;
pub const NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Msk: u32 = 1;
pub const NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Generated: u32 = 1;
pub const NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Pos: u32 = 0;
pub const NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Msk: u32 = 1;
pub const NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Generated: u32 = 1;
pub const NFCT_EVENTS_ERROR_EVENTS_ERROR_Pos: u32 = 0;
pub const NFCT_EVENTS_ERROR_EVENTS_ERROR_Msk: u32 = 1;
pub const NFCT_EVENTS_ERROR_EVENTS_ERROR_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_ERROR_EVENTS_ERROR_Generated: u32 = 1;
pub const NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Pos: u32 = 0;
pub const NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Msk: u32 = 1;
pub const NFCT_EVENTS_RXERROR_EVENTS_RXERROR_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Generated: u32 = 1;
pub const NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Pos: u32 = 0;
pub const NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Msk: u32 = 1;
pub const NFCT_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Generated: u32 = 1;
pub const NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Pos: u32 = 0;
pub const NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Msk: u32 = 1;
pub const NFCT_EVENTS_ENDTX_EVENTS_ENDTX_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Generated: u32 = 1;
pub const NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Pos: u32 = 0;
pub const NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Msk: u32 = 1;
pub const NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Generated: u32 = 1;
pub const NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Pos: u32 = 0;
pub const NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Msk: u32 = 1;
pub const NFCT_EVENTS_COLLISION_EVENTS_COLLISION_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Generated: u32 = 1;
pub const NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Pos: u32 = 0;
pub const NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Msk: u32 = 1;
pub const NFCT_EVENTS_SELECTED_EVENTS_SELECTED_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Generated: u32 = 1;
pub const NFCT_EVENTS_STARTED_EVENTS_STARTED_Pos: u32 = 0;
pub const NFCT_EVENTS_STARTED_EVENTS_STARTED_Msk: u32 = 1;
pub const NFCT_EVENTS_STARTED_EVENTS_STARTED_NotGenerated: u32 = 0;
pub const NFCT_EVENTS_STARTED_EVENTS_STARTED_Generated: u32 = 1;
pub const NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Pos: u32 = 5;
pub const NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Msk: u32 = 32;
pub const NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Disabled: u32 = 0;
pub const NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Enabled: u32 = 1;
pub const NFCT_SHORTS_FIELDLOST_SENSE_Pos: u32 = 1;
pub const NFCT_SHORTS_FIELDLOST_SENSE_Msk: u32 = 2;
pub const NFCT_SHORTS_FIELDLOST_SENSE_Disabled: u32 = 0;
pub const NFCT_SHORTS_FIELDLOST_SENSE_Enabled: u32 = 1;
pub const NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Pos: u32 = 0;
pub const NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Msk: u32 = 1;
pub const NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Disabled: u32 = 0;
pub const NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Enabled: u32 = 1;
pub const NFCT_INTEN_STARTED_Pos: u32 = 20;
pub const NFCT_INTEN_STARTED_Msk: u32 = 1048576;
pub const NFCT_INTEN_STARTED_Disabled: u32 = 0;
pub const NFCT_INTEN_STARTED_Enabled: u32 = 1;
pub const NFCT_INTEN_SELECTED_Pos: u32 = 19;
pub const NFCT_INTEN_SELECTED_Msk: u32 = 524288;
pub const NFCT_INTEN_SELECTED_Disabled: u32 = 0;
pub const NFCT_INTEN_SELECTED_Enabled: u32 = 1;
pub const NFCT_INTEN_COLLISION_Pos: u32 = 18;
pub const NFCT_INTEN_COLLISION_Msk: u32 = 262144;
pub const NFCT_INTEN_COLLISION_Disabled: u32 = 0;
pub const NFCT_INTEN_COLLISION_Enabled: u32 = 1;
pub const NFCT_INTEN_AUTOCOLRESSTARTED_Pos: u32 = 14;
pub const NFCT_INTEN_AUTOCOLRESSTARTED_Msk: u32 = 16384;
pub const NFCT_INTEN_AUTOCOLRESSTARTED_Disabled: u32 = 0;
pub const NFCT_INTEN_AUTOCOLRESSTARTED_Enabled: u32 = 1;
pub const NFCT_INTEN_ENDTX_Pos: u32 = 12;
pub const NFCT_INTEN_ENDTX_Msk: u32 = 4096;
pub const NFCT_INTEN_ENDTX_Disabled: u32 = 0;
pub const NFCT_INTEN_ENDTX_Enabled: u32 = 1;
pub const NFCT_INTEN_ENDRX_Pos: u32 = 11;
pub const NFCT_INTEN_ENDRX_Msk: u32 = 2048;
pub const NFCT_INTEN_ENDRX_Disabled: u32 = 0;
pub const NFCT_INTEN_ENDRX_Enabled: u32 = 1;
pub const NFCT_INTEN_RXERROR_Pos: u32 = 10;
pub const NFCT_INTEN_RXERROR_Msk: u32 = 1024;
pub const NFCT_INTEN_RXERROR_Disabled: u32 = 0;
pub const NFCT_INTEN_RXERROR_Enabled: u32 = 1;
pub const NFCT_INTEN_ERROR_Pos: u32 = 7;
pub const NFCT_INTEN_ERROR_Msk: u32 = 128;
pub const NFCT_INTEN_ERROR_Disabled: u32 = 0;
pub const NFCT_INTEN_ERROR_Enabled: u32 = 1;
pub const NFCT_INTEN_RXFRAMEEND_Pos: u32 = 6;
pub const NFCT_INTEN_RXFRAMEEND_Msk: u32 = 64;
pub const NFCT_INTEN_RXFRAMEEND_Disabled: u32 = 0;
pub const NFCT_INTEN_RXFRAMEEND_Enabled: u32 = 1;
pub const NFCT_INTEN_RXFRAMESTART_Pos: u32 = 5;
pub const NFCT_INTEN_RXFRAMESTART_Msk: u32 = 32;
pub const NFCT_INTEN_RXFRAMESTART_Disabled: u32 = 0;
pub const NFCT_INTEN_RXFRAMESTART_Enabled: u32 = 1;
pub const NFCT_INTEN_TXFRAMEEND_Pos: u32 = 4;
pub const NFCT_INTEN_TXFRAMEEND_Msk: u32 = 16;
pub const NFCT_INTEN_TXFRAMEEND_Disabled: u32 = 0;
pub const NFCT_INTEN_TXFRAMEEND_Enabled: u32 = 1;
pub const NFCT_INTEN_TXFRAMESTART_Pos: u32 = 3;
pub const NFCT_INTEN_TXFRAMESTART_Msk: u32 = 8;
pub const NFCT_INTEN_TXFRAMESTART_Disabled: u32 = 0;
pub const NFCT_INTEN_TXFRAMESTART_Enabled: u32 = 1;
pub const NFCT_INTEN_FIELDLOST_Pos: u32 = 2;
pub const NFCT_INTEN_FIELDLOST_Msk: u32 = 4;
pub const NFCT_INTEN_FIELDLOST_Disabled: u32 = 0;
pub const NFCT_INTEN_FIELDLOST_Enabled: u32 = 1;
pub const NFCT_INTEN_FIELDDETECTED_Pos: u32 = 1;
pub const NFCT_INTEN_FIELDDETECTED_Msk: u32 = 2;
pub const NFCT_INTEN_FIELDDETECTED_Disabled: u32 = 0;
pub const NFCT_INTEN_FIELDDETECTED_Enabled: u32 = 1;
pub const NFCT_INTEN_READY_Pos: u32 = 0;
pub const NFCT_INTEN_READY_Msk: u32 = 1;
pub const NFCT_INTEN_READY_Disabled: u32 = 0;
pub const NFCT_INTEN_READY_Enabled: u32 = 1;
pub const NFCT_INTENSET_STARTED_Pos: u32 = 20;
pub const NFCT_INTENSET_STARTED_Msk: u32 = 1048576;
pub const NFCT_INTENSET_STARTED_Disabled: u32 = 0;
pub const NFCT_INTENSET_STARTED_Enabled: u32 = 1;
pub const NFCT_INTENSET_STARTED_Set: u32 = 1;
pub const NFCT_INTENSET_SELECTED_Pos: u32 = 19;
pub const NFCT_INTENSET_SELECTED_Msk: u32 = 524288;
pub const NFCT_INTENSET_SELECTED_Disabled: u32 = 0;
pub const NFCT_INTENSET_SELECTED_Enabled: u32 = 1;
pub const NFCT_INTENSET_SELECTED_Set: u32 = 1;
pub const NFCT_INTENSET_COLLISION_Pos: u32 = 18;
pub const NFCT_INTENSET_COLLISION_Msk: u32 = 262144;
pub const NFCT_INTENSET_COLLISION_Disabled: u32 = 0;
pub const NFCT_INTENSET_COLLISION_Enabled: u32 = 1;
pub const NFCT_INTENSET_COLLISION_Set: u32 = 1;
pub const NFCT_INTENSET_AUTOCOLRESSTARTED_Pos: u32 = 14;
pub const NFCT_INTENSET_AUTOCOLRESSTARTED_Msk: u32 = 16384;
pub const NFCT_INTENSET_AUTOCOLRESSTARTED_Disabled: u32 = 0;
pub const NFCT_INTENSET_AUTOCOLRESSTARTED_Enabled: u32 = 1;
pub const NFCT_INTENSET_AUTOCOLRESSTARTED_Set: u32 = 1;
pub const NFCT_INTENSET_ENDTX_Pos: u32 = 12;
pub const NFCT_INTENSET_ENDTX_Msk: u32 = 4096;
pub const NFCT_INTENSET_ENDTX_Disabled: u32 = 0;
pub const NFCT_INTENSET_ENDTX_Enabled: u32 = 1;
pub const NFCT_INTENSET_ENDTX_Set: u32 = 1;
pub const NFCT_INTENSET_ENDRX_Pos: u32 = 11;
pub const NFCT_INTENSET_ENDRX_Msk: u32 = 2048;
pub const NFCT_INTENSET_ENDRX_Disabled: u32 = 0;
pub const NFCT_INTENSET_ENDRX_Enabled: u32 = 1;
pub const NFCT_INTENSET_ENDRX_Set: u32 = 1;
pub const NFCT_INTENSET_RXERROR_Pos: u32 = 10;
pub const NFCT_INTENSET_RXERROR_Msk: u32 = 1024;
pub const NFCT_INTENSET_RXERROR_Disabled: u32 = 0;
pub const NFCT_INTENSET_RXERROR_Enabled: u32 = 1;
pub const NFCT_INTENSET_RXERROR_Set: u32 = 1;
pub const NFCT_INTENSET_ERROR_Pos: u32 = 7;
pub const NFCT_INTENSET_ERROR_Msk: u32 = 128;
pub const NFCT_INTENSET_ERROR_Disabled: u32 = 0;
pub const NFCT_INTENSET_ERROR_Enabled: u32 = 1;
pub const NFCT_INTENSET_ERROR_Set: u32 = 1;
pub const NFCT_INTENSET_RXFRAMEEND_Pos: u32 = 6;
pub const NFCT_INTENSET_RXFRAMEEND_Msk: u32 = 64;
pub const NFCT_INTENSET_RXFRAMEEND_Disabled: u32 = 0;
pub const NFCT_INTENSET_RXFRAMEEND_Enabled: u32 = 1;
pub const NFCT_INTENSET_RXFRAMEEND_Set: u32 = 1;
pub const NFCT_INTENSET_RXFRAMESTART_Pos: u32 = 5;
pub const NFCT_INTENSET_RXFRAMESTART_Msk: u32 = 32;
pub const NFCT_INTENSET_RXFRAMESTART_Disabled: u32 = 0;
pub const NFCT_INTENSET_RXFRAMESTART_Enabled: u32 = 1;
pub const NFCT_INTENSET_RXFRAMESTART_Set: u32 = 1;
pub const NFCT_INTENSET_TXFRAMEEND_Pos: u32 = 4;
pub const NFCT_INTENSET_TXFRAMEEND_Msk: u32 = 16;
pub const NFCT_INTENSET_TXFRAMEEND_Disabled: u32 = 0;
pub const NFCT_INTENSET_TXFRAMEEND_Enabled: u32 = 1;
pub const NFCT_INTENSET_TXFRAMEEND_Set: u32 = 1;
pub const NFCT_INTENSET_TXFRAMESTART_Pos: u32 = 3;
pub const NFCT_INTENSET_TXFRAMESTART_Msk: u32 = 8;
pub const NFCT_INTENSET_TXFRAMESTART_Disabled: u32 = 0;
pub const NFCT_INTENSET_TXFRAMESTART_Enabled: u32 = 1;
pub const NFCT_INTENSET_TXFRAMESTART_Set: u32 = 1;
pub const NFCT_INTENSET_FIELDLOST_Pos: u32 = 2;
pub const NFCT_INTENSET_FIELDLOST_Msk: u32 = 4;
pub const NFCT_INTENSET_FIELDLOST_Disabled: u32 = 0;
pub const NFCT_INTENSET_FIELDLOST_Enabled: u32 = 1;
pub const NFCT_INTENSET_FIELDLOST_Set: u32 = 1;
pub const NFCT_INTENSET_FIELDDETECTED_Pos: u32 = 1;
pub const NFCT_INTENSET_FIELDDETECTED_Msk: u32 = 2;
pub const NFCT_INTENSET_FIELDDETECTED_Disabled: u32 = 0;
pub const NFCT_INTENSET_FIELDDETECTED_Enabled: u32 = 1;
pub const NFCT_INTENSET_FIELDDETECTED_Set: u32 = 1;
pub const NFCT_INTENSET_READY_Pos: u32 = 0;
pub const NFCT_INTENSET_READY_Msk: u32 = 1;
pub const NFCT_INTENSET_READY_Disabled: u32 = 0;
pub const NFCT_INTENSET_READY_Enabled: u32 = 1;
pub const NFCT_INTENSET_READY_Set: u32 = 1;
pub const NFCT_INTENCLR_STARTED_Pos: u32 = 20;
pub const NFCT_INTENCLR_STARTED_Msk: u32 = 1048576;
pub const NFCT_INTENCLR_STARTED_Disabled: u32 = 0;
pub const NFCT_INTENCLR_STARTED_Enabled: u32 = 1;
pub const NFCT_INTENCLR_STARTED_Clear: u32 = 1;
pub const NFCT_INTENCLR_SELECTED_Pos: u32 = 19;
pub const NFCT_INTENCLR_SELECTED_Msk: u32 = 524288;
pub const NFCT_INTENCLR_SELECTED_Disabled: u32 = 0;
pub const NFCT_INTENCLR_SELECTED_Enabled: u32 = 1;
pub const NFCT_INTENCLR_SELECTED_Clear: u32 = 1;
pub const NFCT_INTENCLR_COLLISION_Pos: u32 = 18;
pub const NFCT_INTENCLR_COLLISION_Msk: u32 = 262144;
pub const NFCT_INTENCLR_COLLISION_Disabled: u32 = 0;
pub const NFCT_INTENCLR_COLLISION_Enabled: u32 = 1;
pub const NFCT_INTENCLR_COLLISION_Clear: u32 = 1;
pub const NFCT_INTENCLR_AUTOCOLRESSTARTED_Pos: u32 = 14;
pub const NFCT_INTENCLR_AUTOCOLRESSTARTED_Msk: u32 = 16384;
pub const NFCT_INTENCLR_AUTOCOLRESSTARTED_Disabled: u32 = 0;
pub const NFCT_INTENCLR_AUTOCOLRESSTARTED_Enabled: u32 = 1;
pub const NFCT_INTENCLR_AUTOCOLRESSTARTED_Clear: u32 = 1;
pub const NFCT_INTENCLR_ENDTX_Pos: u32 = 12;
pub const NFCT_INTENCLR_ENDTX_Msk: u32 = 4096;
pub const NFCT_INTENCLR_ENDTX_Disabled: u32 = 0;
pub const NFCT_INTENCLR_ENDTX_Enabled: u32 = 1;
pub const NFCT_INTENCLR_ENDTX_Clear: u32 = 1;
pub const NFCT_INTENCLR_ENDRX_Pos: u32 = 11;
pub const NFCT_INTENCLR_ENDRX_Msk: u32 = 2048;
pub const NFCT_INTENCLR_ENDRX_Disabled: u32 = 0;
pub const NFCT_INTENCLR_ENDRX_Enabled: u32 = 1;
pub const NFCT_INTENCLR_ENDRX_Clear: u32 = 1;
pub const NFCT_INTENCLR_RXERROR_Pos: u32 = 10;
pub const NFCT_INTENCLR_RXERROR_Msk: u32 = 1024;
pub const NFCT_INTENCLR_RXERROR_Disabled: u32 = 0;
pub const NFCT_INTENCLR_RXERROR_Enabled: u32 = 1;
pub const NFCT_INTENCLR_RXERROR_Clear: u32 = 1;
pub const NFCT_INTENCLR_ERROR_Pos: u32 = 7;
pub const NFCT_INTENCLR_ERROR_Msk: u32 = 128;
pub const NFCT_INTENCLR_ERROR_Disabled: u32 = 0;
pub const NFCT_INTENCLR_ERROR_Enabled: u32 = 1;
pub const NFCT_INTENCLR_ERROR_Clear: u32 = 1;
pub const NFCT_INTENCLR_RXFRAMEEND_Pos: u32 = 6;
pub const NFCT_INTENCLR_RXFRAMEEND_Msk: u32 = 64;
pub const NFCT_INTENCLR_RXFRAMEEND_Disabled: u32 = 0;
pub const NFCT_INTENCLR_RXFRAMEEND_Enabled: u32 = 1;
pub const NFCT_INTENCLR_RXFRAMEEND_Clear: u32 = 1;
pub const NFCT_INTENCLR_RXFRAMESTART_Pos: u32 = 5;
pub const NFCT_INTENCLR_RXFRAMESTART_Msk: u32 = 32;
pub const NFCT_INTENCLR_RXFRAMESTART_Disabled: u32 = 0;
pub const NFCT_INTENCLR_RXFRAMESTART_Enabled: u32 = 1;
pub const NFCT_INTENCLR_RXFRAMESTART_Clear: u32 = 1;
pub const NFCT_INTENCLR_TXFRAMEEND_Pos: u32 = 4;
pub const NFCT_INTENCLR_TXFRAMEEND_Msk: u32 = 16;
pub const NFCT_INTENCLR_TXFRAMEEND_Disabled: u32 = 0;
pub const NFCT_INTENCLR_TXFRAMEEND_Enabled: u32 = 1;
pub const NFCT_INTENCLR_TXFRAMEEND_Clear: u32 = 1;
pub const NFCT_INTENCLR_TXFRAMESTART_Pos: u32 = 3;
pub const NFCT_INTENCLR_TXFRAMESTART_Msk: u32 = 8;
pub const NFCT_INTENCLR_TXFRAMESTART_Disabled: u32 = 0;
pub const NFCT_INTENCLR_TXFRAMESTART_Enabled: u32 = 1;
pub const NFCT_INTENCLR_TXFRAMESTART_Clear: u32 = 1;
pub const NFCT_INTENCLR_FIELDLOST_Pos: u32 = 2;
pub const NFCT_INTENCLR_FIELDLOST_Msk: u32 = 4;
pub const NFCT_INTENCLR_FIELDLOST_Disabled: u32 = 0;
pub const NFCT_INTENCLR_FIELDLOST_Enabled: u32 = 1;
pub const NFCT_INTENCLR_FIELDLOST_Clear: u32 = 1;
pub const NFCT_INTENCLR_FIELDDETECTED_Pos: u32 = 1;
pub const NFCT_INTENCLR_FIELDDETECTED_Msk: u32 = 2;
pub const NFCT_INTENCLR_FIELDDETECTED_Disabled: u32 = 0;
pub const NFCT_INTENCLR_FIELDDETECTED_Enabled: u32 = 1;
pub const NFCT_INTENCLR_FIELDDETECTED_Clear: u32 = 1;
pub const NFCT_INTENCLR_READY_Pos: u32 = 0;
pub const NFCT_INTENCLR_READY_Msk: u32 = 1;
pub const NFCT_INTENCLR_READY_Disabled: u32 = 0;
pub const NFCT_INTENCLR_READY_Enabled: u32 = 1;
pub const NFCT_INTENCLR_READY_Clear: u32 = 1;
pub const NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Pos: u32 = 0;
pub const NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Msk: u32 = 1;
pub const NFCT_FRAMESTATUS_RX_OVERRUN_Pos: u32 = 3;
pub const NFCT_FRAMESTATUS_RX_OVERRUN_Msk: u32 = 8;
pub const NFCT_FRAMESTATUS_RX_OVERRUN_NoOverrun: u32 = 0;
pub const NFCT_FRAMESTATUS_RX_OVERRUN_Overrun: u32 = 1;
pub const NFCT_FRAMESTATUS_RX_PARITYSTATUS_Pos: u32 = 2;
pub const NFCT_FRAMESTATUS_RX_PARITYSTATUS_Msk: u32 = 4;
pub const NFCT_FRAMESTATUS_RX_PARITYSTATUS_ParityOK: u32 = 0;
pub const NFCT_FRAMESTATUS_RX_PARITYSTATUS_ParityError: u32 = 1;
pub const NFCT_FRAMESTATUS_RX_CRCERROR_Pos: u32 = 0;
pub const NFCT_FRAMESTATUS_RX_CRCERROR_Msk: u32 = 1;
pub const NFCT_FRAMESTATUS_RX_CRCERROR_CRCCorrect: u32 = 0;
pub const NFCT_FRAMESTATUS_RX_CRCERROR_CRCError: u32 = 1;
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_Pos: u32 = 0;
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_Msk: u32 = 7;
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_Disabled: u32 = 0;
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_RampUp: u32 = 2;
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_Idle: u32 = 3;
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_Receive: u32 = 4;
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_FrameDelay: u32 = 5;
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_Transmit: u32 = 6;
pub const NFCT_SLEEPSTATE_SLEEPSTATE_Pos: u32 = 0;
pub const NFCT_SLEEPSTATE_SLEEPSTATE_Msk: u32 = 1;
pub const NFCT_SLEEPSTATE_SLEEPSTATE_Idle: u32 = 0;
pub const NFCT_SLEEPSTATE_SLEEPSTATE_SleepA: u32 = 1;
pub const NFCT_FIELDPRESENT_LOCKDETECT_Pos: u32 = 1;
pub const NFCT_FIELDPRESENT_LOCKDETECT_Msk: u32 = 2;
pub const NFCT_FIELDPRESENT_LOCKDETECT_NotLocked: u32 = 0;
pub const NFCT_FIELDPRESENT_LOCKDETECT_Locked: u32 = 1;
pub const NFCT_FIELDPRESENT_FIELDPRESENT_Pos: u32 = 0;
pub const NFCT_FIELDPRESENT_FIELDPRESENT_Msk: u32 = 1;
pub const NFCT_FIELDPRESENT_FIELDPRESENT_NoField: u32 = 0;
pub const NFCT_FIELDPRESENT_FIELDPRESENT_FieldPresent: u32 = 1;
pub const NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Pos: u32 = 0;
pub const NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Msk: u32 = 65535;
pub const NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos: u32 = 0;
pub const NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Msk: u32 = 1048575;
pub const NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Pos: u32 = 0;
pub const NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Msk: u32 = 3;
pub const NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_FreeRun: u32 = 0;
pub const NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Window: u32 = 1;
pub const NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_ExactVal: u32 = 2;
pub const NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_WindowGrid: u32 = 3;
pub const NFCT_PACKETPTR_PTR_Pos: u32 = 0;
pub const NFCT_PACKETPTR_PTR_Msk: u32 = 4294967295;
pub const NFCT_MAXLEN_MAXLEN_Pos: u32 = 0;
pub const NFCT_MAXLEN_MAXLEN_Msk: u32 = 511;
pub const NFCT_TXD_FRAMECONFIG_CRCMODETX_Pos: u32 = 4;
pub const NFCT_TXD_FRAMECONFIG_CRCMODETX_Msk: u32 = 16;
pub const NFCT_TXD_FRAMECONFIG_CRCMODETX_NoCRCTX: u32 = 0;
pub const NFCT_TXD_FRAMECONFIG_CRCMODETX_CRC16TX: u32 = 1;
pub const NFCT_TXD_FRAMECONFIG_SOF_Pos: u32 = 2;
pub const NFCT_TXD_FRAMECONFIG_SOF_Msk: u32 = 4;
pub const NFCT_TXD_FRAMECONFIG_SOF_NoSoF: u32 = 0;
pub const NFCT_TXD_FRAMECONFIG_SOF_SoF: u32 = 1;
pub const NFCT_TXD_FRAMECONFIG_DISCARDMODE_Pos: u32 = 1;
pub const NFCT_TXD_FRAMECONFIG_DISCARDMODE_Msk: u32 = 2;
pub const NFCT_TXD_FRAMECONFIG_DISCARDMODE_DiscardEnd: u32 = 0;
pub const NFCT_TXD_FRAMECONFIG_DISCARDMODE_DiscardStart: u32 = 1;
pub const NFCT_TXD_FRAMECONFIG_PARITY_Pos: u32 = 0;
pub const NFCT_TXD_FRAMECONFIG_PARITY_Msk: u32 = 1;
pub const NFCT_TXD_FRAMECONFIG_PARITY_NoParity: u32 = 0;
pub const NFCT_TXD_FRAMECONFIG_PARITY_Parity: u32 = 1;
pub const NFCT_TXD_AMOUNT_TXDATABYTES_Pos: u32 = 3;
pub const NFCT_TXD_AMOUNT_TXDATABYTES_Msk: u32 = 4088;
pub const NFCT_TXD_AMOUNT_TXDATABITS_Pos: u32 = 0;
pub const NFCT_TXD_AMOUNT_TXDATABITS_Msk: u32 = 7;
pub const NFCT_RXD_FRAMECONFIG_CRCMODERX_Pos: u32 = 4;
pub const NFCT_RXD_FRAMECONFIG_CRCMODERX_Msk: u32 = 16;
pub const NFCT_RXD_FRAMECONFIG_CRCMODERX_NoCRCRX: u32 = 0;
pub const NFCT_RXD_FRAMECONFIG_CRCMODERX_CRC16RX: u32 = 1;
pub const NFCT_RXD_FRAMECONFIG_SOF_Pos: u32 = 2;
pub const NFCT_RXD_FRAMECONFIG_SOF_Msk: u32 = 4;
pub const NFCT_RXD_FRAMECONFIG_SOF_NoSoF: u32 = 0;
pub const NFCT_RXD_FRAMECONFIG_SOF_SoF: u32 = 1;
pub const NFCT_RXD_FRAMECONFIG_PARITY_Pos: u32 = 0;
pub const NFCT_RXD_FRAMECONFIG_PARITY_Msk: u32 = 1;
pub const NFCT_RXD_FRAMECONFIG_PARITY_NoParity: u32 = 0;
pub const NFCT_RXD_FRAMECONFIG_PARITY_Parity: u32 = 1;
pub const NFCT_RXD_AMOUNT_RXDATABYTES_Pos: u32 = 3;
pub const NFCT_RXD_AMOUNT_RXDATABYTES_Msk: u32 = 4088;
pub const NFCT_RXD_AMOUNT_RXDATABITS_Pos: u32 = 0;
pub const NFCT_RXD_AMOUNT_RXDATABITS_Msk: u32 = 7;
pub const NFCT_NFCID1_LAST_NFCID1_W_Pos: u32 = 24;
pub const NFCT_NFCID1_LAST_NFCID1_W_Msk: u32 = 4278190080;
pub const NFCT_NFCID1_LAST_NFCID1_X_Pos: u32 = 16;
pub const NFCT_NFCID1_LAST_NFCID1_X_Msk: u32 = 16711680;
pub const NFCT_NFCID1_LAST_NFCID1_Y_Pos: u32 = 8;
pub const NFCT_NFCID1_LAST_NFCID1_Y_Msk: u32 = 65280;
pub const NFCT_NFCID1_LAST_NFCID1_Z_Pos: u32 = 0;
pub const NFCT_NFCID1_LAST_NFCID1_Z_Msk: u32 = 255;
pub const NFCT_NFCID1_2ND_LAST_NFCID1_T_Pos: u32 = 16;
pub const NFCT_NFCID1_2ND_LAST_NFCID1_T_Msk: u32 = 16711680;
pub const NFCT_NFCID1_2ND_LAST_NFCID1_U_Pos: u32 = 8;
pub const NFCT_NFCID1_2ND_LAST_NFCID1_U_Msk: u32 = 65280;
pub const NFCT_NFCID1_2ND_LAST_NFCID1_V_Pos: u32 = 0;
pub const NFCT_NFCID1_2ND_LAST_NFCID1_V_Msk: u32 = 255;
pub const NFCT_NFCID1_3RD_LAST_NFCID1_Q_Pos: u32 = 16;
pub const NFCT_NFCID1_3RD_LAST_NFCID1_Q_Msk: u32 = 16711680;
pub const NFCT_NFCID1_3RD_LAST_NFCID1_R_Pos: u32 = 8;
pub const NFCT_NFCID1_3RD_LAST_NFCID1_R_Msk: u32 = 65280;
pub const NFCT_NFCID1_3RD_LAST_NFCID1_S_Pos: u32 = 0;
pub const NFCT_NFCID1_3RD_LAST_NFCID1_S_Msk: u32 = 255;
pub const NFCT_AUTOCOLRESCONFIG_MODE_Pos: u32 = 0;
pub const NFCT_AUTOCOLRESCONFIG_MODE_Msk: u32 = 1;
pub const NFCT_AUTOCOLRESCONFIG_MODE_Enabled: u32 = 0;
pub const NFCT_AUTOCOLRESCONFIG_MODE_Disabled: u32 = 1;
pub const NFCT_SENSRES_RFU74_Pos: u32 = 12;
pub const NFCT_SENSRES_RFU74_Msk: u32 = 61440;
pub const NFCT_SENSRES_PLATFCONFIG_Pos: u32 = 8;
pub const NFCT_SENSRES_PLATFCONFIG_Msk: u32 = 3840;
pub const NFCT_SENSRES_NFCIDSIZE_Pos: u32 = 6;
pub const NFCT_SENSRES_NFCIDSIZE_Msk: u32 = 192;
pub const NFCT_SENSRES_NFCIDSIZE_NFCID1Single: u32 = 0;
pub const NFCT_SENSRES_NFCIDSIZE_NFCID1Double: u32 = 1;
pub const NFCT_SENSRES_NFCIDSIZE_NFCID1Triple: u32 = 2;
pub const NFCT_SENSRES_RFU5_Pos: u32 = 5;
pub const NFCT_SENSRES_RFU5_Msk: u32 = 32;
pub const NFCT_SENSRES_BITFRAMESDD_Pos: u32 = 0;
pub const NFCT_SENSRES_BITFRAMESDD_Msk: u32 = 31;
pub const NFCT_SENSRES_BITFRAMESDD_SDD00000: u32 = 0;
pub const NFCT_SENSRES_BITFRAMESDD_SDD00001: u32 = 1;
pub const NFCT_SENSRES_BITFRAMESDD_SDD00010: u32 = 2;
pub const NFCT_SENSRES_BITFRAMESDD_SDD00100: u32 = 4;
pub const NFCT_SENSRES_BITFRAMESDD_SDD01000: u32 = 8;
pub const NFCT_SENSRES_BITFRAMESDD_SDD10000: u32 = 16;
pub const NFCT_SELRES_RFU7_Pos: u32 = 7;
pub const NFCT_SELRES_RFU7_Msk: u32 = 128;
pub const NFCT_SELRES_PROTOCOL_Pos: u32 = 5;
pub const NFCT_SELRES_PROTOCOL_Msk: u32 = 96;
pub const NFCT_SELRES_RFU43_Pos: u32 = 3;
pub const NFCT_SELRES_RFU43_Msk: u32 = 24;
pub const NFCT_SELRES_CASCADE_Pos: u32 = 2;
pub const NFCT_SELRES_CASCADE_Msk: u32 = 4;
pub const NFCT_SELRES_RFU10_Pos: u32 = 0;
pub const NFCT_SELRES_RFU10_Msk: u32 = 3;
pub const NVMC_READY_READY_Pos: u32 = 0;
pub const NVMC_READY_READY_Msk: u32 = 1;
pub const NVMC_READY_READY_Busy: u32 = 0;
pub const NVMC_READY_READY_Ready: u32 = 1;
pub const NVMC_READYNEXT_READYNEXT_Pos: u32 = 0;
pub const NVMC_READYNEXT_READYNEXT_Msk: u32 = 1;
pub const NVMC_READYNEXT_READYNEXT_Busy: u32 = 0;
pub const NVMC_READYNEXT_READYNEXT_Ready: u32 = 1;
pub const NVMC_CONFIG_WEN_Pos: u32 = 0;
pub const NVMC_CONFIG_WEN_Msk: u32 = 3;
pub const NVMC_CONFIG_WEN_Ren: u32 = 0;
pub const NVMC_CONFIG_WEN_Wen: u32 = 1;
pub const NVMC_CONFIG_WEN_Een: u32 = 2;
pub const NVMC_ERASEPAGE_ERASEPAGE_Pos: u32 = 0;
pub const NVMC_ERASEPAGE_ERASEPAGE_Msk: u32 = 4294967295;
pub const NVMC_ERASEPCR1_ERASEPCR1_Pos: u32 = 0;
pub const NVMC_ERASEPCR1_ERASEPCR1_Msk: u32 = 4294967295;
pub const NVMC_ERASEALL_ERASEALL_Pos: u32 = 0;
pub const NVMC_ERASEALL_ERASEALL_Msk: u32 = 1;
pub const NVMC_ERASEALL_ERASEALL_NoOperation: u32 = 0;
pub const NVMC_ERASEALL_ERASEALL_Erase: u32 = 1;
pub const NVMC_ERASEPCR0_ERASEPCR0_Pos: u32 = 0;
pub const NVMC_ERASEPCR0_ERASEPCR0_Msk: u32 = 4294967295;
pub const NVMC_ERASEUICR_ERASEUICR_Pos: u32 = 0;
pub const NVMC_ERASEUICR_ERASEUICR_Msk: u32 = 1;
pub const NVMC_ERASEUICR_ERASEUICR_NoOperation: u32 = 0;
pub const NVMC_ERASEUICR_ERASEUICR_Erase: u32 = 1;
pub const NVMC_ERASEPAGEPARTIAL_ERASEPAGEPARTIAL_Pos: u32 = 0;
pub const NVMC_ERASEPAGEPARTIAL_ERASEPAGEPARTIAL_Msk: u32 = 4294967295;
pub const NVMC_ERASEPAGEPARTIALCFG_DURATION_Pos: u32 = 0;
pub const NVMC_ERASEPAGEPARTIALCFG_DURATION_Msk: u32 = 127;
pub const NVMC_ICACHECNF_CACHEPROFEN_Pos: u32 = 8;
pub const NVMC_ICACHECNF_CACHEPROFEN_Msk: u32 = 256;
pub const NVMC_ICACHECNF_CACHEPROFEN_Disabled: u32 = 0;
pub const NVMC_ICACHECNF_CACHEPROFEN_Enabled: u32 = 1;
pub const NVMC_ICACHECNF_CACHEEN_Pos: u32 = 0;
pub const NVMC_ICACHECNF_CACHEEN_Msk: u32 = 1;
pub const NVMC_ICACHECNF_CACHEEN_Disabled: u32 = 0;
pub const NVMC_ICACHECNF_CACHEEN_Enabled: u32 = 1;
pub const NVMC_IHIT_HITS_Pos: u32 = 0;
pub const NVMC_IHIT_HITS_Msk: u32 = 4294967295;
pub const NVMC_IMISS_MISSES_Pos: u32 = 0;
pub const NVMC_IMISS_MISSES_Msk: u32 = 4294967295;
pub const GPIO_OUT_PIN31_Pos: u32 = 31;
pub const GPIO_OUT_PIN31_Msk: u32 = 2147483648;
pub const GPIO_OUT_PIN31_Low: u32 = 0;
pub const GPIO_OUT_PIN31_High: u32 = 1;
pub const GPIO_OUT_PIN30_Pos: u32 = 30;
pub const GPIO_OUT_PIN30_Msk: u32 = 1073741824;
pub const GPIO_OUT_PIN30_Low: u32 = 0;
pub const GPIO_OUT_PIN30_High: u32 = 1;
pub const GPIO_OUT_PIN29_Pos: u32 = 29;
pub const GPIO_OUT_PIN29_Msk: u32 = 536870912;
pub const GPIO_OUT_PIN29_Low: u32 = 0;
pub const GPIO_OUT_PIN29_High: u32 = 1;
pub const GPIO_OUT_PIN28_Pos: u32 = 28;
pub const GPIO_OUT_PIN28_Msk: u32 = 268435456;
pub const GPIO_OUT_PIN28_Low: u32 = 0;
pub const GPIO_OUT_PIN28_High: u32 = 1;
pub const GPIO_OUT_PIN27_Pos: u32 = 27;
pub const GPIO_OUT_PIN27_Msk: u32 = 134217728;
pub const GPIO_OUT_PIN27_Low: u32 = 0;
pub const GPIO_OUT_PIN27_High: u32 = 1;
pub const GPIO_OUT_PIN26_Pos: u32 = 26;
pub const GPIO_OUT_PIN26_Msk: u32 = 67108864;
pub const GPIO_OUT_PIN26_Low: u32 = 0;
pub const GPIO_OUT_PIN26_High: u32 = 1;
pub const GPIO_OUT_PIN25_Pos: u32 = 25;
pub const GPIO_OUT_PIN25_Msk: u32 = 33554432;
pub const GPIO_OUT_PIN25_Low: u32 = 0;
pub const GPIO_OUT_PIN25_High: u32 = 1;
pub const GPIO_OUT_PIN24_Pos: u32 = 24;
pub const GPIO_OUT_PIN24_Msk: u32 = 16777216;
pub const GPIO_OUT_PIN24_Low: u32 = 0;
pub const GPIO_OUT_PIN24_High: u32 = 1;
pub const GPIO_OUT_PIN23_Pos: u32 = 23;
pub const GPIO_OUT_PIN23_Msk: u32 = 8388608;
pub const GPIO_OUT_PIN23_Low: u32 = 0;
pub const GPIO_OUT_PIN23_High: u32 = 1;
pub const GPIO_OUT_PIN22_Pos: u32 = 22;
pub const GPIO_OUT_PIN22_Msk: u32 = 4194304;
pub const GPIO_OUT_PIN22_Low: u32 = 0;
pub const GPIO_OUT_PIN22_High: u32 = 1;
pub const GPIO_OUT_PIN21_Pos: u32 = 21;
pub const GPIO_OUT_PIN21_Msk: u32 = 2097152;
pub const GPIO_OUT_PIN21_Low: u32 = 0;
pub const GPIO_OUT_PIN21_High: u32 = 1;
pub const GPIO_OUT_PIN20_Pos: u32 = 20;
pub const GPIO_OUT_PIN20_Msk: u32 = 1048576;
pub const GPIO_OUT_PIN20_Low: u32 = 0;
pub const GPIO_OUT_PIN20_High: u32 = 1;
pub const GPIO_OUT_PIN19_Pos: u32 = 19;
pub const GPIO_OUT_PIN19_Msk: u32 = 524288;
pub const GPIO_OUT_PIN19_Low: u32 = 0;
pub const GPIO_OUT_PIN19_High: u32 = 1;
pub const GPIO_OUT_PIN18_Pos: u32 = 18;
pub const GPIO_OUT_PIN18_Msk: u32 = 262144;
pub const GPIO_OUT_PIN18_Low: u32 = 0;
pub const GPIO_OUT_PIN18_High: u32 = 1;
pub const GPIO_OUT_PIN17_Pos: u32 = 17;
pub const GPIO_OUT_PIN17_Msk: u32 = 131072;
pub const GPIO_OUT_PIN17_Low: u32 = 0;
pub const GPIO_OUT_PIN17_High: u32 = 1;
pub const GPIO_OUT_PIN16_Pos: u32 = 16;
pub const GPIO_OUT_PIN16_Msk: u32 = 65536;
pub const GPIO_OUT_PIN16_Low: u32 = 0;
pub const GPIO_OUT_PIN16_High: u32 = 1;
pub const GPIO_OUT_PIN15_Pos: u32 = 15;
pub const GPIO_OUT_PIN15_Msk: u32 = 32768;
pub const GPIO_OUT_PIN15_Low: u32 = 0;
pub const GPIO_OUT_PIN15_High: u32 = 1;
pub const GPIO_OUT_PIN14_Pos: u32 = 14;
pub const GPIO_OUT_PIN14_Msk: u32 = 16384;
pub const GPIO_OUT_PIN14_Low: u32 = 0;
pub const GPIO_OUT_PIN14_High: u32 = 1;
pub const GPIO_OUT_PIN13_Pos: u32 = 13;
pub const GPIO_OUT_PIN13_Msk: u32 = 8192;
pub const GPIO_OUT_PIN13_Low: u32 = 0;
pub const GPIO_OUT_PIN13_High: u32 = 1;
pub const GPIO_OUT_PIN12_Pos: u32 = 12;
pub const GPIO_OUT_PIN12_Msk: u32 = 4096;
pub const GPIO_OUT_PIN12_Low: u32 = 0;
pub const GPIO_OUT_PIN12_High: u32 = 1;
pub const GPIO_OUT_PIN11_Pos: u32 = 11;
pub const GPIO_OUT_PIN11_Msk: u32 = 2048;
pub const GPIO_OUT_PIN11_Low: u32 = 0;
pub const GPIO_OUT_PIN11_High: u32 = 1;
pub const GPIO_OUT_PIN10_Pos: u32 = 10;
pub const GPIO_OUT_PIN10_Msk: u32 = 1024;
pub const GPIO_OUT_PIN10_Low: u32 = 0;
pub const GPIO_OUT_PIN10_High: u32 = 1;
pub const GPIO_OUT_PIN9_Pos: u32 = 9;
pub const GPIO_OUT_PIN9_Msk: u32 = 512;
pub const GPIO_OUT_PIN9_Low: u32 = 0;
pub const GPIO_OUT_PIN9_High: u32 = 1;
pub const GPIO_OUT_PIN8_Pos: u32 = 8;
pub const GPIO_OUT_PIN8_Msk: u32 = 256;
pub const GPIO_OUT_PIN8_Low: u32 = 0;
pub const GPIO_OUT_PIN8_High: u32 = 1;
pub const GPIO_OUT_PIN7_Pos: u32 = 7;
pub const GPIO_OUT_PIN7_Msk: u32 = 128;
pub const GPIO_OUT_PIN7_Low: u32 = 0;
pub const GPIO_OUT_PIN7_High: u32 = 1;
pub const GPIO_OUT_PIN6_Pos: u32 = 6;
pub const GPIO_OUT_PIN6_Msk: u32 = 64;
pub const GPIO_OUT_PIN6_Low: u32 = 0;
pub const GPIO_OUT_PIN6_High: u32 = 1;
pub const GPIO_OUT_PIN5_Pos: u32 = 5;
pub const GPIO_OUT_PIN5_Msk: u32 = 32;
pub const GPIO_OUT_PIN5_Low: u32 = 0;
pub const GPIO_OUT_PIN5_High: u32 = 1;
pub const GPIO_OUT_PIN4_Pos: u32 = 4;
pub const GPIO_OUT_PIN4_Msk: u32 = 16;
pub const GPIO_OUT_PIN4_Low: u32 = 0;
pub const GPIO_OUT_PIN4_High: u32 = 1;
pub const GPIO_OUT_PIN3_Pos: u32 = 3;
pub const GPIO_OUT_PIN3_Msk: u32 = 8;
pub const GPIO_OUT_PIN3_Low: u32 = 0;
pub const GPIO_OUT_PIN3_High: u32 = 1;
pub const GPIO_OUT_PIN2_Pos: u32 = 2;
pub const GPIO_OUT_PIN2_Msk: u32 = 4;
pub const GPIO_OUT_PIN2_Low: u32 = 0;
pub const GPIO_OUT_PIN2_High: u32 = 1;
pub const GPIO_OUT_PIN1_Pos: u32 = 1;
pub const GPIO_OUT_PIN1_Msk: u32 = 2;
pub const GPIO_OUT_PIN1_Low: u32 = 0;
pub const GPIO_OUT_PIN1_High: u32 = 1;
pub const GPIO_OUT_PIN0_Pos: u32 = 0;
pub const GPIO_OUT_PIN0_Msk: u32 = 1;
pub const GPIO_OUT_PIN0_Low: u32 = 0;
pub const GPIO_OUT_PIN0_High: u32 = 1;
pub const GPIO_OUTSET_PIN31_Pos: u32 = 31;
pub const GPIO_OUTSET_PIN31_Msk: u32 = 2147483648;
pub const GPIO_OUTSET_PIN31_Low: u32 = 0;
pub const GPIO_OUTSET_PIN31_High: u32 = 1;
pub const GPIO_OUTSET_PIN31_Set: u32 = 1;
pub const GPIO_OUTSET_PIN30_Pos: u32 = 30;
pub const GPIO_OUTSET_PIN30_Msk: u32 = 1073741824;
pub const GPIO_OUTSET_PIN30_Low: u32 = 0;
pub const GPIO_OUTSET_PIN30_High: u32 = 1;
pub const GPIO_OUTSET_PIN30_Set: u32 = 1;
pub const GPIO_OUTSET_PIN29_Pos: u32 = 29;
pub const GPIO_OUTSET_PIN29_Msk: u32 = 536870912;
pub const GPIO_OUTSET_PIN29_Low: u32 = 0;
pub const GPIO_OUTSET_PIN29_High: u32 = 1;
pub const GPIO_OUTSET_PIN29_Set: u32 = 1;
pub const GPIO_OUTSET_PIN28_Pos: u32 = 28;
pub const GPIO_OUTSET_PIN28_Msk: u32 = 268435456;
pub const GPIO_OUTSET_PIN28_Low: u32 = 0;
pub const GPIO_OUTSET_PIN28_High: u32 = 1;
pub const GPIO_OUTSET_PIN28_Set: u32 = 1;
pub const GPIO_OUTSET_PIN27_Pos: u32 = 27;
pub const GPIO_OUTSET_PIN27_Msk: u32 = 134217728;
pub const GPIO_OUTSET_PIN27_Low: u32 = 0;
pub const GPIO_OUTSET_PIN27_High: u32 = 1;
pub const GPIO_OUTSET_PIN27_Set: u32 = 1;
pub const GPIO_OUTSET_PIN26_Pos: u32 = 26;
pub const GPIO_OUTSET_PIN26_Msk: u32 = 67108864;
pub const GPIO_OUTSET_PIN26_Low: u32 = 0;
pub const GPIO_OUTSET_PIN26_High: u32 = 1;
pub const GPIO_OUTSET_PIN26_Set: u32 = 1;
pub const GPIO_OUTSET_PIN25_Pos: u32 = 25;
pub const GPIO_OUTSET_PIN25_Msk: u32 = 33554432;
pub const GPIO_OUTSET_PIN25_Low: u32 = 0;
pub const GPIO_OUTSET_PIN25_High: u32 = 1;
pub const GPIO_OUTSET_PIN25_Set: u32 = 1;
pub const GPIO_OUTSET_PIN24_Pos: u32 = 24;
pub const GPIO_OUTSET_PIN24_Msk: u32 = 16777216;
pub const GPIO_OUTSET_PIN24_Low: u32 = 0;
pub const GPIO_OUTSET_PIN24_High: u32 = 1;
pub const GPIO_OUTSET_PIN24_Set: u32 = 1;
pub const GPIO_OUTSET_PIN23_Pos: u32 = 23;
pub const GPIO_OUTSET_PIN23_Msk: u32 = 8388608;
pub const GPIO_OUTSET_PIN23_Low: u32 = 0;
pub const GPIO_OUTSET_PIN23_High: u32 = 1;
pub const GPIO_OUTSET_PIN23_Set: u32 = 1;
pub const GPIO_OUTSET_PIN22_Pos: u32 = 22;
pub const GPIO_OUTSET_PIN22_Msk: u32 = 4194304;
pub const GPIO_OUTSET_PIN22_Low: u32 = 0;
pub const GPIO_OUTSET_PIN22_High: u32 = 1;
pub const GPIO_OUTSET_PIN22_Set: u32 = 1;
pub const GPIO_OUTSET_PIN21_Pos: u32 = 21;
pub const GPIO_OUTSET_PIN21_Msk: u32 = 2097152;
pub const GPIO_OUTSET_PIN21_Low: u32 = 0;
pub const GPIO_OUTSET_PIN21_High: u32 = 1;
pub const GPIO_OUTSET_PIN21_Set: u32 = 1;
pub const GPIO_OUTSET_PIN20_Pos: u32 = 20;
pub const GPIO_OUTSET_PIN20_Msk: u32 = 1048576;
pub const GPIO_OUTSET_PIN20_Low: u32 = 0;
pub const GPIO_OUTSET_PIN20_High: u32 = 1;
pub const GPIO_OUTSET_PIN20_Set: u32 = 1;
pub const GPIO_OUTSET_PIN19_Pos: u32 = 19;
pub const GPIO_OUTSET_PIN19_Msk: u32 = 524288;
pub const GPIO_OUTSET_PIN19_Low: u32 = 0;
pub const GPIO_OUTSET_PIN19_High: u32 = 1;
pub const GPIO_OUTSET_PIN19_Set: u32 = 1;
pub const GPIO_OUTSET_PIN18_Pos: u32 = 18;
pub const GPIO_OUTSET_PIN18_Msk: u32 = 262144;
pub const GPIO_OUTSET_PIN18_Low: u32 = 0;
pub const GPIO_OUTSET_PIN18_High: u32 = 1;
pub const GPIO_OUTSET_PIN18_Set: u32 = 1;
pub const GPIO_OUTSET_PIN17_Pos: u32 = 17;
pub const GPIO_OUTSET_PIN17_Msk: u32 = 131072;
pub const GPIO_OUTSET_PIN17_Low: u32 = 0;
pub const GPIO_OUTSET_PIN17_High: u32 = 1;
pub const GPIO_OUTSET_PIN17_Set: u32 = 1;
pub const GPIO_OUTSET_PIN16_Pos: u32 = 16;
pub const GPIO_OUTSET_PIN16_Msk: u32 = 65536;
pub const GPIO_OUTSET_PIN16_Low: u32 = 0;
pub const GPIO_OUTSET_PIN16_High: u32 = 1;
pub const GPIO_OUTSET_PIN16_Set: u32 = 1;
pub const GPIO_OUTSET_PIN15_Pos: u32 = 15;
pub const GPIO_OUTSET_PIN15_Msk: u32 = 32768;
pub const GPIO_OUTSET_PIN15_Low: u32 = 0;
pub const GPIO_OUTSET_PIN15_High: u32 = 1;
pub const GPIO_OUTSET_PIN15_Set: u32 = 1;
pub const GPIO_OUTSET_PIN14_Pos: u32 = 14;
pub const GPIO_OUTSET_PIN14_Msk: u32 = 16384;
pub const GPIO_OUTSET_PIN14_Low: u32 = 0;
pub const GPIO_OUTSET_PIN14_High: u32 = 1;
pub const GPIO_OUTSET_PIN14_Set: u32 = 1;
pub const GPIO_OUTSET_PIN13_Pos: u32 = 13;
pub const GPIO_OUTSET_PIN13_Msk: u32 = 8192;
pub const GPIO_OUTSET_PIN13_Low: u32 = 0;
pub const GPIO_OUTSET_PIN13_High: u32 = 1;
pub const GPIO_OUTSET_PIN13_Set: u32 = 1;
pub const GPIO_OUTSET_PIN12_Pos: u32 = 12;
pub const GPIO_OUTSET_PIN12_Msk: u32 = 4096;
pub const GPIO_OUTSET_PIN12_Low: u32 = 0;
pub const GPIO_OUTSET_PIN12_High: u32 = 1;
pub const GPIO_OUTSET_PIN12_Set: u32 = 1;
pub const GPIO_OUTSET_PIN11_Pos: u32 = 11;
pub const GPIO_OUTSET_PIN11_Msk: u32 = 2048;
pub const GPIO_OUTSET_PIN11_Low: u32 = 0;
pub const GPIO_OUTSET_PIN11_High: u32 = 1;
pub const GPIO_OUTSET_PIN11_Set: u32 = 1;
pub const GPIO_OUTSET_PIN10_Pos: u32 = 10;
pub const GPIO_OUTSET_PIN10_Msk: u32 = 1024;
pub const GPIO_OUTSET_PIN10_Low: u32 = 0;
pub const GPIO_OUTSET_PIN10_High: u32 = 1;
pub const GPIO_OUTSET_PIN10_Set: u32 = 1;
pub const GPIO_OUTSET_PIN9_Pos: u32 = 9;
pub const GPIO_OUTSET_PIN9_Msk: u32 = 512;
pub const GPIO_OUTSET_PIN9_Low: u32 = 0;
pub const GPIO_OUTSET_PIN9_High: u32 = 1;
pub const GPIO_OUTSET_PIN9_Set: u32 = 1;
pub const GPIO_OUTSET_PIN8_Pos: u32 = 8;
pub const GPIO_OUTSET_PIN8_Msk: u32 = 256;
pub const GPIO_OUTSET_PIN8_Low: u32 = 0;
pub const GPIO_OUTSET_PIN8_High: u32 = 1;
pub const GPIO_OUTSET_PIN8_Set: u32 = 1;
pub const GPIO_OUTSET_PIN7_Pos: u32 = 7;
pub const GPIO_OUTSET_PIN7_Msk: u32 = 128;
pub const GPIO_OUTSET_PIN7_Low: u32 = 0;
pub const GPIO_OUTSET_PIN7_High: u32 = 1;
pub const GPIO_OUTSET_PIN7_Set: u32 = 1;
pub const GPIO_OUTSET_PIN6_Pos: u32 = 6;
pub const GPIO_OUTSET_PIN6_Msk: u32 = 64;
pub const GPIO_OUTSET_PIN6_Low: u32 = 0;
pub const GPIO_OUTSET_PIN6_High: u32 = 1;
pub const GPIO_OUTSET_PIN6_Set: u32 = 1;
pub const GPIO_OUTSET_PIN5_Pos: u32 = 5;
pub const GPIO_OUTSET_PIN5_Msk: u32 = 32;
pub const GPIO_OUTSET_PIN5_Low: u32 = 0;
pub const GPIO_OUTSET_PIN5_High: u32 = 1;
pub const GPIO_OUTSET_PIN5_Set: u32 = 1;
pub const GPIO_OUTSET_PIN4_Pos: u32 = 4;
pub const GPIO_OUTSET_PIN4_Msk: u32 = 16;
pub const GPIO_OUTSET_PIN4_Low: u32 = 0;
pub const GPIO_OUTSET_PIN4_High: u32 = 1;
pub const GPIO_OUTSET_PIN4_Set: u32 = 1;
pub const GPIO_OUTSET_PIN3_Pos: u32 = 3;
pub const GPIO_OUTSET_PIN3_Msk: u32 = 8;
pub const GPIO_OUTSET_PIN3_Low: u32 = 0;
pub const GPIO_OUTSET_PIN3_High: u32 = 1;
pub const GPIO_OUTSET_PIN3_Set: u32 = 1;
pub const GPIO_OUTSET_PIN2_Pos: u32 = 2;
pub const GPIO_OUTSET_PIN2_Msk: u32 = 4;
pub const GPIO_OUTSET_PIN2_Low: u32 = 0;
pub const GPIO_OUTSET_PIN2_High: u32 = 1;
pub const GPIO_OUTSET_PIN2_Set: u32 = 1;
pub const GPIO_OUTSET_PIN1_Pos: u32 = 1;
pub const GPIO_OUTSET_PIN1_Msk: u32 = 2;
pub const GPIO_OUTSET_PIN1_Low: u32 = 0;
pub const GPIO_OUTSET_PIN1_High: u32 = 1;
pub const GPIO_OUTSET_PIN1_Set: u32 = 1;
pub const GPIO_OUTSET_PIN0_Pos: u32 = 0;
pub const GPIO_OUTSET_PIN0_Msk: u32 = 1;
pub const GPIO_OUTSET_PIN0_Low: u32 = 0;
pub const GPIO_OUTSET_PIN0_High: u32 = 1;
pub const GPIO_OUTSET_PIN0_Set: u32 = 1;
pub const GPIO_OUTCLR_PIN31_Pos: u32 = 31;
pub const GPIO_OUTCLR_PIN31_Msk: u32 = 2147483648;
pub const GPIO_OUTCLR_PIN31_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN31_High: u32 = 1;
pub const GPIO_OUTCLR_PIN31_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN30_Pos: u32 = 30;
pub const GPIO_OUTCLR_PIN30_Msk: u32 = 1073741824;
pub const GPIO_OUTCLR_PIN30_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN30_High: u32 = 1;
pub const GPIO_OUTCLR_PIN30_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN29_Pos: u32 = 29;
pub const GPIO_OUTCLR_PIN29_Msk: u32 = 536870912;
pub const GPIO_OUTCLR_PIN29_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN29_High: u32 = 1;
pub const GPIO_OUTCLR_PIN29_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN28_Pos: u32 = 28;
pub const GPIO_OUTCLR_PIN28_Msk: u32 = 268435456;
pub const GPIO_OUTCLR_PIN28_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN28_High: u32 = 1;
pub const GPIO_OUTCLR_PIN28_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN27_Pos: u32 = 27;
pub const GPIO_OUTCLR_PIN27_Msk: u32 = 134217728;
pub const GPIO_OUTCLR_PIN27_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN27_High: u32 = 1;
pub const GPIO_OUTCLR_PIN27_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN26_Pos: u32 = 26;
pub const GPIO_OUTCLR_PIN26_Msk: u32 = 67108864;
pub const GPIO_OUTCLR_PIN26_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN26_High: u32 = 1;
pub const GPIO_OUTCLR_PIN26_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN25_Pos: u32 = 25;
pub const GPIO_OUTCLR_PIN25_Msk: u32 = 33554432;
pub const GPIO_OUTCLR_PIN25_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN25_High: u32 = 1;
pub const GPIO_OUTCLR_PIN25_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN24_Pos: u32 = 24;
pub const GPIO_OUTCLR_PIN24_Msk: u32 = 16777216;
pub const GPIO_OUTCLR_PIN24_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN24_High: u32 = 1;
pub const GPIO_OUTCLR_PIN24_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN23_Pos: u32 = 23;
pub const GPIO_OUTCLR_PIN23_Msk: u32 = 8388608;
pub const GPIO_OUTCLR_PIN23_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN23_High: u32 = 1;
pub const GPIO_OUTCLR_PIN23_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN22_Pos: u32 = 22;
pub const GPIO_OUTCLR_PIN22_Msk: u32 = 4194304;
pub const GPIO_OUTCLR_PIN22_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN22_High: u32 = 1;
pub const GPIO_OUTCLR_PIN22_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN21_Pos: u32 = 21;
pub const GPIO_OUTCLR_PIN21_Msk: u32 = 2097152;
pub const GPIO_OUTCLR_PIN21_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN21_High: u32 = 1;
pub const GPIO_OUTCLR_PIN21_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN20_Pos: u32 = 20;
pub const GPIO_OUTCLR_PIN20_Msk: u32 = 1048576;
pub const GPIO_OUTCLR_PIN20_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN20_High: u32 = 1;
pub const GPIO_OUTCLR_PIN20_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN19_Pos: u32 = 19;
pub const GPIO_OUTCLR_PIN19_Msk: u32 = 524288;
pub const GPIO_OUTCLR_PIN19_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN19_High: u32 = 1;
pub const GPIO_OUTCLR_PIN19_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN18_Pos: u32 = 18;
pub const GPIO_OUTCLR_PIN18_Msk: u32 = 262144;
pub const GPIO_OUTCLR_PIN18_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN18_High: u32 = 1;
pub const GPIO_OUTCLR_PIN18_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN17_Pos: u32 = 17;
pub const GPIO_OUTCLR_PIN17_Msk: u32 = 131072;
pub const GPIO_OUTCLR_PIN17_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN17_High: u32 = 1;
pub const GPIO_OUTCLR_PIN17_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN16_Pos: u32 = 16;
pub const GPIO_OUTCLR_PIN16_Msk: u32 = 65536;
pub const GPIO_OUTCLR_PIN16_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN16_High: u32 = 1;
pub const GPIO_OUTCLR_PIN16_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN15_Pos: u32 = 15;
pub const GPIO_OUTCLR_PIN15_Msk: u32 = 32768;
pub const GPIO_OUTCLR_PIN15_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN15_High: u32 = 1;
pub const GPIO_OUTCLR_PIN15_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN14_Pos: u32 = 14;
pub const GPIO_OUTCLR_PIN14_Msk: u32 = 16384;
pub const GPIO_OUTCLR_PIN14_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN14_High: u32 = 1;
pub const GPIO_OUTCLR_PIN14_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN13_Pos: u32 = 13;
pub const GPIO_OUTCLR_PIN13_Msk: u32 = 8192;
pub const GPIO_OUTCLR_PIN13_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN13_High: u32 = 1;
pub const GPIO_OUTCLR_PIN13_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN12_Pos: u32 = 12;
pub const GPIO_OUTCLR_PIN12_Msk: u32 = 4096;
pub const GPIO_OUTCLR_PIN12_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN12_High: u32 = 1;
pub const GPIO_OUTCLR_PIN12_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN11_Pos: u32 = 11;
pub const GPIO_OUTCLR_PIN11_Msk: u32 = 2048;
pub const GPIO_OUTCLR_PIN11_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN11_High: u32 = 1;
pub const GPIO_OUTCLR_PIN11_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN10_Pos: u32 = 10;
pub const GPIO_OUTCLR_PIN10_Msk: u32 = 1024;
pub const GPIO_OUTCLR_PIN10_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN10_High: u32 = 1;
pub const GPIO_OUTCLR_PIN10_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN9_Pos: u32 = 9;
pub const GPIO_OUTCLR_PIN9_Msk: u32 = 512;
pub const GPIO_OUTCLR_PIN9_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN9_High: u32 = 1;
pub const GPIO_OUTCLR_PIN9_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN8_Pos: u32 = 8;
pub const GPIO_OUTCLR_PIN8_Msk: u32 = 256;
pub const GPIO_OUTCLR_PIN8_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN8_High: u32 = 1;
pub const GPIO_OUTCLR_PIN8_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN7_Pos: u32 = 7;
pub const GPIO_OUTCLR_PIN7_Msk: u32 = 128;
pub const GPIO_OUTCLR_PIN7_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN7_High: u32 = 1;
pub const GPIO_OUTCLR_PIN7_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN6_Pos: u32 = 6;
pub const GPIO_OUTCLR_PIN6_Msk: u32 = 64;
pub const GPIO_OUTCLR_PIN6_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN6_High: u32 = 1;
pub const GPIO_OUTCLR_PIN6_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN5_Pos: u32 = 5;
pub const GPIO_OUTCLR_PIN5_Msk: u32 = 32;
pub const GPIO_OUTCLR_PIN5_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN5_High: u32 = 1;
pub const GPIO_OUTCLR_PIN5_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN4_Pos: u32 = 4;
pub const GPIO_OUTCLR_PIN4_Msk: u32 = 16;
pub const GPIO_OUTCLR_PIN4_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN4_High: u32 = 1;
pub const GPIO_OUTCLR_PIN4_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN3_Pos: u32 = 3;
pub const GPIO_OUTCLR_PIN3_Msk: u32 = 8;
pub const GPIO_OUTCLR_PIN3_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN3_High: u32 = 1;
pub const GPIO_OUTCLR_PIN3_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN2_Pos: u32 = 2;
pub const GPIO_OUTCLR_PIN2_Msk: u32 = 4;
pub const GPIO_OUTCLR_PIN2_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN2_High: u32 = 1;
pub const GPIO_OUTCLR_PIN2_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN1_Pos: u32 = 1;
pub const GPIO_OUTCLR_PIN1_Msk: u32 = 2;
pub const GPIO_OUTCLR_PIN1_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN1_High: u32 = 1;
pub const GPIO_OUTCLR_PIN1_Clear: u32 = 1;
pub const GPIO_OUTCLR_PIN0_Pos: u32 = 0;
pub const GPIO_OUTCLR_PIN0_Msk: u32 = 1;
pub const GPIO_OUTCLR_PIN0_Low: u32 = 0;
pub const GPIO_OUTCLR_PIN0_High: u32 = 1;
pub const GPIO_OUTCLR_PIN0_Clear: u32 = 1;
pub const GPIO_IN_PIN31_Pos: u32 = 31;
pub const GPIO_IN_PIN31_Msk: u32 = 2147483648;
pub const GPIO_IN_PIN31_Low: u32 = 0;
pub const GPIO_IN_PIN31_High: u32 = 1;
pub const GPIO_IN_PIN30_Pos: u32 = 30;
pub const GPIO_IN_PIN30_Msk: u32 = 1073741824;
pub const GPIO_IN_PIN30_Low: u32 = 0;
pub const GPIO_IN_PIN30_High: u32 = 1;
pub const GPIO_IN_PIN29_Pos: u32 = 29;
pub const GPIO_IN_PIN29_Msk: u32 = 536870912;
pub const GPIO_IN_PIN29_Low: u32 = 0;
pub const GPIO_IN_PIN29_High: u32 = 1;
pub const GPIO_IN_PIN28_Pos: u32 = 28;
pub const GPIO_IN_PIN28_Msk: u32 = 268435456;
pub const GPIO_IN_PIN28_Low: u32 = 0;
pub const GPIO_IN_PIN28_High: u32 = 1;
pub const GPIO_IN_PIN27_Pos: u32 = 27;
pub const GPIO_IN_PIN27_Msk: u32 = 134217728;
pub const GPIO_IN_PIN27_Low: u32 = 0;
pub const GPIO_IN_PIN27_High: u32 = 1;
pub const GPIO_IN_PIN26_Pos: u32 = 26;
pub const GPIO_IN_PIN26_Msk: u32 = 67108864;
pub const GPIO_IN_PIN26_Low: u32 = 0;
pub const GPIO_IN_PIN26_High: u32 = 1;
pub const GPIO_IN_PIN25_Pos: u32 = 25;
pub const GPIO_IN_PIN25_Msk: u32 = 33554432;
pub const GPIO_IN_PIN25_Low: u32 = 0;
pub const GPIO_IN_PIN25_High: u32 = 1;
pub const GPIO_IN_PIN24_Pos: u32 = 24;
pub const GPIO_IN_PIN24_Msk: u32 = 16777216;
pub const GPIO_IN_PIN24_Low: u32 = 0;
pub const GPIO_IN_PIN24_High: u32 = 1;
pub const GPIO_IN_PIN23_Pos: u32 = 23;
pub const GPIO_IN_PIN23_Msk: u32 = 8388608;
pub const GPIO_IN_PIN23_Low: u32 = 0;
pub const GPIO_IN_PIN23_High: u32 = 1;
pub const GPIO_IN_PIN22_Pos: u32 = 22;
pub const GPIO_IN_PIN22_Msk: u32 = 4194304;
pub const GPIO_IN_PIN22_Low: u32 = 0;
pub const GPIO_IN_PIN22_High: u32 = 1;
pub const GPIO_IN_PIN21_Pos: u32 = 21;
pub const GPIO_IN_PIN21_Msk: u32 = 2097152;
pub const GPIO_IN_PIN21_Low: u32 = 0;
pub const GPIO_IN_PIN21_High: u32 = 1;
pub const GPIO_IN_PIN20_Pos: u32 = 20;
pub const GPIO_IN_PIN20_Msk: u32 = 1048576;
pub const GPIO_IN_PIN20_Low: u32 = 0;
pub const GPIO_IN_PIN20_High: u32 = 1;
pub const GPIO_IN_PIN19_Pos: u32 = 19;
pub const GPIO_IN_PIN19_Msk: u32 = 524288;
pub const GPIO_IN_PIN19_Low: u32 = 0;
pub const GPIO_IN_PIN19_High: u32 = 1;
pub const GPIO_IN_PIN18_Pos: u32 = 18;
pub const GPIO_IN_PIN18_Msk: u32 = 262144;
pub const GPIO_IN_PIN18_Low: u32 = 0;
pub const GPIO_IN_PIN18_High: u32 = 1;
pub const GPIO_IN_PIN17_Pos: u32 = 17;
pub const GPIO_IN_PIN17_Msk: u32 = 131072;
pub const GPIO_IN_PIN17_Low: u32 = 0;
pub const GPIO_IN_PIN17_High: u32 = 1;
pub const GPIO_IN_PIN16_Pos: u32 = 16;
pub const GPIO_IN_PIN16_Msk: u32 = 65536;
pub const GPIO_IN_PIN16_Low: u32 = 0;
pub const GPIO_IN_PIN16_High: u32 = 1;
pub const GPIO_IN_PIN15_Pos: u32 = 15;
pub const GPIO_IN_PIN15_Msk: u32 = 32768;
pub const GPIO_IN_PIN15_Low: u32 = 0;
pub const GPIO_IN_PIN15_High: u32 = 1;
pub const GPIO_IN_PIN14_Pos: u32 = 14;
pub const GPIO_IN_PIN14_Msk: u32 = 16384;
pub const GPIO_IN_PIN14_Low: u32 = 0;
pub const GPIO_IN_PIN14_High: u32 = 1;
pub const GPIO_IN_PIN13_Pos: u32 = 13;
pub const GPIO_IN_PIN13_Msk: u32 = 8192;
pub const GPIO_IN_PIN13_Low: u32 = 0;
pub const GPIO_IN_PIN13_High: u32 = 1;
pub const GPIO_IN_PIN12_Pos: u32 = 12;
pub const GPIO_IN_PIN12_Msk: u32 = 4096;
pub const GPIO_IN_PIN12_Low: u32 = 0;
pub const GPIO_IN_PIN12_High: u32 = 1;
pub const GPIO_IN_PIN11_Pos: u32 = 11;
pub const GPIO_IN_PIN11_Msk: u32 = 2048;
pub const GPIO_IN_PIN11_Low: u32 = 0;
pub const GPIO_IN_PIN11_High: u32 = 1;
pub const GPIO_IN_PIN10_Pos: u32 = 10;
pub const GPIO_IN_PIN10_Msk: u32 = 1024;
pub const GPIO_IN_PIN10_Low: u32 = 0;
pub const GPIO_IN_PIN10_High: u32 = 1;
pub const GPIO_IN_PIN9_Pos: u32 = 9;
pub const GPIO_IN_PIN9_Msk: u32 = 512;
pub const GPIO_IN_PIN9_Low: u32 = 0;
pub const GPIO_IN_PIN9_High: u32 = 1;
pub const GPIO_IN_PIN8_Pos: u32 = 8;
pub const GPIO_IN_PIN8_Msk: u32 = 256;
pub const GPIO_IN_PIN8_Low: u32 = 0;
pub const GPIO_IN_PIN8_High: u32 = 1;
pub const GPIO_IN_PIN7_Pos: u32 = 7;
pub const GPIO_IN_PIN7_Msk: u32 = 128;
pub const GPIO_IN_PIN7_Low: u32 = 0;
pub const GPIO_IN_PIN7_High: u32 = 1;
pub const GPIO_IN_PIN6_Pos: u32 = 6;
pub const GPIO_IN_PIN6_Msk: u32 = 64;
pub const GPIO_IN_PIN6_Low: u32 = 0;
pub const GPIO_IN_PIN6_High: u32 = 1;
pub const GPIO_IN_PIN5_Pos: u32 = 5;
pub const GPIO_IN_PIN5_Msk: u32 = 32;
pub const GPIO_IN_PIN5_Low: u32 = 0;
pub const GPIO_IN_PIN5_High: u32 = 1;
pub const GPIO_IN_PIN4_Pos: u32 = 4;
pub const GPIO_IN_PIN4_Msk: u32 = 16;
pub const GPIO_IN_PIN4_Low: u32 = 0;
pub const GPIO_IN_PIN4_High: u32 = 1;
pub const GPIO_IN_PIN3_Pos: u32 = 3;
pub const GPIO_IN_PIN3_Msk: u32 = 8;
pub const GPIO_IN_PIN3_Low: u32 = 0;
pub const GPIO_IN_PIN3_High: u32 = 1;
pub const GPIO_IN_PIN2_Pos: u32 = 2;
pub const GPIO_IN_PIN2_Msk: u32 = 4;
pub const GPIO_IN_PIN2_Low: u32 = 0;
pub const GPIO_IN_PIN2_High: u32 = 1;
pub const GPIO_IN_PIN1_Pos: u32 = 1;
pub const GPIO_IN_PIN1_Msk: u32 = 2;
pub const GPIO_IN_PIN1_Low: u32 = 0;
pub const GPIO_IN_PIN1_High: u32 = 1;
pub const GPIO_IN_PIN0_Pos: u32 = 0;
pub const GPIO_IN_PIN0_Msk: u32 = 1;
pub const GPIO_IN_PIN0_Low: u32 = 0;
pub const GPIO_IN_PIN0_High: u32 = 1;
pub const GPIO_DIR_PIN31_Pos: u32 = 31;
pub const GPIO_DIR_PIN31_Msk: u32 = 2147483648;
pub const GPIO_DIR_PIN31_Input: u32 = 0;
pub const GPIO_DIR_PIN31_Output: u32 = 1;
pub const GPIO_DIR_PIN30_Pos: u32 = 30;
pub const GPIO_DIR_PIN30_Msk: u32 = 1073741824;
pub const GPIO_DIR_PIN30_Input: u32 = 0;
pub const GPIO_DIR_PIN30_Output: u32 = 1;
pub const GPIO_DIR_PIN29_Pos: u32 = 29;
pub const GPIO_DIR_PIN29_Msk: u32 = 536870912;
pub const GPIO_DIR_PIN29_Input: u32 = 0;
pub const GPIO_DIR_PIN29_Output: u32 = 1;
pub const GPIO_DIR_PIN28_Pos: u32 = 28;
pub const GPIO_DIR_PIN28_Msk: u32 = 268435456;
pub const GPIO_DIR_PIN28_Input: u32 = 0;
pub const GPIO_DIR_PIN28_Output: u32 = 1;
pub const GPIO_DIR_PIN27_Pos: u32 = 27;
pub const GPIO_DIR_PIN27_Msk: u32 = 134217728;
pub const GPIO_DIR_PIN27_Input: u32 = 0;
pub const GPIO_DIR_PIN27_Output: u32 = 1;
pub const GPIO_DIR_PIN26_Pos: u32 = 26;
pub const GPIO_DIR_PIN26_Msk: u32 = 67108864;
pub const GPIO_DIR_PIN26_Input: u32 = 0;
pub const GPIO_DIR_PIN26_Output: u32 = 1;
pub const GPIO_DIR_PIN25_Pos: u32 = 25;
pub const GPIO_DIR_PIN25_Msk: u32 = 33554432;
pub const GPIO_DIR_PIN25_Input: u32 = 0;
pub const GPIO_DIR_PIN25_Output: u32 = 1;
pub const GPIO_DIR_PIN24_Pos: u32 = 24;
pub const GPIO_DIR_PIN24_Msk: u32 = 16777216;
pub const GPIO_DIR_PIN24_Input: u32 = 0;
pub const GPIO_DIR_PIN24_Output: u32 = 1;
pub const GPIO_DIR_PIN23_Pos: u32 = 23;
pub const GPIO_DIR_PIN23_Msk: u32 = 8388608;
pub const GPIO_DIR_PIN23_Input: u32 = 0;
pub const GPIO_DIR_PIN23_Output: u32 = 1;
pub const GPIO_DIR_PIN22_Pos: u32 = 22;
pub const GPIO_DIR_PIN22_Msk: u32 = 4194304;
pub const GPIO_DIR_PIN22_Input: u32 = 0;
pub const GPIO_DIR_PIN22_Output: u32 = 1;
pub const GPIO_DIR_PIN21_Pos: u32 = 21;
pub const GPIO_DIR_PIN21_Msk: u32 = 2097152;
pub const GPIO_DIR_PIN21_Input: u32 = 0;
pub const GPIO_DIR_PIN21_Output: u32 = 1;
pub const GPIO_DIR_PIN20_Pos: u32 = 20;
pub const GPIO_DIR_PIN20_Msk: u32 = 1048576;
pub const GPIO_DIR_PIN20_Input: u32 = 0;
pub const GPIO_DIR_PIN20_Output: u32 = 1;
pub const GPIO_DIR_PIN19_Pos: u32 = 19;
pub const GPIO_DIR_PIN19_Msk: u32 = 524288;
pub const GPIO_DIR_PIN19_Input: u32 = 0;
pub const GPIO_DIR_PIN19_Output: u32 = 1;
pub const GPIO_DIR_PIN18_Pos: u32 = 18;
pub const GPIO_DIR_PIN18_Msk: u32 = 262144;
pub const GPIO_DIR_PIN18_Input: u32 = 0;
pub const GPIO_DIR_PIN18_Output: u32 = 1;
pub const GPIO_DIR_PIN17_Pos: u32 = 17;
pub const GPIO_DIR_PIN17_Msk: u32 = 131072;
pub const GPIO_DIR_PIN17_Input: u32 = 0;
pub const GPIO_DIR_PIN17_Output: u32 = 1;
pub const GPIO_DIR_PIN16_Pos: u32 = 16;
pub const GPIO_DIR_PIN16_Msk: u32 = 65536;
pub const GPIO_DIR_PIN16_Input: u32 = 0;
pub const GPIO_DIR_PIN16_Output: u32 = 1;
pub const GPIO_DIR_PIN15_Pos: u32 = 15;
pub const GPIO_DIR_PIN15_Msk: u32 = 32768;
pub const GPIO_DIR_PIN15_Input: u32 = 0;
pub const GPIO_DIR_PIN15_Output: u32 = 1;
pub const GPIO_DIR_PIN14_Pos: u32 = 14;
pub const GPIO_DIR_PIN14_Msk: u32 = 16384;
pub const GPIO_DIR_PIN14_Input: u32 = 0;
pub const GPIO_DIR_PIN14_Output: u32 = 1;
pub const GPIO_DIR_PIN13_Pos: u32 = 13;
pub const GPIO_DIR_PIN13_Msk: u32 = 8192;
pub const GPIO_DIR_PIN13_Input: u32 = 0;
pub const GPIO_DIR_PIN13_Output: u32 = 1;
pub const GPIO_DIR_PIN12_Pos: u32 = 12;
pub const GPIO_DIR_PIN12_Msk: u32 = 4096;
pub const GPIO_DIR_PIN12_Input: u32 = 0;
pub const GPIO_DIR_PIN12_Output: u32 = 1;
pub const GPIO_DIR_PIN11_Pos: u32 = 11;
pub const GPIO_DIR_PIN11_Msk: u32 = 2048;
pub const GPIO_DIR_PIN11_Input: u32 = 0;
pub const GPIO_DIR_PIN11_Output: u32 = 1;
pub const GPIO_DIR_PIN10_Pos: u32 = 10;
pub const GPIO_DIR_PIN10_Msk: u32 = 1024;
pub const GPIO_DIR_PIN10_Input: u32 = 0;
pub const GPIO_DIR_PIN10_Output: u32 = 1;
pub const GPIO_DIR_PIN9_Pos: u32 = 9;
pub const GPIO_DIR_PIN9_Msk: u32 = 512;
pub const GPIO_DIR_PIN9_Input: u32 = 0;
pub const GPIO_DIR_PIN9_Output: u32 = 1;
pub const GPIO_DIR_PIN8_Pos: u32 = 8;
pub const GPIO_DIR_PIN8_Msk: u32 = 256;
pub const GPIO_DIR_PIN8_Input: u32 = 0;
pub const GPIO_DIR_PIN8_Output: u32 = 1;
pub const GPIO_DIR_PIN7_Pos: u32 = 7;
pub const GPIO_DIR_PIN7_Msk: u32 = 128;
pub const GPIO_DIR_PIN7_Input: u32 = 0;
pub const GPIO_DIR_PIN7_Output: u32 = 1;
pub const GPIO_DIR_PIN6_Pos: u32 = 6;
pub const GPIO_DIR_PIN6_Msk: u32 = 64;
pub const GPIO_DIR_PIN6_Input: u32 = 0;
pub const GPIO_DIR_PIN6_Output: u32 = 1;
pub const GPIO_DIR_PIN5_Pos: u32 = 5;
pub const GPIO_DIR_PIN5_Msk: u32 = 32;
pub const GPIO_DIR_PIN5_Input: u32 = 0;
pub const GPIO_DIR_PIN5_Output: u32 = 1;
pub const GPIO_DIR_PIN4_Pos: u32 = 4;
pub const GPIO_DIR_PIN4_Msk: u32 = 16;
pub const GPIO_DIR_PIN4_Input: u32 = 0;
pub const GPIO_DIR_PIN4_Output: u32 = 1;
pub const GPIO_DIR_PIN3_Pos: u32 = 3;
pub const GPIO_DIR_PIN3_Msk: u32 = 8;
pub const GPIO_DIR_PIN3_Input: u32 = 0;
pub const GPIO_DIR_PIN3_Output: u32 = 1;
pub const GPIO_DIR_PIN2_Pos: u32 = 2;
pub const GPIO_DIR_PIN2_Msk: u32 = 4;
pub const GPIO_DIR_PIN2_Input: u32 = 0;
pub const GPIO_DIR_PIN2_Output: u32 = 1;
pub const GPIO_DIR_PIN1_Pos: u32 = 1;
pub const GPIO_DIR_PIN1_Msk: u32 = 2;
pub const GPIO_DIR_PIN1_Input: u32 = 0;
pub const GPIO_DIR_PIN1_Output: u32 = 1;
pub const GPIO_DIR_PIN0_Pos: u32 = 0;
pub const GPIO_DIR_PIN0_Msk: u32 = 1;
pub const GPIO_DIR_PIN0_Input: u32 = 0;
pub const GPIO_DIR_PIN0_Output: u32 = 1;
pub const GPIO_DIRSET_PIN31_Pos: u32 = 31;
pub const GPIO_DIRSET_PIN31_Msk: u32 = 2147483648;
pub const GPIO_DIRSET_PIN31_Input: u32 = 0;
pub const GPIO_DIRSET_PIN31_Output: u32 = 1;
pub const GPIO_DIRSET_PIN31_Set: u32 = 1;
pub const GPIO_DIRSET_PIN30_Pos: u32 = 30;
pub const GPIO_DIRSET_PIN30_Msk: u32 = 1073741824;
pub const GPIO_DIRSET_PIN30_Input: u32 = 0;
pub const GPIO_DIRSET_PIN30_Output: u32 = 1;
pub const GPIO_DIRSET_PIN30_Set: u32 = 1;
pub const GPIO_DIRSET_PIN29_Pos: u32 = 29;
pub const GPIO_DIRSET_PIN29_Msk: u32 = 536870912;
pub const GPIO_DIRSET_PIN29_Input: u32 = 0;
pub const GPIO_DIRSET_PIN29_Output: u32 = 1;
pub const GPIO_DIRSET_PIN29_Set: u32 = 1;
pub const GPIO_DIRSET_PIN28_Pos: u32 = 28;
pub const GPIO_DIRSET_PIN28_Msk: u32 = 268435456;
pub const GPIO_DIRSET_PIN28_Input: u32 = 0;
pub const GPIO_DIRSET_PIN28_Output: u32 = 1;
pub const GPIO_DIRSET_PIN28_Set: u32 = 1;
pub const GPIO_DIRSET_PIN27_Pos: u32 = 27;
pub const GPIO_DIRSET_PIN27_Msk: u32 = 134217728;
pub const GPIO_DIRSET_PIN27_Input: u32 = 0;
pub const GPIO_DIRSET_PIN27_Output: u32 = 1;
pub const GPIO_DIRSET_PIN27_Set: u32 = 1;
pub const GPIO_DIRSET_PIN26_Pos: u32 = 26;
pub const GPIO_DIRSET_PIN26_Msk: u32 = 67108864;
pub const GPIO_DIRSET_PIN26_Input: u32 = 0;
pub const GPIO_DIRSET_PIN26_Output: u32 = 1;
pub const GPIO_DIRSET_PIN26_Set: u32 = 1;
pub const GPIO_DIRSET_PIN25_Pos: u32 = 25;
pub const GPIO_DIRSET_PIN25_Msk: u32 = 33554432;
pub const GPIO_DIRSET_PIN25_Input: u32 = 0;
pub const GPIO_DIRSET_PIN25_Output: u32 = 1;
pub const GPIO_DIRSET_PIN25_Set: u32 = 1;
pub const GPIO_DIRSET_PIN24_Pos: u32 = 24;
pub const GPIO_DIRSET_PIN24_Msk: u32 = 16777216;
pub const GPIO_DIRSET_PIN24_Input: u32 = 0;
pub const GPIO_DIRSET_PIN24_Output: u32 = 1;
pub const GPIO_DIRSET_PIN24_Set: u32 = 1;
pub const GPIO_DIRSET_PIN23_Pos: u32 = 23;
pub const GPIO_DIRSET_PIN23_Msk: u32 = 8388608;
pub const GPIO_DIRSET_PIN23_Input: u32 = 0;
pub const GPIO_DIRSET_PIN23_Output: u32 = 1;
pub const GPIO_DIRSET_PIN23_Set: u32 = 1;
pub const GPIO_DIRSET_PIN22_Pos: u32 = 22;
pub const GPIO_DIRSET_PIN22_Msk: u32 = 4194304;
pub const GPIO_DIRSET_PIN22_Input: u32 = 0;
pub const GPIO_DIRSET_PIN22_Output: u32 = 1;
pub const GPIO_DIRSET_PIN22_Set: u32 = 1;
pub const GPIO_DIRSET_PIN21_Pos: u32 = 21;
pub const GPIO_DIRSET_PIN21_Msk: u32 = 2097152;
pub const GPIO_DIRSET_PIN21_Input: u32 = 0;
pub const GPIO_DIRSET_PIN21_Output: u32 = 1;
pub const GPIO_DIRSET_PIN21_Set: u32 = 1;
pub const GPIO_DIRSET_PIN20_Pos: u32 = 20;
pub const GPIO_DIRSET_PIN20_Msk: u32 = 1048576;
pub const GPIO_DIRSET_PIN20_Input: u32 = 0;
pub const GPIO_DIRSET_PIN20_Output: u32 = 1;
pub const GPIO_DIRSET_PIN20_Set: u32 = 1;
pub const GPIO_DIRSET_PIN19_Pos: u32 = 19;
pub const GPIO_DIRSET_PIN19_Msk: u32 = 524288;
pub const GPIO_DIRSET_PIN19_Input: u32 = 0;
pub const GPIO_DIRSET_PIN19_Output: u32 = 1;
pub const GPIO_DIRSET_PIN19_Set: u32 = 1;
pub const GPIO_DIRSET_PIN18_Pos: u32 = 18;
pub const GPIO_DIRSET_PIN18_Msk: u32 = 262144;
pub const GPIO_DIRSET_PIN18_Input: u32 = 0;
pub const GPIO_DIRSET_PIN18_Output: u32 = 1;
pub const GPIO_DIRSET_PIN18_Set: u32 = 1;
pub const GPIO_DIRSET_PIN17_Pos: u32 = 17;
pub const GPIO_DIRSET_PIN17_Msk: u32 = 131072;
pub const GPIO_DIRSET_PIN17_Input: u32 = 0;
pub const GPIO_DIRSET_PIN17_Output: u32 = 1;
pub const GPIO_DIRSET_PIN17_Set: u32 = 1;
pub const GPIO_DIRSET_PIN16_Pos: u32 = 16;
pub const GPIO_DIRSET_PIN16_Msk: u32 = 65536;
pub const GPIO_DIRSET_PIN16_Input: u32 = 0;
pub const GPIO_DIRSET_PIN16_Output: u32 = 1;
pub const GPIO_DIRSET_PIN16_Set: u32 = 1;
pub const GPIO_DIRSET_PIN15_Pos: u32 = 15;
pub const GPIO_DIRSET_PIN15_Msk: u32 = 32768;
pub const GPIO_DIRSET_PIN15_Input: u32 = 0;
pub const GPIO_DIRSET_PIN15_Output: u32 = 1;
pub const GPIO_DIRSET_PIN15_Set: u32 = 1;
pub const GPIO_DIRSET_PIN14_Pos: u32 = 14;
pub const GPIO_DIRSET_PIN14_Msk: u32 = 16384;
pub const GPIO_DIRSET_PIN14_Input: u32 = 0;
pub const GPIO_DIRSET_PIN14_Output: u32 = 1;
pub const GPIO_DIRSET_PIN14_Set: u32 = 1;
pub const GPIO_DIRSET_PIN13_Pos: u32 = 13;
pub const GPIO_DIRSET_PIN13_Msk: u32 = 8192;
pub const GPIO_DIRSET_PIN13_Input: u32 = 0;
pub const GPIO_DIRSET_PIN13_Output: u32 = 1;
pub const GPIO_DIRSET_PIN13_Set: u32 = 1;
pub const GPIO_DIRSET_PIN12_Pos: u32 = 12;
pub const GPIO_DIRSET_PIN12_Msk: u32 = 4096;
pub const GPIO_DIRSET_PIN12_Input: u32 = 0;
pub const GPIO_DIRSET_PIN12_Output: u32 = 1;
pub const GPIO_DIRSET_PIN12_Set: u32 = 1;
pub const GPIO_DIRSET_PIN11_Pos: u32 = 11;
pub const GPIO_DIRSET_PIN11_Msk: u32 = 2048;
pub const GPIO_DIRSET_PIN11_Input: u32 = 0;
pub const GPIO_DIRSET_PIN11_Output: u32 = 1;
pub const GPIO_DIRSET_PIN11_Set: u32 = 1;
pub const GPIO_DIRSET_PIN10_Pos: u32 = 10;
pub const GPIO_DIRSET_PIN10_Msk: u32 = 1024;
pub const GPIO_DIRSET_PIN10_Input: u32 = 0;
pub const GPIO_DIRSET_PIN10_Output: u32 = 1;
pub const GPIO_DIRSET_PIN10_Set: u32 = 1;
pub const GPIO_DIRSET_PIN9_Pos: u32 = 9;
pub const GPIO_DIRSET_PIN9_Msk: u32 = 512;
pub const GPIO_DIRSET_PIN9_Input: u32 = 0;
pub const GPIO_DIRSET_PIN9_Output: u32 = 1;
pub const GPIO_DIRSET_PIN9_Set: u32 = 1;
pub const GPIO_DIRSET_PIN8_Pos: u32 = 8;
pub const GPIO_DIRSET_PIN8_Msk: u32 = 256;
pub const GPIO_DIRSET_PIN8_Input: u32 = 0;
pub const GPIO_DIRSET_PIN8_Output: u32 = 1;
pub const GPIO_DIRSET_PIN8_Set: u32 = 1;
pub const GPIO_DIRSET_PIN7_Pos: u32 = 7;
pub const GPIO_DIRSET_PIN7_Msk: u32 = 128;
pub const GPIO_DIRSET_PIN7_Input: u32 = 0;
pub const GPIO_DIRSET_PIN7_Output: u32 = 1;
pub const GPIO_DIRSET_PIN7_Set: u32 = 1;
pub const GPIO_DIRSET_PIN6_Pos: u32 = 6;
pub const GPIO_DIRSET_PIN6_Msk: u32 = 64;
pub const GPIO_DIRSET_PIN6_Input: u32 = 0;
pub const GPIO_DIRSET_PIN6_Output: u32 = 1;
pub const GPIO_DIRSET_PIN6_Set: u32 = 1;
pub const GPIO_DIRSET_PIN5_Pos: u32 = 5;
pub const GPIO_DIRSET_PIN5_Msk: u32 = 32;
pub const GPIO_DIRSET_PIN5_Input: u32 = 0;
pub const GPIO_DIRSET_PIN5_Output: u32 = 1;
pub const GPIO_DIRSET_PIN5_Set: u32 = 1;
pub const GPIO_DIRSET_PIN4_Pos: u32 = 4;
pub const GPIO_DIRSET_PIN4_Msk: u32 = 16;
pub const GPIO_DIRSET_PIN4_Input: u32 = 0;
pub const GPIO_DIRSET_PIN4_Output: u32 = 1;
pub const GPIO_DIRSET_PIN4_Set: u32 = 1;
pub const GPIO_DIRSET_PIN3_Pos: u32 = 3;
pub const GPIO_DIRSET_PIN3_Msk: u32 = 8;
pub const GPIO_DIRSET_PIN3_Input: u32 = 0;
pub const GPIO_DIRSET_PIN3_Output: u32 = 1;
pub const GPIO_DIRSET_PIN3_Set: u32 = 1;
pub const GPIO_DIRSET_PIN2_Pos: u32 = 2;
pub const GPIO_DIRSET_PIN2_Msk: u32 = 4;
pub const GPIO_DIRSET_PIN2_Input: u32 = 0;
pub const GPIO_DIRSET_PIN2_Output: u32 = 1;
pub const GPIO_DIRSET_PIN2_Set: u32 = 1;
pub const GPIO_DIRSET_PIN1_Pos: u32 = 1;
pub const GPIO_DIRSET_PIN1_Msk: u32 = 2;
pub const GPIO_DIRSET_PIN1_Input: u32 = 0;
pub const GPIO_DIRSET_PIN1_Output: u32 = 1;
pub const GPIO_DIRSET_PIN1_Set: u32 = 1;
pub const GPIO_DIRSET_PIN0_Pos: u32 = 0;
pub const GPIO_DIRSET_PIN0_Msk: u32 = 1;
pub const GPIO_DIRSET_PIN0_Input: u32 = 0;
pub const GPIO_DIRSET_PIN0_Output: u32 = 1;
pub const GPIO_DIRSET_PIN0_Set: u32 = 1;
pub const GPIO_DIRCLR_PIN31_Pos: u32 = 31;
pub const GPIO_DIRCLR_PIN31_Msk: u32 = 2147483648;
pub const GPIO_DIRCLR_PIN31_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN31_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN31_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN30_Pos: u32 = 30;
pub const GPIO_DIRCLR_PIN30_Msk: u32 = 1073741824;
pub const GPIO_DIRCLR_PIN30_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN30_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN30_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN29_Pos: u32 = 29;
pub const GPIO_DIRCLR_PIN29_Msk: u32 = 536870912;
pub const GPIO_DIRCLR_PIN29_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN29_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN29_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN28_Pos: u32 = 28;
pub const GPIO_DIRCLR_PIN28_Msk: u32 = 268435456;
pub const GPIO_DIRCLR_PIN28_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN28_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN28_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN27_Pos: u32 = 27;
pub const GPIO_DIRCLR_PIN27_Msk: u32 = 134217728;
pub const GPIO_DIRCLR_PIN27_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN27_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN27_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN26_Pos: u32 = 26;
pub const GPIO_DIRCLR_PIN26_Msk: u32 = 67108864;
pub const GPIO_DIRCLR_PIN26_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN26_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN26_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN25_Pos: u32 = 25;
pub const GPIO_DIRCLR_PIN25_Msk: u32 = 33554432;
pub const GPIO_DIRCLR_PIN25_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN25_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN25_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN24_Pos: u32 = 24;
pub const GPIO_DIRCLR_PIN24_Msk: u32 = 16777216;
pub const GPIO_DIRCLR_PIN24_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN24_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN24_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN23_Pos: u32 = 23;
pub const GPIO_DIRCLR_PIN23_Msk: u32 = 8388608;
pub const GPIO_DIRCLR_PIN23_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN23_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN23_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN22_Pos: u32 = 22;
pub const GPIO_DIRCLR_PIN22_Msk: u32 = 4194304;
pub const GPIO_DIRCLR_PIN22_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN22_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN22_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN21_Pos: u32 = 21;
pub const GPIO_DIRCLR_PIN21_Msk: u32 = 2097152;
pub const GPIO_DIRCLR_PIN21_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN21_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN21_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN20_Pos: u32 = 20;
pub const GPIO_DIRCLR_PIN20_Msk: u32 = 1048576;
pub const GPIO_DIRCLR_PIN20_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN20_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN20_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN19_Pos: u32 = 19;
pub const GPIO_DIRCLR_PIN19_Msk: u32 = 524288;
pub const GPIO_DIRCLR_PIN19_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN19_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN19_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN18_Pos: u32 = 18;
pub const GPIO_DIRCLR_PIN18_Msk: u32 = 262144;
pub const GPIO_DIRCLR_PIN18_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN18_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN18_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN17_Pos: u32 = 17;
pub const GPIO_DIRCLR_PIN17_Msk: u32 = 131072;
pub const GPIO_DIRCLR_PIN17_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN17_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN17_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN16_Pos: u32 = 16;
pub const GPIO_DIRCLR_PIN16_Msk: u32 = 65536;
pub const GPIO_DIRCLR_PIN16_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN16_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN16_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN15_Pos: u32 = 15;
pub const GPIO_DIRCLR_PIN15_Msk: u32 = 32768;
pub const GPIO_DIRCLR_PIN15_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN15_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN15_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN14_Pos: u32 = 14;
pub const GPIO_DIRCLR_PIN14_Msk: u32 = 16384;
pub const GPIO_DIRCLR_PIN14_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN14_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN14_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN13_Pos: u32 = 13;
pub const GPIO_DIRCLR_PIN13_Msk: u32 = 8192;
pub const GPIO_DIRCLR_PIN13_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN13_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN13_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN12_Pos: u32 = 12;
pub const GPIO_DIRCLR_PIN12_Msk: u32 = 4096;
pub const GPIO_DIRCLR_PIN12_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN12_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN12_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN11_Pos: u32 = 11;
pub const GPIO_DIRCLR_PIN11_Msk: u32 = 2048;
pub const GPIO_DIRCLR_PIN11_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN11_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN11_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN10_Pos: u32 = 10;
pub const GPIO_DIRCLR_PIN10_Msk: u32 = 1024;
pub const GPIO_DIRCLR_PIN10_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN10_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN10_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN9_Pos: u32 = 9;
pub const GPIO_DIRCLR_PIN9_Msk: u32 = 512;
pub const GPIO_DIRCLR_PIN9_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN9_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN9_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN8_Pos: u32 = 8;
pub const GPIO_DIRCLR_PIN8_Msk: u32 = 256;
pub const GPIO_DIRCLR_PIN8_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN8_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN8_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN7_Pos: u32 = 7;
pub const GPIO_DIRCLR_PIN7_Msk: u32 = 128;
pub const GPIO_DIRCLR_PIN7_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN7_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN7_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN6_Pos: u32 = 6;
pub const GPIO_DIRCLR_PIN6_Msk: u32 = 64;
pub const GPIO_DIRCLR_PIN6_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN6_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN6_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN5_Pos: u32 = 5;
pub const GPIO_DIRCLR_PIN5_Msk: u32 = 32;
pub const GPIO_DIRCLR_PIN5_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN5_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN5_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN4_Pos: u32 = 4;
pub const GPIO_DIRCLR_PIN4_Msk: u32 = 16;
pub const GPIO_DIRCLR_PIN4_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN4_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN4_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN3_Pos: u32 = 3;
pub const GPIO_DIRCLR_PIN3_Msk: u32 = 8;
pub const GPIO_DIRCLR_PIN3_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN3_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN3_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN2_Pos: u32 = 2;
pub const GPIO_DIRCLR_PIN2_Msk: u32 = 4;
pub const GPIO_DIRCLR_PIN2_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN2_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN2_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN1_Pos: u32 = 1;
pub const GPIO_DIRCLR_PIN1_Msk: u32 = 2;
pub const GPIO_DIRCLR_PIN1_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN1_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN1_Clear: u32 = 1;
pub const GPIO_DIRCLR_PIN0_Pos: u32 = 0;
pub const GPIO_DIRCLR_PIN0_Msk: u32 = 1;
pub const GPIO_DIRCLR_PIN0_Input: u32 = 0;
pub const GPIO_DIRCLR_PIN0_Output: u32 = 1;
pub const GPIO_DIRCLR_PIN0_Clear: u32 = 1;
pub const GPIO_LATCH_PIN31_Pos: u32 = 31;
pub const GPIO_LATCH_PIN31_Msk: u32 = 2147483648;
pub const GPIO_LATCH_PIN31_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN31_Latched: u32 = 1;
pub const GPIO_LATCH_PIN30_Pos: u32 = 30;
pub const GPIO_LATCH_PIN30_Msk: u32 = 1073741824;
pub const GPIO_LATCH_PIN30_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN30_Latched: u32 = 1;
pub const GPIO_LATCH_PIN29_Pos: u32 = 29;
pub const GPIO_LATCH_PIN29_Msk: u32 = 536870912;
pub const GPIO_LATCH_PIN29_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN29_Latched: u32 = 1;
pub const GPIO_LATCH_PIN28_Pos: u32 = 28;
pub const GPIO_LATCH_PIN28_Msk: u32 = 268435456;
pub const GPIO_LATCH_PIN28_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN28_Latched: u32 = 1;
pub const GPIO_LATCH_PIN27_Pos: u32 = 27;
pub const GPIO_LATCH_PIN27_Msk: u32 = 134217728;
pub const GPIO_LATCH_PIN27_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN27_Latched: u32 = 1;
pub const GPIO_LATCH_PIN26_Pos: u32 = 26;
pub const GPIO_LATCH_PIN26_Msk: u32 = 67108864;
pub const GPIO_LATCH_PIN26_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN26_Latched: u32 = 1;
pub const GPIO_LATCH_PIN25_Pos: u32 = 25;
pub const GPIO_LATCH_PIN25_Msk: u32 = 33554432;
pub const GPIO_LATCH_PIN25_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN25_Latched: u32 = 1;
pub const GPIO_LATCH_PIN24_Pos: u32 = 24;
pub const GPIO_LATCH_PIN24_Msk: u32 = 16777216;
pub const GPIO_LATCH_PIN24_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN24_Latched: u32 = 1;
pub const GPIO_LATCH_PIN23_Pos: u32 = 23;
pub const GPIO_LATCH_PIN23_Msk: u32 = 8388608;
pub const GPIO_LATCH_PIN23_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN23_Latched: u32 = 1;
pub const GPIO_LATCH_PIN22_Pos: u32 = 22;
pub const GPIO_LATCH_PIN22_Msk: u32 = 4194304;
pub const GPIO_LATCH_PIN22_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN22_Latched: u32 = 1;
pub const GPIO_LATCH_PIN21_Pos: u32 = 21;
pub const GPIO_LATCH_PIN21_Msk: u32 = 2097152;
pub const GPIO_LATCH_PIN21_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN21_Latched: u32 = 1;
pub const GPIO_LATCH_PIN20_Pos: u32 = 20;
pub const GPIO_LATCH_PIN20_Msk: u32 = 1048576;
pub const GPIO_LATCH_PIN20_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN20_Latched: u32 = 1;
pub const GPIO_LATCH_PIN19_Pos: u32 = 19;
pub const GPIO_LATCH_PIN19_Msk: u32 = 524288;
pub const GPIO_LATCH_PIN19_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN19_Latched: u32 = 1;
pub const GPIO_LATCH_PIN18_Pos: u32 = 18;
pub const GPIO_LATCH_PIN18_Msk: u32 = 262144;
pub const GPIO_LATCH_PIN18_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN18_Latched: u32 = 1;
pub const GPIO_LATCH_PIN17_Pos: u32 = 17;
pub const GPIO_LATCH_PIN17_Msk: u32 = 131072;
pub const GPIO_LATCH_PIN17_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN17_Latched: u32 = 1;
pub const GPIO_LATCH_PIN16_Pos: u32 = 16;
pub const GPIO_LATCH_PIN16_Msk: u32 = 65536;
pub const GPIO_LATCH_PIN16_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN16_Latched: u32 = 1;
pub const GPIO_LATCH_PIN15_Pos: u32 = 15;
pub const GPIO_LATCH_PIN15_Msk: u32 = 32768;
pub const GPIO_LATCH_PIN15_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN15_Latched: u32 = 1;
pub const GPIO_LATCH_PIN14_Pos: u32 = 14;
pub const GPIO_LATCH_PIN14_Msk: u32 = 16384;
pub const GPIO_LATCH_PIN14_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN14_Latched: u32 = 1;
pub const GPIO_LATCH_PIN13_Pos: u32 = 13;
pub const GPIO_LATCH_PIN13_Msk: u32 = 8192;
pub const GPIO_LATCH_PIN13_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN13_Latched: u32 = 1;
pub const GPIO_LATCH_PIN12_Pos: u32 = 12;
pub const GPIO_LATCH_PIN12_Msk: u32 = 4096;
pub const GPIO_LATCH_PIN12_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN12_Latched: u32 = 1;
pub const GPIO_LATCH_PIN11_Pos: u32 = 11;
pub const GPIO_LATCH_PIN11_Msk: u32 = 2048;
pub const GPIO_LATCH_PIN11_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN11_Latched: u32 = 1;
pub const GPIO_LATCH_PIN10_Pos: u32 = 10;
pub const GPIO_LATCH_PIN10_Msk: u32 = 1024;
pub const GPIO_LATCH_PIN10_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN10_Latched: u32 = 1;
pub const GPIO_LATCH_PIN9_Pos: u32 = 9;
pub const GPIO_LATCH_PIN9_Msk: u32 = 512;
pub const GPIO_LATCH_PIN9_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN9_Latched: u32 = 1;
pub const GPIO_LATCH_PIN8_Pos: u32 = 8;
pub const GPIO_LATCH_PIN8_Msk: u32 = 256;
pub const GPIO_LATCH_PIN8_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN8_Latched: u32 = 1;
pub const GPIO_LATCH_PIN7_Pos: u32 = 7;
pub const GPIO_LATCH_PIN7_Msk: u32 = 128;
pub const GPIO_LATCH_PIN7_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN7_Latched: u32 = 1;
pub const GPIO_LATCH_PIN6_Pos: u32 = 6;
pub const GPIO_LATCH_PIN6_Msk: u32 = 64;
pub const GPIO_LATCH_PIN6_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN6_Latched: u32 = 1;
pub const GPIO_LATCH_PIN5_Pos: u32 = 5;
pub const GPIO_LATCH_PIN5_Msk: u32 = 32;
pub const GPIO_LATCH_PIN5_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN5_Latched: u32 = 1;
pub const GPIO_LATCH_PIN4_Pos: u32 = 4;
pub const GPIO_LATCH_PIN4_Msk: u32 = 16;
pub const GPIO_LATCH_PIN4_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN4_Latched: u32 = 1;
pub const GPIO_LATCH_PIN3_Pos: u32 = 3;
pub const GPIO_LATCH_PIN3_Msk: u32 = 8;
pub const GPIO_LATCH_PIN3_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN3_Latched: u32 = 1;
pub const GPIO_LATCH_PIN2_Pos: u32 = 2;
pub const GPIO_LATCH_PIN2_Msk: u32 = 4;
pub const GPIO_LATCH_PIN2_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN2_Latched: u32 = 1;
pub const GPIO_LATCH_PIN1_Pos: u32 = 1;
pub const GPIO_LATCH_PIN1_Msk: u32 = 2;
pub const GPIO_LATCH_PIN1_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN1_Latched: u32 = 1;
pub const GPIO_LATCH_PIN0_Pos: u32 = 0;
pub const GPIO_LATCH_PIN0_Msk: u32 = 1;
pub const GPIO_LATCH_PIN0_NotLatched: u32 = 0;
pub const GPIO_LATCH_PIN0_Latched: u32 = 1;
pub const GPIO_DETECTMODE_DETECTMODE_Pos: u32 = 0;
pub const GPIO_DETECTMODE_DETECTMODE_Msk: u32 = 1;
pub const GPIO_DETECTMODE_DETECTMODE_Default: u32 = 0;
pub const GPIO_DETECTMODE_DETECTMODE_LDETECT: u32 = 1;
pub const GPIO_PIN_CNF_SENSE_Pos: u32 = 16;
pub const GPIO_PIN_CNF_SENSE_Msk: u32 = 196608;
pub const GPIO_PIN_CNF_SENSE_Disabled: u32 = 0;
pub const GPIO_PIN_CNF_SENSE_High: u32 = 2;
pub const GPIO_PIN_CNF_SENSE_Low: u32 = 3;
pub const GPIO_PIN_CNF_DRIVE_Pos: u32 = 8;
pub const GPIO_PIN_CNF_DRIVE_Msk: u32 = 1792;
pub const GPIO_PIN_CNF_DRIVE_S0S1: u32 = 0;
pub const GPIO_PIN_CNF_DRIVE_H0S1: u32 = 1;
pub const GPIO_PIN_CNF_DRIVE_S0H1: u32 = 2;
pub const GPIO_PIN_CNF_DRIVE_H0H1: u32 = 3;
pub const GPIO_PIN_CNF_DRIVE_D0S1: u32 = 4;
pub const GPIO_PIN_CNF_DRIVE_D0H1: u32 = 5;
pub const GPIO_PIN_CNF_DRIVE_S0D1: u32 = 6;
pub const GPIO_PIN_CNF_DRIVE_H0D1: u32 = 7;
pub const GPIO_PIN_CNF_PULL_Pos: u32 = 2;
pub const GPIO_PIN_CNF_PULL_Msk: u32 = 12;
pub const GPIO_PIN_CNF_PULL_Disabled: u32 = 0;
pub const GPIO_PIN_CNF_PULL_Pulldown: u32 = 1;
pub const GPIO_PIN_CNF_PULL_Pullup: u32 = 3;
pub const GPIO_PIN_CNF_INPUT_Pos: u32 = 1;
pub const GPIO_PIN_CNF_INPUT_Msk: u32 = 2;
pub const GPIO_PIN_CNF_INPUT_Connect: u32 = 0;
pub const GPIO_PIN_CNF_INPUT_Disconnect: u32 = 1;
pub const GPIO_PIN_CNF_DIR_Pos: u32 = 0;
pub const GPIO_PIN_CNF_DIR_Msk: u32 = 1;
pub const GPIO_PIN_CNF_DIR_Input: u32 = 0;
pub const GPIO_PIN_CNF_DIR_Output: u32 = 1;
pub const PDM_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const PDM_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const PDM_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const PDM_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const PDM_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const PDM_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const PDM_EVENTS_STARTED_EVENTS_STARTED_Pos: u32 = 0;
pub const PDM_EVENTS_STARTED_EVENTS_STARTED_Msk: u32 = 1;
pub const PDM_EVENTS_STARTED_EVENTS_STARTED_NotGenerated: u32 = 0;
pub const PDM_EVENTS_STARTED_EVENTS_STARTED_Generated: u32 = 1;
pub const PDM_EVENTS_STOPPED_EVENTS_STOPPED_Pos: u32 = 0;
pub const PDM_EVENTS_STOPPED_EVENTS_STOPPED_Msk: u32 = 1;
pub const PDM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated: u32 = 0;
pub const PDM_EVENTS_STOPPED_EVENTS_STOPPED_Generated: u32 = 1;
pub const PDM_EVENTS_END_EVENTS_END_Pos: u32 = 0;
pub const PDM_EVENTS_END_EVENTS_END_Msk: u32 = 1;
pub const PDM_EVENTS_END_EVENTS_END_NotGenerated: u32 = 0;
pub const PDM_EVENTS_END_EVENTS_END_Generated: u32 = 1;
pub const PDM_INTEN_END_Pos: u32 = 2;
pub const PDM_INTEN_END_Msk: u32 = 4;
pub const PDM_INTEN_END_Disabled: u32 = 0;
pub const PDM_INTEN_END_Enabled: u32 = 1;
pub const PDM_INTEN_STOPPED_Pos: u32 = 1;
pub const PDM_INTEN_STOPPED_Msk: u32 = 2;
pub const PDM_INTEN_STOPPED_Disabled: u32 = 0;
pub const PDM_INTEN_STOPPED_Enabled: u32 = 1;
pub const PDM_INTEN_STARTED_Pos: u32 = 0;
pub const PDM_INTEN_STARTED_Msk: u32 = 1;
pub const PDM_INTEN_STARTED_Disabled: u32 = 0;
pub const PDM_INTEN_STARTED_Enabled: u32 = 1;
pub const PDM_INTENSET_END_Pos: u32 = 2;
pub const PDM_INTENSET_END_Msk: u32 = 4;
pub const PDM_INTENSET_END_Disabled: u32 = 0;
pub const PDM_INTENSET_END_Enabled: u32 = 1;
pub const PDM_INTENSET_END_Set: u32 = 1;
pub const PDM_INTENSET_STOPPED_Pos: u32 = 1;
pub const PDM_INTENSET_STOPPED_Msk: u32 = 2;
pub const PDM_INTENSET_STOPPED_Disabled: u32 = 0;
pub const PDM_INTENSET_STOPPED_Enabled: u32 = 1;
pub const PDM_INTENSET_STOPPED_Set: u32 = 1;
pub const PDM_INTENSET_STARTED_Pos: u32 = 0;
pub const PDM_INTENSET_STARTED_Msk: u32 = 1;
pub const PDM_INTENSET_STARTED_Disabled: u32 = 0;
pub const PDM_INTENSET_STARTED_Enabled: u32 = 1;
pub const PDM_INTENSET_STARTED_Set: u32 = 1;
pub const PDM_INTENCLR_END_Pos: u32 = 2;
pub const PDM_INTENCLR_END_Msk: u32 = 4;
pub const PDM_INTENCLR_END_Disabled: u32 = 0;
pub const PDM_INTENCLR_END_Enabled: u32 = 1;
pub const PDM_INTENCLR_END_Clear: u32 = 1;
pub const PDM_INTENCLR_STOPPED_Pos: u32 = 1;
pub const PDM_INTENCLR_STOPPED_Msk: u32 = 2;
pub const PDM_INTENCLR_STOPPED_Disabled: u32 = 0;
pub const PDM_INTENCLR_STOPPED_Enabled: u32 = 1;
pub const PDM_INTENCLR_STOPPED_Clear: u32 = 1;
pub const PDM_INTENCLR_STARTED_Pos: u32 = 0;
pub const PDM_INTENCLR_STARTED_Msk: u32 = 1;
pub const PDM_INTENCLR_STARTED_Disabled: u32 = 0;
pub const PDM_INTENCLR_STARTED_Enabled: u32 = 1;
pub const PDM_INTENCLR_STARTED_Clear: u32 = 1;
pub const PDM_ENABLE_ENABLE_Pos: u32 = 0;
pub const PDM_ENABLE_ENABLE_Msk: u32 = 1;
pub const PDM_ENABLE_ENABLE_Disabled: u32 = 0;
pub const PDM_ENABLE_ENABLE_Enabled: u32 = 1;
pub const PDM_PDMCLKCTRL_FREQ_Pos: u32 = 0;
pub const PDM_PDMCLKCTRL_FREQ_Msk: u32 = 4294967295;
pub const PDM_PDMCLKCTRL_FREQ_1000K: u32 = 134217728;
pub const PDM_PDMCLKCTRL_FREQ_Default: u32 = 138412032;
pub const PDM_PDMCLKCTRL_FREQ_1067K: u32 = 142606336;
pub const PDM_PDMCLKCTRL_FREQ_1231K: u32 = 159383552;
pub const PDM_PDMCLKCTRL_FREQ_1280K: u32 = 167772160;
pub const PDM_PDMCLKCTRL_FREQ_1333K: u32 = 176160768;
pub const PDM_MODE_EDGE_Pos: u32 = 1;
pub const PDM_MODE_EDGE_Msk: u32 = 2;
pub const PDM_MODE_EDGE_LeftFalling: u32 = 0;
pub const PDM_MODE_EDGE_LeftRising: u32 = 1;
pub const PDM_MODE_OPERATION_Pos: u32 = 0;
pub const PDM_MODE_OPERATION_Msk: u32 = 1;
pub const PDM_MODE_OPERATION_Stereo: u32 = 0;
pub const PDM_MODE_OPERATION_Mono: u32 = 1;
pub const PDM_GAINL_GAINL_Pos: u32 = 0;
pub const PDM_GAINL_GAINL_Msk: u32 = 127;
pub const PDM_GAINL_GAINL_MinGain: u32 = 0;
pub const PDM_GAINL_GAINL_DefaultGain: u32 = 40;
pub const PDM_GAINL_GAINL_MaxGain: u32 = 80;
pub const PDM_GAINR_GAINR_Pos: u32 = 0;
pub const PDM_GAINR_GAINR_Msk: u32 = 127;
pub const PDM_GAINR_GAINR_MinGain: u32 = 0;
pub const PDM_GAINR_GAINR_DefaultGain: u32 = 40;
pub const PDM_GAINR_GAINR_MaxGain: u32 = 80;
pub const PDM_RATIO_RATIO_Pos: u32 = 0;
pub const PDM_RATIO_RATIO_Msk: u32 = 1;
pub const PDM_RATIO_RATIO_Ratio64: u32 = 0;
pub const PDM_RATIO_RATIO_Ratio80: u32 = 1;
pub const PDM_PSEL_CLK_CONNECT_Pos: u32 = 31;
pub const PDM_PSEL_CLK_CONNECT_Msk: u32 = 2147483648;
pub const PDM_PSEL_CLK_CONNECT_Connected: u32 = 0;
pub const PDM_PSEL_CLK_CONNECT_Disconnected: u32 = 1;
pub const PDM_PSEL_CLK_PORT_Pos: u32 = 5;
pub const PDM_PSEL_CLK_PORT_Msk: u32 = 32;
pub const PDM_PSEL_CLK_PIN_Pos: u32 = 0;
pub const PDM_PSEL_CLK_PIN_Msk: u32 = 31;
pub const PDM_PSEL_DIN_CONNECT_Pos: u32 = 31;
pub const PDM_PSEL_DIN_CONNECT_Msk: u32 = 2147483648;
pub const PDM_PSEL_DIN_CONNECT_Connected: u32 = 0;
pub const PDM_PSEL_DIN_CONNECT_Disconnected: u32 = 1;
pub const PDM_PSEL_DIN_PORT_Pos: u32 = 5;
pub const PDM_PSEL_DIN_PORT_Msk: u32 = 32;
pub const PDM_PSEL_DIN_PIN_Pos: u32 = 0;
pub const PDM_PSEL_DIN_PIN_Msk: u32 = 31;
pub const PDM_SAMPLE_PTR_SAMPLEPTR_Pos: u32 = 0;
pub const PDM_SAMPLE_PTR_SAMPLEPTR_Msk: u32 = 4294967295;
pub const PDM_SAMPLE_MAXCNT_BUFFSIZE_Pos: u32 = 0;
pub const PDM_SAMPLE_MAXCNT_BUFFSIZE_Msk: u32 = 32767;
pub const POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Pos: u32 = 0;
pub const POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Msk: u32 = 1;
pub const POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Trigger: u32 = 1;
pub const POWER_TASKS_LOWPWR_TASKS_LOWPWR_Pos: u32 = 0;
pub const POWER_TASKS_LOWPWR_TASKS_LOWPWR_Msk: u32 = 1;
pub const POWER_TASKS_LOWPWR_TASKS_LOWPWR_Trigger: u32 = 1;
pub const POWER_EVENTS_POFWARN_EVENTS_POFWARN_Pos: u32 = 0;
pub const POWER_EVENTS_POFWARN_EVENTS_POFWARN_Msk: u32 = 1;
pub const POWER_EVENTS_POFWARN_EVENTS_POFWARN_NotGenerated: u32 = 0;
pub const POWER_EVENTS_POFWARN_EVENTS_POFWARN_Generated: u32 = 1;
pub const POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos: u32 = 0;
pub const POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Msk: u32 = 1;
pub const POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated: u32 = 0;
pub const POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Generated: u32 = 1;
pub const POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos: u32 = 0;
pub const POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Msk: u32 = 1;
pub const POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated: u32 = 0;
pub const POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Generated: u32 = 1;
pub const POWER_EVENTS_USBDETECTED_EVENTS_USBDETECTED_Pos: u32 = 0;
pub const POWER_EVENTS_USBDETECTED_EVENTS_USBDETECTED_Msk: u32 = 1;
pub const POWER_EVENTS_USBDETECTED_EVENTS_USBDETECTED_NotGenerated: u32 = 0;
pub const POWER_EVENTS_USBDETECTED_EVENTS_USBDETECTED_Generated: u32 = 1;
pub const POWER_EVENTS_USBREMOVED_EVENTS_USBREMOVED_Pos: u32 = 0;
pub const POWER_EVENTS_USBREMOVED_EVENTS_USBREMOVED_Msk: u32 = 1;
pub const POWER_EVENTS_USBREMOVED_EVENTS_USBREMOVED_NotGenerated: u32 = 0;
pub const POWER_EVENTS_USBREMOVED_EVENTS_USBREMOVED_Generated: u32 = 1;
pub const POWER_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_Pos: u32 = 0;
pub const POWER_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_Msk: u32 = 1;
pub const POWER_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_NotGenerated: u32 = 0;
pub const POWER_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_Generated: u32 = 1;
pub const POWER_INTENSET_USBPWRRDY_Pos: u32 = 9;
pub const POWER_INTENSET_USBPWRRDY_Msk: u32 = 512;
pub const POWER_INTENSET_USBPWRRDY_Disabled: u32 = 0;
pub const POWER_INTENSET_USBPWRRDY_Enabled: u32 = 1;
pub const POWER_INTENSET_USBPWRRDY_Set: u32 = 1;
pub const POWER_INTENSET_USBREMOVED_Pos: u32 = 8;
pub const POWER_INTENSET_USBREMOVED_Msk: u32 = 256;
pub const POWER_INTENSET_USBREMOVED_Disabled: u32 = 0;
pub const POWER_INTENSET_USBREMOVED_Enabled: u32 = 1;
pub const POWER_INTENSET_USBREMOVED_Set: u32 = 1;
pub const POWER_INTENSET_USBDETECTED_Pos: u32 = 7;
pub const POWER_INTENSET_USBDETECTED_Msk: u32 = 128;
pub const POWER_INTENSET_USBDETECTED_Disabled: u32 = 0;
pub const POWER_INTENSET_USBDETECTED_Enabled: u32 = 1;
pub const POWER_INTENSET_USBDETECTED_Set: u32 = 1;
pub const POWER_INTENSET_SLEEPEXIT_Pos: u32 = 6;
pub const POWER_INTENSET_SLEEPEXIT_Msk: u32 = 64;
pub const POWER_INTENSET_SLEEPEXIT_Disabled: u32 = 0;
pub const POWER_INTENSET_SLEEPEXIT_Enabled: u32 = 1;
pub const POWER_INTENSET_SLEEPEXIT_Set: u32 = 1;
pub const POWER_INTENSET_SLEEPENTER_Pos: u32 = 5;
pub const POWER_INTENSET_SLEEPENTER_Msk: u32 = 32;
pub const POWER_INTENSET_SLEEPENTER_Disabled: u32 = 0;
pub const POWER_INTENSET_SLEEPENTER_Enabled: u32 = 1;
pub const POWER_INTENSET_SLEEPENTER_Set: u32 = 1;
pub const POWER_INTENSET_POFWARN_Pos: u32 = 2;
pub const POWER_INTENSET_POFWARN_Msk: u32 = 4;
pub const POWER_INTENSET_POFWARN_Disabled: u32 = 0;
pub const POWER_INTENSET_POFWARN_Enabled: u32 = 1;
pub const POWER_INTENSET_POFWARN_Set: u32 = 1;
pub const POWER_INTENCLR_USBPWRRDY_Pos: u32 = 9;
pub const POWER_INTENCLR_USBPWRRDY_Msk: u32 = 512;
pub const POWER_INTENCLR_USBPWRRDY_Disabled: u32 = 0;
pub const POWER_INTENCLR_USBPWRRDY_Enabled: u32 = 1;
pub const POWER_INTENCLR_USBPWRRDY_Clear: u32 = 1;
pub const POWER_INTENCLR_USBREMOVED_Pos: u32 = 8;
pub const POWER_INTENCLR_USBREMOVED_Msk: u32 = 256;
pub const POWER_INTENCLR_USBREMOVED_Disabled: u32 = 0;
pub const POWER_INTENCLR_USBREMOVED_Enabled: u32 = 1;
pub const POWER_INTENCLR_USBREMOVED_Clear: u32 = 1;
pub const POWER_INTENCLR_USBDETECTED_Pos: u32 = 7;
pub const POWER_INTENCLR_USBDETECTED_Msk: u32 = 128;
pub const POWER_INTENCLR_USBDETECTED_Disabled: u32 = 0;
pub const POWER_INTENCLR_USBDETECTED_Enabled: u32 = 1;
pub const POWER_INTENCLR_USBDETECTED_Clear: u32 = 1;
pub const POWER_INTENCLR_SLEEPEXIT_Pos: u32 = 6;
pub const POWER_INTENCLR_SLEEPEXIT_Msk: u32 = 64;
pub const POWER_INTENCLR_SLEEPEXIT_Disabled: u32 = 0;
pub const POWER_INTENCLR_SLEEPEXIT_Enabled: u32 = 1;
pub const POWER_INTENCLR_SLEEPEXIT_Clear: u32 = 1;
pub const POWER_INTENCLR_SLEEPENTER_Pos: u32 = 5;
pub const POWER_INTENCLR_SLEEPENTER_Msk: u32 = 32;
pub const POWER_INTENCLR_SLEEPENTER_Disabled: u32 = 0;
pub const POWER_INTENCLR_SLEEPENTER_Enabled: u32 = 1;
pub const POWER_INTENCLR_SLEEPENTER_Clear: u32 = 1;
pub const POWER_INTENCLR_POFWARN_Pos: u32 = 2;
pub const POWER_INTENCLR_POFWARN_Msk: u32 = 4;
pub const POWER_INTENCLR_POFWARN_Disabled: u32 = 0;
pub const POWER_INTENCLR_POFWARN_Enabled: u32 = 1;
pub const POWER_INTENCLR_POFWARN_Clear: u32 = 1;
pub const POWER_RESETREAS_VBUS_Pos: u32 = 20;
pub const POWER_RESETREAS_VBUS_Msk: u32 = 1048576;
pub const POWER_RESETREAS_VBUS_NotDetected: u32 = 0;
pub const POWER_RESETREAS_VBUS_Detected: u32 = 1;
pub const POWER_RESETREAS_NFC_Pos: u32 = 19;
pub const POWER_RESETREAS_NFC_Msk: u32 = 524288;
pub const POWER_RESETREAS_NFC_NotDetected: u32 = 0;
pub const POWER_RESETREAS_NFC_Detected: u32 = 1;
pub const POWER_RESETREAS_DIF_Pos: u32 = 18;
pub const POWER_RESETREAS_DIF_Msk: u32 = 262144;
pub const POWER_RESETREAS_DIF_NotDetected: u32 = 0;
pub const POWER_RESETREAS_DIF_Detected: u32 = 1;
pub const POWER_RESETREAS_LPCOMP_Pos: u32 = 17;
pub const POWER_RESETREAS_LPCOMP_Msk: u32 = 131072;
pub const POWER_RESETREAS_LPCOMP_NotDetected: u32 = 0;
pub const POWER_RESETREAS_LPCOMP_Detected: u32 = 1;
pub const POWER_RESETREAS_OFF_Pos: u32 = 16;
pub const POWER_RESETREAS_OFF_Msk: u32 = 65536;
pub const POWER_RESETREAS_OFF_NotDetected: u32 = 0;
pub const POWER_RESETREAS_OFF_Detected: u32 = 1;
pub const POWER_RESETREAS_LOCKUP_Pos: u32 = 3;
pub const POWER_RESETREAS_LOCKUP_Msk: u32 = 8;
pub const POWER_RESETREAS_LOCKUP_NotDetected: u32 = 0;
pub const POWER_RESETREAS_LOCKUP_Detected: u32 = 1;
pub const POWER_RESETREAS_SREQ_Pos: u32 = 2;
pub const POWER_RESETREAS_SREQ_Msk: u32 = 4;
pub const POWER_RESETREAS_SREQ_NotDetected: u32 = 0;
pub const POWER_RESETREAS_SREQ_Detected: u32 = 1;
pub const POWER_RESETREAS_DOG_Pos: u32 = 1;
pub const POWER_RESETREAS_DOG_Msk: u32 = 2;
pub const POWER_RESETREAS_DOG_NotDetected: u32 = 0;
pub const POWER_RESETREAS_DOG_Detected: u32 = 1;
pub const POWER_RESETREAS_RESETPIN_Pos: u32 = 0;
pub const POWER_RESETREAS_RESETPIN_Msk: u32 = 1;
pub const POWER_RESETREAS_RESETPIN_NotDetected: u32 = 0;
pub const POWER_RESETREAS_RESETPIN_Detected: u32 = 1;
pub const POWER_RAMSTATUS_RAMBLOCK3_Pos: u32 = 3;
pub const POWER_RAMSTATUS_RAMBLOCK3_Msk: u32 = 8;
pub const POWER_RAMSTATUS_RAMBLOCK3_Off: u32 = 0;
pub const POWER_RAMSTATUS_RAMBLOCK3_On: u32 = 1;
pub const POWER_RAMSTATUS_RAMBLOCK2_Pos: u32 = 2;
pub const POWER_RAMSTATUS_RAMBLOCK2_Msk: u32 = 4;
pub const POWER_RAMSTATUS_RAMBLOCK2_Off: u32 = 0;
pub const POWER_RAMSTATUS_RAMBLOCK2_On: u32 = 1;
pub const POWER_RAMSTATUS_RAMBLOCK1_Pos: u32 = 1;
pub const POWER_RAMSTATUS_RAMBLOCK1_Msk: u32 = 2;
pub const POWER_RAMSTATUS_RAMBLOCK1_Off: u32 = 0;
pub const POWER_RAMSTATUS_RAMBLOCK1_On: u32 = 1;
pub const POWER_RAMSTATUS_RAMBLOCK0_Pos: u32 = 0;
pub const POWER_RAMSTATUS_RAMBLOCK0_Msk: u32 = 1;
pub const POWER_RAMSTATUS_RAMBLOCK0_Off: u32 = 0;
pub const POWER_RAMSTATUS_RAMBLOCK0_On: u32 = 1;
pub const POWER_USBREGSTATUS_OUTPUTRDY_Pos: u32 = 1;
pub const POWER_USBREGSTATUS_OUTPUTRDY_Msk: u32 = 2;
pub const POWER_USBREGSTATUS_OUTPUTRDY_NotReady: u32 = 0;
pub const POWER_USBREGSTATUS_OUTPUTRDY_Ready: u32 = 1;
pub const POWER_USBREGSTATUS_VBUSDETECT_Pos: u32 = 0;
pub const POWER_USBREGSTATUS_VBUSDETECT_Msk: u32 = 1;
pub const POWER_USBREGSTATUS_VBUSDETECT_NoVbus: u32 = 0;
pub const POWER_USBREGSTATUS_VBUSDETECT_VbusPresent: u32 = 1;
pub const POWER_SYSTEMOFF_SYSTEMOFF_Pos: u32 = 0;
pub const POWER_SYSTEMOFF_SYSTEMOFF_Msk: u32 = 1;
pub const POWER_SYSTEMOFF_SYSTEMOFF_Enter: u32 = 1;
pub const POWER_POFCON_THRESHOLDVDDH_Pos: u32 = 8;
pub const POWER_POFCON_THRESHOLDVDDH_Msk: u32 = 3840;
pub const POWER_POFCON_THRESHOLDVDDH_V27: u32 = 0;
pub const POWER_POFCON_THRESHOLDVDDH_V28: u32 = 1;
pub const POWER_POFCON_THRESHOLDVDDH_V29: u32 = 2;
pub const POWER_POFCON_THRESHOLDVDDH_V30: u32 = 3;
pub const POWER_POFCON_THRESHOLDVDDH_V31: u32 = 4;
pub const POWER_POFCON_THRESHOLDVDDH_V32: u32 = 5;
pub const POWER_POFCON_THRESHOLDVDDH_V33: u32 = 6;
pub const POWER_POFCON_THRESHOLDVDDH_V34: u32 = 7;
pub const POWER_POFCON_THRESHOLDVDDH_V35: u32 = 8;
pub const POWER_POFCON_THRESHOLDVDDH_V36: u32 = 9;
pub const POWER_POFCON_THRESHOLDVDDH_V37: u32 = 10;
pub const POWER_POFCON_THRESHOLDVDDH_V38: u32 = 11;
pub const POWER_POFCON_THRESHOLDVDDH_V39: u32 = 12;
pub const POWER_POFCON_THRESHOLDVDDH_V40: u32 = 13;
pub const POWER_POFCON_THRESHOLDVDDH_V41: u32 = 14;
pub const POWER_POFCON_THRESHOLDVDDH_V42: u32 = 15;
pub const POWER_POFCON_THRESHOLD_Pos: u32 = 1;
pub const POWER_POFCON_THRESHOLD_Msk: u32 = 30;
pub const POWER_POFCON_THRESHOLD_V17: u32 = 4;
pub const POWER_POFCON_THRESHOLD_V18: u32 = 5;
pub const POWER_POFCON_THRESHOLD_V19: u32 = 6;
pub const POWER_POFCON_THRESHOLD_V20: u32 = 7;
pub const POWER_POFCON_THRESHOLD_V21: u32 = 8;
pub const POWER_POFCON_THRESHOLD_V22: u32 = 9;
pub const POWER_POFCON_THRESHOLD_V23: u32 = 10;
pub const POWER_POFCON_THRESHOLD_V24: u32 = 11;
pub const POWER_POFCON_THRESHOLD_V25: u32 = 12;
pub const POWER_POFCON_THRESHOLD_V26: u32 = 13;
pub const POWER_POFCON_THRESHOLD_V27: u32 = 14;
pub const POWER_POFCON_THRESHOLD_V28: u32 = 15;
pub const POWER_POFCON_POF_Pos: u32 = 0;
pub const POWER_POFCON_POF_Msk: u32 = 1;
pub const POWER_POFCON_POF_Disabled: u32 = 0;
pub const POWER_POFCON_POF_Enabled: u32 = 1;
pub const POWER_GPREGRET_GPREGRET_Pos: u32 = 0;
pub const POWER_GPREGRET_GPREGRET_Msk: u32 = 255;
pub const POWER_GPREGRET2_GPREGRET_Pos: u32 = 0;
pub const POWER_GPREGRET2_GPREGRET_Msk: u32 = 255;
pub const POWER_DCDCEN_DCDCEN_Pos: u32 = 0;
pub const POWER_DCDCEN_DCDCEN_Msk: u32 = 1;
pub const POWER_DCDCEN_DCDCEN_Disabled: u32 = 0;
pub const POWER_DCDCEN_DCDCEN_Enabled: u32 = 1;
pub const POWER_DCDCEN0_DCDCEN_Pos: u32 = 0;
pub const POWER_DCDCEN0_DCDCEN_Msk: u32 = 1;
pub const POWER_DCDCEN0_DCDCEN_Disabled: u32 = 0;
pub const POWER_DCDCEN0_DCDCEN_Enabled: u32 = 1;
pub const POWER_MAINREGSTATUS_MAINREGSTATUS_Pos: u32 = 0;
pub const POWER_MAINREGSTATUS_MAINREGSTATUS_Msk: u32 = 1;
pub const POWER_MAINREGSTATUS_MAINREGSTATUS_Normal: u32 = 0;
pub const POWER_MAINREGSTATUS_MAINREGSTATUS_High: u32 = 1;
pub const POWER_RAM_POWER_S15RETENTION_Pos: u32 = 31;
pub const POWER_RAM_POWER_S15RETENTION_Msk: u32 = 2147483648;
pub const POWER_RAM_POWER_S15RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S15RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S14RETENTION_Pos: u32 = 30;
pub const POWER_RAM_POWER_S14RETENTION_Msk: u32 = 1073741824;
pub const POWER_RAM_POWER_S14RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S14RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S13RETENTION_Pos: u32 = 29;
pub const POWER_RAM_POWER_S13RETENTION_Msk: u32 = 536870912;
pub const POWER_RAM_POWER_S13RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S13RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S12RETENTION_Pos: u32 = 28;
pub const POWER_RAM_POWER_S12RETENTION_Msk: u32 = 268435456;
pub const POWER_RAM_POWER_S12RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S12RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S11RETENTION_Pos: u32 = 27;
pub const POWER_RAM_POWER_S11RETENTION_Msk: u32 = 134217728;
pub const POWER_RAM_POWER_S11RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S11RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S10RETENTION_Pos: u32 = 26;
pub const POWER_RAM_POWER_S10RETENTION_Msk: u32 = 67108864;
pub const POWER_RAM_POWER_S10RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S10RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S9RETENTION_Pos: u32 = 25;
pub const POWER_RAM_POWER_S9RETENTION_Msk: u32 = 33554432;
pub const POWER_RAM_POWER_S9RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S9RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S8RETENTION_Pos: u32 = 24;
pub const POWER_RAM_POWER_S8RETENTION_Msk: u32 = 16777216;
pub const POWER_RAM_POWER_S8RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S8RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S7RETENTION_Pos: u32 = 23;
pub const POWER_RAM_POWER_S7RETENTION_Msk: u32 = 8388608;
pub const POWER_RAM_POWER_S7RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S7RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S6RETENTION_Pos: u32 = 22;
pub const POWER_RAM_POWER_S6RETENTION_Msk: u32 = 4194304;
pub const POWER_RAM_POWER_S6RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S6RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S5RETENTION_Pos: u32 = 21;
pub const POWER_RAM_POWER_S5RETENTION_Msk: u32 = 2097152;
pub const POWER_RAM_POWER_S5RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S5RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S4RETENTION_Pos: u32 = 20;
pub const POWER_RAM_POWER_S4RETENTION_Msk: u32 = 1048576;
pub const POWER_RAM_POWER_S4RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S4RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S3RETENTION_Pos: u32 = 19;
pub const POWER_RAM_POWER_S3RETENTION_Msk: u32 = 524288;
pub const POWER_RAM_POWER_S3RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S3RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S2RETENTION_Pos: u32 = 18;
pub const POWER_RAM_POWER_S2RETENTION_Msk: u32 = 262144;
pub const POWER_RAM_POWER_S2RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S2RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S1RETENTION_Pos: u32 = 17;
pub const POWER_RAM_POWER_S1RETENTION_Msk: u32 = 131072;
pub const POWER_RAM_POWER_S1RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S1RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S0RETENTION_Pos: u32 = 16;
pub const POWER_RAM_POWER_S0RETENTION_Msk: u32 = 65536;
pub const POWER_RAM_POWER_S0RETENTION_Off: u32 = 0;
pub const POWER_RAM_POWER_S0RETENTION_On: u32 = 1;
pub const POWER_RAM_POWER_S15POWER_Pos: u32 = 15;
pub const POWER_RAM_POWER_S15POWER_Msk: u32 = 32768;
pub const POWER_RAM_POWER_S15POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S15POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S14POWER_Pos: u32 = 14;
pub const POWER_RAM_POWER_S14POWER_Msk: u32 = 16384;
pub const POWER_RAM_POWER_S14POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S14POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S13POWER_Pos: u32 = 13;
pub const POWER_RAM_POWER_S13POWER_Msk: u32 = 8192;
pub const POWER_RAM_POWER_S13POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S13POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S12POWER_Pos: u32 = 12;
pub const POWER_RAM_POWER_S12POWER_Msk: u32 = 4096;
pub const POWER_RAM_POWER_S12POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S12POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S11POWER_Pos: u32 = 11;
pub const POWER_RAM_POWER_S11POWER_Msk: u32 = 2048;
pub const POWER_RAM_POWER_S11POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S11POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S10POWER_Pos: u32 = 10;
pub const POWER_RAM_POWER_S10POWER_Msk: u32 = 1024;
pub const POWER_RAM_POWER_S10POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S10POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S9POWER_Pos: u32 = 9;
pub const POWER_RAM_POWER_S9POWER_Msk: u32 = 512;
pub const POWER_RAM_POWER_S9POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S9POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S8POWER_Pos: u32 = 8;
pub const POWER_RAM_POWER_S8POWER_Msk: u32 = 256;
pub const POWER_RAM_POWER_S8POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S8POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S7POWER_Pos: u32 = 7;
pub const POWER_RAM_POWER_S7POWER_Msk: u32 = 128;
pub const POWER_RAM_POWER_S7POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S7POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S6POWER_Pos: u32 = 6;
pub const POWER_RAM_POWER_S6POWER_Msk: u32 = 64;
pub const POWER_RAM_POWER_S6POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S6POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S5POWER_Pos: u32 = 5;
pub const POWER_RAM_POWER_S5POWER_Msk: u32 = 32;
pub const POWER_RAM_POWER_S5POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S5POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S4POWER_Pos: u32 = 4;
pub const POWER_RAM_POWER_S4POWER_Msk: u32 = 16;
pub const POWER_RAM_POWER_S4POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S4POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S3POWER_Pos: u32 = 3;
pub const POWER_RAM_POWER_S3POWER_Msk: u32 = 8;
pub const POWER_RAM_POWER_S3POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S3POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S2POWER_Pos: u32 = 2;
pub const POWER_RAM_POWER_S2POWER_Msk: u32 = 4;
pub const POWER_RAM_POWER_S2POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S2POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S1POWER_Pos: u32 = 1;
pub const POWER_RAM_POWER_S1POWER_Msk: u32 = 2;
pub const POWER_RAM_POWER_S1POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S1POWER_On: u32 = 1;
pub const POWER_RAM_POWER_S0POWER_Pos: u32 = 0;
pub const POWER_RAM_POWER_S0POWER_Msk: u32 = 1;
pub const POWER_RAM_POWER_S0POWER_Off: u32 = 0;
pub const POWER_RAM_POWER_S0POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S15RETENTION_Pos: u32 = 31;
pub const POWER_RAM_POWERSET_S15RETENTION_Msk: u32 = 2147483648;
pub const POWER_RAM_POWERSET_S15RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S14RETENTION_Pos: u32 = 30;
pub const POWER_RAM_POWERSET_S14RETENTION_Msk: u32 = 1073741824;
pub const POWER_RAM_POWERSET_S14RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S13RETENTION_Pos: u32 = 29;
pub const POWER_RAM_POWERSET_S13RETENTION_Msk: u32 = 536870912;
pub const POWER_RAM_POWERSET_S13RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S12RETENTION_Pos: u32 = 28;
pub const POWER_RAM_POWERSET_S12RETENTION_Msk: u32 = 268435456;
pub const POWER_RAM_POWERSET_S12RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S11RETENTION_Pos: u32 = 27;
pub const POWER_RAM_POWERSET_S11RETENTION_Msk: u32 = 134217728;
pub const POWER_RAM_POWERSET_S11RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S10RETENTION_Pos: u32 = 26;
pub const POWER_RAM_POWERSET_S10RETENTION_Msk: u32 = 67108864;
pub const POWER_RAM_POWERSET_S10RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S9RETENTION_Pos: u32 = 25;
pub const POWER_RAM_POWERSET_S9RETENTION_Msk: u32 = 33554432;
pub const POWER_RAM_POWERSET_S9RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S8RETENTION_Pos: u32 = 24;
pub const POWER_RAM_POWERSET_S8RETENTION_Msk: u32 = 16777216;
pub const POWER_RAM_POWERSET_S8RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S7RETENTION_Pos: u32 = 23;
pub const POWER_RAM_POWERSET_S7RETENTION_Msk: u32 = 8388608;
pub const POWER_RAM_POWERSET_S7RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S6RETENTION_Pos: u32 = 22;
pub const POWER_RAM_POWERSET_S6RETENTION_Msk: u32 = 4194304;
pub const POWER_RAM_POWERSET_S6RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S5RETENTION_Pos: u32 = 21;
pub const POWER_RAM_POWERSET_S5RETENTION_Msk: u32 = 2097152;
pub const POWER_RAM_POWERSET_S5RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S4RETENTION_Pos: u32 = 20;
pub const POWER_RAM_POWERSET_S4RETENTION_Msk: u32 = 1048576;
pub const POWER_RAM_POWERSET_S4RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S3RETENTION_Pos: u32 = 19;
pub const POWER_RAM_POWERSET_S3RETENTION_Msk: u32 = 524288;
pub const POWER_RAM_POWERSET_S3RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S2RETENTION_Pos: u32 = 18;
pub const POWER_RAM_POWERSET_S2RETENTION_Msk: u32 = 262144;
pub const POWER_RAM_POWERSET_S2RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S1RETENTION_Pos: u32 = 17;
pub const POWER_RAM_POWERSET_S1RETENTION_Msk: u32 = 131072;
pub const POWER_RAM_POWERSET_S1RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S0RETENTION_Pos: u32 = 16;
pub const POWER_RAM_POWERSET_S0RETENTION_Msk: u32 = 65536;
pub const POWER_RAM_POWERSET_S0RETENTION_On: u32 = 1;
pub const POWER_RAM_POWERSET_S15POWER_Pos: u32 = 15;
pub const POWER_RAM_POWERSET_S15POWER_Msk: u32 = 32768;
pub const POWER_RAM_POWERSET_S15POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S14POWER_Pos: u32 = 14;
pub const POWER_RAM_POWERSET_S14POWER_Msk: u32 = 16384;
pub const POWER_RAM_POWERSET_S14POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S13POWER_Pos: u32 = 13;
pub const POWER_RAM_POWERSET_S13POWER_Msk: u32 = 8192;
pub const POWER_RAM_POWERSET_S13POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S12POWER_Pos: u32 = 12;
pub const POWER_RAM_POWERSET_S12POWER_Msk: u32 = 4096;
pub const POWER_RAM_POWERSET_S12POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S11POWER_Pos: u32 = 11;
pub const POWER_RAM_POWERSET_S11POWER_Msk: u32 = 2048;
pub const POWER_RAM_POWERSET_S11POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S10POWER_Pos: u32 = 10;
pub const POWER_RAM_POWERSET_S10POWER_Msk: u32 = 1024;
pub const POWER_RAM_POWERSET_S10POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S9POWER_Pos: u32 = 9;
pub const POWER_RAM_POWERSET_S9POWER_Msk: u32 = 512;
pub const POWER_RAM_POWERSET_S9POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S8POWER_Pos: u32 = 8;
pub const POWER_RAM_POWERSET_S8POWER_Msk: u32 = 256;
pub const POWER_RAM_POWERSET_S8POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S7POWER_Pos: u32 = 7;
pub const POWER_RAM_POWERSET_S7POWER_Msk: u32 = 128;
pub const POWER_RAM_POWERSET_S7POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S6POWER_Pos: u32 = 6;
pub const POWER_RAM_POWERSET_S6POWER_Msk: u32 = 64;
pub const POWER_RAM_POWERSET_S6POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S5POWER_Pos: u32 = 5;
pub const POWER_RAM_POWERSET_S5POWER_Msk: u32 = 32;
pub const POWER_RAM_POWERSET_S5POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S4POWER_Pos: u32 = 4;
pub const POWER_RAM_POWERSET_S4POWER_Msk: u32 = 16;
pub const POWER_RAM_POWERSET_S4POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S3POWER_Pos: u32 = 3;
pub const POWER_RAM_POWERSET_S3POWER_Msk: u32 = 8;
pub const POWER_RAM_POWERSET_S3POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S2POWER_Pos: u32 = 2;
pub const POWER_RAM_POWERSET_S2POWER_Msk: u32 = 4;
pub const POWER_RAM_POWERSET_S2POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S1POWER_Pos: u32 = 1;
pub const POWER_RAM_POWERSET_S1POWER_Msk: u32 = 2;
pub const POWER_RAM_POWERSET_S1POWER_On: u32 = 1;
pub const POWER_RAM_POWERSET_S0POWER_Pos: u32 = 0;
pub const POWER_RAM_POWERSET_S0POWER_Msk: u32 = 1;
pub const POWER_RAM_POWERSET_S0POWER_On: u32 = 1;
pub const POWER_RAM_POWERCLR_S15RETENTION_Pos: u32 = 31;
pub const POWER_RAM_POWERCLR_S15RETENTION_Msk: u32 = 2147483648;
pub const POWER_RAM_POWERCLR_S15RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S14RETENTION_Pos: u32 = 30;
pub const POWER_RAM_POWERCLR_S14RETENTION_Msk: u32 = 1073741824;
pub const POWER_RAM_POWERCLR_S14RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S13RETENTION_Pos: u32 = 29;
pub const POWER_RAM_POWERCLR_S13RETENTION_Msk: u32 = 536870912;
pub const POWER_RAM_POWERCLR_S13RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S12RETENTION_Pos: u32 = 28;
pub const POWER_RAM_POWERCLR_S12RETENTION_Msk: u32 = 268435456;
pub const POWER_RAM_POWERCLR_S12RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S11RETENTION_Pos: u32 = 27;
pub const POWER_RAM_POWERCLR_S11RETENTION_Msk: u32 = 134217728;
pub const POWER_RAM_POWERCLR_S11RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S10RETENTION_Pos: u32 = 26;
pub const POWER_RAM_POWERCLR_S10RETENTION_Msk: u32 = 67108864;
pub const POWER_RAM_POWERCLR_S10RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S9RETENTION_Pos: u32 = 25;
pub const POWER_RAM_POWERCLR_S9RETENTION_Msk: u32 = 33554432;
pub const POWER_RAM_POWERCLR_S9RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S8RETENTION_Pos: u32 = 24;
pub const POWER_RAM_POWERCLR_S8RETENTION_Msk: u32 = 16777216;
pub const POWER_RAM_POWERCLR_S8RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S7RETENTION_Pos: u32 = 23;
pub const POWER_RAM_POWERCLR_S7RETENTION_Msk: u32 = 8388608;
pub const POWER_RAM_POWERCLR_S7RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S6RETENTION_Pos: u32 = 22;
pub const POWER_RAM_POWERCLR_S6RETENTION_Msk: u32 = 4194304;
pub const POWER_RAM_POWERCLR_S6RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S5RETENTION_Pos: u32 = 21;
pub const POWER_RAM_POWERCLR_S5RETENTION_Msk: u32 = 2097152;
pub const POWER_RAM_POWERCLR_S5RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S4RETENTION_Pos: u32 = 20;
pub const POWER_RAM_POWERCLR_S4RETENTION_Msk: u32 = 1048576;
pub const POWER_RAM_POWERCLR_S4RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S3RETENTION_Pos: u32 = 19;
pub const POWER_RAM_POWERCLR_S3RETENTION_Msk: u32 = 524288;
pub const POWER_RAM_POWERCLR_S3RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S2RETENTION_Pos: u32 = 18;
pub const POWER_RAM_POWERCLR_S2RETENTION_Msk: u32 = 262144;
pub const POWER_RAM_POWERCLR_S2RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S1RETENTION_Pos: u32 = 17;
pub const POWER_RAM_POWERCLR_S1RETENTION_Msk: u32 = 131072;
pub const POWER_RAM_POWERCLR_S1RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S0RETENTION_Pos: u32 = 16;
pub const POWER_RAM_POWERCLR_S0RETENTION_Msk: u32 = 65536;
pub const POWER_RAM_POWERCLR_S0RETENTION_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S15POWER_Pos: u32 = 15;
pub const POWER_RAM_POWERCLR_S15POWER_Msk: u32 = 32768;
pub const POWER_RAM_POWERCLR_S15POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S14POWER_Pos: u32 = 14;
pub const POWER_RAM_POWERCLR_S14POWER_Msk: u32 = 16384;
pub const POWER_RAM_POWERCLR_S14POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S13POWER_Pos: u32 = 13;
pub const POWER_RAM_POWERCLR_S13POWER_Msk: u32 = 8192;
pub const POWER_RAM_POWERCLR_S13POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S12POWER_Pos: u32 = 12;
pub const POWER_RAM_POWERCLR_S12POWER_Msk: u32 = 4096;
pub const POWER_RAM_POWERCLR_S12POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S11POWER_Pos: u32 = 11;
pub const POWER_RAM_POWERCLR_S11POWER_Msk: u32 = 2048;
pub const POWER_RAM_POWERCLR_S11POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S10POWER_Pos: u32 = 10;
pub const POWER_RAM_POWERCLR_S10POWER_Msk: u32 = 1024;
pub const POWER_RAM_POWERCLR_S10POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S9POWER_Pos: u32 = 9;
pub const POWER_RAM_POWERCLR_S9POWER_Msk: u32 = 512;
pub const POWER_RAM_POWERCLR_S9POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S8POWER_Pos: u32 = 8;
pub const POWER_RAM_POWERCLR_S8POWER_Msk: u32 = 256;
pub const POWER_RAM_POWERCLR_S8POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S7POWER_Pos: u32 = 7;
pub const POWER_RAM_POWERCLR_S7POWER_Msk: u32 = 128;
pub const POWER_RAM_POWERCLR_S7POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S6POWER_Pos: u32 = 6;
pub const POWER_RAM_POWERCLR_S6POWER_Msk: u32 = 64;
pub const POWER_RAM_POWERCLR_S6POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S5POWER_Pos: u32 = 5;
pub const POWER_RAM_POWERCLR_S5POWER_Msk: u32 = 32;
pub const POWER_RAM_POWERCLR_S5POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S4POWER_Pos: u32 = 4;
pub const POWER_RAM_POWERCLR_S4POWER_Msk: u32 = 16;
pub const POWER_RAM_POWERCLR_S4POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S3POWER_Pos: u32 = 3;
pub const POWER_RAM_POWERCLR_S3POWER_Msk: u32 = 8;
pub const POWER_RAM_POWERCLR_S3POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S2POWER_Pos: u32 = 2;
pub const POWER_RAM_POWERCLR_S2POWER_Msk: u32 = 4;
pub const POWER_RAM_POWERCLR_S2POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S1POWER_Pos: u32 = 1;
pub const POWER_RAM_POWERCLR_S1POWER_Msk: u32 = 2;
pub const POWER_RAM_POWERCLR_S1POWER_Off: u32 = 1;
pub const POWER_RAM_POWERCLR_S0POWER_Pos: u32 = 0;
pub const POWER_RAM_POWERCLR_S0POWER_Msk: u32 = 1;
pub const POWER_RAM_POWERCLR_S0POWER_Off: u32 = 1;
pub const PPI_TASKS_CHG_EN_EN_Pos: u32 = 0;
pub const PPI_TASKS_CHG_EN_EN_Msk: u32 = 1;
pub const PPI_TASKS_CHG_EN_EN_Trigger: u32 = 1;
pub const PPI_TASKS_CHG_DIS_DIS_Pos: u32 = 0;
pub const PPI_TASKS_CHG_DIS_DIS_Msk: u32 = 1;
pub const PPI_TASKS_CHG_DIS_DIS_Trigger: u32 = 1;
pub const PPI_CHEN_CH31_Pos: u32 = 31;
pub const PPI_CHEN_CH31_Msk: u32 = 2147483648;
pub const PPI_CHEN_CH31_Disabled: u32 = 0;
pub const PPI_CHEN_CH31_Enabled: u32 = 1;
pub const PPI_CHEN_CH30_Pos: u32 = 30;
pub const PPI_CHEN_CH30_Msk: u32 = 1073741824;
pub const PPI_CHEN_CH30_Disabled: u32 = 0;
pub const PPI_CHEN_CH30_Enabled: u32 = 1;
pub const PPI_CHEN_CH29_Pos: u32 = 29;
pub const PPI_CHEN_CH29_Msk: u32 = 536870912;
pub const PPI_CHEN_CH29_Disabled: u32 = 0;
pub const PPI_CHEN_CH29_Enabled: u32 = 1;
pub const PPI_CHEN_CH28_Pos: u32 = 28;
pub const PPI_CHEN_CH28_Msk: u32 = 268435456;
pub const PPI_CHEN_CH28_Disabled: u32 = 0;
pub const PPI_CHEN_CH28_Enabled: u32 = 1;
pub const PPI_CHEN_CH27_Pos: u32 = 27;
pub const PPI_CHEN_CH27_Msk: u32 = 134217728;
pub const PPI_CHEN_CH27_Disabled: u32 = 0;
pub const PPI_CHEN_CH27_Enabled: u32 = 1;
pub const PPI_CHEN_CH26_Pos: u32 = 26;
pub const PPI_CHEN_CH26_Msk: u32 = 67108864;
pub const PPI_CHEN_CH26_Disabled: u32 = 0;
pub const PPI_CHEN_CH26_Enabled: u32 = 1;
pub const PPI_CHEN_CH25_Pos: u32 = 25;
pub const PPI_CHEN_CH25_Msk: u32 = 33554432;
pub const PPI_CHEN_CH25_Disabled: u32 = 0;
pub const PPI_CHEN_CH25_Enabled: u32 = 1;
pub const PPI_CHEN_CH24_Pos: u32 = 24;
pub const PPI_CHEN_CH24_Msk: u32 = 16777216;
pub const PPI_CHEN_CH24_Disabled: u32 = 0;
pub const PPI_CHEN_CH24_Enabled: u32 = 1;
pub const PPI_CHEN_CH23_Pos: u32 = 23;
pub const PPI_CHEN_CH23_Msk: u32 = 8388608;
pub const PPI_CHEN_CH23_Disabled: u32 = 0;
pub const PPI_CHEN_CH23_Enabled: u32 = 1;
pub const PPI_CHEN_CH22_Pos: u32 = 22;
pub const PPI_CHEN_CH22_Msk: u32 = 4194304;
pub const PPI_CHEN_CH22_Disabled: u32 = 0;
pub const PPI_CHEN_CH22_Enabled: u32 = 1;
pub const PPI_CHEN_CH21_Pos: u32 = 21;
pub const PPI_CHEN_CH21_Msk: u32 = 2097152;
pub const PPI_CHEN_CH21_Disabled: u32 = 0;
pub const PPI_CHEN_CH21_Enabled: u32 = 1;
pub const PPI_CHEN_CH20_Pos: u32 = 20;
pub const PPI_CHEN_CH20_Msk: u32 = 1048576;
pub const PPI_CHEN_CH20_Disabled: u32 = 0;
pub const PPI_CHEN_CH20_Enabled: u32 = 1;
pub const PPI_CHEN_CH19_Pos: u32 = 19;
pub const PPI_CHEN_CH19_Msk: u32 = 524288;
pub const PPI_CHEN_CH19_Disabled: u32 = 0;
pub const PPI_CHEN_CH19_Enabled: u32 = 1;
pub const PPI_CHEN_CH18_Pos: u32 = 18;
pub const PPI_CHEN_CH18_Msk: u32 = 262144;
pub const PPI_CHEN_CH18_Disabled: u32 = 0;
pub const PPI_CHEN_CH18_Enabled: u32 = 1;
pub const PPI_CHEN_CH17_Pos: u32 = 17;
pub const PPI_CHEN_CH17_Msk: u32 = 131072;
pub const PPI_CHEN_CH17_Disabled: u32 = 0;
pub const PPI_CHEN_CH17_Enabled: u32 = 1;
pub const PPI_CHEN_CH16_Pos: u32 = 16;
pub const PPI_CHEN_CH16_Msk: u32 = 65536;
pub const PPI_CHEN_CH16_Disabled: u32 = 0;
pub const PPI_CHEN_CH16_Enabled: u32 = 1;
pub const PPI_CHEN_CH15_Pos: u32 = 15;
pub const PPI_CHEN_CH15_Msk: u32 = 32768;
pub const PPI_CHEN_CH15_Disabled: u32 = 0;
pub const PPI_CHEN_CH15_Enabled: u32 = 1;
pub const PPI_CHEN_CH14_Pos: u32 = 14;
pub const PPI_CHEN_CH14_Msk: u32 = 16384;
pub const PPI_CHEN_CH14_Disabled: u32 = 0;
pub const PPI_CHEN_CH14_Enabled: u32 = 1;
pub const PPI_CHEN_CH13_Pos: u32 = 13;
pub const PPI_CHEN_CH13_Msk: u32 = 8192;
pub const PPI_CHEN_CH13_Disabled: u32 = 0;
pub const PPI_CHEN_CH13_Enabled: u32 = 1;
pub const PPI_CHEN_CH12_Pos: u32 = 12;
pub const PPI_CHEN_CH12_Msk: u32 = 4096;
pub const PPI_CHEN_CH12_Disabled: u32 = 0;
pub const PPI_CHEN_CH12_Enabled: u32 = 1;
pub const PPI_CHEN_CH11_Pos: u32 = 11;
pub const PPI_CHEN_CH11_Msk: u32 = 2048;
pub const PPI_CHEN_CH11_Disabled: u32 = 0;
pub const PPI_CHEN_CH11_Enabled: u32 = 1;
pub const PPI_CHEN_CH10_Pos: u32 = 10;
pub const PPI_CHEN_CH10_Msk: u32 = 1024;
pub const PPI_CHEN_CH10_Disabled: u32 = 0;
pub const PPI_CHEN_CH10_Enabled: u32 = 1;
pub const PPI_CHEN_CH9_Pos: u32 = 9;
pub const PPI_CHEN_CH9_Msk: u32 = 512;
pub const PPI_CHEN_CH9_Disabled: u32 = 0;
pub const PPI_CHEN_CH9_Enabled: u32 = 1;
pub const PPI_CHEN_CH8_Pos: u32 = 8;
pub const PPI_CHEN_CH8_Msk: u32 = 256;
pub const PPI_CHEN_CH8_Disabled: u32 = 0;
pub const PPI_CHEN_CH8_Enabled: u32 = 1;
pub const PPI_CHEN_CH7_Pos: u32 = 7;
pub const PPI_CHEN_CH7_Msk: u32 = 128;
pub const PPI_CHEN_CH7_Disabled: u32 = 0;
pub const PPI_CHEN_CH7_Enabled: u32 = 1;
pub const PPI_CHEN_CH6_Pos: u32 = 6;
pub const PPI_CHEN_CH6_Msk: u32 = 64;
pub const PPI_CHEN_CH6_Disabled: u32 = 0;
pub const PPI_CHEN_CH6_Enabled: u32 = 1;
pub const PPI_CHEN_CH5_Pos: u32 = 5;
pub const PPI_CHEN_CH5_Msk: u32 = 32;
pub const PPI_CHEN_CH5_Disabled: u32 = 0;
pub const PPI_CHEN_CH5_Enabled: u32 = 1;
pub const PPI_CHEN_CH4_Pos: u32 = 4;
pub const PPI_CHEN_CH4_Msk: u32 = 16;
pub const PPI_CHEN_CH4_Disabled: u32 = 0;
pub const PPI_CHEN_CH4_Enabled: u32 = 1;
pub const PPI_CHEN_CH3_Pos: u32 = 3;
pub const PPI_CHEN_CH3_Msk: u32 = 8;
pub const PPI_CHEN_CH3_Disabled: u32 = 0;
pub const PPI_CHEN_CH3_Enabled: u32 = 1;
pub const PPI_CHEN_CH2_Pos: u32 = 2;
pub const PPI_CHEN_CH2_Msk: u32 = 4;
pub const PPI_CHEN_CH2_Disabled: u32 = 0;
pub const PPI_CHEN_CH2_Enabled: u32 = 1;
pub const PPI_CHEN_CH1_Pos: u32 = 1;
pub const PPI_CHEN_CH1_Msk: u32 = 2;
pub const PPI_CHEN_CH1_Disabled: u32 = 0;
pub const PPI_CHEN_CH1_Enabled: u32 = 1;
pub const PPI_CHEN_CH0_Pos: u32 = 0;
pub const PPI_CHEN_CH0_Msk: u32 = 1;
pub const PPI_CHEN_CH0_Disabled: u32 = 0;
pub const PPI_CHEN_CH0_Enabled: u32 = 1;
pub const PPI_CHENSET_CH31_Pos: u32 = 31;
pub const PPI_CHENSET_CH31_Msk: u32 = 2147483648;
pub const PPI_CHENSET_CH31_Disabled: u32 = 0;
pub const PPI_CHENSET_CH31_Enabled: u32 = 1;
pub const PPI_CHENSET_CH31_Set: u32 = 1;
pub const PPI_CHENSET_CH30_Pos: u32 = 30;
pub const PPI_CHENSET_CH30_Msk: u32 = 1073741824;
pub const PPI_CHENSET_CH30_Disabled: u32 = 0;
pub const PPI_CHENSET_CH30_Enabled: u32 = 1;
pub const PPI_CHENSET_CH30_Set: u32 = 1;
pub const PPI_CHENSET_CH29_Pos: u32 = 29;
pub const PPI_CHENSET_CH29_Msk: u32 = 536870912;
pub const PPI_CHENSET_CH29_Disabled: u32 = 0;
pub const PPI_CHENSET_CH29_Enabled: u32 = 1;
pub const PPI_CHENSET_CH29_Set: u32 = 1;
pub const PPI_CHENSET_CH28_Pos: u32 = 28;
pub const PPI_CHENSET_CH28_Msk: u32 = 268435456;
pub const PPI_CHENSET_CH28_Disabled: u32 = 0;
pub const PPI_CHENSET_CH28_Enabled: u32 = 1;
pub const PPI_CHENSET_CH28_Set: u32 = 1;
pub const PPI_CHENSET_CH27_Pos: u32 = 27;
pub const PPI_CHENSET_CH27_Msk: u32 = 134217728;
pub const PPI_CHENSET_CH27_Disabled: u32 = 0;
pub const PPI_CHENSET_CH27_Enabled: u32 = 1;
pub const PPI_CHENSET_CH27_Set: u32 = 1;
pub const PPI_CHENSET_CH26_Pos: u32 = 26;
pub const PPI_CHENSET_CH26_Msk: u32 = 67108864;
pub const PPI_CHENSET_CH26_Disabled: u32 = 0;
pub const PPI_CHENSET_CH26_Enabled: u32 = 1;
pub const PPI_CHENSET_CH26_Set: u32 = 1;
pub const PPI_CHENSET_CH25_Pos: u32 = 25;
pub const PPI_CHENSET_CH25_Msk: u32 = 33554432;
pub const PPI_CHENSET_CH25_Disabled: u32 = 0;
pub const PPI_CHENSET_CH25_Enabled: u32 = 1;
pub const PPI_CHENSET_CH25_Set: u32 = 1;
pub const PPI_CHENSET_CH24_Pos: u32 = 24;
pub const PPI_CHENSET_CH24_Msk: u32 = 16777216;
pub const PPI_CHENSET_CH24_Disabled: u32 = 0;
pub const PPI_CHENSET_CH24_Enabled: u32 = 1;
pub const PPI_CHENSET_CH24_Set: u32 = 1;
pub const PPI_CHENSET_CH23_Pos: u32 = 23;
pub const PPI_CHENSET_CH23_Msk: u32 = 8388608;
pub const PPI_CHENSET_CH23_Disabled: u32 = 0;
pub const PPI_CHENSET_CH23_Enabled: u32 = 1;
pub const PPI_CHENSET_CH23_Set: u32 = 1;
pub const PPI_CHENSET_CH22_Pos: u32 = 22;
pub const PPI_CHENSET_CH22_Msk: u32 = 4194304;
pub const PPI_CHENSET_CH22_Disabled: u32 = 0;
pub const PPI_CHENSET_CH22_Enabled: u32 = 1;
pub const PPI_CHENSET_CH22_Set: u32 = 1;
pub const PPI_CHENSET_CH21_Pos: u32 = 21;
pub const PPI_CHENSET_CH21_Msk: u32 = 2097152;
pub const PPI_CHENSET_CH21_Disabled: u32 = 0;
pub const PPI_CHENSET_CH21_Enabled: u32 = 1;
pub const PPI_CHENSET_CH21_Set: u32 = 1;
pub const PPI_CHENSET_CH20_Pos: u32 = 20;
pub const PPI_CHENSET_CH20_Msk: u32 = 1048576;
pub const PPI_CHENSET_CH20_Disabled: u32 = 0;
pub const PPI_CHENSET_CH20_Enabled: u32 = 1;
pub const PPI_CHENSET_CH20_Set: u32 = 1;
pub const PPI_CHENSET_CH19_Pos: u32 = 19;
pub const PPI_CHENSET_CH19_Msk: u32 = 524288;
pub const PPI_CHENSET_CH19_Disabled: u32 = 0;
pub const PPI_CHENSET_CH19_Enabled: u32 = 1;
pub const PPI_CHENSET_CH19_Set: u32 = 1;
pub const PPI_CHENSET_CH18_Pos: u32 = 18;
pub const PPI_CHENSET_CH18_Msk: u32 = 262144;
pub const PPI_CHENSET_CH18_Disabled: u32 = 0;
pub const PPI_CHENSET_CH18_Enabled: u32 = 1;
pub const PPI_CHENSET_CH18_Set: u32 = 1;
pub const PPI_CHENSET_CH17_Pos: u32 = 17;
pub const PPI_CHENSET_CH17_Msk: u32 = 131072;
pub const PPI_CHENSET_CH17_Disabled: u32 = 0;
pub const PPI_CHENSET_CH17_Enabled: u32 = 1;
pub const PPI_CHENSET_CH17_Set: u32 = 1;
pub const PPI_CHENSET_CH16_Pos: u32 = 16;
pub const PPI_CHENSET_CH16_Msk: u32 = 65536;
pub const PPI_CHENSET_CH16_Disabled: u32 = 0;
pub const PPI_CHENSET_CH16_Enabled: u32 = 1;
pub const PPI_CHENSET_CH16_Set: u32 = 1;
pub const PPI_CHENSET_CH15_Pos: u32 = 15;
pub const PPI_CHENSET_CH15_Msk: u32 = 32768;
pub const PPI_CHENSET_CH15_Disabled: u32 = 0;
pub const PPI_CHENSET_CH15_Enabled: u32 = 1;
pub const PPI_CHENSET_CH15_Set: u32 = 1;
pub const PPI_CHENSET_CH14_Pos: u32 = 14;
pub const PPI_CHENSET_CH14_Msk: u32 = 16384;
pub const PPI_CHENSET_CH14_Disabled: u32 = 0;
pub const PPI_CHENSET_CH14_Enabled: u32 = 1;
pub const PPI_CHENSET_CH14_Set: u32 = 1;
pub const PPI_CHENSET_CH13_Pos: u32 = 13;
pub const PPI_CHENSET_CH13_Msk: u32 = 8192;
pub const PPI_CHENSET_CH13_Disabled: u32 = 0;
pub const PPI_CHENSET_CH13_Enabled: u32 = 1;
pub const PPI_CHENSET_CH13_Set: u32 = 1;
pub const PPI_CHENSET_CH12_Pos: u32 = 12;
pub const PPI_CHENSET_CH12_Msk: u32 = 4096;
pub const PPI_CHENSET_CH12_Disabled: u32 = 0;
pub const PPI_CHENSET_CH12_Enabled: u32 = 1;
pub const PPI_CHENSET_CH12_Set: u32 = 1;
pub const PPI_CHENSET_CH11_Pos: u32 = 11;
pub const PPI_CHENSET_CH11_Msk: u32 = 2048;
pub const PPI_CHENSET_CH11_Disabled: u32 = 0;
pub const PPI_CHENSET_CH11_Enabled: u32 = 1;
pub const PPI_CHENSET_CH11_Set: u32 = 1;
pub const PPI_CHENSET_CH10_Pos: u32 = 10;
pub const PPI_CHENSET_CH10_Msk: u32 = 1024;
pub const PPI_CHENSET_CH10_Disabled: u32 = 0;
pub const PPI_CHENSET_CH10_Enabled: u32 = 1;
pub const PPI_CHENSET_CH10_Set: u32 = 1;
pub const PPI_CHENSET_CH9_Pos: u32 = 9;
pub const PPI_CHENSET_CH9_Msk: u32 = 512;
pub const PPI_CHENSET_CH9_Disabled: u32 = 0;
pub const PPI_CHENSET_CH9_Enabled: u32 = 1;
pub const PPI_CHENSET_CH9_Set: u32 = 1;
pub const PPI_CHENSET_CH8_Pos: u32 = 8;
pub const PPI_CHENSET_CH8_Msk: u32 = 256;
pub const PPI_CHENSET_CH8_Disabled: u32 = 0;
pub const PPI_CHENSET_CH8_Enabled: u32 = 1;
pub const PPI_CHENSET_CH8_Set: u32 = 1;
pub const PPI_CHENSET_CH7_Pos: u32 = 7;
pub const PPI_CHENSET_CH7_Msk: u32 = 128;
pub const PPI_CHENSET_CH7_Disabled: u32 = 0;
pub const PPI_CHENSET_CH7_Enabled: u32 = 1;
pub const PPI_CHENSET_CH7_Set: u32 = 1;
pub const PPI_CHENSET_CH6_Pos: u32 = 6;
pub const PPI_CHENSET_CH6_Msk: u32 = 64;
pub const PPI_CHENSET_CH6_Disabled: u32 = 0;
pub const PPI_CHENSET_CH6_Enabled: u32 = 1;
pub const PPI_CHENSET_CH6_Set: u32 = 1;
pub const PPI_CHENSET_CH5_Pos: u32 = 5;
pub const PPI_CHENSET_CH5_Msk: u32 = 32;
pub const PPI_CHENSET_CH5_Disabled: u32 = 0;
pub const PPI_CHENSET_CH5_Enabled: u32 = 1;
pub const PPI_CHENSET_CH5_Set: u32 = 1;
pub const PPI_CHENSET_CH4_Pos: u32 = 4;
pub const PPI_CHENSET_CH4_Msk: u32 = 16;
pub const PPI_CHENSET_CH4_Disabled: u32 = 0;
pub const PPI_CHENSET_CH4_Enabled: u32 = 1;
pub const PPI_CHENSET_CH4_Set: u32 = 1;
pub const PPI_CHENSET_CH3_Pos: u32 = 3;
pub const PPI_CHENSET_CH3_Msk: u32 = 8;
pub const PPI_CHENSET_CH3_Disabled: u32 = 0;
pub const PPI_CHENSET_CH3_Enabled: u32 = 1;
pub const PPI_CHENSET_CH3_Set: u32 = 1;
pub const PPI_CHENSET_CH2_Pos: u32 = 2;
pub const PPI_CHENSET_CH2_Msk: u32 = 4;
pub const PPI_CHENSET_CH2_Disabled: u32 = 0;
pub const PPI_CHENSET_CH2_Enabled: u32 = 1;
pub const PPI_CHENSET_CH2_Set: u32 = 1;
pub const PPI_CHENSET_CH1_Pos: u32 = 1;
pub const PPI_CHENSET_CH1_Msk: u32 = 2;
pub const PPI_CHENSET_CH1_Disabled: u32 = 0;
pub const PPI_CHENSET_CH1_Enabled: u32 = 1;
pub const PPI_CHENSET_CH1_Set: u32 = 1;
pub const PPI_CHENSET_CH0_Pos: u32 = 0;
pub const PPI_CHENSET_CH0_Msk: u32 = 1;
pub const PPI_CHENSET_CH0_Disabled: u32 = 0;
pub const PPI_CHENSET_CH0_Enabled: u32 = 1;
pub const PPI_CHENSET_CH0_Set: u32 = 1;
pub const PPI_CHENCLR_CH31_Pos: u32 = 31;
pub const PPI_CHENCLR_CH31_Msk: u32 = 2147483648;
pub const PPI_CHENCLR_CH31_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH31_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH31_Clear: u32 = 1;
pub const PPI_CHENCLR_CH30_Pos: u32 = 30;
pub const PPI_CHENCLR_CH30_Msk: u32 = 1073741824;
pub const PPI_CHENCLR_CH30_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH30_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH30_Clear: u32 = 1;
pub const PPI_CHENCLR_CH29_Pos: u32 = 29;
pub const PPI_CHENCLR_CH29_Msk: u32 = 536870912;
pub const PPI_CHENCLR_CH29_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH29_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH29_Clear: u32 = 1;
pub const PPI_CHENCLR_CH28_Pos: u32 = 28;
pub const PPI_CHENCLR_CH28_Msk: u32 = 268435456;
pub const PPI_CHENCLR_CH28_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH28_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH28_Clear: u32 = 1;
pub const PPI_CHENCLR_CH27_Pos: u32 = 27;
pub const PPI_CHENCLR_CH27_Msk: u32 = 134217728;
pub const PPI_CHENCLR_CH27_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH27_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH27_Clear: u32 = 1;
pub const PPI_CHENCLR_CH26_Pos: u32 = 26;
pub const PPI_CHENCLR_CH26_Msk: u32 = 67108864;
pub const PPI_CHENCLR_CH26_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH26_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH26_Clear: u32 = 1;
pub const PPI_CHENCLR_CH25_Pos: u32 = 25;
pub const PPI_CHENCLR_CH25_Msk: u32 = 33554432;
pub const PPI_CHENCLR_CH25_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH25_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH25_Clear: u32 = 1;
pub const PPI_CHENCLR_CH24_Pos: u32 = 24;
pub const PPI_CHENCLR_CH24_Msk: u32 = 16777216;
pub const PPI_CHENCLR_CH24_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH24_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH24_Clear: u32 = 1;
pub const PPI_CHENCLR_CH23_Pos: u32 = 23;
pub const PPI_CHENCLR_CH23_Msk: u32 = 8388608;
pub const PPI_CHENCLR_CH23_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH23_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH23_Clear: u32 = 1;
pub const PPI_CHENCLR_CH22_Pos: u32 = 22;
pub const PPI_CHENCLR_CH22_Msk: u32 = 4194304;
pub const PPI_CHENCLR_CH22_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH22_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH22_Clear: u32 = 1;
pub const PPI_CHENCLR_CH21_Pos: u32 = 21;
pub const PPI_CHENCLR_CH21_Msk: u32 = 2097152;
pub const PPI_CHENCLR_CH21_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH21_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH21_Clear: u32 = 1;
pub const PPI_CHENCLR_CH20_Pos: u32 = 20;
pub const PPI_CHENCLR_CH20_Msk: u32 = 1048576;
pub const PPI_CHENCLR_CH20_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH20_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH20_Clear: u32 = 1;
pub const PPI_CHENCLR_CH19_Pos: u32 = 19;
pub const PPI_CHENCLR_CH19_Msk: u32 = 524288;
pub const PPI_CHENCLR_CH19_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH19_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH19_Clear: u32 = 1;
pub const PPI_CHENCLR_CH18_Pos: u32 = 18;
pub const PPI_CHENCLR_CH18_Msk: u32 = 262144;
pub const PPI_CHENCLR_CH18_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH18_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH18_Clear: u32 = 1;
pub const PPI_CHENCLR_CH17_Pos: u32 = 17;
pub const PPI_CHENCLR_CH17_Msk: u32 = 131072;
pub const PPI_CHENCLR_CH17_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH17_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH17_Clear: u32 = 1;
pub const PPI_CHENCLR_CH16_Pos: u32 = 16;
pub const PPI_CHENCLR_CH16_Msk: u32 = 65536;
pub const PPI_CHENCLR_CH16_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH16_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH16_Clear: u32 = 1;
pub const PPI_CHENCLR_CH15_Pos: u32 = 15;
pub const PPI_CHENCLR_CH15_Msk: u32 = 32768;
pub const PPI_CHENCLR_CH15_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH15_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH15_Clear: u32 = 1;
pub const PPI_CHENCLR_CH14_Pos: u32 = 14;
pub const PPI_CHENCLR_CH14_Msk: u32 = 16384;
pub const PPI_CHENCLR_CH14_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH14_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH14_Clear: u32 = 1;
pub const PPI_CHENCLR_CH13_Pos: u32 = 13;
pub const PPI_CHENCLR_CH13_Msk: u32 = 8192;
pub const PPI_CHENCLR_CH13_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH13_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH13_Clear: u32 = 1;
pub const PPI_CHENCLR_CH12_Pos: u32 = 12;
pub const PPI_CHENCLR_CH12_Msk: u32 = 4096;
pub const PPI_CHENCLR_CH12_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH12_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH12_Clear: u32 = 1;
pub const PPI_CHENCLR_CH11_Pos: u32 = 11;
pub const PPI_CHENCLR_CH11_Msk: u32 = 2048;
pub const PPI_CHENCLR_CH11_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH11_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH11_Clear: u32 = 1;
pub const PPI_CHENCLR_CH10_Pos: u32 = 10;
pub const PPI_CHENCLR_CH10_Msk: u32 = 1024;
pub const PPI_CHENCLR_CH10_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH10_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH10_Clear: u32 = 1;
pub const PPI_CHENCLR_CH9_Pos: u32 = 9;
pub const PPI_CHENCLR_CH9_Msk: u32 = 512;
pub const PPI_CHENCLR_CH9_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH9_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH9_Clear: u32 = 1;
pub const PPI_CHENCLR_CH8_Pos: u32 = 8;
pub const PPI_CHENCLR_CH8_Msk: u32 = 256;
pub const PPI_CHENCLR_CH8_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH8_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH8_Clear: u32 = 1;
pub const PPI_CHENCLR_CH7_Pos: u32 = 7;
pub const PPI_CHENCLR_CH7_Msk: u32 = 128;
pub const PPI_CHENCLR_CH7_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH7_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH7_Clear: u32 = 1;
pub const PPI_CHENCLR_CH6_Pos: u32 = 6;
pub const PPI_CHENCLR_CH6_Msk: u32 = 64;
pub const PPI_CHENCLR_CH6_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH6_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH6_Clear: u32 = 1;
pub const PPI_CHENCLR_CH5_Pos: u32 = 5;
pub const PPI_CHENCLR_CH5_Msk: u32 = 32;
pub const PPI_CHENCLR_CH5_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH5_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH5_Clear: u32 = 1;
pub const PPI_CHENCLR_CH4_Pos: u32 = 4;
pub const PPI_CHENCLR_CH4_Msk: u32 = 16;
pub const PPI_CHENCLR_CH4_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH4_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH4_Clear: u32 = 1;
pub const PPI_CHENCLR_CH3_Pos: u32 = 3;
pub const PPI_CHENCLR_CH3_Msk: u32 = 8;
pub const PPI_CHENCLR_CH3_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH3_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH3_Clear: u32 = 1;
pub const PPI_CHENCLR_CH2_Pos: u32 = 2;
pub const PPI_CHENCLR_CH2_Msk: u32 = 4;
pub const PPI_CHENCLR_CH2_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH2_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH2_Clear: u32 = 1;
pub const PPI_CHENCLR_CH1_Pos: u32 = 1;
pub const PPI_CHENCLR_CH1_Msk: u32 = 2;
pub const PPI_CHENCLR_CH1_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH1_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH1_Clear: u32 = 1;
pub const PPI_CHENCLR_CH0_Pos: u32 = 0;
pub const PPI_CHENCLR_CH0_Msk: u32 = 1;
pub const PPI_CHENCLR_CH0_Disabled: u32 = 0;
pub const PPI_CHENCLR_CH0_Enabled: u32 = 1;
pub const PPI_CHENCLR_CH0_Clear: u32 = 1;
pub const PPI_CH_EEP_EEP_Pos: u32 = 0;
pub const PPI_CH_EEP_EEP_Msk: u32 = 4294967295;
pub const PPI_CH_TEP_TEP_Pos: u32 = 0;
pub const PPI_CH_TEP_TEP_Msk: u32 = 4294967295;
pub const PPI_CHG_CH31_Pos: u32 = 31;
pub const PPI_CHG_CH31_Msk: u32 = 2147483648;
pub const PPI_CHG_CH31_Excluded: u32 = 0;
pub const PPI_CHG_CH31_Included: u32 = 1;
pub const PPI_CHG_CH30_Pos: u32 = 30;
pub const PPI_CHG_CH30_Msk: u32 = 1073741824;
pub const PPI_CHG_CH30_Excluded: u32 = 0;
pub const PPI_CHG_CH30_Included: u32 = 1;
pub const PPI_CHG_CH29_Pos: u32 = 29;
pub const PPI_CHG_CH29_Msk: u32 = 536870912;
pub const PPI_CHG_CH29_Excluded: u32 = 0;
pub const PPI_CHG_CH29_Included: u32 = 1;
pub const PPI_CHG_CH28_Pos: u32 = 28;
pub const PPI_CHG_CH28_Msk: u32 = 268435456;
pub const PPI_CHG_CH28_Excluded: u32 = 0;
pub const PPI_CHG_CH28_Included: u32 = 1;
pub const PPI_CHG_CH27_Pos: u32 = 27;
pub const PPI_CHG_CH27_Msk: u32 = 134217728;
pub const PPI_CHG_CH27_Excluded: u32 = 0;
pub const PPI_CHG_CH27_Included: u32 = 1;
pub const PPI_CHG_CH26_Pos: u32 = 26;
pub const PPI_CHG_CH26_Msk: u32 = 67108864;
pub const PPI_CHG_CH26_Excluded: u32 = 0;
pub const PPI_CHG_CH26_Included: u32 = 1;
pub const PPI_CHG_CH25_Pos: u32 = 25;
pub const PPI_CHG_CH25_Msk: u32 = 33554432;
pub const PPI_CHG_CH25_Excluded: u32 = 0;
pub const PPI_CHG_CH25_Included: u32 = 1;
pub const PPI_CHG_CH24_Pos: u32 = 24;
pub const PPI_CHG_CH24_Msk: u32 = 16777216;
pub const PPI_CHG_CH24_Excluded: u32 = 0;
pub const PPI_CHG_CH24_Included: u32 = 1;
pub const PPI_CHG_CH23_Pos: u32 = 23;
pub const PPI_CHG_CH23_Msk: u32 = 8388608;
pub const PPI_CHG_CH23_Excluded: u32 = 0;
pub const PPI_CHG_CH23_Included: u32 = 1;
pub const PPI_CHG_CH22_Pos: u32 = 22;
pub const PPI_CHG_CH22_Msk: u32 = 4194304;
pub const PPI_CHG_CH22_Excluded: u32 = 0;
pub const PPI_CHG_CH22_Included: u32 = 1;
pub const PPI_CHG_CH21_Pos: u32 = 21;
pub const PPI_CHG_CH21_Msk: u32 = 2097152;
pub const PPI_CHG_CH21_Excluded: u32 = 0;
pub const PPI_CHG_CH21_Included: u32 = 1;
pub const PPI_CHG_CH20_Pos: u32 = 20;
pub const PPI_CHG_CH20_Msk: u32 = 1048576;
pub const PPI_CHG_CH20_Excluded: u32 = 0;
pub const PPI_CHG_CH20_Included: u32 = 1;
pub const PPI_CHG_CH19_Pos: u32 = 19;
pub const PPI_CHG_CH19_Msk: u32 = 524288;
pub const PPI_CHG_CH19_Excluded: u32 = 0;
pub const PPI_CHG_CH19_Included: u32 = 1;
pub const PPI_CHG_CH18_Pos: u32 = 18;
pub const PPI_CHG_CH18_Msk: u32 = 262144;
pub const PPI_CHG_CH18_Excluded: u32 = 0;
pub const PPI_CHG_CH18_Included: u32 = 1;
pub const PPI_CHG_CH17_Pos: u32 = 17;
pub const PPI_CHG_CH17_Msk: u32 = 131072;
pub const PPI_CHG_CH17_Excluded: u32 = 0;
pub const PPI_CHG_CH17_Included: u32 = 1;
pub const PPI_CHG_CH16_Pos: u32 = 16;
pub const PPI_CHG_CH16_Msk: u32 = 65536;
pub const PPI_CHG_CH16_Excluded: u32 = 0;
pub const PPI_CHG_CH16_Included: u32 = 1;
pub const PPI_CHG_CH15_Pos: u32 = 15;
pub const PPI_CHG_CH15_Msk: u32 = 32768;
pub const PPI_CHG_CH15_Excluded: u32 = 0;
pub const PPI_CHG_CH15_Included: u32 = 1;
pub const PPI_CHG_CH14_Pos: u32 = 14;
pub const PPI_CHG_CH14_Msk: u32 = 16384;
pub const PPI_CHG_CH14_Excluded: u32 = 0;
pub const PPI_CHG_CH14_Included: u32 = 1;
pub const PPI_CHG_CH13_Pos: u32 = 13;
pub const PPI_CHG_CH13_Msk: u32 = 8192;
pub const PPI_CHG_CH13_Excluded: u32 = 0;
pub const PPI_CHG_CH13_Included: u32 = 1;
pub const PPI_CHG_CH12_Pos: u32 = 12;
pub const PPI_CHG_CH12_Msk: u32 = 4096;
pub const PPI_CHG_CH12_Excluded: u32 = 0;
pub const PPI_CHG_CH12_Included: u32 = 1;
pub const PPI_CHG_CH11_Pos: u32 = 11;
pub const PPI_CHG_CH11_Msk: u32 = 2048;
pub const PPI_CHG_CH11_Excluded: u32 = 0;
pub const PPI_CHG_CH11_Included: u32 = 1;
pub const PPI_CHG_CH10_Pos: u32 = 10;
pub const PPI_CHG_CH10_Msk: u32 = 1024;
pub const PPI_CHG_CH10_Excluded: u32 = 0;
pub const PPI_CHG_CH10_Included: u32 = 1;
pub const PPI_CHG_CH9_Pos: u32 = 9;
pub const PPI_CHG_CH9_Msk: u32 = 512;
pub const PPI_CHG_CH9_Excluded: u32 = 0;
pub const PPI_CHG_CH9_Included: u32 = 1;
pub const PPI_CHG_CH8_Pos: u32 = 8;
pub const PPI_CHG_CH8_Msk: u32 = 256;
pub const PPI_CHG_CH8_Excluded: u32 = 0;
pub const PPI_CHG_CH8_Included: u32 = 1;
pub const PPI_CHG_CH7_Pos: u32 = 7;
pub const PPI_CHG_CH7_Msk: u32 = 128;
pub const PPI_CHG_CH7_Excluded: u32 = 0;
pub const PPI_CHG_CH7_Included: u32 = 1;
pub const PPI_CHG_CH6_Pos: u32 = 6;
pub const PPI_CHG_CH6_Msk: u32 = 64;
pub const PPI_CHG_CH6_Excluded: u32 = 0;
pub const PPI_CHG_CH6_Included: u32 = 1;
pub const PPI_CHG_CH5_Pos: u32 = 5;
pub const PPI_CHG_CH5_Msk: u32 = 32;
pub const PPI_CHG_CH5_Excluded: u32 = 0;
pub const PPI_CHG_CH5_Included: u32 = 1;
pub const PPI_CHG_CH4_Pos: u32 = 4;
pub const PPI_CHG_CH4_Msk: u32 = 16;
pub const PPI_CHG_CH4_Excluded: u32 = 0;
pub const PPI_CHG_CH4_Included: u32 = 1;
pub const PPI_CHG_CH3_Pos: u32 = 3;
pub const PPI_CHG_CH3_Msk: u32 = 8;
pub const PPI_CHG_CH3_Excluded: u32 = 0;
pub const PPI_CHG_CH3_Included: u32 = 1;
pub const PPI_CHG_CH2_Pos: u32 = 2;
pub const PPI_CHG_CH2_Msk: u32 = 4;
pub const PPI_CHG_CH2_Excluded: u32 = 0;
pub const PPI_CHG_CH2_Included: u32 = 1;
pub const PPI_CHG_CH1_Pos: u32 = 1;
pub const PPI_CHG_CH1_Msk: u32 = 2;
pub const PPI_CHG_CH1_Excluded: u32 = 0;
pub const PPI_CHG_CH1_Included: u32 = 1;
pub const PPI_CHG_CH0_Pos: u32 = 0;
pub const PPI_CHG_CH0_Msk: u32 = 1;
pub const PPI_CHG_CH0_Excluded: u32 = 0;
pub const PPI_CHG_CH0_Included: u32 = 1;
pub const PPI_FORK_TEP_TEP_Pos: u32 = 0;
pub const PPI_FORK_TEP_TEP_Msk: u32 = 4294967295;
pub const PWM_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const PWM_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const PWM_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const PWM_TASKS_SEQSTART_TASKS_SEQSTART_Pos: u32 = 0;
pub const PWM_TASKS_SEQSTART_TASKS_SEQSTART_Msk: u32 = 1;
pub const PWM_TASKS_SEQSTART_TASKS_SEQSTART_Trigger: u32 = 1;
pub const PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Pos: u32 = 0;
pub const PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Msk: u32 = 1;
pub const PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Trigger: u32 = 1;
pub const PWM_EVENTS_STOPPED_EVENTS_STOPPED_Pos: u32 = 0;
pub const PWM_EVENTS_STOPPED_EVENTS_STOPPED_Msk: u32 = 1;
pub const PWM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated: u32 = 0;
pub const PWM_EVENTS_STOPPED_EVENTS_STOPPED_Generated: u32 = 1;
pub const PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Pos: u32 = 0;
pub const PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Msk: u32 = 1;
pub const PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_NotGenerated: u32 = 0;
pub const PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Generated: u32 = 1;
pub const PWM_EVENTS_SEQEND_EVENTS_SEQEND_Pos: u32 = 0;
pub const PWM_EVENTS_SEQEND_EVENTS_SEQEND_Msk: u32 = 1;
pub const PWM_EVENTS_SEQEND_EVENTS_SEQEND_NotGenerated: u32 = 0;
pub const PWM_EVENTS_SEQEND_EVENTS_SEQEND_Generated: u32 = 1;
pub const PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos: u32 = 0;
pub const PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Msk: u32 = 1;
pub const PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_NotGenerated: u32 = 0;
pub const PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Generated: u32 = 1;
pub const PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Pos: u32 = 0;
pub const PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Msk: u32 = 1;
pub const PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_NotGenerated: u32 = 0;
pub const PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Generated: u32 = 1;
pub const PWM_SHORTS_LOOPSDONE_STOP_Pos: u32 = 4;
pub const PWM_SHORTS_LOOPSDONE_STOP_Msk: u32 = 16;
pub const PWM_SHORTS_LOOPSDONE_STOP_Disabled: u32 = 0;
pub const PWM_SHORTS_LOOPSDONE_STOP_Enabled: u32 = 1;
pub const PWM_SHORTS_LOOPSDONE_SEQSTART1_Pos: u32 = 3;
pub const PWM_SHORTS_LOOPSDONE_SEQSTART1_Msk: u32 = 8;
pub const PWM_SHORTS_LOOPSDONE_SEQSTART1_Disabled: u32 = 0;
pub const PWM_SHORTS_LOOPSDONE_SEQSTART1_Enabled: u32 = 1;
pub const PWM_SHORTS_LOOPSDONE_SEQSTART0_Pos: u32 = 2;
pub const PWM_SHORTS_LOOPSDONE_SEQSTART0_Msk: u32 = 4;
pub const PWM_SHORTS_LOOPSDONE_SEQSTART0_Disabled: u32 = 0;
pub const PWM_SHORTS_LOOPSDONE_SEQSTART0_Enabled: u32 = 1;
pub const PWM_SHORTS_SEQEND1_STOP_Pos: u32 = 1;
pub const PWM_SHORTS_SEQEND1_STOP_Msk: u32 = 2;
pub const PWM_SHORTS_SEQEND1_STOP_Disabled: u32 = 0;
pub const PWM_SHORTS_SEQEND1_STOP_Enabled: u32 = 1;
pub const PWM_SHORTS_SEQEND0_STOP_Pos: u32 = 0;
pub const PWM_SHORTS_SEQEND0_STOP_Msk: u32 = 1;
pub const PWM_SHORTS_SEQEND0_STOP_Disabled: u32 = 0;
pub const PWM_SHORTS_SEQEND0_STOP_Enabled: u32 = 1;
pub const PWM_INTEN_LOOPSDONE_Pos: u32 = 7;
pub const PWM_INTEN_LOOPSDONE_Msk: u32 = 128;
pub const PWM_INTEN_LOOPSDONE_Disabled: u32 = 0;
pub const PWM_INTEN_LOOPSDONE_Enabled: u32 = 1;
pub const PWM_INTEN_PWMPERIODEND_Pos: u32 = 6;
pub const PWM_INTEN_PWMPERIODEND_Msk: u32 = 64;
pub const PWM_INTEN_PWMPERIODEND_Disabled: u32 = 0;
pub const PWM_INTEN_PWMPERIODEND_Enabled: u32 = 1;
pub const PWM_INTEN_SEQEND1_Pos: u32 = 5;
pub const PWM_INTEN_SEQEND1_Msk: u32 = 32;
pub const PWM_INTEN_SEQEND1_Disabled: u32 = 0;
pub const PWM_INTEN_SEQEND1_Enabled: u32 = 1;
pub const PWM_INTEN_SEQEND0_Pos: u32 = 4;
pub const PWM_INTEN_SEQEND0_Msk: u32 = 16;
pub const PWM_INTEN_SEQEND0_Disabled: u32 = 0;
pub const PWM_INTEN_SEQEND0_Enabled: u32 = 1;
pub const PWM_INTEN_SEQSTARTED1_Pos: u32 = 3;
pub const PWM_INTEN_SEQSTARTED1_Msk: u32 = 8;
pub const PWM_INTEN_SEQSTARTED1_Disabled: u32 = 0;
pub const PWM_INTEN_SEQSTARTED1_Enabled: u32 = 1;
pub const PWM_INTEN_SEQSTARTED0_Pos: u32 = 2;
pub const PWM_INTEN_SEQSTARTED0_Msk: u32 = 4;
pub const PWM_INTEN_SEQSTARTED0_Disabled: u32 = 0;
pub const PWM_INTEN_SEQSTARTED0_Enabled: u32 = 1;
pub const PWM_INTEN_STOPPED_Pos: u32 = 1;
pub const PWM_INTEN_STOPPED_Msk: u32 = 2;
pub const PWM_INTEN_STOPPED_Disabled: u32 = 0;
pub const PWM_INTEN_STOPPED_Enabled: u32 = 1;
pub const PWM_INTENSET_LOOPSDONE_Pos: u32 = 7;
pub const PWM_INTENSET_LOOPSDONE_Msk: u32 = 128;
pub const PWM_INTENSET_LOOPSDONE_Disabled: u32 = 0;
pub const PWM_INTENSET_LOOPSDONE_Enabled: u32 = 1;
pub const PWM_INTENSET_LOOPSDONE_Set: u32 = 1;
pub const PWM_INTENSET_PWMPERIODEND_Pos: u32 = 6;
pub const PWM_INTENSET_PWMPERIODEND_Msk: u32 = 64;
pub const PWM_INTENSET_PWMPERIODEND_Disabled: u32 = 0;
pub const PWM_INTENSET_PWMPERIODEND_Enabled: u32 = 1;
pub const PWM_INTENSET_PWMPERIODEND_Set: u32 = 1;
pub const PWM_INTENSET_SEQEND1_Pos: u32 = 5;
pub const PWM_INTENSET_SEQEND1_Msk: u32 = 32;
pub const PWM_INTENSET_SEQEND1_Disabled: u32 = 0;
pub const PWM_INTENSET_SEQEND1_Enabled: u32 = 1;
pub const PWM_INTENSET_SEQEND1_Set: u32 = 1;
pub const PWM_INTENSET_SEQEND0_Pos: u32 = 4;
pub const PWM_INTENSET_SEQEND0_Msk: u32 = 16;
pub const PWM_INTENSET_SEQEND0_Disabled: u32 = 0;
pub const PWM_INTENSET_SEQEND0_Enabled: u32 = 1;
pub const PWM_INTENSET_SEQEND0_Set: u32 = 1;
pub const PWM_INTENSET_SEQSTARTED1_Pos: u32 = 3;
pub const PWM_INTENSET_SEQSTARTED1_Msk: u32 = 8;
pub const PWM_INTENSET_SEQSTARTED1_Disabled: u32 = 0;
pub const PWM_INTENSET_SEQSTARTED1_Enabled: u32 = 1;
pub const PWM_INTENSET_SEQSTARTED1_Set: u32 = 1;
pub const PWM_INTENSET_SEQSTARTED0_Pos: u32 = 2;
pub const PWM_INTENSET_SEQSTARTED0_Msk: u32 = 4;
pub const PWM_INTENSET_SEQSTARTED0_Disabled: u32 = 0;
pub const PWM_INTENSET_SEQSTARTED0_Enabled: u32 = 1;
pub const PWM_INTENSET_SEQSTARTED0_Set: u32 = 1;
pub const PWM_INTENSET_STOPPED_Pos: u32 = 1;
pub const PWM_INTENSET_STOPPED_Msk: u32 = 2;
pub const PWM_INTENSET_STOPPED_Disabled: u32 = 0;
pub const PWM_INTENSET_STOPPED_Enabled: u32 = 1;
pub const PWM_INTENSET_STOPPED_Set: u32 = 1;
pub const PWM_INTENCLR_LOOPSDONE_Pos: u32 = 7;
pub const PWM_INTENCLR_LOOPSDONE_Msk: u32 = 128;
pub const PWM_INTENCLR_LOOPSDONE_Disabled: u32 = 0;
pub const PWM_INTENCLR_LOOPSDONE_Enabled: u32 = 1;
pub const PWM_INTENCLR_LOOPSDONE_Clear: u32 = 1;
pub const PWM_INTENCLR_PWMPERIODEND_Pos: u32 = 6;
pub const PWM_INTENCLR_PWMPERIODEND_Msk: u32 = 64;
pub const PWM_INTENCLR_PWMPERIODEND_Disabled: u32 = 0;
pub const PWM_INTENCLR_PWMPERIODEND_Enabled: u32 = 1;
pub const PWM_INTENCLR_PWMPERIODEND_Clear: u32 = 1;
pub const PWM_INTENCLR_SEQEND1_Pos: u32 = 5;
pub const PWM_INTENCLR_SEQEND1_Msk: u32 = 32;
pub const PWM_INTENCLR_SEQEND1_Disabled: u32 = 0;
pub const PWM_INTENCLR_SEQEND1_Enabled: u32 = 1;
pub const PWM_INTENCLR_SEQEND1_Clear: u32 = 1;
pub const PWM_INTENCLR_SEQEND0_Pos: u32 = 4;
pub const PWM_INTENCLR_SEQEND0_Msk: u32 = 16;
pub const PWM_INTENCLR_SEQEND0_Disabled: u32 = 0;
pub const PWM_INTENCLR_SEQEND0_Enabled: u32 = 1;
pub const PWM_INTENCLR_SEQEND0_Clear: u32 = 1;
pub const PWM_INTENCLR_SEQSTARTED1_Pos: u32 = 3;
pub const PWM_INTENCLR_SEQSTARTED1_Msk: u32 = 8;
pub const PWM_INTENCLR_SEQSTARTED1_Disabled: u32 = 0;
pub const PWM_INTENCLR_SEQSTARTED1_Enabled: u32 = 1;
pub const PWM_INTENCLR_SEQSTARTED1_Clear: u32 = 1;
pub const PWM_INTENCLR_SEQSTARTED0_Pos: u32 = 2;
pub const PWM_INTENCLR_SEQSTARTED0_Msk: u32 = 4;
pub const PWM_INTENCLR_SEQSTARTED0_Disabled: u32 = 0;
pub const PWM_INTENCLR_SEQSTARTED0_Enabled: u32 = 1;
pub const PWM_INTENCLR_SEQSTARTED0_Clear: u32 = 1;
pub const PWM_INTENCLR_STOPPED_Pos: u32 = 1;
pub const PWM_INTENCLR_STOPPED_Msk: u32 = 2;
pub const PWM_INTENCLR_STOPPED_Disabled: u32 = 0;
pub const PWM_INTENCLR_STOPPED_Enabled: u32 = 1;
pub const PWM_INTENCLR_STOPPED_Clear: u32 = 1;
pub const PWM_ENABLE_ENABLE_Pos: u32 = 0;
pub const PWM_ENABLE_ENABLE_Msk: u32 = 1;
pub const PWM_ENABLE_ENABLE_Disabled: u32 = 0;
pub const PWM_ENABLE_ENABLE_Enabled: u32 = 1;
pub const PWM_MODE_UPDOWN_Pos: u32 = 0;
pub const PWM_MODE_UPDOWN_Msk: u32 = 1;
pub const PWM_MODE_UPDOWN_Up: u32 = 0;
pub const PWM_MODE_UPDOWN_UpAndDown: u32 = 1;
pub const PWM_COUNTERTOP_COUNTERTOP_Pos: u32 = 0;
pub const PWM_COUNTERTOP_COUNTERTOP_Msk: u32 = 32767;
pub const PWM_PRESCALER_PRESCALER_Pos: u32 = 0;
pub const PWM_PRESCALER_PRESCALER_Msk: u32 = 7;
pub const PWM_PRESCALER_PRESCALER_DIV_1: u32 = 0;
pub const PWM_PRESCALER_PRESCALER_DIV_2: u32 = 1;
pub const PWM_PRESCALER_PRESCALER_DIV_4: u32 = 2;
pub const PWM_PRESCALER_PRESCALER_DIV_8: u32 = 3;
pub const PWM_PRESCALER_PRESCALER_DIV_16: u32 = 4;
pub const PWM_PRESCALER_PRESCALER_DIV_32: u32 = 5;
pub const PWM_PRESCALER_PRESCALER_DIV_64: u32 = 6;
pub const PWM_PRESCALER_PRESCALER_DIV_128: u32 = 7;
pub const PWM_DECODER_MODE_Pos: u32 = 8;
pub const PWM_DECODER_MODE_Msk: u32 = 256;
pub const PWM_DECODER_MODE_RefreshCount: u32 = 0;
pub const PWM_DECODER_MODE_NextStep: u32 = 1;
pub const PWM_DECODER_LOAD_Pos: u32 = 0;
pub const PWM_DECODER_LOAD_Msk: u32 = 3;
pub const PWM_DECODER_LOAD_Common: u32 = 0;
pub const PWM_DECODER_LOAD_Grouped: u32 = 1;
pub const PWM_DECODER_LOAD_Individual: u32 = 2;
pub const PWM_DECODER_LOAD_WaveForm: u32 = 3;
pub const PWM_LOOP_CNT_Pos: u32 = 0;
pub const PWM_LOOP_CNT_Msk: u32 = 65535;
pub const PWM_LOOP_CNT_Disabled: u32 = 0;
pub const PWM_SEQ_PTR_PTR_Pos: u32 = 0;
pub const PWM_SEQ_PTR_PTR_Msk: u32 = 4294967295;
pub const PWM_SEQ_CNT_CNT_Pos: u32 = 0;
pub const PWM_SEQ_CNT_CNT_Msk: u32 = 32767;
pub const PWM_SEQ_CNT_CNT_Disabled: u32 = 0;
pub const PWM_SEQ_REFRESH_CNT_Pos: u32 = 0;
pub const PWM_SEQ_REFRESH_CNT_Msk: u32 = 16777215;
pub const PWM_SEQ_REFRESH_CNT_Continuous: u32 = 0;
pub const PWM_SEQ_ENDDELAY_CNT_Pos: u32 = 0;
pub const PWM_SEQ_ENDDELAY_CNT_Msk: u32 = 16777215;
pub const PWM_PSEL_OUT_CONNECT_Pos: u32 = 31;
pub const PWM_PSEL_OUT_CONNECT_Msk: u32 = 2147483648;
pub const PWM_PSEL_OUT_CONNECT_Connected: u32 = 0;
pub const PWM_PSEL_OUT_CONNECT_Disconnected: u32 = 1;
pub const PWM_PSEL_OUT_PORT_Pos: u32 = 5;
pub const PWM_PSEL_OUT_PORT_Msk: u32 = 32;
pub const PWM_PSEL_OUT_PIN_Pos: u32 = 0;
pub const PWM_PSEL_OUT_PIN_Msk: u32 = 31;
pub const QDEC_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const QDEC_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const QDEC_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const QDEC_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const QDEC_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const QDEC_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Pos: u32 = 0;
pub const QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Msk: u32 = 1;
pub const QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Trigger: u32 = 1;
pub const QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Pos: u32 = 0;
pub const QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Msk: u32 = 1;
pub const QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Trigger: u32 = 1;
pub const QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Pos: u32 = 0;
pub const QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Msk: u32 = 1;
pub const QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Trigger: u32 = 1;
pub const QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Pos: u32 = 0;
pub const QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Msk: u32 = 1;
pub const QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_NotGenerated: u32 = 0;
pub const QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Generated: u32 = 1;
pub const QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Pos: u32 = 0;
pub const QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Msk: u32 = 1;
pub const QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_NotGenerated: u32 = 0;
pub const QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Generated: u32 = 1;
pub const QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Pos: u32 = 0;
pub const QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Msk: u32 = 1;
pub const QDEC_EVENTS_ACCOF_EVENTS_ACCOF_NotGenerated: u32 = 0;
pub const QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Generated: u32 = 1;
pub const QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Pos: u32 = 0;
pub const QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Msk: u32 = 1;
pub const QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_NotGenerated: u32 = 0;
pub const QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Generated: u32 = 1;
pub const QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Pos: u32 = 0;
pub const QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Msk: u32 = 1;
pub const QDEC_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated: u32 = 0;
pub const QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Generated: u32 = 1;
pub const QDEC_SHORTS_SAMPLERDY_READCLRACC_Pos: u32 = 6;
pub const QDEC_SHORTS_SAMPLERDY_READCLRACC_Msk: u32 = 64;
pub const QDEC_SHORTS_SAMPLERDY_READCLRACC_Disabled: u32 = 0;
pub const QDEC_SHORTS_SAMPLERDY_READCLRACC_Enabled: u32 = 1;
pub const QDEC_SHORTS_DBLRDY_STOP_Pos: u32 = 5;
pub const QDEC_SHORTS_DBLRDY_STOP_Msk: u32 = 32;
pub const QDEC_SHORTS_DBLRDY_STOP_Disabled: u32 = 0;
pub const QDEC_SHORTS_DBLRDY_STOP_Enabled: u32 = 1;
pub const QDEC_SHORTS_DBLRDY_RDCLRDBL_Pos: u32 = 4;
pub const QDEC_SHORTS_DBLRDY_RDCLRDBL_Msk: u32 = 16;
pub const QDEC_SHORTS_DBLRDY_RDCLRDBL_Disabled: u32 = 0;
pub const QDEC_SHORTS_DBLRDY_RDCLRDBL_Enabled: u32 = 1;
pub const QDEC_SHORTS_REPORTRDY_STOP_Pos: u32 = 3;
pub const QDEC_SHORTS_REPORTRDY_STOP_Msk: u32 = 8;
pub const QDEC_SHORTS_REPORTRDY_STOP_Disabled: u32 = 0;
pub const QDEC_SHORTS_REPORTRDY_STOP_Enabled: u32 = 1;
pub const QDEC_SHORTS_REPORTRDY_RDCLRACC_Pos: u32 = 2;
pub const QDEC_SHORTS_REPORTRDY_RDCLRACC_Msk: u32 = 4;
pub const QDEC_SHORTS_REPORTRDY_RDCLRACC_Disabled: u32 = 0;
pub const QDEC_SHORTS_REPORTRDY_RDCLRACC_Enabled: u32 = 1;
pub const QDEC_SHORTS_SAMPLERDY_STOP_Pos: u32 = 1;
pub const QDEC_SHORTS_SAMPLERDY_STOP_Msk: u32 = 2;
pub const QDEC_SHORTS_SAMPLERDY_STOP_Disabled: u32 = 0;
pub const QDEC_SHORTS_SAMPLERDY_STOP_Enabled: u32 = 1;
pub const QDEC_SHORTS_REPORTRDY_READCLRACC_Pos: u32 = 0;
pub const QDEC_SHORTS_REPORTRDY_READCLRACC_Msk: u32 = 1;
pub const QDEC_SHORTS_REPORTRDY_READCLRACC_Disabled: u32 = 0;
pub const QDEC_SHORTS_REPORTRDY_READCLRACC_Enabled: u32 = 1;
pub const QDEC_INTENSET_STOPPED_Pos: u32 = 4;
pub const QDEC_INTENSET_STOPPED_Msk: u32 = 16;
pub const QDEC_INTENSET_STOPPED_Disabled: u32 = 0;
pub const QDEC_INTENSET_STOPPED_Enabled: u32 = 1;
pub const QDEC_INTENSET_STOPPED_Set: u32 = 1;
pub const QDEC_INTENSET_DBLRDY_Pos: u32 = 3;
pub const QDEC_INTENSET_DBLRDY_Msk: u32 = 8;
pub const QDEC_INTENSET_DBLRDY_Disabled: u32 = 0;
pub const QDEC_INTENSET_DBLRDY_Enabled: u32 = 1;
pub const QDEC_INTENSET_DBLRDY_Set: u32 = 1;
pub const QDEC_INTENSET_ACCOF_Pos: u32 = 2;
pub const QDEC_INTENSET_ACCOF_Msk: u32 = 4;
pub const QDEC_INTENSET_ACCOF_Disabled: u32 = 0;
pub const QDEC_INTENSET_ACCOF_Enabled: u32 = 1;
pub const QDEC_INTENSET_ACCOF_Set: u32 = 1;
pub const QDEC_INTENSET_REPORTRDY_Pos: u32 = 1;
pub const QDEC_INTENSET_REPORTRDY_Msk: u32 = 2;
pub const QDEC_INTENSET_REPORTRDY_Disabled: u32 = 0;
pub const QDEC_INTENSET_REPORTRDY_Enabled: u32 = 1;
pub const QDEC_INTENSET_REPORTRDY_Set: u32 = 1;
pub const QDEC_INTENSET_SAMPLERDY_Pos: u32 = 0;
pub const QDEC_INTENSET_SAMPLERDY_Msk: u32 = 1;
pub const QDEC_INTENSET_SAMPLERDY_Disabled: u32 = 0;
pub const QDEC_INTENSET_SAMPLERDY_Enabled: u32 = 1;
pub const QDEC_INTENSET_SAMPLERDY_Set: u32 = 1;
pub const QDEC_INTENCLR_STOPPED_Pos: u32 = 4;
pub const QDEC_INTENCLR_STOPPED_Msk: u32 = 16;
pub const QDEC_INTENCLR_STOPPED_Disabled: u32 = 0;
pub const QDEC_INTENCLR_STOPPED_Enabled: u32 = 1;
pub const QDEC_INTENCLR_STOPPED_Clear: u32 = 1;
pub const QDEC_INTENCLR_DBLRDY_Pos: u32 = 3;
pub const QDEC_INTENCLR_DBLRDY_Msk: u32 = 8;
pub const QDEC_INTENCLR_DBLRDY_Disabled: u32 = 0;
pub const QDEC_INTENCLR_DBLRDY_Enabled: u32 = 1;
pub const QDEC_INTENCLR_DBLRDY_Clear: u32 = 1;
pub const QDEC_INTENCLR_ACCOF_Pos: u32 = 2;
pub const QDEC_INTENCLR_ACCOF_Msk: u32 = 4;
pub const QDEC_INTENCLR_ACCOF_Disabled: u32 = 0;
pub const QDEC_INTENCLR_ACCOF_Enabled: u32 = 1;
pub const QDEC_INTENCLR_ACCOF_Clear: u32 = 1;
pub const QDEC_INTENCLR_REPORTRDY_Pos: u32 = 1;
pub const QDEC_INTENCLR_REPORTRDY_Msk: u32 = 2;
pub const QDEC_INTENCLR_REPORTRDY_Disabled: u32 = 0;
pub const QDEC_INTENCLR_REPORTRDY_Enabled: u32 = 1;
pub const QDEC_INTENCLR_REPORTRDY_Clear: u32 = 1;
pub const QDEC_INTENCLR_SAMPLERDY_Pos: u32 = 0;
pub const QDEC_INTENCLR_SAMPLERDY_Msk: u32 = 1;
pub const QDEC_INTENCLR_SAMPLERDY_Disabled: u32 = 0;
pub const QDEC_INTENCLR_SAMPLERDY_Enabled: u32 = 1;
pub const QDEC_INTENCLR_SAMPLERDY_Clear: u32 = 1;
pub const QDEC_ENABLE_ENABLE_Pos: u32 = 0;
pub const QDEC_ENABLE_ENABLE_Msk: u32 = 1;
pub const QDEC_ENABLE_ENABLE_Disabled: u32 = 0;
pub const QDEC_ENABLE_ENABLE_Enabled: u32 = 1;
pub const QDEC_LEDPOL_LEDPOL_Pos: u32 = 0;
pub const QDEC_LEDPOL_LEDPOL_Msk: u32 = 1;
pub const QDEC_LEDPOL_LEDPOL_ActiveLow: u32 = 0;
pub const QDEC_LEDPOL_LEDPOL_ActiveHigh: u32 = 1;
pub const QDEC_SAMPLEPER_SAMPLEPER_Pos: u32 = 0;
pub const QDEC_SAMPLEPER_SAMPLEPER_Msk: u32 = 15;
pub const QDEC_SAMPLEPER_SAMPLEPER_128us: u32 = 0;
pub const QDEC_SAMPLEPER_SAMPLEPER_256us: u32 = 1;
pub const QDEC_SAMPLEPER_SAMPLEPER_512us: u32 = 2;
pub const QDEC_SAMPLEPER_SAMPLEPER_1024us: u32 = 3;
pub const QDEC_SAMPLEPER_SAMPLEPER_2048us: u32 = 4;
pub const QDEC_SAMPLEPER_SAMPLEPER_4096us: u32 = 5;
pub const QDEC_SAMPLEPER_SAMPLEPER_8192us: u32 = 6;
pub const QDEC_SAMPLEPER_SAMPLEPER_16384us: u32 = 7;
pub const QDEC_SAMPLEPER_SAMPLEPER_32ms: u32 = 8;
pub const QDEC_SAMPLEPER_SAMPLEPER_65ms: u32 = 9;
pub const QDEC_SAMPLEPER_SAMPLEPER_131ms: u32 = 10;
pub const QDEC_SAMPLE_SAMPLE_Pos: u32 = 0;
pub const QDEC_SAMPLE_SAMPLE_Msk: u32 = 4294967295;
pub const QDEC_REPORTPER_REPORTPER_Pos: u32 = 0;
pub const QDEC_REPORTPER_REPORTPER_Msk: u32 = 15;
pub const QDEC_REPORTPER_REPORTPER_10Smpl: u32 = 0;
pub const QDEC_REPORTPER_REPORTPER_40Smpl: u32 = 1;
pub const QDEC_REPORTPER_REPORTPER_80Smpl: u32 = 2;
pub const QDEC_REPORTPER_REPORTPER_120Smpl: u32 = 3;
pub const QDEC_REPORTPER_REPORTPER_160Smpl: u32 = 4;
pub const QDEC_REPORTPER_REPORTPER_200Smpl: u32 = 5;
pub const QDEC_REPORTPER_REPORTPER_240Smpl: u32 = 6;
pub const QDEC_REPORTPER_REPORTPER_280Smpl: u32 = 7;
pub const QDEC_REPORTPER_REPORTPER_1Smpl: u32 = 8;
pub const QDEC_ACC_ACC_Pos: u32 = 0;
pub const QDEC_ACC_ACC_Msk: u32 = 4294967295;
pub const QDEC_ACCREAD_ACCREAD_Pos: u32 = 0;
pub const QDEC_ACCREAD_ACCREAD_Msk: u32 = 4294967295;
pub const QDEC_PSEL_LED_CONNECT_Pos: u32 = 31;
pub const QDEC_PSEL_LED_CONNECT_Msk: u32 = 2147483648;
pub const QDEC_PSEL_LED_CONNECT_Connected: u32 = 0;
pub const QDEC_PSEL_LED_CONNECT_Disconnected: u32 = 1;
pub const QDEC_PSEL_LED_PORT_Pos: u32 = 5;
pub const QDEC_PSEL_LED_PORT_Msk: u32 = 32;
pub const QDEC_PSEL_LED_PIN_Pos: u32 = 0;
pub const QDEC_PSEL_LED_PIN_Msk: u32 = 31;
pub const QDEC_PSEL_A_CONNECT_Pos: u32 = 31;
pub const QDEC_PSEL_A_CONNECT_Msk: u32 = 2147483648;
pub const QDEC_PSEL_A_CONNECT_Connected: u32 = 0;
pub const QDEC_PSEL_A_CONNECT_Disconnected: u32 = 1;
pub const QDEC_PSEL_A_PORT_Pos: u32 = 5;
pub const QDEC_PSEL_A_PORT_Msk: u32 = 32;
pub const QDEC_PSEL_A_PIN_Pos: u32 = 0;
pub const QDEC_PSEL_A_PIN_Msk: u32 = 31;
pub const QDEC_PSEL_B_CONNECT_Pos: u32 = 31;
pub const QDEC_PSEL_B_CONNECT_Msk: u32 = 2147483648;
pub const QDEC_PSEL_B_CONNECT_Connected: u32 = 0;
pub const QDEC_PSEL_B_CONNECT_Disconnected: u32 = 1;
pub const QDEC_PSEL_B_PORT_Pos: u32 = 5;
pub const QDEC_PSEL_B_PORT_Msk: u32 = 32;
pub const QDEC_PSEL_B_PIN_Pos: u32 = 0;
pub const QDEC_PSEL_B_PIN_Msk: u32 = 31;
pub const QDEC_DBFEN_DBFEN_Pos: u32 = 0;
pub const QDEC_DBFEN_DBFEN_Msk: u32 = 1;
pub const QDEC_DBFEN_DBFEN_Disabled: u32 = 0;
pub const QDEC_DBFEN_DBFEN_Enabled: u32 = 1;
pub const QDEC_LEDPRE_LEDPRE_Pos: u32 = 0;
pub const QDEC_LEDPRE_LEDPRE_Msk: u32 = 511;
pub const QDEC_ACCDBL_ACCDBL_Pos: u32 = 0;
pub const QDEC_ACCDBL_ACCDBL_Msk: u32 = 15;
pub const QDEC_ACCDBLREAD_ACCDBLREAD_Pos: u32 = 0;
pub const QDEC_ACCDBLREAD_ACCDBLREAD_Msk: u32 = 15;
pub const QSPI_TASKS_ACTIVATE_TASKS_ACTIVATE_Pos: u32 = 0;
pub const QSPI_TASKS_ACTIVATE_TASKS_ACTIVATE_Msk: u32 = 1;
pub const QSPI_TASKS_ACTIVATE_TASKS_ACTIVATE_Trigger: u32 = 1;
pub const QSPI_TASKS_READSTART_TASKS_READSTART_Pos: u32 = 0;
pub const QSPI_TASKS_READSTART_TASKS_READSTART_Msk: u32 = 1;
pub const QSPI_TASKS_READSTART_TASKS_READSTART_Trigger: u32 = 1;
pub const QSPI_TASKS_WRITESTART_TASKS_WRITESTART_Pos: u32 = 0;
pub const QSPI_TASKS_WRITESTART_TASKS_WRITESTART_Msk: u32 = 1;
pub const QSPI_TASKS_WRITESTART_TASKS_WRITESTART_Trigger: u32 = 1;
pub const QSPI_TASKS_ERASESTART_TASKS_ERASESTART_Pos: u32 = 0;
pub const QSPI_TASKS_ERASESTART_TASKS_ERASESTART_Msk: u32 = 1;
pub const QSPI_TASKS_ERASESTART_TASKS_ERASESTART_Trigger: u32 = 1;
pub const QSPI_TASKS_DEACTIVATE_TASKS_DEACTIVATE_Pos: u32 = 0;
pub const QSPI_TASKS_DEACTIVATE_TASKS_DEACTIVATE_Msk: u32 = 1;
pub const QSPI_TASKS_DEACTIVATE_TASKS_DEACTIVATE_Trigger: u32 = 1;
pub const QSPI_EVENTS_READY_EVENTS_READY_Pos: u32 = 0;
pub const QSPI_EVENTS_READY_EVENTS_READY_Msk: u32 = 1;
pub const QSPI_EVENTS_READY_EVENTS_READY_NotGenerated: u32 = 0;
pub const QSPI_EVENTS_READY_EVENTS_READY_Generated: u32 = 1;
pub const QSPI_INTEN_READY_Pos: u32 = 0;
pub const QSPI_INTEN_READY_Msk: u32 = 1;
pub const QSPI_INTEN_READY_Disabled: u32 = 0;
pub const QSPI_INTEN_READY_Enabled: u32 = 1;
pub const QSPI_INTENSET_READY_Pos: u32 = 0;
pub const QSPI_INTENSET_READY_Msk: u32 = 1;
pub const QSPI_INTENSET_READY_Disabled: u32 = 0;
pub const QSPI_INTENSET_READY_Enabled: u32 = 1;
pub const QSPI_INTENSET_READY_Set: u32 = 1;
pub const QSPI_INTENCLR_READY_Pos: u32 = 0;
pub const QSPI_INTENCLR_READY_Msk: u32 = 1;
pub const QSPI_INTENCLR_READY_Disabled: u32 = 0;
pub const QSPI_INTENCLR_READY_Enabled: u32 = 1;
pub const QSPI_INTENCLR_READY_Clear: u32 = 1;
pub const QSPI_ENABLE_ENABLE_Pos: u32 = 0;
pub const QSPI_ENABLE_ENABLE_Msk: u32 = 1;
pub const QSPI_ENABLE_ENABLE_Disabled: u32 = 0;
pub const QSPI_ENABLE_ENABLE_Enabled: u32 = 1;
pub const QSPI_READ_SRC_SRC_Pos: u32 = 0;
pub const QSPI_READ_SRC_SRC_Msk: u32 = 4294967295;
pub const QSPI_READ_DST_DST_Pos: u32 = 0;
pub const QSPI_READ_DST_DST_Msk: u32 = 4294967295;
pub const QSPI_READ_CNT_CNT_Pos: u32 = 0;
pub const QSPI_READ_CNT_CNT_Msk: u32 = 262143;
pub const QSPI_WRITE_DST_DST_Pos: u32 = 0;
pub const QSPI_WRITE_DST_DST_Msk: u32 = 4294967295;
pub const QSPI_WRITE_SRC_SRC_Pos: u32 = 0;
pub const QSPI_WRITE_SRC_SRC_Msk: u32 = 4294967295;
pub const QSPI_WRITE_CNT_CNT_Pos: u32 = 0;
pub const QSPI_WRITE_CNT_CNT_Msk: u32 = 262143;
pub const QSPI_ERASE_PTR_PTR_Pos: u32 = 0;
pub const QSPI_ERASE_PTR_PTR_Msk: u32 = 4294967295;
pub const QSPI_ERASE_LEN_LEN_Pos: u32 = 0;
pub const QSPI_ERASE_LEN_LEN_Msk: u32 = 3;
pub const QSPI_ERASE_LEN_LEN_4KB: u32 = 0;
pub const QSPI_ERASE_LEN_LEN_64KB: u32 = 1;
pub const QSPI_ERASE_LEN_LEN_All: u32 = 2;
pub const QSPI_PSEL_SCK_CONNECT_Pos: u32 = 31;
pub const QSPI_PSEL_SCK_CONNECT_Msk: u32 = 2147483648;
pub const QSPI_PSEL_SCK_CONNECT_Connected: u32 = 0;
pub const QSPI_PSEL_SCK_CONNECT_Disconnected: u32 = 1;
pub const QSPI_PSEL_SCK_PORT_Pos: u32 = 5;
pub const QSPI_PSEL_SCK_PORT_Msk: u32 = 32;
pub const QSPI_PSEL_SCK_PIN_Pos: u32 = 0;
pub const QSPI_PSEL_SCK_PIN_Msk: u32 = 31;
pub const QSPI_PSEL_CSN_CONNECT_Pos: u32 = 31;
pub const QSPI_PSEL_CSN_CONNECT_Msk: u32 = 2147483648;
pub const QSPI_PSEL_CSN_CONNECT_Connected: u32 = 0;
pub const QSPI_PSEL_CSN_CONNECT_Disconnected: u32 = 1;
pub const QSPI_PSEL_CSN_PORT_Pos: u32 = 5;
pub const QSPI_PSEL_CSN_PORT_Msk: u32 = 32;
pub const QSPI_PSEL_CSN_PIN_Pos: u32 = 0;
pub const QSPI_PSEL_CSN_PIN_Msk: u32 = 31;
pub const QSPI_PSEL_IO0_CONNECT_Pos: u32 = 31;
pub const QSPI_PSEL_IO0_CONNECT_Msk: u32 = 2147483648;
pub const QSPI_PSEL_IO0_CONNECT_Connected: u32 = 0;
pub const QSPI_PSEL_IO0_CONNECT_Disconnected: u32 = 1;
pub const QSPI_PSEL_IO0_PORT_Pos: u32 = 5;
pub const QSPI_PSEL_IO0_PORT_Msk: u32 = 32;
pub const QSPI_PSEL_IO0_PIN_Pos: u32 = 0;
pub const QSPI_PSEL_IO0_PIN_Msk: u32 = 31;
pub const QSPI_PSEL_IO1_CONNECT_Pos: u32 = 31;
pub const QSPI_PSEL_IO1_CONNECT_Msk: u32 = 2147483648;
pub const QSPI_PSEL_IO1_CONNECT_Connected: u32 = 0;
pub const QSPI_PSEL_IO1_CONNECT_Disconnected: u32 = 1;
pub const QSPI_PSEL_IO1_PORT_Pos: u32 = 5;
pub const QSPI_PSEL_IO1_PORT_Msk: u32 = 32;
pub const QSPI_PSEL_IO1_PIN_Pos: u32 = 0;
pub const QSPI_PSEL_IO1_PIN_Msk: u32 = 31;
pub const QSPI_PSEL_IO2_CONNECT_Pos: u32 = 31;
pub const QSPI_PSEL_IO2_CONNECT_Msk: u32 = 2147483648;
pub const QSPI_PSEL_IO2_CONNECT_Connected: u32 = 0;
pub const QSPI_PSEL_IO2_CONNECT_Disconnected: u32 = 1;
pub const QSPI_PSEL_IO2_PORT_Pos: u32 = 5;
pub const QSPI_PSEL_IO2_PORT_Msk: u32 = 32;
pub const QSPI_PSEL_IO2_PIN_Pos: u32 = 0;
pub const QSPI_PSEL_IO2_PIN_Msk: u32 = 31;
pub const QSPI_PSEL_IO3_CONNECT_Pos: u32 = 31;
pub const QSPI_PSEL_IO3_CONNECT_Msk: u32 = 2147483648;
pub const QSPI_PSEL_IO3_CONNECT_Connected: u32 = 0;
pub const QSPI_PSEL_IO3_CONNECT_Disconnected: u32 = 1;
pub const QSPI_PSEL_IO3_PORT_Pos: u32 = 5;
pub const QSPI_PSEL_IO3_PORT_Msk: u32 = 32;
pub const QSPI_PSEL_IO3_PIN_Pos: u32 = 0;
pub const QSPI_PSEL_IO3_PIN_Msk: u32 = 31;
pub const QSPI_XIPOFFSET_XIPOFFSET_Pos: u32 = 0;
pub const QSPI_XIPOFFSET_XIPOFFSET_Msk: u32 = 4294967295;
pub const QSPI_IFCONFIG0_PPSIZE_Pos: u32 = 12;
pub const QSPI_IFCONFIG0_PPSIZE_Msk: u32 = 4096;
pub const QSPI_IFCONFIG0_PPSIZE_256Bytes: u32 = 0;
pub const QSPI_IFCONFIG0_PPSIZE_512Bytes: u32 = 1;
pub const QSPI_IFCONFIG0_DPMENABLE_Pos: u32 = 7;
pub const QSPI_IFCONFIG0_DPMENABLE_Msk: u32 = 128;
pub const QSPI_IFCONFIG0_DPMENABLE_Disable: u32 = 0;
pub const QSPI_IFCONFIG0_DPMENABLE_Enable: u32 = 1;
pub const QSPI_IFCONFIG0_ADDRMODE_Pos: u32 = 6;
pub const QSPI_IFCONFIG0_ADDRMODE_Msk: u32 = 64;
pub const QSPI_IFCONFIG0_ADDRMODE_24BIT: u32 = 0;
pub const QSPI_IFCONFIG0_ADDRMODE_32BIT: u32 = 1;
pub const QSPI_IFCONFIG0_WRITEOC_Pos: u32 = 3;
pub const QSPI_IFCONFIG0_WRITEOC_Msk: u32 = 56;
pub const QSPI_IFCONFIG0_WRITEOC_PP: u32 = 0;
pub const QSPI_IFCONFIG0_WRITEOC_PP2O: u32 = 1;
pub const QSPI_IFCONFIG0_WRITEOC_PP4O: u32 = 2;
pub const QSPI_IFCONFIG0_WRITEOC_PP4IO: u32 = 3;
pub const QSPI_IFCONFIG0_READOC_Pos: u32 = 0;
pub const QSPI_IFCONFIG0_READOC_Msk: u32 = 7;
pub const QSPI_IFCONFIG0_READOC_FASTREAD: u32 = 0;
pub const QSPI_IFCONFIG0_READOC_READ2O: u32 = 1;
pub const QSPI_IFCONFIG0_READOC_READ2IO: u32 = 2;
pub const QSPI_IFCONFIG0_READOC_READ4O: u32 = 3;
pub const QSPI_IFCONFIG0_READOC_READ4IO: u32 = 4;
pub const QSPI_IFCONFIG1_SCKFREQ_Pos: u32 = 28;
pub const QSPI_IFCONFIG1_SCKFREQ_Msk: u32 = 4026531840;
pub const QSPI_IFCONFIG1_SPIMODE_Pos: u32 = 25;
pub const QSPI_IFCONFIG1_SPIMODE_Msk: u32 = 33554432;
pub const QSPI_IFCONFIG1_SPIMODE_MODE0: u32 = 0;
pub const QSPI_IFCONFIG1_SPIMODE_MODE3: u32 = 1;
pub const QSPI_IFCONFIG1_DPMEN_Pos: u32 = 24;
pub const QSPI_IFCONFIG1_DPMEN_Msk: u32 = 16777216;
pub const QSPI_IFCONFIG1_DPMEN_Exit: u32 = 0;
pub const QSPI_IFCONFIG1_DPMEN_Enter: u32 = 1;
pub const QSPI_IFCONFIG1_SCKDELAY_Pos: u32 = 0;
pub const QSPI_IFCONFIG1_SCKDELAY_Msk: u32 = 255;
pub const QSPI_STATUS_SREG_Pos: u32 = 24;
pub const QSPI_STATUS_SREG_Msk: u32 = 4278190080;
pub const QSPI_STATUS_READY_Pos: u32 = 3;
pub const QSPI_STATUS_READY_Msk: u32 = 8;
pub const QSPI_STATUS_READY_BUSY: u32 = 0;
pub const QSPI_STATUS_READY_READY: u32 = 1;
pub const QSPI_STATUS_DPM_Pos: u32 = 2;
pub const QSPI_STATUS_DPM_Msk: u32 = 4;
pub const QSPI_STATUS_DPM_Disabled: u32 = 0;
pub const QSPI_STATUS_DPM_Enabled: u32 = 1;
pub const QSPI_DPMDUR_EXIT_Pos: u32 = 16;
pub const QSPI_DPMDUR_EXIT_Msk: u32 = 4294901760;
pub const QSPI_DPMDUR_ENTER_Pos: u32 = 0;
pub const QSPI_DPMDUR_ENTER_Msk: u32 = 65535;
pub const QSPI_ADDRCONF_WREN_Pos: u32 = 27;
pub const QSPI_ADDRCONF_WREN_Msk: u32 = 134217728;
pub const QSPI_ADDRCONF_WREN_Disable: u32 = 0;
pub const QSPI_ADDRCONF_WREN_Enable: u32 = 1;
pub const QSPI_ADDRCONF_WIPWAIT_Pos: u32 = 26;
pub const QSPI_ADDRCONF_WIPWAIT_Msk: u32 = 67108864;
pub const QSPI_ADDRCONF_WIPWAIT_Disable: u32 = 0;
pub const QSPI_ADDRCONF_WIPWAIT_Enable: u32 = 1;
pub const QSPI_ADDRCONF_MODE_Pos: u32 = 24;
pub const QSPI_ADDRCONF_MODE_Msk: u32 = 50331648;
pub const QSPI_ADDRCONF_MODE_NoInstr: u32 = 0;
pub const QSPI_ADDRCONF_MODE_Opcode: u32 = 1;
pub const QSPI_ADDRCONF_MODE_OpByte0: u32 = 2;
pub const QSPI_ADDRCONF_MODE_All: u32 = 3;
pub const QSPI_ADDRCONF_BYTE1_Pos: u32 = 16;
pub const QSPI_ADDRCONF_BYTE1_Msk: u32 = 16711680;
pub const QSPI_ADDRCONF_BYTE0_Pos: u32 = 8;
pub const QSPI_ADDRCONF_BYTE0_Msk: u32 = 65280;
pub const QSPI_ADDRCONF_OPCODE_Pos: u32 = 0;
pub const QSPI_ADDRCONF_OPCODE_Msk: u32 = 255;
pub const QSPI_CINSTRCONF_LFSTOP_Pos: u32 = 17;
pub const QSPI_CINSTRCONF_LFSTOP_Msk: u32 = 131072;
pub const QSPI_CINSTRCONF_LFSTOP_Stop: u32 = 1;
pub const QSPI_CINSTRCONF_LFEN_Pos: u32 = 16;
pub const QSPI_CINSTRCONF_LFEN_Msk: u32 = 65536;
pub const QSPI_CINSTRCONF_LFEN_Disable: u32 = 0;
pub const QSPI_CINSTRCONF_LFEN_Enable: u32 = 1;
pub const QSPI_CINSTRCONF_WREN_Pos: u32 = 15;
pub const QSPI_CINSTRCONF_WREN_Msk: u32 = 32768;
pub const QSPI_CINSTRCONF_WREN_Disable: u32 = 0;
pub const QSPI_CINSTRCONF_WREN_Enable: u32 = 1;
pub const QSPI_CINSTRCONF_WIPWAIT_Pos: u32 = 14;
pub const QSPI_CINSTRCONF_WIPWAIT_Msk: u32 = 16384;
pub const QSPI_CINSTRCONF_WIPWAIT_Disable: u32 = 0;
pub const QSPI_CINSTRCONF_WIPWAIT_Enable: u32 = 1;
pub const QSPI_CINSTRCONF_LIO3_Pos: u32 = 13;
pub const QSPI_CINSTRCONF_LIO3_Msk: u32 = 8192;
pub const QSPI_CINSTRCONF_LIO2_Pos: u32 = 12;
pub const QSPI_CINSTRCONF_LIO2_Msk: u32 = 4096;
pub const QSPI_CINSTRCONF_LENGTH_Pos: u32 = 8;
pub const QSPI_CINSTRCONF_LENGTH_Msk: u32 = 3840;
pub const QSPI_CINSTRCONF_LENGTH_1B: u32 = 1;
pub const QSPI_CINSTRCONF_LENGTH_2B: u32 = 2;
pub const QSPI_CINSTRCONF_LENGTH_3B: u32 = 3;
pub const QSPI_CINSTRCONF_LENGTH_4B: u32 = 4;
pub const QSPI_CINSTRCONF_LENGTH_5B: u32 = 5;
pub const QSPI_CINSTRCONF_LENGTH_6B: u32 = 6;
pub const QSPI_CINSTRCONF_LENGTH_7B: u32 = 7;
pub const QSPI_CINSTRCONF_LENGTH_8B: u32 = 8;
pub const QSPI_CINSTRCONF_LENGTH_9B: u32 = 9;
pub const QSPI_CINSTRCONF_OPCODE_Pos: u32 = 0;
pub const QSPI_CINSTRCONF_OPCODE_Msk: u32 = 255;
pub const QSPI_CINSTRDAT0_BYTE3_Pos: u32 = 24;
pub const QSPI_CINSTRDAT0_BYTE3_Msk: u32 = 4278190080;
pub const QSPI_CINSTRDAT0_BYTE2_Pos: u32 = 16;
pub const QSPI_CINSTRDAT0_BYTE2_Msk: u32 = 16711680;
pub const QSPI_CINSTRDAT0_BYTE1_Pos: u32 = 8;
pub const QSPI_CINSTRDAT0_BYTE1_Msk: u32 = 65280;
pub const QSPI_CINSTRDAT0_BYTE0_Pos: u32 = 0;
pub const QSPI_CINSTRDAT0_BYTE0_Msk: u32 = 255;
pub const QSPI_CINSTRDAT1_BYTE7_Pos: u32 = 24;
pub const QSPI_CINSTRDAT1_BYTE7_Msk: u32 = 4278190080;
pub const QSPI_CINSTRDAT1_BYTE6_Pos: u32 = 16;
pub const QSPI_CINSTRDAT1_BYTE6_Msk: u32 = 16711680;
pub const QSPI_CINSTRDAT1_BYTE5_Pos: u32 = 8;
pub const QSPI_CINSTRDAT1_BYTE5_Msk: u32 = 65280;
pub const QSPI_CINSTRDAT1_BYTE4_Pos: u32 = 0;
pub const QSPI_CINSTRDAT1_BYTE4_Msk: u32 = 255;
pub const QSPI_IFTIMING_RXDELAY_Pos: u32 = 8;
pub const QSPI_IFTIMING_RXDELAY_Msk: u32 = 1792;
pub const RADIO_TASKS_TXEN_TASKS_TXEN_Pos: u32 = 0;
pub const RADIO_TASKS_TXEN_TASKS_TXEN_Msk: u32 = 1;
pub const RADIO_TASKS_TXEN_TASKS_TXEN_Trigger: u32 = 1;
pub const RADIO_TASKS_RXEN_TASKS_RXEN_Pos: u32 = 0;
pub const RADIO_TASKS_RXEN_TASKS_RXEN_Msk: u32 = 1;
pub const RADIO_TASKS_RXEN_TASKS_RXEN_Trigger: u32 = 1;
pub const RADIO_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const RADIO_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const RADIO_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const RADIO_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const RADIO_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const RADIO_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const RADIO_TASKS_DISABLE_TASKS_DISABLE_Pos: u32 = 0;
pub const RADIO_TASKS_DISABLE_TASKS_DISABLE_Msk: u32 = 1;
pub const RADIO_TASKS_DISABLE_TASKS_DISABLE_Trigger: u32 = 1;
pub const RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Pos: u32 = 0;
pub const RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Msk: u32 = 1;
pub const RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Trigger: u32 = 1;
pub const RADIO_TASKS_RSSISTOP_TASKS_RSSISTOP_Pos: u32 = 0;
pub const RADIO_TASKS_RSSISTOP_TASKS_RSSISTOP_Msk: u32 = 1;
pub const RADIO_TASKS_RSSISTOP_TASKS_RSSISTOP_Trigger: u32 = 1;
pub const RADIO_TASKS_BCSTART_TASKS_BCSTART_Pos: u32 = 0;
pub const RADIO_TASKS_BCSTART_TASKS_BCSTART_Msk: u32 = 1;
pub const RADIO_TASKS_BCSTART_TASKS_BCSTART_Trigger: u32 = 1;
pub const RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Pos: u32 = 0;
pub const RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Msk: u32 = 1;
pub const RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Trigger: u32 = 1;
pub const RADIO_TASKS_EDSTART_TASKS_EDSTART_Pos: u32 = 0;
pub const RADIO_TASKS_EDSTART_TASKS_EDSTART_Msk: u32 = 1;
pub const RADIO_TASKS_EDSTART_TASKS_EDSTART_Trigger: u32 = 1;
pub const RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Pos: u32 = 0;
pub const RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Msk: u32 = 1;
pub const RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Trigger: u32 = 1;
pub const RADIO_TASKS_CCASTART_TASKS_CCASTART_Pos: u32 = 0;
pub const RADIO_TASKS_CCASTART_TASKS_CCASTART_Msk: u32 = 1;
pub const RADIO_TASKS_CCASTART_TASKS_CCASTART_Trigger: u32 = 1;
pub const RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Pos: u32 = 0;
pub const RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Msk: u32 = 1;
pub const RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Trigger: u32 = 1;
pub const RADIO_EVENTS_READY_EVENTS_READY_Pos: u32 = 0;
pub const RADIO_EVENTS_READY_EVENTS_READY_Msk: u32 = 1;
pub const RADIO_EVENTS_READY_EVENTS_READY_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_READY_EVENTS_READY_Generated: u32 = 1;
pub const RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Pos: u32 = 0;
pub const RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Msk: u32 = 1;
pub const RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Generated: u32 = 1;
pub const RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Pos: u32 = 0;
pub const RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Msk: u32 = 1;
pub const RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Generated: u32 = 1;
pub const RADIO_EVENTS_END_EVENTS_END_Pos: u32 = 0;
pub const RADIO_EVENTS_END_EVENTS_END_Msk: u32 = 1;
pub const RADIO_EVENTS_END_EVENTS_END_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_END_EVENTS_END_Generated: u32 = 1;
pub const RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Pos: u32 = 0;
pub const RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Msk: u32 = 1;
pub const RADIO_EVENTS_DISABLED_EVENTS_DISABLED_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Generated: u32 = 1;
pub const RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Pos: u32 = 0;
pub const RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Msk: u32 = 1;
pub const RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Generated: u32 = 1;
pub const RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Pos: u32 = 0;
pub const RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Msk: u32 = 1;
pub const RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Generated: u32 = 1;
pub const RADIO_EVENTS_RSSIEND_EVENTS_RSSIEND_Pos: u32 = 0;
pub const RADIO_EVENTS_RSSIEND_EVENTS_RSSIEND_Msk: u32 = 1;
pub const RADIO_EVENTS_RSSIEND_EVENTS_RSSIEND_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_RSSIEND_EVENTS_RSSIEND_Generated: u32 = 1;
pub const RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Pos: u32 = 0;
pub const RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Msk: u32 = 1;
pub const RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Generated: u32 = 1;
pub const RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Pos: u32 = 0;
pub const RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Msk: u32 = 1;
pub const RADIO_EVENTS_CRCOK_EVENTS_CRCOK_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Generated: u32 = 1;
pub const RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Pos: u32 = 0;
pub const RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Msk: u32 = 1;
pub const RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Generated: u32 = 1;
pub const RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Pos: u32 = 0;
pub const RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Msk: u32 = 1;
pub const RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Generated: u32 = 1;
pub const RADIO_EVENTS_EDEND_EVENTS_EDEND_Pos: u32 = 0;
pub const RADIO_EVENTS_EDEND_EVENTS_EDEND_Msk: u32 = 1;
pub const RADIO_EVENTS_EDEND_EVENTS_EDEND_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_EDEND_EVENTS_EDEND_Generated: u32 = 1;
pub const RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Pos: u32 = 0;
pub const RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Msk: u32 = 1;
pub const RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Generated: u32 = 1;
pub const RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Pos: u32 = 0;
pub const RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Msk: u32 = 1;
pub const RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Generated: u32 = 1;
pub const RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Pos: u32 = 0;
pub const RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Msk: u32 = 1;
pub const RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Generated: u32 = 1;
pub const RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Pos: u32 = 0;
pub const RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Msk: u32 = 1;
pub const RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Generated: u32 = 1;
pub const RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Pos: u32 = 0;
pub const RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Msk: u32 = 1;
pub const RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Generated: u32 = 1;
pub const RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Pos: u32 = 0;
pub const RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Msk: u32 = 1;
pub const RADIO_EVENTS_TXREADY_EVENTS_TXREADY_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Generated: u32 = 1;
pub const RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Pos: u32 = 0;
pub const RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Msk: u32 = 1;
pub const RADIO_EVENTS_RXREADY_EVENTS_RXREADY_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Generated: u32 = 1;
pub const RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Pos: u32 = 0;
pub const RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Msk: u32 = 1;
pub const RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Generated: u32 = 1;
pub const RADIO_EVENTS_SYNC_EVENTS_SYNC_Pos: u32 = 0;
pub const RADIO_EVENTS_SYNC_EVENTS_SYNC_Msk: u32 = 1;
pub const RADIO_EVENTS_SYNC_EVENTS_SYNC_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_SYNC_EVENTS_SYNC_Generated: u32 = 1;
pub const RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Pos: u32 = 0;
pub const RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Msk: u32 = 1;
pub const RADIO_EVENTS_PHYEND_EVENTS_PHYEND_NotGenerated: u32 = 0;
pub const RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Generated: u32 = 1;
pub const RADIO_SHORTS_PHYEND_START_Pos: u32 = 21;
pub const RADIO_SHORTS_PHYEND_START_Msk: u32 = 2097152;
pub const RADIO_SHORTS_PHYEND_START_Disabled: u32 = 0;
pub const RADIO_SHORTS_PHYEND_START_Enabled: u32 = 1;
pub const RADIO_SHORTS_PHYEND_DISABLE_Pos: u32 = 20;
pub const RADIO_SHORTS_PHYEND_DISABLE_Msk: u32 = 1048576;
pub const RADIO_SHORTS_PHYEND_DISABLE_Disabled: u32 = 0;
pub const RADIO_SHORTS_PHYEND_DISABLE_Enabled: u32 = 1;
pub const RADIO_SHORTS_RXREADY_START_Pos: u32 = 19;
pub const RADIO_SHORTS_RXREADY_START_Msk: u32 = 524288;
pub const RADIO_SHORTS_RXREADY_START_Disabled: u32 = 0;
pub const RADIO_SHORTS_RXREADY_START_Enabled: u32 = 1;
pub const RADIO_SHORTS_TXREADY_START_Pos: u32 = 18;
pub const RADIO_SHORTS_TXREADY_START_Msk: u32 = 262144;
pub const RADIO_SHORTS_TXREADY_START_Disabled: u32 = 0;
pub const RADIO_SHORTS_TXREADY_START_Enabled: u32 = 1;
pub const RADIO_SHORTS_CCAIDLE_STOP_Pos: u32 = 17;
pub const RADIO_SHORTS_CCAIDLE_STOP_Msk: u32 = 131072;
pub const RADIO_SHORTS_CCAIDLE_STOP_Disabled: u32 = 0;
pub const RADIO_SHORTS_CCAIDLE_STOP_Enabled: u32 = 1;
pub const RADIO_SHORTS_EDEND_DISABLE_Pos: u32 = 16;
pub const RADIO_SHORTS_EDEND_DISABLE_Msk: u32 = 65536;
pub const RADIO_SHORTS_EDEND_DISABLE_Disabled: u32 = 0;
pub const RADIO_SHORTS_EDEND_DISABLE_Enabled: u32 = 1;
pub const RADIO_SHORTS_READY_EDSTART_Pos: u32 = 15;
pub const RADIO_SHORTS_READY_EDSTART_Msk: u32 = 32768;
pub const RADIO_SHORTS_READY_EDSTART_Disabled: u32 = 0;
pub const RADIO_SHORTS_READY_EDSTART_Enabled: u32 = 1;
pub const RADIO_SHORTS_FRAMESTART_BCSTART_Pos: u32 = 14;
pub const RADIO_SHORTS_FRAMESTART_BCSTART_Msk: u32 = 16384;
pub const RADIO_SHORTS_FRAMESTART_BCSTART_Disabled: u32 = 0;
pub const RADIO_SHORTS_FRAMESTART_BCSTART_Enabled: u32 = 1;
pub const RADIO_SHORTS_CCABUSY_DISABLE_Pos: u32 = 13;
pub const RADIO_SHORTS_CCABUSY_DISABLE_Msk: u32 = 8192;
pub const RADIO_SHORTS_CCABUSY_DISABLE_Disabled: u32 = 0;
pub const RADIO_SHORTS_CCABUSY_DISABLE_Enabled: u32 = 1;
pub const RADIO_SHORTS_CCAIDLE_TXEN_Pos: u32 = 12;
pub const RADIO_SHORTS_CCAIDLE_TXEN_Msk: u32 = 4096;
pub const RADIO_SHORTS_CCAIDLE_TXEN_Disabled: u32 = 0;
pub const RADIO_SHORTS_CCAIDLE_TXEN_Enabled: u32 = 1;
pub const RADIO_SHORTS_RXREADY_CCASTART_Pos: u32 = 11;
pub const RADIO_SHORTS_RXREADY_CCASTART_Msk: u32 = 2048;
pub const RADIO_SHORTS_RXREADY_CCASTART_Disabled: u32 = 0;
pub const RADIO_SHORTS_RXREADY_CCASTART_Enabled: u32 = 1;
pub const RADIO_SHORTS_DISABLED_RSSISTOP_Pos: u32 = 8;
pub const RADIO_SHORTS_DISABLED_RSSISTOP_Msk: u32 = 256;
pub const RADIO_SHORTS_DISABLED_RSSISTOP_Disabled: u32 = 0;
pub const RADIO_SHORTS_DISABLED_RSSISTOP_Enabled: u32 = 1;
pub const RADIO_SHORTS_ADDRESS_BCSTART_Pos: u32 = 6;
pub const RADIO_SHORTS_ADDRESS_BCSTART_Msk: u32 = 64;
pub const RADIO_SHORTS_ADDRESS_BCSTART_Disabled: u32 = 0;
pub const RADIO_SHORTS_ADDRESS_BCSTART_Enabled: u32 = 1;
pub const RADIO_SHORTS_END_START_Pos: u32 = 5;
pub const RADIO_SHORTS_END_START_Msk: u32 = 32;
pub const RADIO_SHORTS_END_START_Disabled: u32 = 0;
pub const RADIO_SHORTS_END_START_Enabled: u32 = 1;
pub const RADIO_SHORTS_ADDRESS_RSSISTART_Pos: u32 = 4;
pub const RADIO_SHORTS_ADDRESS_RSSISTART_Msk: u32 = 16;
pub const RADIO_SHORTS_ADDRESS_RSSISTART_Disabled: u32 = 0;
pub const RADIO_SHORTS_ADDRESS_RSSISTART_Enabled: u32 = 1;
pub const RADIO_SHORTS_DISABLED_RXEN_Pos: u32 = 3;
pub const RADIO_SHORTS_DISABLED_RXEN_Msk: u32 = 8;
pub const RADIO_SHORTS_DISABLED_RXEN_Disabled: u32 = 0;
pub const RADIO_SHORTS_DISABLED_RXEN_Enabled: u32 = 1;
pub const RADIO_SHORTS_DISABLED_TXEN_Pos: u32 = 2;
pub const RADIO_SHORTS_DISABLED_TXEN_Msk: u32 = 4;
pub const RADIO_SHORTS_DISABLED_TXEN_Disabled: u32 = 0;
pub const RADIO_SHORTS_DISABLED_TXEN_Enabled: u32 = 1;
pub const RADIO_SHORTS_END_DISABLE_Pos: u32 = 1;
pub const RADIO_SHORTS_END_DISABLE_Msk: u32 = 2;
pub const RADIO_SHORTS_END_DISABLE_Disabled: u32 = 0;
pub const RADIO_SHORTS_END_DISABLE_Enabled: u32 = 1;
pub const RADIO_SHORTS_READY_START_Pos: u32 = 0;
pub const RADIO_SHORTS_READY_START_Msk: u32 = 1;
pub const RADIO_SHORTS_READY_START_Disabled: u32 = 0;
pub const RADIO_SHORTS_READY_START_Enabled: u32 = 1;
pub const RADIO_INTENSET_PHYEND_Pos: u32 = 27;
pub const RADIO_INTENSET_PHYEND_Msk: u32 = 134217728;
pub const RADIO_INTENSET_PHYEND_Disabled: u32 = 0;
pub const RADIO_INTENSET_PHYEND_Enabled: u32 = 1;
pub const RADIO_INTENSET_PHYEND_Set: u32 = 1;
pub const RADIO_INTENSET_SYNC_Pos: u32 = 26;
pub const RADIO_INTENSET_SYNC_Msk: u32 = 67108864;
pub const RADIO_INTENSET_SYNC_Disabled: u32 = 0;
pub const RADIO_INTENSET_SYNC_Enabled: u32 = 1;
pub const RADIO_INTENSET_SYNC_Set: u32 = 1;
pub const RADIO_INTENSET_MHRMATCH_Pos: u32 = 23;
pub const RADIO_INTENSET_MHRMATCH_Msk: u32 = 8388608;
pub const RADIO_INTENSET_MHRMATCH_Disabled: u32 = 0;
pub const RADIO_INTENSET_MHRMATCH_Enabled: u32 = 1;
pub const RADIO_INTENSET_MHRMATCH_Set: u32 = 1;
pub const RADIO_INTENSET_RXREADY_Pos: u32 = 22;
pub const RADIO_INTENSET_RXREADY_Msk: u32 = 4194304;
pub const RADIO_INTENSET_RXREADY_Disabled: u32 = 0;
pub const RADIO_INTENSET_RXREADY_Enabled: u32 = 1;
pub const RADIO_INTENSET_RXREADY_Set: u32 = 1;
pub const RADIO_INTENSET_TXREADY_Pos: u32 = 21;
pub const RADIO_INTENSET_TXREADY_Msk: u32 = 2097152;
pub const RADIO_INTENSET_TXREADY_Disabled: u32 = 0;
pub const RADIO_INTENSET_TXREADY_Enabled: u32 = 1;
pub const RADIO_INTENSET_TXREADY_Set: u32 = 1;
pub const RADIO_INTENSET_RATEBOOST_Pos: u32 = 20;
pub const RADIO_INTENSET_RATEBOOST_Msk: u32 = 1048576;
pub const RADIO_INTENSET_RATEBOOST_Disabled: u32 = 0;
pub const RADIO_INTENSET_RATEBOOST_Enabled: u32 = 1;
pub const RADIO_INTENSET_RATEBOOST_Set: u32 = 1;
pub const RADIO_INTENSET_CCASTOPPED_Pos: u32 = 19;
pub const RADIO_INTENSET_CCASTOPPED_Msk: u32 = 524288;
pub const RADIO_INTENSET_CCASTOPPED_Disabled: u32 = 0;
pub const RADIO_INTENSET_CCASTOPPED_Enabled: u32 = 1;
pub const RADIO_INTENSET_CCASTOPPED_Set: u32 = 1;
pub const RADIO_INTENSET_CCABUSY_Pos: u32 = 18;
pub const RADIO_INTENSET_CCABUSY_Msk: u32 = 262144;
pub const RADIO_INTENSET_CCABUSY_Disabled: u32 = 0;
pub const RADIO_INTENSET_CCABUSY_Enabled: u32 = 1;
pub const RADIO_INTENSET_CCABUSY_Set: u32 = 1;
pub const RADIO_INTENSET_CCAIDLE_Pos: u32 = 17;
pub const RADIO_INTENSET_CCAIDLE_Msk: u32 = 131072;
pub const RADIO_INTENSET_CCAIDLE_Disabled: u32 = 0;
pub const RADIO_INTENSET_CCAIDLE_Enabled: u32 = 1;
pub const RADIO_INTENSET_CCAIDLE_Set: u32 = 1;
pub const RADIO_INTENSET_EDSTOPPED_Pos: u32 = 16;
pub const RADIO_INTENSET_EDSTOPPED_Msk: u32 = 65536;
pub const RADIO_INTENSET_EDSTOPPED_Disabled: u32 = 0;
pub const RADIO_INTENSET_EDSTOPPED_Enabled: u32 = 1;
pub const RADIO_INTENSET_EDSTOPPED_Set: u32 = 1;
pub const RADIO_INTENSET_EDEND_Pos: u32 = 15;
pub const RADIO_INTENSET_EDEND_Msk: u32 = 32768;
pub const RADIO_INTENSET_EDEND_Disabled: u32 = 0;
pub const RADIO_INTENSET_EDEND_Enabled: u32 = 1;
pub const RADIO_INTENSET_EDEND_Set: u32 = 1;
pub const RADIO_INTENSET_FRAMESTART_Pos: u32 = 14;
pub const RADIO_INTENSET_FRAMESTART_Msk: u32 = 16384;
pub const RADIO_INTENSET_FRAMESTART_Disabled: u32 = 0;
pub const RADIO_INTENSET_FRAMESTART_Enabled: u32 = 1;
pub const RADIO_INTENSET_FRAMESTART_Set: u32 = 1;
pub const RADIO_INTENSET_CRCERROR_Pos: u32 = 13;
pub const RADIO_INTENSET_CRCERROR_Msk: u32 = 8192;
pub const RADIO_INTENSET_CRCERROR_Disabled: u32 = 0;
pub const RADIO_INTENSET_CRCERROR_Enabled: u32 = 1;
pub const RADIO_INTENSET_CRCERROR_Set: u32 = 1;
pub const RADIO_INTENSET_CRCOK_Pos: u32 = 12;
pub const RADIO_INTENSET_CRCOK_Msk: u32 = 4096;
pub const RADIO_INTENSET_CRCOK_Disabled: u32 = 0;
pub const RADIO_INTENSET_CRCOK_Enabled: u32 = 1;
pub const RADIO_INTENSET_CRCOK_Set: u32 = 1;
pub const RADIO_INTENSET_BCMATCH_Pos: u32 = 10;
pub const RADIO_INTENSET_BCMATCH_Msk: u32 = 1024;
pub const RADIO_INTENSET_BCMATCH_Disabled: u32 = 0;
pub const RADIO_INTENSET_BCMATCH_Enabled: u32 = 1;
pub const RADIO_INTENSET_BCMATCH_Set: u32 = 1;
pub const RADIO_INTENSET_RSSIEND_Pos: u32 = 7;
pub const RADIO_INTENSET_RSSIEND_Msk: u32 = 128;
pub const RADIO_INTENSET_RSSIEND_Disabled: u32 = 0;
pub const RADIO_INTENSET_RSSIEND_Enabled: u32 = 1;
pub const RADIO_INTENSET_RSSIEND_Set: u32 = 1;
pub const RADIO_INTENSET_DEVMISS_Pos: u32 = 6;
pub const RADIO_INTENSET_DEVMISS_Msk: u32 = 64;
pub const RADIO_INTENSET_DEVMISS_Disabled: u32 = 0;
pub const RADIO_INTENSET_DEVMISS_Enabled: u32 = 1;
pub const RADIO_INTENSET_DEVMISS_Set: u32 = 1;
pub const RADIO_INTENSET_DEVMATCH_Pos: u32 = 5;
pub const RADIO_INTENSET_DEVMATCH_Msk: u32 = 32;
pub const RADIO_INTENSET_DEVMATCH_Disabled: u32 = 0;
pub const RADIO_INTENSET_DEVMATCH_Enabled: u32 = 1;
pub const RADIO_INTENSET_DEVMATCH_Set: u32 = 1;
pub const RADIO_INTENSET_DISABLED_Pos: u32 = 4;
pub const RADIO_INTENSET_DISABLED_Msk: u32 = 16;
pub const RADIO_INTENSET_DISABLED_Disabled: u32 = 0;
pub const RADIO_INTENSET_DISABLED_Enabled: u32 = 1;
pub const RADIO_INTENSET_DISABLED_Set: u32 = 1;
pub const RADIO_INTENSET_END_Pos: u32 = 3;
pub const RADIO_INTENSET_END_Msk: u32 = 8;
pub const RADIO_INTENSET_END_Disabled: u32 = 0;
pub const RADIO_INTENSET_END_Enabled: u32 = 1;
pub const RADIO_INTENSET_END_Set: u32 = 1;
pub const RADIO_INTENSET_PAYLOAD_Pos: u32 = 2;
pub const RADIO_INTENSET_PAYLOAD_Msk: u32 = 4;
pub const RADIO_INTENSET_PAYLOAD_Disabled: u32 = 0;
pub const RADIO_INTENSET_PAYLOAD_Enabled: u32 = 1;
pub const RADIO_INTENSET_PAYLOAD_Set: u32 = 1;
pub const RADIO_INTENSET_ADDRESS_Pos: u32 = 1;
pub const RADIO_INTENSET_ADDRESS_Msk: u32 = 2;
pub const RADIO_INTENSET_ADDRESS_Disabled: u32 = 0;
pub const RADIO_INTENSET_ADDRESS_Enabled: u32 = 1;
pub const RADIO_INTENSET_ADDRESS_Set: u32 = 1;
pub const RADIO_INTENSET_READY_Pos: u32 = 0;
pub const RADIO_INTENSET_READY_Msk: u32 = 1;
pub const RADIO_INTENSET_READY_Disabled: u32 = 0;
pub const RADIO_INTENSET_READY_Enabled: u32 = 1;
pub const RADIO_INTENSET_READY_Set: u32 = 1;
pub const RADIO_INTENCLR_PHYEND_Pos: u32 = 27;
pub const RADIO_INTENCLR_PHYEND_Msk: u32 = 134217728;
pub const RADIO_INTENCLR_PHYEND_Disabled: u32 = 0;
pub const RADIO_INTENCLR_PHYEND_Enabled: u32 = 1;
pub const RADIO_INTENCLR_PHYEND_Clear: u32 = 1;
pub const RADIO_INTENCLR_SYNC_Pos: u32 = 26;
pub const RADIO_INTENCLR_SYNC_Msk: u32 = 67108864;
pub const RADIO_INTENCLR_SYNC_Disabled: u32 = 0;
pub const RADIO_INTENCLR_SYNC_Enabled: u32 = 1;
pub const RADIO_INTENCLR_SYNC_Clear: u32 = 1;
pub const RADIO_INTENCLR_MHRMATCH_Pos: u32 = 23;
pub const RADIO_INTENCLR_MHRMATCH_Msk: u32 = 8388608;
pub const RADIO_INTENCLR_MHRMATCH_Disabled: u32 = 0;
pub const RADIO_INTENCLR_MHRMATCH_Enabled: u32 = 1;
pub const RADIO_INTENCLR_MHRMATCH_Clear: u32 = 1;
pub const RADIO_INTENCLR_RXREADY_Pos: u32 = 22;
pub const RADIO_INTENCLR_RXREADY_Msk: u32 = 4194304;
pub const RADIO_INTENCLR_RXREADY_Disabled: u32 = 0;
pub const RADIO_INTENCLR_RXREADY_Enabled: u32 = 1;
pub const RADIO_INTENCLR_RXREADY_Clear: u32 = 1;
pub const RADIO_INTENCLR_TXREADY_Pos: u32 = 21;
pub const RADIO_INTENCLR_TXREADY_Msk: u32 = 2097152;
pub const RADIO_INTENCLR_TXREADY_Disabled: u32 = 0;
pub const RADIO_INTENCLR_TXREADY_Enabled: u32 = 1;
pub const RADIO_INTENCLR_TXREADY_Clear: u32 = 1;
pub const RADIO_INTENCLR_RATEBOOST_Pos: u32 = 20;
pub const RADIO_INTENCLR_RATEBOOST_Msk: u32 = 1048576;
pub const RADIO_INTENCLR_RATEBOOST_Disabled: u32 = 0;
pub const RADIO_INTENCLR_RATEBOOST_Enabled: u32 = 1;
pub const RADIO_INTENCLR_RATEBOOST_Clear: u32 = 1;
pub const RADIO_INTENCLR_CCASTOPPED_Pos: u32 = 19;
pub const RADIO_INTENCLR_CCASTOPPED_Msk: u32 = 524288;
pub const RADIO_INTENCLR_CCASTOPPED_Disabled: u32 = 0;
pub const RADIO_INTENCLR_CCASTOPPED_Enabled: u32 = 1;
pub const RADIO_INTENCLR_CCASTOPPED_Clear: u32 = 1;
pub const RADIO_INTENCLR_CCABUSY_Pos: u32 = 18;
pub const RADIO_INTENCLR_CCABUSY_Msk: u32 = 262144;
pub const RADIO_INTENCLR_CCABUSY_Disabled: u32 = 0;
pub const RADIO_INTENCLR_CCABUSY_Enabled: u32 = 1;
pub const RADIO_INTENCLR_CCABUSY_Clear: u32 = 1;
pub const RADIO_INTENCLR_CCAIDLE_Pos: u32 = 17;
pub const RADIO_INTENCLR_CCAIDLE_Msk: u32 = 131072;
pub const RADIO_INTENCLR_CCAIDLE_Disabled: u32 = 0;
pub const RADIO_INTENCLR_CCAIDLE_Enabled: u32 = 1;
pub const RADIO_INTENCLR_CCAIDLE_Clear: u32 = 1;
pub const RADIO_INTENCLR_EDSTOPPED_Pos: u32 = 16;
pub const RADIO_INTENCLR_EDSTOPPED_Msk: u32 = 65536;
pub const RADIO_INTENCLR_EDSTOPPED_Disabled: u32 = 0;
pub const RADIO_INTENCLR_EDSTOPPED_Enabled: u32 = 1;
pub const RADIO_INTENCLR_EDSTOPPED_Clear: u32 = 1;
pub const RADIO_INTENCLR_EDEND_Pos: u32 = 15;
pub const RADIO_INTENCLR_EDEND_Msk: u32 = 32768;
pub const RADIO_INTENCLR_EDEND_Disabled: u32 = 0;
pub const RADIO_INTENCLR_EDEND_Enabled: u32 = 1;
pub const RADIO_INTENCLR_EDEND_Clear: u32 = 1;
pub const RADIO_INTENCLR_FRAMESTART_Pos: u32 = 14;
pub const RADIO_INTENCLR_FRAMESTART_Msk: u32 = 16384;
pub const RADIO_INTENCLR_FRAMESTART_Disabled: u32 = 0;
pub const RADIO_INTENCLR_FRAMESTART_Enabled: u32 = 1;
pub const RADIO_INTENCLR_FRAMESTART_Clear: u32 = 1;
pub const RADIO_INTENCLR_CRCERROR_Pos: u32 = 13;
pub const RADIO_INTENCLR_CRCERROR_Msk: u32 = 8192;
pub const RADIO_INTENCLR_CRCERROR_Disabled: u32 = 0;
pub const RADIO_INTENCLR_CRCERROR_Enabled: u32 = 1;
pub const RADIO_INTENCLR_CRCERROR_Clear: u32 = 1;
pub const RADIO_INTENCLR_CRCOK_Pos: u32 = 12;
pub const RADIO_INTENCLR_CRCOK_Msk: u32 = 4096;
pub const RADIO_INTENCLR_CRCOK_Disabled: u32 = 0;
pub const RADIO_INTENCLR_CRCOK_Enabled: u32 = 1;
pub const RADIO_INTENCLR_CRCOK_Clear: u32 = 1;
pub const RADIO_INTENCLR_BCMATCH_Pos: u32 = 10;
pub const RADIO_INTENCLR_BCMATCH_Msk: u32 = 1024;
pub const RADIO_INTENCLR_BCMATCH_Disabled: u32 = 0;
pub const RADIO_INTENCLR_BCMATCH_Enabled: u32 = 1;
pub const RADIO_INTENCLR_BCMATCH_Clear: u32 = 1;
pub const RADIO_INTENCLR_RSSIEND_Pos: u32 = 7;
pub const RADIO_INTENCLR_RSSIEND_Msk: u32 = 128;
pub const RADIO_INTENCLR_RSSIEND_Disabled: u32 = 0;
pub const RADIO_INTENCLR_RSSIEND_Enabled: u32 = 1;
pub const RADIO_INTENCLR_RSSIEND_Clear: u32 = 1;
pub const RADIO_INTENCLR_DEVMISS_Pos: u32 = 6;
pub const RADIO_INTENCLR_DEVMISS_Msk: u32 = 64;
pub const RADIO_INTENCLR_DEVMISS_Disabled: u32 = 0;
pub const RADIO_INTENCLR_DEVMISS_Enabled: u32 = 1;
pub const RADIO_INTENCLR_DEVMISS_Clear: u32 = 1;
pub const RADIO_INTENCLR_DEVMATCH_Pos: u32 = 5;
pub const RADIO_INTENCLR_DEVMATCH_Msk: u32 = 32;
pub const RADIO_INTENCLR_DEVMATCH_Disabled: u32 = 0;
pub const RADIO_INTENCLR_DEVMATCH_Enabled: u32 = 1;
pub const RADIO_INTENCLR_DEVMATCH_Clear: u32 = 1;
pub const RADIO_INTENCLR_DISABLED_Pos: u32 = 4;
pub const RADIO_INTENCLR_DISABLED_Msk: u32 = 16;
pub const RADIO_INTENCLR_DISABLED_Disabled: u32 = 0;
pub const RADIO_INTENCLR_DISABLED_Enabled: u32 = 1;
pub const RADIO_INTENCLR_DISABLED_Clear: u32 = 1;
pub const RADIO_INTENCLR_END_Pos: u32 = 3;
pub const RADIO_INTENCLR_END_Msk: u32 = 8;
pub const RADIO_INTENCLR_END_Disabled: u32 = 0;
pub const RADIO_INTENCLR_END_Enabled: u32 = 1;
pub const RADIO_INTENCLR_END_Clear: u32 = 1;
pub const RADIO_INTENCLR_PAYLOAD_Pos: u32 = 2;
pub const RADIO_INTENCLR_PAYLOAD_Msk: u32 = 4;
pub const RADIO_INTENCLR_PAYLOAD_Disabled: u32 = 0;
pub const RADIO_INTENCLR_PAYLOAD_Enabled: u32 = 1;
pub const RADIO_INTENCLR_PAYLOAD_Clear: u32 = 1;
pub const RADIO_INTENCLR_ADDRESS_Pos: u32 = 1;
pub const RADIO_INTENCLR_ADDRESS_Msk: u32 = 2;
pub const RADIO_INTENCLR_ADDRESS_Disabled: u32 = 0;
pub const RADIO_INTENCLR_ADDRESS_Enabled: u32 = 1;
pub const RADIO_INTENCLR_ADDRESS_Clear: u32 = 1;
pub const RADIO_INTENCLR_READY_Pos: u32 = 0;
pub const RADIO_INTENCLR_READY_Msk: u32 = 1;
pub const RADIO_INTENCLR_READY_Disabled: u32 = 0;
pub const RADIO_INTENCLR_READY_Enabled: u32 = 1;
pub const RADIO_INTENCLR_READY_Clear: u32 = 1;
pub const RADIO_CRCSTATUS_CRCSTATUS_Pos: u32 = 0;
pub const RADIO_CRCSTATUS_CRCSTATUS_Msk: u32 = 1;
pub const RADIO_CRCSTATUS_CRCSTATUS_CRCError: u32 = 0;
pub const RADIO_CRCSTATUS_CRCSTATUS_CRCOk: u32 = 1;
pub const RADIO_RXMATCH_RXMATCH_Pos: u32 = 0;
pub const RADIO_RXMATCH_RXMATCH_Msk: u32 = 7;
pub const RADIO_RXCRC_RXCRC_Pos: u32 = 0;
pub const RADIO_RXCRC_RXCRC_Msk: u32 = 16777215;
pub const RADIO_DAI_DAI_Pos: u32 = 0;
pub const RADIO_DAI_DAI_Msk: u32 = 7;
pub const RADIO_PDUSTAT_CISTAT_Pos: u32 = 1;
pub const RADIO_PDUSTAT_CISTAT_Msk: u32 = 6;
pub const RADIO_PDUSTAT_CISTAT_LR125kbit: u32 = 0;
pub const RADIO_PDUSTAT_CISTAT_LR500kbit: u32 = 1;
pub const RADIO_PDUSTAT_PDUSTAT_Pos: u32 = 0;
pub const RADIO_PDUSTAT_PDUSTAT_Msk: u32 = 1;
pub const RADIO_PDUSTAT_PDUSTAT_LessThan: u32 = 0;
pub const RADIO_PDUSTAT_PDUSTAT_GreaterThan: u32 = 1;
pub const RADIO_PACKETPTR_PACKETPTR_Pos: u32 = 0;
pub const RADIO_PACKETPTR_PACKETPTR_Msk: u32 = 4294967295;
pub const RADIO_FREQUENCY_MAP_Pos: u32 = 8;
pub const RADIO_FREQUENCY_MAP_Msk: u32 = 256;
pub const RADIO_FREQUENCY_MAP_Default: u32 = 0;
pub const RADIO_FREQUENCY_MAP_Low: u32 = 1;
pub const RADIO_FREQUENCY_FREQUENCY_Pos: u32 = 0;
pub const RADIO_FREQUENCY_FREQUENCY_Msk: u32 = 127;
pub const RADIO_TXPOWER_TXPOWER_Pos: u32 = 0;
pub const RADIO_TXPOWER_TXPOWER_Msk: u32 = 255;
pub const RADIO_TXPOWER_TXPOWER_0dBm: u32 = 0;
pub const RADIO_TXPOWER_TXPOWER_Pos2dBm: u32 = 2;
pub const RADIO_TXPOWER_TXPOWER_Pos3dBm: u32 = 3;
pub const RADIO_TXPOWER_TXPOWER_Pos4dBm: u32 = 4;
pub const RADIO_TXPOWER_TXPOWER_Pos5dBm: u32 = 5;
pub const RADIO_TXPOWER_TXPOWER_Pos6dBm: u32 = 6;
pub const RADIO_TXPOWER_TXPOWER_Pos7dBm: u32 = 7;
pub const RADIO_TXPOWER_TXPOWER_Pos8dBm: u32 = 8;
pub const RADIO_TXPOWER_TXPOWER_Neg40dBm: u32 = 216;
pub const RADIO_TXPOWER_TXPOWER_Neg30dBm: u32 = 226;
pub const RADIO_TXPOWER_TXPOWER_Neg20dBm: u32 = 236;
pub const RADIO_TXPOWER_TXPOWER_Neg16dBm: u32 = 240;
pub const RADIO_TXPOWER_TXPOWER_Neg12dBm: u32 = 244;
pub const RADIO_TXPOWER_TXPOWER_Neg8dBm: u32 = 248;
pub const RADIO_TXPOWER_TXPOWER_Neg4dBm: u32 = 252;
pub const RADIO_MODE_MODE_Pos: u32 = 0;
pub const RADIO_MODE_MODE_Msk: u32 = 15;
pub const RADIO_MODE_MODE_Nrf_1Mbit: u32 = 0;
pub const RADIO_MODE_MODE_Nrf_2Mbit: u32 = 1;
pub const RADIO_MODE_MODE_Ble_1Mbit: u32 = 3;
pub const RADIO_MODE_MODE_Ble_2Mbit: u32 = 4;
pub const RADIO_MODE_MODE_Ble_LR125Kbit: u32 = 5;
pub const RADIO_MODE_MODE_Ble_LR500Kbit: u32 = 6;
pub const RADIO_MODE_MODE_Ieee802154_250Kbit: u32 = 15;
pub const RADIO_PCNF0_TERMLEN_Pos: u32 = 29;
pub const RADIO_PCNF0_TERMLEN_Msk: u32 = 1610612736;
pub const RADIO_PCNF0_CRCINC_Pos: u32 = 26;
pub const RADIO_PCNF0_CRCINC_Msk: u32 = 67108864;
pub const RADIO_PCNF0_CRCINC_Exclude: u32 = 0;
pub const RADIO_PCNF0_CRCINC_Include: u32 = 1;
pub const RADIO_PCNF0_PLEN_Pos: u32 = 24;
pub const RADIO_PCNF0_PLEN_Msk: u32 = 50331648;
pub const RADIO_PCNF0_PLEN_8bit: u32 = 0;
pub const RADIO_PCNF0_PLEN_16bit: u32 = 1;
pub const RADIO_PCNF0_PLEN_32bitZero: u32 = 2;
pub const RADIO_PCNF0_PLEN_LongRange: u32 = 3;
pub const RADIO_PCNF0_CILEN_Pos: u32 = 22;
pub const RADIO_PCNF0_CILEN_Msk: u32 = 12582912;
pub const RADIO_PCNF0_S1INCL_Pos: u32 = 20;
pub const RADIO_PCNF0_S1INCL_Msk: u32 = 1048576;
pub const RADIO_PCNF0_S1INCL_Automatic: u32 = 0;
pub const RADIO_PCNF0_S1INCL_Include: u32 = 1;
pub const RADIO_PCNF0_S1LEN_Pos: u32 = 16;
pub const RADIO_PCNF0_S1LEN_Msk: u32 = 983040;
pub const RADIO_PCNF0_S0LEN_Pos: u32 = 8;
pub const RADIO_PCNF0_S0LEN_Msk: u32 = 256;
pub const RADIO_PCNF0_LFLEN_Pos: u32 = 0;
pub const RADIO_PCNF0_LFLEN_Msk: u32 = 15;
pub const RADIO_PCNF1_WHITEEN_Pos: u32 = 25;
pub const RADIO_PCNF1_WHITEEN_Msk: u32 = 33554432;
pub const RADIO_PCNF1_WHITEEN_Disabled: u32 = 0;
pub const RADIO_PCNF1_WHITEEN_Enabled: u32 = 1;
pub const RADIO_PCNF1_ENDIAN_Pos: u32 = 24;
pub const RADIO_PCNF1_ENDIAN_Msk: u32 = 16777216;
pub const RADIO_PCNF1_ENDIAN_Little: u32 = 0;
pub const RADIO_PCNF1_ENDIAN_Big: u32 = 1;
pub const RADIO_PCNF1_BALEN_Pos: u32 = 16;
pub const RADIO_PCNF1_BALEN_Msk: u32 = 458752;
pub const RADIO_PCNF1_STATLEN_Pos: u32 = 8;
pub const RADIO_PCNF1_STATLEN_Msk: u32 = 65280;
pub const RADIO_PCNF1_MAXLEN_Pos: u32 = 0;
pub const RADIO_PCNF1_MAXLEN_Msk: u32 = 255;
pub const RADIO_BASE0_BASE0_Pos: u32 = 0;
pub const RADIO_BASE0_BASE0_Msk: u32 = 4294967295;
pub const RADIO_BASE1_BASE1_Pos: u32 = 0;
pub const RADIO_BASE1_BASE1_Msk: u32 = 4294967295;
pub const RADIO_PREFIX0_AP3_Pos: u32 = 24;
pub const RADIO_PREFIX0_AP3_Msk: u32 = 4278190080;
pub const RADIO_PREFIX0_AP2_Pos: u32 = 16;
pub const RADIO_PREFIX0_AP2_Msk: u32 = 16711680;
pub const RADIO_PREFIX0_AP1_Pos: u32 = 8;
pub const RADIO_PREFIX0_AP1_Msk: u32 = 65280;
pub const RADIO_PREFIX0_AP0_Pos: u32 = 0;
pub const RADIO_PREFIX0_AP0_Msk: u32 = 255;
pub const RADIO_PREFIX1_AP7_Pos: u32 = 24;
pub const RADIO_PREFIX1_AP7_Msk: u32 = 4278190080;
pub const RADIO_PREFIX1_AP6_Pos: u32 = 16;
pub const RADIO_PREFIX1_AP6_Msk: u32 = 16711680;
pub const RADIO_PREFIX1_AP5_Pos: u32 = 8;
pub const RADIO_PREFIX1_AP5_Msk: u32 = 65280;
pub const RADIO_PREFIX1_AP4_Pos: u32 = 0;
pub const RADIO_PREFIX1_AP4_Msk: u32 = 255;
pub const RADIO_TXADDRESS_TXADDRESS_Pos: u32 = 0;
pub const RADIO_TXADDRESS_TXADDRESS_Msk: u32 = 7;
pub const RADIO_RXADDRESSES_ADDR7_Pos: u32 = 7;
pub const RADIO_RXADDRESSES_ADDR7_Msk: u32 = 128;
pub const RADIO_RXADDRESSES_ADDR7_Disabled: u32 = 0;
pub const RADIO_RXADDRESSES_ADDR7_Enabled: u32 = 1;
pub const RADIO_RXADDRESSES_ADDR6_Pos: u32 = 6;
pub const RADIO_RXADDRESSES_ADDR6_Msk: u32 = 64;
pub const RADIO_RXADDRESSES_ADDR6_Disabled: u32 = 0;
pub const RADIO_RXADDRESSES_ADDR6_Enabled: u32 = 1;
pub const RADIO_RXADDRESSES_ADDR5_Pos: u32 = 5;
pub const RADIO_RXADDRESSES_ADDR5_Msk: u32 = 32;
pub const RADIO_RXADDRESSES_ADDR5_Disabled: u32 = 0;
pub const RADIO_RXADDRESSES_ADDR5_Enabled: u32 = 1;
pub const RADIO_RXADDRESSES_ADDR4_Pos: u32 = 4;
pub const RADIO_RXADDRESSES_ADDR4_Msk: u32 = 16;
pub const RADIO_RXADDRESSES_ADDR4_Disabled: u32 = 0;
pub const RADIO_RXADDRESSES_ADDR4_Enabled: u32 = 1;
pub const RADIO_RXADDRESSES_ADDR3_Pos: u32 = 3;
pub const RADIO_RXADDRESSES_ADDR3_Msk: u32 = 8;
pub const RADIO_RXADDRESSES_ADDR3_Disabled: u32 = 0;
pub const RADIO_RXADDRESSES_ADDR3_Enabled: u32 = 1;
pub const RADIO_RXADDRESSES_ADDR2_Pos: u32 = 2;
pub const RADIO_RXADDRESSES_ADDR2_Msk: u32 = 4;
pub const RADIO_RXADDRESSES_ADDR2_Disabled: u32 = 0;
pub const RADIO_RXADDRESSES_ADDR2_Enabled: u32 = 1;
pub const RADIO_RXADDRESSES_ADDR1_Pos: u32 = 1;
pub const RADIO_RXADDRESSES_ADDR1_Msk: u32 = 2;
pub const RADIO_RXADDRESSES_ADDR1_Disabled: u32 = 0;
pub const RADIO_RXADDRESSES_ADDR1_Enabled: u32 = 1;
pub const RADIO_RXADDRESSES_ADDR0_Pos: u32 = 0;
pub const RADIO_RXADDRESSES_ADDR0_Msk: u32 = 1;
pub const RADIO_RXADDRESSES_ADDR0_Disabled: u32 = 0;
pub const RADIO_RXADDRESSES_ADDR0_Enabled: u32 = 1;
pub const RADIO_CRCCNF_SKIPADDR_Pos: u32 = 8;
pub const RADIO_CRCCNF_SKIPADDR_Msk: u32 = 768;
pub const RADIO_CRCCNF_SKIPADDR_Include: u32 = 0;
pub const RADIO_CRCCNF_SKIPADDR_Skip: u32 = 1;
pub const RADIO_CRCCNF_SKIPADDR_Ieee802154: u32 = 2;
pub const RADIO_CRCCNF_LEN_Pos: u32 = 0;
pub const RADIO_CRCCNF_LEN_Msk: u32 = 3;
pub const RADIO_CRCCNF_LEN_Disabled: u32 = 0;
pub const RADIO_CRCCNF_LEN_One: u32 = 1;
pub const RADIO_CRCCNF_LEN_Two: u32 = 2;
pub const RADIO_CRCCNF_LEN_Three: u32 = 3;
pub const RADIO_CRCPOLY_CRCPOLY_Pos: u32 = 0;
pub const RADIO_CRCPOLY_CRCPOLY_Msk: u32 = 16777215;
pub const RADIO_CRCINIT_CRCINIT_Pos: u32 = 0;
pub const RADIO_CRCINIT_CRCINIT_Msk: u32 = 16777215;
pub const RADIO_TIFS_TIFS_Pos: u32 = 0;
pub const RADIO_TIFS_TIFS_Msk: u32 = 1023;
pub const RADIO_RSSISAMPLE_RSSISAMPLE_Pos: u32 = 0;
pub const RADIO_RSSISAMPLE_RSSISAMPLE_Msk: u32 = 127;
pub const RADIO_STATE_STATE_Pos: u32 = 0;
pub const RADIO_STATE_STATE_Msk: u32 = 15;
pub const RADIO_STATE_STATE_Disabled: u32 = 0;
pub const RADIO_STATE_STATE_RxRu: u32 = 1;
pub const RADIO_STATE_STATE_RxIdle: u32 = 2;
pub const RADIO_STATE_STATE_Rx: u32 = 3;
pub const RADIO_STATE_STATE_RxDisable: u32 = 4;
pub const RADIO_STATE_STATE_TxRu: u32 = 9;
pub const RADIO_STATE_STATE_TxIdle: u32 = 10;
pub const RADIO_STATE_STATE_Tx: u32 = 11;
pub const RADIO_STATE_STATE_TxDisable: u32 = 12;
pub const RADIO_DATAWHITEIV_DATAWHITEIV_Pos: u32 = 0;
pub const RADIO_DATAWHITEIV_DATAWHITEIV_Msk: u32 = 127;
pub const RADIO_BCC_BCC_Pos: u32 = 0;
pub const RADIO_BCC_BCC_Msk: u32 = 4294967295;
pub const RADIO_DAB_DAB_Pos: u32 = 0;
pub const RADIO_DAB_DAB_Msk: u32 = 4294967295;
pub const RADIO_DAP_DAP_Pos: u32 = 0;
pub const RADIO_DAP_DAP_Msk: u32 = 65535;
pub const RADIO_DACNF_TXADD7_Pos: u32 = 15;
pub const RADIO_DACNF_TXADD7_Msk: u32 = 32768;
pub const RADIO_DACNF_TXADD6_Pos: u32 = 14;
pub const RADIO_DACNF_TXADD6_Msk: u32 = 16384;
pub const RADIO_DACNF_TXADD5_Pos: u32 = 13;
pub const RADIO_DACNF_TXADD5_Msk: u32 = 8192;
pub const RADIO_DACNF_TXADD4_Pos: u32 = 12;
pub const RADIO_DACNF_TXADD4_Msk: u32 = 4096;
pub const RADIO_DACNF_TXADD3_Pos: u32 = 11;
pub const RADIO_DACNF_TXADD3_Msk: u32 = 2048;
pub const RADIO_DACNF_TXADD2_Pos: u32 = 10;
pub const RADIO_DACNF_TXADD2_Msk: u32 = 1024;
pub const RADIO_DACNF_TXADD1_Pos: u32 = 9;
pub const RADIO_DACNF_TXADD1_Msk: u32 = 512;
pub const RADIO_DACNF_TXADD0_Pos: u32 = 8;
pub const RADIO_DACNF_TXADD0_Msk: u32 = 256;
pub const RADIO_DACNF_ENA7_Pos: u32 = 7;
pub const RADIO_DACNF_ENA7_Msk: u32 = 128;
pub const RADIO_DACNF_ENA7_Disabled: u32 = 0;
pub const RADIO_DACNF_ENA7_Enabled: u32 = 1;
pub const RADIO_DACNF_ENA6_Pos: u32 = 6;
pub const RADIO_DACNF_ENA6_Msk: u32 = 64;
pub const RADIO_DACNF_ENA6_Disabled: u32 = 0;
pub const RADIO_DACNF_ENA6_Enabled: u32 = 1;
pub const RADIO_DACNF_ENA5_Pos: u32 = 5;
pub const RADIO_DACNF_ENA5_Msk: u32 = 32;
pub const RADIO_DACNF_ENA5_Disabled: u32 = 0;
pub const RADIO_DACNF_ENA5_Enabled: u32 = 1;
pub const RADIO_DACNF_ENA4_Pos: u32 = 4;
pub const RADIO_DACNF_ENA4_Msk: u32 = 16;
pub const RADIO_DACNF_ENA4_Disabled: u32 = 0;
pub const RADIO_DACNF_ENA4_Enabled: u32 = 1;
pub const RADIO_DACNF_ENA3_Pos: u32 = 3;
pub const RADIO_DACNF_ENA3_Msk: u32 = 8;
pub const RADIO_DACNF_ENA3_Disabled: u32 = 0;
pub const RADIO_DACNF_ENA3_Enabled: u32 = 1;
pub const RADIO_DACNF_ENA2_Pos: u32 = 2;
pub const RADIO_DACNF_ENA2_Msk: u32 = 4;
pub const RADIO_DACNF_ENA2_Disabled: u32 = 0;
pub const RADIO_DACNF_ENA2_Enabled: u32 = 1;
pub const RADIO_DACNF_ENA1_Pos: u32 = 1;
pub const RADIO_DACNF_ENA1_Msk: u32 = 2;
pub const RADIO_DACNF_ENA1_Disabled: u32 = 0;
pub const RADIO_DACNF_ENA1_Enabled: u32 = 1;
pub const RADIO_DACNF_ENA0_Pos: u32 = 0;
pub const RADIO_DACNF_ENA0_Msk: u32 = 1;
pub const RADIO_DACNF_ENA0_Disabled: u32 = 0;
pub const RADIO_DACNF_ENA0_Enabled: u32 = 1;
pub const RADIO_MHRMATCHCONF_MHRMATCHCONF_Pos: u32 = 0;
pub const RADIO_MHRMATCHCONF_MHRMATCHCONF_Msk: u32 = 4294967295;
pub const RADIO_MHRMATCHMAS_MHRMATCHMAS_Pos: u32 = 0;
pub const RADIO_MHRMATCHMAS_MHRMATCHMAS_Msk: u32 = 4294967295;
pub const RADIO_MODECNF0_DTX_Pos: u32 = 8;
pub const RADIO_MODECNF0_DTX_Msk: u32 = 768;
pub const RADIO_MODECNF0_DTX_B1: u32 = 0;
pub const RADIO_MODECNF0_DTX_B0: u32 = 1;
pub const RADIO_MODECNF0_DTX_Center: u32 = 2;
pub const RADIO_MODECNF0_RU_Pos: u32 = 0;
pub const RADIO_MODECNF0_RU_Msk: u32 = 1;
pub const RADIO_MODECNF0_RU_Default: u32 = 0;
pub const RADIO_MODECNF0_RU_Fast: u32 = 1;
pub const RADIO_SFD_SFD_Pos: u32 = 0;
pub const RADIO_SFD_SFD_Msk: u32 = 255;
pub const RADIO_EDCNT_EDCNT_Pos: u32 = 0;
pub const RADIO_EDCNT_EDCNT_Msk: u32 = 2097151;
pub const RADIO_EDSAMPLE_EDLVL_Pos: u32 = 0;
pub const RADIO_EDSAMPLE_EDLVL_Msk: u32 = 255;
pub const RADIO_CCACTRL_CCACORRCNT_Pos: u32 = 24;
pub const RADIO_CCACTRL_CCACORRCNT_Msk: u32 = 4278190080;
pub const RADIO_CCACTRL_CCACORRTHRES_Pos: u32 = 16;
pub const RADIO_CCACTRL_CCACORRTHRES_Msk: u32 = 16711680;
pub const RADIO_CCACTRL_CCAEDTHRES_Pos: u32 = 8;
pub const RADIO_CCACTRL_CCAEDTHRES_Msk: u32 = 65280;
pub const RADIO_CCACTRL_CCAMODE_Pos: u32 = 0;
pub const RADIO_CCACTRL_CCAMODE_Msk: u32 = 7;
pub const RADIO_CCACTRL_CCAMODE_EdMode: u32 = 0;
pub const RADIO_CCACTRL_CCAMODE_CarrierMode: u32 = 1;
pub const RADIO_CCACTRL_CCAMODE_CarrierAndEdMode: u32 = 2;
pub const RADIO_CCACTRL_CCAMODE_CarrierOrEdMode: u32 = 3;
pub const RADIO_CCACTRL_CCAMODE_EdModeTest1: u32 = 4;
pub const RADIO_POWER_POWER_Pos: u32 = 0;
pub const RADIO_POWER_POWER_Msk: u32 = 1;
pub const RADIO_POWER_POWER_Disabled: u32 = 0;
pub const RADIO_POWER_POWER_Enabled: u32 = 1;
pub const RNG_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const RNG_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const RNG_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const RNG_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const RNG_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const RNG_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const RNG_EVENTS_VALRDY_EVENTS_VALRDY_Pos: u32 = 0;
pub const RNG_EVENTS_VALRDY_EVENTS_VALRDY_Msk: u32 = 1;
pub const RNG_EVENTS_VALRDY_EVENTS_VALRDY_NotGenerated: u32 = 0;
pub const RNG_EVENTS_VALRDY_EVENTS_VALRDY_Generated: u32 = 1;
pub const RNG_SHORTS_VALRDY_STOP_Pos: u32 = 0;
pub const RNG_SHORTS_VALRDY_STOP_Msk: u32 = 1;
pub const RNG_SHORTS_VALRDY_STOP_Disabled: u32 = 0;
pub const RNG_SHORTS_VALRDY_STOP_Enabled: u32 = 1;
pub const RNG_INTENSET_VALRDY_Pos: u32 = 0;
pub const RNG_INTENSET_VALRDY_Msk: u32 = 1;
pub const RNG_INTENSET_VALRDY_Disabled: u32 = 0;
pub const RNG_INTENSET_VALRDY_Enabled: u32 = 1;
pub const RNG_INTENSET_VALRDY_Set: u32 = 1;
pub const RNG_INTENCLR_VALRDY_Pos: u32 = 0;
pub const RNG_INTENCLR_VALRDY_Msk: u32 = 1;
pub const RNG_INTENCLR_VALRDY_Disabled: u32 = 0;
pub const RNG_INTENCLR_VALRDY_Enabled: u32 = 1;
pub const RNG_INTENCLR_VALRDY_Clear: u32 = 1;
pub const RNG_CONFIG_DERCEN_Pos: u32 = 0;
pub const RNG_CONFIG_DERCEN_Msk: u32 = 1;
pub const RNG_CONFIG_DERCEN_Disabled: u32 = 0;
pub const RNG_CONFIG_DERCEN_Enabled: u32 = 1;
pub const RNG_VALUE_VALUE_Pos: u32 = 0;
pub const RNG_VALUE_VALUE_Msk: u32 = 255;
pub const RTC_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const RTC_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const RTC_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const RTC_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const RTC_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const RTC_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const RTC_TASKS_CLEAR_TASKS_CLEAR_Pos: u32 = 0;
pub const RTC_TASKS_CLEAR_TASKS_CLEAR_Msk: u32 = 1;
pub const RTC_TASKS_CLEAR_TASKS_CLEAR_Trigger: u32 = 1;
pub const RTC_TASKS_TRIGOVRFLW_TASKS_TRIGOVRFLW_Pos: u32 = 0;
pub const RTC_TASKS_TRIGOVRFLW_TASKS_TRIGOVRFLW_Msk: u32 = 1;
pub const RTC_TASKS_TRIGOVRFLW_TASKS_TRIGOVRFLW_Trigger: u32 = 1;
pub const RTC_EVENTS_TICK_EVENTS_TICK_Pos: u32 = 0;
pub const RTC_EVENTS_TICK_EVENTS_TICK_Msk: u32 = 1;
pub const RTC_EVENTS_TICK_EVENTS_TICK_NotGenerated: u32 = 0;
pub const RTC_EVENTS_TICK_EVENTS_TICK_Generated: u32 = 1;
pub const RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_Pos: u32 = 0;
pub const RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_Msk: u32 = 1;
pub const RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_NotGenerated: u32 = 0;
pub const RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_Generated: u32 = 1;
pub const RTC_EVENTS_COMPARE_EVENTS_COMPARE_Pos: u32 = 0;
pub const RTC_EVENTS_COMPARE_EVENTS_COMPARE_Msk: u32 = 1;
pub const RTC_EVENTS_COMPARE_EVENTS_COMPARE_NotGenerated: u32 = 0;
pub const RTC_EVENTS_COMPARE_EVENTS_COMPARE_Generated: u32 = 1;
pub const RTC_INTENSET_COMPARE3_Pos: u32 = 19;
pub const RTC_INTENSET_COMPARE3_Msk: u32 = 524288;
pub const RTC_INTENSET_COMPARE3_Disabled: u32 = 0;
pub const RTC_INTENSET_COMPARE3_Enabled: u32 = 1;
pub const RTC_INTENSET_COMPARE3_Set: u32 = 1;
pub const RTC_INTENSET_COMPARE2_Pos: u32 = 18;
pub const RTC_INTENSET_COMPARE2_Msk: u32 = 262144;
pub const RTC_INTENSET_COMPARE2_Disabled: u32 = 0;
pub const RTC_INTENSET_COMPARE2_Enabled: u32 = 1;
pub const RTC_INTENSET_COMPARE2_Set: u32 = 1;
pub const RTC_INTENSET_COMPARE1_Pos: u32 = 17;
pub const RTC_INTENSET_COMPARE1_Msk: u32 = 131072;
pub const RTC_INTENSET_COMPARE1_Disabled: u32 = 0;
pub const RTC_INTENSET_COMPARE1_Enabled: u32 = 1;
pub const RTC_INTENSET_COMPARE1_Set: u32 = 1;
pub const RTC_INTENSET_COMPARE0_Pos: u32 = 16;
pub const RTC_INTENSET_COMPARE0_Msk: u32 = 65536;
pub const RTC_INTENSET_COMPARE0_Disabled: u32 = 0;
pub const RTC_INTENSET_COMPARE0_Enabled: u32 = 1;
pub const RTC_INTENSET_COMPARE0_Set: u32 = 1;
pub const RTC_INTENSET_OVRFLW_Pos: u32 = 1;
pub const RTC_INTENSET_OVRFLW_Msk: u32 = 2;
pub const RTC_INTENSET_OVRFLW_Disabled: u32 = 0;
pub const RTC_INTENSET_OVRFLW_Enabled: u32 = 1;
pub const RTC_INTENSET_OVRFLW_Set: u32 = 1;
pub const RTC_INTENSET_TICK_Pos: u32 = 0;
pub const RTC_INTENSET_TICK_Msk: u32 = 1;
pub const RTC_INTENSET_TICK_Disabled: u32 = 0;
pub const RTC_INTENSET_TICK_Enabled: u32 = 1;
pub const RTC_INTENSET_TICK_Set: u32 = 1;
pub const RTC_INTENCLR_COMPARE3_Pos: u32 = 19;
pub const RTC_INTENCLR_COMPARE3_Msk: u32 = 524288;
pub const RTC_INTENCLR_COMPARE3_Disabled: u32 = 0;
pub const RTC_INTENCLR_COMPARE3_Enabled: u32 = 1;
pub const RTC_INTENCLR_COMPARE3_Clear: u32 = 1;
pub const RTC_INTENCLR_COMPARE2_Pos: u32 = 18;
pub const RTC_INTENCLR_COMPARE2_Msk: u32 = 262144;
pub const RTC_INTENCLR_COMPARE2_Disabled: u32 = 0;
pub const RTC_INTENCLR_COMPARE2_Enabled: u32 = 1;
pub const RTC_INTENCLR_COMPARE2_Clear: u32 = 1;
pub const RTC_INTENCLR_COMPARE1_Pos: u32 = 17;
pub const RTC_INTENCLR_COMPARE1_Msk: u32 = 131072;
pub const RTC_INTENCLR_COMPARE1_Disabled: u32 = 0;
pub const RTC_INTENCLR_COMPARE1_Enabled: u32 = 1;
pub const RTC_INTENCLR_COMPARE1_Clear: u32 = 1;
pub const RTC_INTENCLR_COMPARE0_Pos: u32 = 16;
pub const RTC_INTENCLR_COMPARE0_Msk: u32 = 65536;
pub const RTC_INTENCLR_COMPARE0_Disabled: u32 = 0;
pub const RTC_INTENCLR_COMPARE0_Enabled: u32 = 1;
pub const RTC_INTENCLR_COMPARE0_Clear: u32 = 1;
pub const RTC_INTENCLR_OVRFLW_Pos: u32 = 1;
pub const RTC_INTENCLR_OVRFLW_Msk: u32 = 2;
pub const RTC_INTENCLR_OVRFLW_Disabled: u32 = 0;
pub const RTC_INTENCLR_OVRFLW_Enabled: u32 = 1;
pub const RTC_INTENCLR_OVRFLW_Clear: u32 = 1;
pub const RTC_INTENCLR_TICK_Pos: u32 = 0;
pub const RTC_INTENCLR_TICK_Msk: u32 = 1;
pub const RTC_INTENCLR_TICK_Disabled: u32 = 0;
pub const RTC_INTENCLR_TICK_Enabled: u32 = 1;
pub const RTC_INTENCLR_TICK_Clear: u32 = 1;
pub const RTC_EVTEN_COMPARE3_Pos: u32 = 19;
pub const RTC_EVTEN_COMPARE3_Msk: u32 = 524288;
pub const RTC_EVTEN_COMPARE3_Disabled: u32 = 0;
pub const RTC_EVTEN_COMPARE3_Enabled: u32 = 1;
pub const RTC_EVTEN_COMPARE2_Pos: u32 = 18;
pub const RTC_EVTEN_COMPARE2_Msk: u32 = 262144;
pub const RTC_EVTEN_COMPARE2_Disabled: u32 = 0;
pub const RTC_EVTEN_COMPARE2_Enabled: u32 = 1;
pub const RTC_EVTEN_COMPARE1_Pos: u32 = 17;
pub const RTC_EVTEN_COMPARE1_Msk: u32 = 131072;
pub const RTC_EVTEN_COMPARE1_Disabled: u32 = 0;
pub const RTC_EVTEN_COMPARE1_Enabled: u32 = 1;
pub const RTC_EVTEN_COMPARE0_Pos: u32 = 16;
pub const RTC_EVTEN_COMPARE0_Msk: u32 = 65536;
pub const RTC_EVTEN_COMPARE0_Disabled: u32 = 0;
pub const RTC_EVTEN_COMPARE0_Enabled: u32 = 1;
pub const RTC_EVTEN_OVRFLW_Pos: u32 = 1;
pub const RTC_EVTEN_OVRFLW_Msk: u32 = 2;
pub const RTC_EVTEN_OVRFLW_Disabled: u32 = 0;
pub const RTC_EVTEN_OVRFLW_Enabled: u32 = 1;
pub const RTC_EVTEN_TICK_Pos: u32 = 0;
pub const RTC_EVTEN_TICK_Msk: u32 = 1;
pub const RTC_EVTEN_TICK_Disabled: u32 = 0;
pub const RTC_EVTEN_TICK_Enabled: u32 = 1;
pub const RTC_EVTENSET_COMPARE3_Pos: u32 = 19;
pub const RTC_EVTENSET_COMPARE3_Msk: u32 = 524288;
pub const RTC_EVTENSET_COMPARE3_Disabled: u32 = 0;
pub const RTC_EVTENSET_COMPARE3_Enabled: u32 = 1;
pub const RTC_EVTENSET_COMPARE3_Set: u32 = 1;
pub const RTC_EVTENSET_COMPARE2_Pos: u32 = 18;
pub const RTC_EVTENSET_COMPARE2_Msk: u32 = 262144;
pub const RTC_EVTENSET_COMPARE2_Disabled: u32 = 0;
pub const RTC_EVTENSET_COMPARE2_Enabled: u32 = 1;
pub const RTC_EVTENSET_COMPARE2_Set: u32 = 1;
pub const RTC_EVTENSET_COMPARE1_Pos: u32 = 17;
pub const RTC_EVTENSET_COMPARE1_Msk: u32 = 131072;
pub const RTC_EVTENSET_COMPARE1_Disabled: u32 = 0;
pub const RTC_EVTENSET_COMPARE1_Enabled: u32 = 1;
pub const RTC_EVTENSET_COMPARE1_Set: u32 = 1;
pub const RTC_EVTENSET_COMPARE0_Pos: u32 = 16;
pub const RTC_EVTENSET_COMPARE0_Msk: u32 = 65536;
pub const RTC_EVTENSET_COMPARE0_Disabled: u32 = 0;
pub const RTC_EVTENSET_COMPARE0_Enabled: u32 = 1;
pub const RTC_EVTENSET_COMPARE0_Set: u32 = 1;
pub const RTC_EVTENSET_OVRFLW_Pos: u32 = 1;
pub const RTC_EVTENSET_OVRFLW_Msk: u32 = 2;
pub const RTC_EVTENSET_OVRFLW_Disabled: u32 = 0;
pub const RTC_EVTENSET_OVRFLW_Enabled: u32 = 1;
pub const RTC_EVTENSET_OVRFLW_Set: u32 = 1;
pub const RTC_EVTENSET_TICK_Pos: u32 = 0;
pub const RTC_EVTENSET_TICK_Msk: u32 = 1;
pub const RTC_EVTENSET_TICK_Disabled: u32 = 0;
pub const RTC_EVTENSET_TICK_Enabled: u32 = 1;
pub const RTC_EVTENSET_TICK_Set: u32 = 1;
pub const RTC_EVTENCLR_COMPARE3_Pos: u32 = 19;
pub const RTC_EVTENCLR_COMPARE3_Msk: u32 = 524288;
pub const RTC_EVTENCLR_COMPARE3_Disabled: u32 = 0;
pub const RTC_EVTENCLR_COMPARE3_Enabled: u32 = 1;
pub const RTC_EVTENCLR_COMPARE3_Clear: u32 = 1;
pub const RTC_EVTENCLR_COMPARE2_Pos: u32 = 18;
pub const RTC_EVTENCLR_COMPARE2_Msk: u32 = 262144;
pub const RTC_EVTENCLR_COMPARE2_Disabled: u32 = 0;
pub const RTC_EVTENCLR_COMPARE2_Enabled: u32 = 1;
pub const RTC_EVTENCLR_COMPARE2_Clear: u32 = 1;
pub const RTC_EVTENCLR_COMPARE1_Pos: u32 = 17;
pub const RTC_EVTENCLR_COMPARE1_Msk: u32 = 131072;
pub const RTC_EVTENCLR_COMPARE1_Disabled: u32 = 0;
pub const RTC_EVTENCLR_COMPARE1_Enabled: u32 = 1;
pub const RTC_EVTENCLR_COMPARE1_Clear: u32 = 1;
pub const RTC_EVTENCLR_COMPARE0_Pos: u32 = 16;
pub const RTC_EVTENCLR_COMPARE0_Msk: u32 = 65536;
pub const RTC_EVTENCLR_COMPARE0_Disabled: u32 = 0;
pub const RTC_EVTENCLR_COMPARE0_Enabled: u32 = 1;
pub const RTC_EVTENCLR_COMPARE0_Clear: u32 = 1;
pub const RTC_EVTENCLR_OVRFLW_Pos: u32 = 1;
pub const RTC_EVTENCLR_OVRFLW_Msk: u32 = 2;
pub const RTC_EVTENCLR_OVRFLW_Disabled: u32 = 0;
pub const RTC_EVTENCLR_OVRFLW_Enabled: u32 = 1;
pub const RTC_EVTENCLR_OVRFLW_Clear: u32 = 1;
pub const RTC_EVTENCLR_TICK_Pos: u32 = 0;
pub const RTC_EVTENCLR_TICK_Msk: u32 = 1;
pub const RTC_EVTENCLR_TICK_Disabled: u32 = 0;
pub const RTC_EVTENCLR_TICK_Enabled: u32 = 1;
pub const RTC_EVTENCLR_TICK_Clear: u32 = 1;
pub const RTC_COUNTER_COUNTER_Pos: u32 = 0;
pub const RTC_COUNTER_COUNTER_Msk: u32 = 16777215;
pub const RTC_PRESCALER_PRESCALER_Pos: u32 = 0;
pub const RTC_PRESCALER_PRESCALER_Msk: u32 = 4095;
pub const RTC_CC_COMPARE_Pos: u32 = 0;
pub const RTC_CC_COMPARE_Msk: u32 = 16777215;
pub const SAADC_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const SAADC_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const SAADC_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Pos: u32 = 0;
pub const SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Msk: u32 = 1;
pub const SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Trigger: u32 = 1;
pub const SAADC_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const SAADC_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const SAADC_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Pos: u32 = 0;
pub const SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Msk: u32 = 1;
pub const SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Trigger: u32 = 1;
pub const SAADC_EVENTS_STARTED_EVENTS_STARTED_Pos: u32 = 0;
pub const SAADC_EVENTS_STARTED_EVENTS_STARTED_Msk: u32 = 1;
pub const SAADC_EVENTS_STARTED_EVENTS_STARTED_NotGenerated: u32 = 0;
pub const SAADC_EVENTS_STARTED_EVENTS_STARTED_Generated: u32 = 1;
pub const SAADC_EVENTS_END_EVENTS_END_Pos: u32 = 0;
pub const SAADC_EVENTS_END_EVENTS_END_Msk: u32 = 1;
pub const SAADC_EVENTS_END_EVENTS_END_NotGenerated: u32 = 0;
pub const SAADC_EVENTS_END_EVENTS_END_Generated: u32 = 1;
pub const SAADC_EVENTS_DONE_EVENTS_DONE_Pos: u32 = 0;
pub const SAADC_EVENTS_DONE_EVENTS_DONE_Msk: u32 = 1;
pub const SAADC_EVENTS_DONE_EVENTS_DONE_NotGenerated: u32 = 0;
pub const SAADC_EVENTS_DONE_EVENTS_DONE_Generated: u32 = 1;
pub const SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Pos: u32 = 0;
pub const SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Msk: u32 = 1;
pub const SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_NotGenerated: u32 = 0;
pub const SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Generated: u32 = 1;
pub const SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Pos: u32 = 0;
pub const SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Msk: u32 = 1;
pub const SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_NotGenerated: u32 = 0;
pub const SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Generated: u32 = 1;
pub const SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Pos: u32 = 0;
pub const SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Msk: u32 = 1;
pub const SAADC_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated: u32 = 0;
pub const SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Generated: u32 = 1;
pub const SAADC_EVENTS_CH_LIMITH_LIMITH_Pos: u32 = 0;
pub const SAADC_EVENTS_CH_LIMITH_LIMITH_Msk: u32 = 1;
pub const SAADC_EVENTS_CH_LIMITH_LIMITH_NotGenerated: u32 = 0;
pub const SAADC_EVENTS_CH_LIMITH_LIMITH_Generated: u32 = 1;
pub const SAADC_EVENTS_CH_LIMITL_LIMITL_Pos: u32 = 0;
pub const SAADC_EVENTS_CH_LIMITL_LIMITL_Msk: u32 = 1;
pub const SAADC_EVENTS_CH_LIMITL_LIMITL_NotGenerated: u32 = 0;
pub const SAADC_EVENTS_CH_LIMITL_LIMITL_Generated: u32 = 1;
pub const SAADC_INTEN_CH7LIMITL_Pos: u32 = 21;
pub const SAADC_INTEN_CH7LIMITL_Msk: u32 = 2097152;
pub const SAADC_INTEN_CH7LIMITL_Disabled: u32 = 0;
pub const SAADC_INTEN_CH7LIMITL_Enabled: u32 = 1;
pub const SAADC_INTEN_CH7LIMITH_Pos: u32 = 20;
pub const SAADC_INTEN_CH7LIMITH_Msk: u32 = 1048576;
pub const SAADC_INTEN_CH7LIMITH_Disabled: u32 = 0;
pub const SAADC_INTEN_CH7LIMITH_Enabled: u32 = 1;
pub const SAADC_INTEN_CH6LIMITL_Pos: u32 = 19;
pub const SAADC_INTEN_CH6LIMITL_Msk: u32 = 524288;
pub const SAADC_INTEN_CH6LIMITL_Disabled: u32 = 0;
pub const SAADC_INTEN_CH6LIMITL_Enabled: u32 = 1;
pub const SAADC_INTEN_CH6LIMITH_Pos: u32 = 18;
pub const SAADC_INTEN_CH6LIMITH_Msk: u32 = 262144;
pub const SAADC_INTEN_CH6LIMITH_Disabled: u32 = 0;
pub const SAADC_INTEN_CH6LIMITH_Enabled: u32 = 1;
pub const SAADC_INTEN_CH5LIMITL_Pos: u32 = 17;
pub const SAADC_INTEN_CH5LIMITL_Msk: u32 = 131072;
pub const SAADC_INTEN_CH5LIMITL_Disabled: u32 = 0;
pub const SAADC_INTEN_CH5LIMITL_Enabled: u32 = 1;
pub const SAADC_INTEN_CH5LIMITH_Pos: u32 = 16;
pub const SAADC_INTEN_CH5LIMITH_Msk: u32 = 65536;
pub const SAADC_INTEN_CH5LIMITH_Disabled: u32 = 0;
pub const SAADC_INTEN_CH5LIMITH_Enabled: u32 = 1;
pub const SAADC_INTEN_CH4LIMITL_Pos: u32 = 15;
pub const SAADC_INTEN_CH4LIMITL_Msk: u32 = 32768;
pub const SAADC_INTEN_CH4LIMITL_Disabled: u32 = 0;
pub const SAADC_INTEN_CH4LIMITL_Enabled: u32 = 1;
pub const SAADC_INTEN_CH4LIMITH_Pos: u32 = 14;
pub const SAADC_INTEN_CH4LIMITH_Msk: u32 = 16384;
pub const SAADC_INTEN_CH4LIMITH_Disabled: u32 = 0;
pub const SAADC_INTEN_CH4LIMITH_Enabled: u32 = 1;
pub const SAADC_INTEN_CH3LIMITL_Pos: u32 = 13;
pub const SAADC_INTEN_CH3LIMITL_Msk: u32 = 8192;
pub const SAADC_INTEN_CH3LIMITL_Disabled: u32 = 0;
pub const SAADC_INTEN_CH3LIMITL_Enabled: u32 = 1;
pub const SAADC_INTEN_CH3LIMITH_Pos: u32 = 12;
pub const SAADC_INTEN_CH3LIMITH_Msk: u32 = 4096;
pub const SAADC_INTEN_CH3LIMITH_Disabled: u32 = 0;
pub const SAADC_INTEN_CH3LIMITH_Enabled: u32 = 1;
pub const SAADC_INTEN_CH2LIMITL_Pos: u32 = 11;
pub const SAADC_INTEN_CH2LIMITL_Msk: u32 = 2048;
pub const SAADC_INTEN_CH2LIMITL_Disabled: u32 = 0;
pub const SAADC_INTEN_CH2LIMITL_Enabled: u32 = 1;
pub const SAADC_INTEN_CH2LIMITH_Pos: u32 = 10;
pub const SAADC_INTEN_CH2LIMITH_Msk: u32 = 1024;
pub const SAADC_INTEN_CH2LIMITH_Disabled: u32 = 0;
pub const SAADC_INTEN_CH2LIMITH_Enabled: u32 = 1;
pub const SAADC_INTEN_CH1LIMITL_Pos: u32 = 9;
pub const SAADC_INTEN_CH1LIMITL_Msk: u32 = 512;
pub const SAADC_INTEN_CH1LIMITL_Disabled: u32 = 0;
pub const SAADC_INTEN_CH1LIMITL_Enabled: u32 = 1;
pub const SAADC_INTEN_CH1LIMITH_Pos: u32 = 8;
pub const SAADC_INTEN_CH1LIMITH_Msk: u32 = 256;
pub const SAADC_INTEN_CH1LIMITH_Disabled: u32 = 0;
pub const SAADC_INTEN_CH1LIMITH_Enabled: u32 = 1;
pub const SAADC_INTEN_CH0LIMITL_Pos: u32 = 7;
pub const SAADC_INTEN_CH0LIMITL_Msk: u32 = 128;
pub const SAADC_INTEN_CH0LIMITL_Disabled: u32 = 0;
pub const SAADC_INTEN_CH0LIMITL_Enabled: u32 = 1;
pub const SAADC_INTEN_CH0LIMITH_Pos: u32 = 6;
pub const SAADC_INTEN_CH0LIMITH_Msk: u32 = 64;
pub const SAADC_INTEN_CH0LIMITH_Disabled: u32 = 0;
pub const SAADC_INTEN_CH0LIMITH_Enabled: u32 = 1;
pub const SAADC_INTEN_STOPPED_Pos: u32 = 5;
pub const SAADC_INTEN_STOPPED_Msk: u32 = 32;
pub const SAADC_INTEN_STOPPED_Disabled: u32 = 0;
pub const SAADC_INTEN_STOPPED_Enabled: u32 = 1;
pub const SAADC_INTEN_CALIBRATEDONE_Pos: u32 = 4;
pub const SAADC_INTEN_CALIBRATEDONE_Msk: u32 = 16;
pub const SAADC_INTEN_CALIBRATEDONE_Disabled: u32 = 0;
pub const SAADC_INTEN_CALIBRATEDONE_Enabled: u32 = 1;
pub const SAADC_INTEN_RESULTDONE_Pos: u32 = 3;
pub const SAADC_INTEN_RESULTDONE_Msk: u32 = 8;
pub const SAADC_INTEN_RESULTDONE_Disabled: u32 = 0;
pub const SAADC_INTEN_RESULTDONE_Enabled: u32 = 1;
pub const SAADC_INTEN_DONE_Pos: u32 = 2;
pub const SAADC_INTEN_DONE_Msk: u32 = 4;
pub const SAADC_INTEN_DONE_Disabled: u32 = 0;
pub const SAADC_INTEN_DONE_Enabled: u32 = 1;
pub const SAADC_INTEN_END_Pos: u32 = 1;
pub const SAADC_INTEN_END_Msk: u32 = 2;
pub const SAADC_INTEN_END_Disabled: u32 = 0;
pub const SAADC_INTEN_END_Enabled: u32 = 1;
pub const SAADC_INTEN_STARTED_Pos: u32 = 0;
pub const SAADC_INTEN_STARTED_Msk: u32 = 1;
pub const SAADC_INTEN_STARTED_Disabled: u32 = 0;
pub const SAADC_INTEN_STARTED_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH7LIMITL_Pos: u32 = 21;
pub const SAADC_INTENSET_CH7LIMITL_Msk: u32 = 2097152;
pub const SAADC_INTENSET_CH7LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH7LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH7LIMITL_Set: u32 = 1;
pub const SAADC_INTENSET_CH7LIMITH_Pos: u32 = 20;
pub const SAADC_INTENSET_CH7LIMITH_Msk: u32 = 1048576;
pub const SAADC_INTENSET_CH7LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH7LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH7LIMITH_Set: u32 = 1;
pub const SAADC_INTENSET_CH6LIMITL_Pos: u32 = 19;
pub const SAADC_INTENSET_CH6LIMITL_Msk: u32 = 524288;
pub const SAADC_INTENSET_CH6LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH6LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH6LIMITL_Set: u32 = 1;
pub const SAADC_INTENSET_CH6LIMITH_Pos: u32 = 18;
pub const SAADC_INTENSET_CH6LIMITH_Msk: u32 = 262144;
pub const SAADC_INTENSET_CH6LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH6LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH6LIMITH_Set: u32 = 1;
pub const SAADC_INTENSET_CH5LIMITL_Pos: u32 = 17;
pub const SAADC_INTENSET_CH5LIMITL_Msk: u32 = 131072;
pub const SAADC_INTENSET_CH5LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH5LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH5LIMITL_Set: u32 = 1;
pub const SAADC_INTENSET_CH5LIMITH_Pos: u32 = 16;
pub const SAADC_INTENSET_CH5LIMITH_Msk: u32 = 65536;
pub const SAADC_INTENSET_CH5LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH5LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH5LIMITH_Set: u32 = 1;
pub const SAADC_INTENSET_CH4LIMITL_Pos: u32 = 15;
pub const SAADC_INTENSET_CH4LIMITL_Msk: u32 = 32768;
pub const SAADC_INTENSET_CH4LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH4LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH4LIMITL_Set: u32 = 1;
pub const SAADC_INTENSET_CH4LIMITH_Pos: u32 = 14;
pub const SAADC_INTENSET_CH4LIMITH_Msk: u32 = 16384;
pub const SAADC_INTENSET_CH4LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH4LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH4LIMITH_Set: u32 = 1;
pub const SAADC_INTENSET_CH3LIMITL_Pos: u32 = 13;
pub const SAADC_INTENSET_CH3LIMITL_Msk: u32 = 8192;
pub const SAADC_INTENSET_CH3LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH3LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH3LIMITL_Set: u32 = 1;
pub const SAADC_INTENSET_CH3LIMITH_Pos: u32 = 12;
pub const SAADC_INTENSET_CH3LIMITH_Msk: u32 = 4096;
pub const SAADC_INTENSET_CH3LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH3LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH3LIMITH_Set: u32 = 1;
pub const SAADC_INTENSET_CH2LIMITL_Pos: u32 = 11;
pub const SAADC_INTENSET_CH2LIMITL_Msk: u32 = 2048;
pub const SAADC_INTENSET_CH2LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH2LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH2LIMITL_Set: u32 = 1;
pub const SAADC_INTENSET_CH2LIMITH_Pos: u32 = 10;
pub const SAADC_INTENSET_CH2LIMITH_Msk: u32 = 1024;
pub const SAADC_INTENSET_CH2LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH2LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH2LIMITH_Set: u32 = 1;
pub const SAADC_INTENSET_CH1LIMITL_Pos: u32 = 9;
pub const SAADC_INTENSET_CH1LIMITL_Msk: u32 = 512;
pub const SAADC_INTENSET_CH1LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH1LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH1LIMITL_Set: u32 = 1;
pub const SAADC_INTENSET_CH1LIMITH_Pos: u32 = 8;
pub const SAADC_INTENSET_CH1LIMITH_Msk: u32 = 256;
pub const SAADC_INTENSET_CH1LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH1LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH1LIMITH_Set: u32 = 1;
pub const SAADC_INTENSET_CH0LIMITL_Pos: u32 = 7;
pub const SAADC_INTENSET_CH0LIMITL_Msk: u32 = 128;
pub const SAADC_INTENSET_CH0LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH0LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH0LIMITL_Set: u32 = 1;
pub const SAADC_INTENSET_CH0LIMITH_Pos: u32 = 6;
pub const SAADC_INTENSET_CH0LIMITH_Msk: u32 = 64;
pub const SAADC_INTENSET_CH0LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENSET_CH0LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENSET_CH0LIMITH_Set: u32 = 1;
pub const SAADC_INTENSET_STOPPED_Pos: u32 = 5;
pub const SAADC_INTENSET_STOPPED_Msk: u32 = 32;
pub const SAADC_INTENSET_STOPPED_Disabled: u32 = 0;
pub const SAADC_INTENSET_STOPPED_Enabled: u32 = 1;
pub const SAADC_INTENSET_STOPPED_Set: u32 = 1;
pub const SAADC_INTENSET_CALIBRATEDONE_Pos: u32 = 4;
pub const SAADC_INTENSET_CALIBRATEDONE_Msk: u32 = 16;
pub const SAADC_INTENSET_CALIBRATEDONE_Disabled: u32 = 0;
pub const SAADC_INTENSET_CALIBRATEDONE_Enabled: u32 = 1;
pub const SAADC_INTENSET_CALIBRATEDONE_Set: u32 = 1;
pub const SAADC_INTENSET_RESULTDONE_Pos: u32 = 3;
pub const SAADC_INTENSET_RESULTDONE_Msk: u32 = 8;
pub const SAADC_INTENSET_RESULTDONE_Disabled: u32 = 0;
pub const SAADC_INTENSET_RESULTDONE_Enabled: u32 = 1;
pub const SAADC_INTENSET_RESULTDONE_Set: u32 = 1;
pub const SAADC_INTENSET_DONE_Pos: u32 = 2;
pub const SAADC_INTENSET_DONE_Msk: u32 = 4;
pub const SAADC_INTENSET_DONE_Disabled: u32 = 0;
pub const SAADC_INTENSET_DONE_Enabled: u32 = 1;
pub const SAADC_INTENSET_DONE_Set: u32 = 1;
pub const SAADC_INTENSET_END_Pos: u32 = 1;
pub const SAADC_INTENSET_END_Msk: u32 = 2;
pub const SAADC_INTENSET_END_Disabled: u32 = 0;
pub const SAADC_INTENSET_END_Enabled: u32 = 1;
pub const SAADC_INTENSET_END_Set: u32 = 1;
pub const SAADC_INTENSET_STARTED_Pos: u32 = 0;
pub const SAADC_INTENSET_STARTED_Msk: u32 = 1;
pub const SAADC_INTENSET_STARTED_Disabled: u32 = 0;
pub const SAADC_INTENSET_STARTED_Enabled: u32 = 1;
pub const SAADC_INTENSET_STARTED_Set: u32 = 1;
pub const SAADC_INTENCLR_CH7LIMITL_Pos: u32 = 21;
pub const SAADC_INTENCLR_CH7LIMITL_Msk: u32 = 2097152;
pub const SAADC_INTENCLR_CH7LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH7LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH7LIMITL_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH7LIMITH_Pos: u32 = 20;
pub const SAADC_INTENCLR_CH7LIMITH_Msk: u32 = 1048576;
pub const SAADC_INTENCLR_CH7LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH7LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH7LIMITH_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH6LIMITL_Pos: u32 = 19;
pub const SAADC_INTENCLR_CH6LIMITL_Msk: u32 = 524288;
pub const SAADC_INTENCLR_CH6LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH6LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH6LIMITL_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH6LIMITH_Pos: u32 = 18;
pub const SAADC_INTENCLR_CH6LIMITH_Msk: u32 = 262144;
pub const SAADC_INTENCLR_CH6LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH6LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH6LIMITH_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH5LIMITL_Pos: u32 = 17;
pub const SAADC_INTENCLR_CH5LIMITL_Msk: u32 = 131072;
pub const SAADC_INTENCLR_CH5LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH5LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH5LIMITL_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH5LIMITH_Pos: u32 = 16;
pub const SAADC_INTENCLR_CH5LIMITH_Msk: u32 = 65536;
pub const SAADC_INTENCLR_CH5LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH5LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH5LIMITH_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH4LIMITL_Pos: u32 = 15;
pub const SAADC_INTENCLR_CH4LIMITL_Msk: u32 = 32768;
pub const SAADC_INTENCLR_CH4LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH4LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH4LIMITL_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH4LIMITH_Pos: u32 = 14;
pub const SAADC_INTENCLR_CH4LIMITH_Msk: u32 = 16384;
pub const SAADC_INTENCLR_CH4LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH4LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH4LIMITH_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH3LIMITL_Pos: u32 = 13;
pub const SAADC_INTENCLR_CH3LIMITL_Msk: u32 = 8192;
pub const SAADC_INTENCLR_CH3LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH3LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH3LIMITL_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH3LIMITH_Pos: u32 = 12;
pub const SAADC_INTENCLR_CH3LIMITH_Msk: u32 = 4096;
pub const SAADC_INTENCLR_CH3LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH3LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH3LIMITH_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH2LIMITL_Pos: u32 = 11;
pub const SAADC_INTENCLR_CH2LIMITL_Msk: u32 = 2048;
pub const SAADC_INTENCLR_CH2LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH2LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH2LIMITL_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH2LIMITH_Pos: u32 = 10;
pub const SAADC_INTENCLR_CH2LIMITH_Msk: u32 = 1024;
pub const SAADC_INTENCLR_CH2LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH2LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH2LIMITH_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH1LIMITL_Pos: u32 = 9;
pub const SAADC_INTENCLR_CH1LIMITL_Msk: u32 = 512;
pub const SAADC_INTENCLR_CH1LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH1LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH1LIMITL_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH1LIMITH_Pos: u32 = 8;
pub const SAADC_INTENCLR_CH1LIMITH_Msk: u32 = 256;
pub const SAADC_INTENCLR_CH1LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH1LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH1LIMITH_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH0LIMITL_Pos: u32 = 7;
pub const SAADC_INTENCLR_CH0LIMITL_Msk: u32 = 128;
pub const SAADC_INTENCLR_CH0LIMITL_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH0LIMITL_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH0LIMITL_Clear: u32 = 1;
pub const SAADC_INTENCLR_CH0LIMITH_Pos: u32 = 6;
pub const SAADC_INTENCLR_CH0LIMITH_Msk: u32 = 64;
pub const SAADC_INTENCLR_CH0LIMITH_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CH0LIMITH_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CH0LIMITH_Clear: u32 = 1;
pub const SAADC_INTENCLR_STOPPED_Pos: u32 = 5;
pub const SAADC_INTENCLR_STOPPED_Msk: u32 = 32;
pub const SAADC_INTENCLR_STOPPED_Disabled: u32 = 0;
pub const SAADC_INTENCLR_STOPPED_Enabled: u32 = 1;
pub const SAADC_INTENCLR_STOPPED_Clear: u32 = 1;
pub const SAADC_INTENCLR_CALIBRATEDONE_Pos: u32 = 4;
pub const SAADC_INTENCLR_CALIBRATEDONE_Msk: u32 = 16;
pub const SAADC_INTENCLR_CALIBRATEDONE_Disabled: u32 = 0;
pub const SAADC_INTENCLR_CALIBRATEDONE_Enabled: u32 = 1;
pub const SAADC_INTENCLR_CALIBRATEDONE_Clear: u32 = 1;
pub const SAADC_INTENCLR_RESULTDONE_Pos: u32 = 3;
pub const SAADC_INTENCLR_RESULTDONE_Msk: u32 = 8;
pub const SAADC_INTENCLR_RESULTDONE_Disabled: u32 = 0;
pub const SAADC_INTENCLR_RESULTDONE_Enabled: u32 = 1;
pub const SAADC_INTENCLR_RESULTDONE_Clear: u32 = 1;
pub const SAADC_INTENCLR_DONE_Pos: u32 = 2;
pub const SAADC_INTENCLR_DONE_Msk: u32 = 4;
pub const SAADC_INTENCLR_DONE_Disabled: u32 = 0;
pub const SAADC_INTENCLR_DONE_Enabled: u32 = 1;
pub const SAADC_INTENCLR_DONE_Clear: u32 = 1;
pub const SAADC_INTENCLR_END_Pos: u32 = 1;
pub const SAADC_INTENCLR_END_Msk: u32 = 2;
pub const SAADC_INTENCLR_END_Disabled: u32 = 0;
pub const SAADC_INTENCLR_END_Enabled: u32 = 1;
pub const SAADC_INTENCLR_END_Clear: u32 = 1;
pub const SAADC_INTENCLR_STARTED_Pos: u32 = 0;
pub const SAADC_INTENCLR_STARTED_Msk: u32 = 1;
pub const SAADC_INTENCLR_STARTED_Disabled: u32 = 0;
pub const SAADC_INTENCLR_STARTED_Enabled: u32 = 1;
pub const SAADC_INTENCLR_STARTED_Clear: u32 = 1;
pub const SAADC_STATUS_STATUS_Pos: u32 = 0;
pub const SAADC_STATUS_STATUS_Msk: u32 = 1;
pub const SAADC_STATUS_STATUS_Ready: u32 = 0;
pub const SAADC_STATUS_STATUS_Busy: u32 = 1;
pub const SAADC_ENABLE_ENABLE_Pos: u32 = 0;
pub const SAADC_ENABLE_ENABLE_Msk: u32 = 1;
pub const SAADC_ENABLE_ENABLE_Disabled: u32 = 0;
pub const SAADC_ENABLE_ENABLE_Enabled: u32 = 1;
pub const SAADC_CH_PSELP_PSELP_Pos: u32 = 0;
pub const SAADC_CH_PSELP_PSELP_Msk: u32 = 31;
pub const SAADC_CH_PSELP_PSELP_NC: u32 = 0;
pub const SAADC_CH_PSELP_PSELP_AnalogInput0: u32 = 1;
pub const SAADC_CH_PSELP_PSELP_AnalogInput1: u32 = 2;
pub const SAADC_CH_PSELP_PSELP_AnalogInput2: u32 = 3;
pub const SAADC_CH_PSELP_PSELP_AnalogInput3: u32 = 4;
pub const SAADC_CH_PSELP_PSELP_AnalogInput4: u32 = 5;
pub const SAADC_CH_PSELP_PSELP_AnalogInput5: u32 = 6;
pub const SAADC_CH_PSELP_PSELP_AnalogInput6: u32 = 7;
pub const SAADC_CH_PSELP_PSELP_AnalogInput7: u32 = 8;
pub const SAADC_CH_PSELP_PSELP_VDD: u32 = 9;
pub const SAADC_CH_PSELP_PSELP_VDDHDIV5: u32 = 13;
pub const SAADC_CH_PSELN_PSELN_Pos: u32 = 0;
pub const SAADC_CH_PSELN_PSELN_Msk: u32 = 31;
pub const SAADC_CH_PSELN_PSELN_NC: u32 = 0;
pub const SAADC_CH_PSELN_PSELN_AnalogInput0: u32 = 1;
pub const SAADC_CH_PSELN_PSELN_AnalogInput1: u32 = 2;
pub const SAADC_CH_PSELN_PSELN_AnalogInput2: u32 = 3;
pub const SAADC_CH_PSELN_PSELN_AnalogInput3: u32 = 4;
pub const SAADC_CH_PSELN_PSELN_AnalogInput4: u32 = 5;
pub const SAADC_CH_PSELN_PSELN_AnalogInput5: u32 = 6;
pub const SAADC_CH_PSELN_PSELN_AnalogInput6: u32 = 7;
pub const SAADC_CH_PSELN_PSELN_AnalogInput7: u32 = 8;
pub const SAADC_CH_PSELN_PSELN_VDD: u32 = 9;
pub const SAADC_CH_PSELN_PSELN_VDDHDIV5: u32 = 13;
pub const SAADC_CH_CONFIG_BURST_Pos: u32 = 24;
pub const SAADC_CH_CONFIG_BURST_Msk: u32 = 16777216;
pub const SAADC_CH_CONFIG_BURST_Disabled: u32 = 0;
pub const SAADC_CH_CONFIG_BURST_Enabled: u32 = 1;
pub const SAADC_CH_CONFIG_MODE_Pos: u32 = 20;
pub const SAADC_CH_CONFIG_MODE_Msk: u32 = 1048576;
pub const SAADC_CH_CONFIG_MODE_SE: u32 = 0;
pub const SAADC_CH_CONFIG_MODE_Diff: u32 = 1;
pub const SAADC_CH_CONFIG_TACQ_Pos: u32 = 16;
pub const SAADC_CH_CONFIG_TACQ_Msk: u32 = 458752;
pub const SAADC_CH_CONFIG_TACQ_3us: u32 = 0;
pub const SAADC_CH_CONFIG_TACQ_5us: u32 = 1;
pub const SAADC_CH_CONFIG_TACQ_10us: u32 = 2;
pub const SAADC_CH_CONFIG_TACQ_15us: u32 = 3;
pub const SAADC_CH_CONFIG_TACQ_20us: u32 = 4;
pub const SAADC_CH_CONFIG_TACQ_40us: u32 = 5;
pub const SAADC_CH_CONFIG_REFSEL_Pos: u32 = 12;
pub const SAADC_CH_CONFIG_REFSEL_Msk: u32 = 4096;
pub const SAADC_CH_CONFIG_REFSEL_Internal: u32 = 0;
pub const SAADC_CH_CONFIG_REFSEL_VDD1_4: u32 = 1;
pub const SAADC_CH_CONFIG_GAIN_Pos: u32 = 8;
pub const SAADC_CH_CONFIG_GAIN_Msk: u32 = 1792;
pub const SAADC_CH_CONFIG_GAIN_Gain1_6: u32 = 0;
pub const SAADC_CH_CONFIG_GAIN_Gain1_5: u32 = 1;
pub const SAADC_CH_CONFIG_GAIN_Gain1_4: u32 = 2;
pub const SAADC_CH_CONFIG_GAIN_Gain1_3: u32 = 3;
pub const SAADC_CH_CONFIG_GAIN_Gain1_2: u32 = 4;
pub const SAADC_CH_CONFIG_GAIN_Gain1: u32 = 5;
pub const SAADC_CH_CONFIG_GAIN_Gain2: u32 = 6;
pub const SAADC_CH_CONFIG_GAIN_Gain4: u32 = 7;
pub const SAADC_CH_CONFIG_RESN_Pos: u32 = 4;
pub const SAADC_CH_CONFIG_RESN_Msk: u32 = 48;
pub const SAADC_CH_CONFIG_RESN_Bypass: u32 = 0;
pub const SAADC_CH_CONFIG_RESN_Pulldown: u32 = 1;
pub const SAADC_CH_CONFIG_RESN_Pullup: u32 = 2;
pub const SAADC_CH_CONFIG_RESN_VDD1_2: u32 = 3;
pub const SAADC_CH_CONFIG_RESP_Pos: u32 = 0;
pub const SAADC_CH_CONFIG_RESP_Msk: u32 = 3;
pub const SAADC_CH_CONFIG_RESP_Bypass: u32 = 0;
pub const SAADC_CH_CONFIG_RESP_Pulldown: u32 = 1;
pub const SAADC_CH_CONFIG_RESP_Pullup: u32 = 2;
pub const SAADC_CH_CONFIG_RESP_VDD1_2: u32 = 3;
pub const SAADC_CH_LIMIT_HIGH_Pos: u32 = 16;
pub const SAADC_CH_LIMIT_HIGH_Msk: u32 = 4294901760;
pub const SAADC_CH_LIMIT_LOW_Pos: u32 = 0;
pub const SAADC_CH_LIMIT_LOW_Msk: u32 = 65535;
pub const SAADC_RESOLUTION_VAL_Pos: u32 = 0;
pub const SAADC_RESOLUTION_VAL_Msk: u32 = 7;
pub const SAADC_RESOLUTION_VAL_8bit: u32 = 0;
pub const SAADC_RESOLUTION_VAL_10bit: u32 = 1;
pub const SAADC_RESOLUTION_VAL_12bit: u32 = 2;
pub const SAADC_RESOLUTION_VAL_14bit: u32 = 3;
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Pos: u32 = 0;
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Msk: u32 = 15;
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Bypass: u32 = 0;
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over2x: u32 = 1;
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over4x: u32 = 2;
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over8x: u32 = 3;
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over16x: u32 = 4;
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over32x: u32 = 5;
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over64x: u32 = 6;
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over128x: u32 = 7;
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over256x: u32 = 8;
pub const SAADC_SAMPLERATE_MODE_Pos: u32 = 12;
pub const SAADC_SAMPLERATE_MODE_Msk: u32 = 4096;
pub const SAADC_SAMPLERATE_MODE_Task: u32 = 0;
pub const SAADC_SAMPLERATE_MODE_Timers: u32 = 1;
pub const SAADC_SAMPLERATE_CC_Pos: u32 = 0;
pub const SAADC_SAMPLERATE_CC_Msk: u32 = 2047;
pub const SAADC_RESULT_PTR_PTR_Pos: u32 = 0;
pub const SAADC_RESULT_PTR_PTR_Msk: u32 = 4294967295;
pub const SAADC_RESULT_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const SAADC_RESULT_MAXCNT_MAXCNT_Msk: u32 = 32767;
pub const SAADC_RESULT_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const SAADC_RESULT_AMOUNT_AMOUNT_Msk: u32 = 32767;
pub const SPI_EVENTS_READY_EVENTS_READY_Pos: u32 = 0;
pub const SPI_EVENTS_READY_EVENTS_READY_Msk: u32 = 1;
pub const SPI_EVENTS_READY_EVENTS_READY_NotGenerated: u32 = 0;
pub const SPI_EVENTS_READY_EVENTS_READY_Generated: u32 = 1;
pub const SPI_INTENSET_READY_Pos: u32 = 2;
pub const SPI_INTENSET_READY_Msk: u32 = 4;
pub const SPI_INTENSET_READY_Disabled: u32 = 0;
pub const SPI_INTENSET_READY_Enabled: u32 = 1;
pub const SPI_INTENSET_READY_Set: u32 = 1;
pub const SPI_INTENCLR_READY_Pos: u32 = 2;
pub const SPI_INTENCLR_READY_Msk: u32 = 4;
pub const SPI_INTENCLR_READY_Disabled: u32 = 0;
pub const SPI_INTENCLR_READY_Enabled: u32 = 1;
pub const SPI_INTENCLR_READY_Clear: u32 = 1;
pub const SPI_ENABLE_ENABLE_Pos: u32 = 0;
pub const SPI_ENABLE_ENABLE_Msk: u32 = 15;
pub const SPI_ENABLE_ENABLE_Disabled: u32 = 0;
pub const SPI_ENABLE_ENABLE_Enabled: u32 = 1;
pub const SPI_PSEL_SCK_CONNECT_Pos: u32 = 31;
pub const SPI_PSEL_SCK_CONNECT_Msk: u32 = 2147483648;
pub const SPI_PSEL_SCK_CONNECT_Connected: u32 = 0;
pub const SPI_PSEL_SCK_CONNECT_Disconnected: u32 = 1;
pub const SPI_PSEL_SCK_PORT_Pos: u32 = 5;
pub const SPI_PSEL_SCK_PORT_Msk: u32 = 32;
pub const SPI_PSEL_SCK_PIN_Pos: u32 = 0;
pub const SPI_PSEL_SCK_PIN_Msk: u32 = 31;
pub const SPI_PSEL_MOSI_CONNECT_Pos: u32 = 31;
pub const SPI_PSEL_MOSI_CONNECT_Msk: u32 = 2147483648;
pub const SPI_PSEL_MOSI_CONNECT_Connected: u32 = 0;
pub const SPI_PSEL_MOSI_CONNECT_Disconnected: u32 = 1;
pub const SPI_PSEL_MOSI_PORT_Pos: u32 = 5;
pub const SPI_PSEL_MOSI_PORT_Msk: u32 = 32;
pub const SPI_PSEL_MOSI_PIN_Pos: u32 = 0;
pub const SPI_PSEL_MOSI_PIN_Msk: u32 = 31;
pub const SPI_PSEL_MISO_CONNECT_Pos: u32 = 31;
pub const SPI_PSEL_MISO_CONNECT_Msk: u32 = 2147483648;
pub const SPI_PSEL_MISO_CONNECT_Connected: u32 = 0;
pub const SPI_PSEL_MISO_CONNECT_Disconnected: u32 = 1;
pub const SPI_PSEL_MISO_PORT_Pos: u32 = 5;
pub const SPI_PSEL_MISO_PORT_Msk: u32 = 32;
pub const SPI_PSEL_MISO_PIN_Pos: u32 = 0;
pub const SPI_PSEL_MISO_PIN_Msk: u32 = 31;
pub const SPI_RXD_RXD_Pos: u32 = 0;
pub const SPI_RXD_RXD_Msk: u32 = 255;
pub const SPI_TXD_TXD_Pos: u32 = 0;
pub const SPI_TXD_TXD_Msk: u32 = 255;
pub const SPI_FREQUENCY_FREQUENCY_Pos: u32 = 0;
pub const SPI_FREQUENCY_FREQUENCY_Msk: u32 = 4294967295;
pub const SPI_FREQUENCY_FREQUENCY_K125: u32 = 33554432;
pub const SPI_FREQUENCY_FREQUENCY_K250: u32 = 67108864;
pub const SPI_FREQUENCY_FREQUENCY_K500: u32 = 134217728;
pub const SPI_FREQUENCY_FREQUENCY_M1: u32 = 268435456;
pub const SPI_FREQUENCY_FREQUENCY_M2: u32 = 536870912;
pub const SPI_FREQUENCY_FREQUENCY_M4: u32 = 1073741824;
pub const SPI_FREQUENCY_FREQUENCY_M8: u32 = 2147483648;
pub const SPI_CONFIG_CPOL_Pos: u32 = 2;
pub const SPI_CONFIG_CPOL_Msk: u32 = 4;
pub const SPI_CONFIG_CPOL_ActiveHigh: u32 = 0;
pub const SPI_CONFIG_CPOL_ActiveLow: u32 = 1;
pub const SPI_CONFIG_CPHA_Pos: u32 = 1;
pub const SPI_CONFIG_CPHA_Msk: u32 = 2;
pub const SPI_CONFIG_CPHA_Leading: u32 = 0;
pub const SPI_CONFIG_CPHA_Trailing: u32 = 1;
pub const SPI_CONFIG_ORDER_Pos: u32 = 0;
pub const SPI_CONFIG_ORDER_Msk: u32 = 1;
pub const SPI_CONFIG_ORDER_MsbFirst: u32 = 0;
pub const SPI_CONFIG_ORDER_LsbFirst: u32 = 1;
pub const SPIM_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const SPIM_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const SPIM_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const SPIM_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const SPIM_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const SPIM_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos: u32 = 0;
pub const SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Msk: u32 = 1;
pub const SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Trigger: u32 = 1;
pub const SPIM_TASKS_RESUME_TASKS_RESUME_Pos: u32 = 0;
pub const SPIM_TASKS_RESUME_TASKS_RESUME_Msk: u32 = 1;
pub const SPIM_TASKS_RESUME_TASKS_RESUME_Trigger: u32 = 1;
pub const SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos: u32 = 0;
pub const SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Msk: u32 = 1;
pub const SPIM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated: u32 = 0;
pub const SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Generated: u32 = 1;
pub const SPIM_EVENTS_ENDRX_EVENTS_ENDRX_Pos: u32 = 0;
pub const SPIM_EVENTS_ENDRX_EVENTS_ENDRX_Msk: u32 = 1;
pub const SPIM_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated: u32 = 0;
pub const SPIM_EVENTS_ENDRX_EVENTS_ENDRX_Generated: u32 = 1;
pub const SPIM_EVENTS_END_EVENTS_END_Pos: u32 = 0;
pub const SPIM_EVENTS_END_EVENTS_END_Msk: u32 = 1;
pub const SPIM_EVENTS_END_EVENTS_END_NotGenerated: u32 = 0;
pub const SPIM_EVENTS_END_EVENTS_END_Generated: u32 = 1;
pub const SPIM_EVENTS_ENDTX_EVENTS_ENDTX_Pos: u32 = 0;
pub const SPIM_EVENTS_ENDTX_EVENTS_ENDTX_Msk: u32 = 1;
pub const SPIM_EVENTS_ENDTX_EVENTS_ENDTX_NotGenerated: u32 = 0;
pub const SPIM_EVENTS_ENDTX_EVENTS_ENDTX_Generated: u32 = 1;
pub const SPIM_EVENTS_STARTED_EVENTS_STARTED_Pos: u32 = 0;
pub const SPIM_EVENTS_STARTED_EVENTS_STARTED_Msk: u32 = 1;
pub const SPIM_EVENTS_STARTED_EVENTS_STARTED_NotGenerated: u32 = 0;
pub const SPIM_EVENTS_STARTED_EVENTS_STARTED_Generated: u32 = 1;
pub const SPIM_SHORTS_END_START_Pos: u32 = 17;
pub const SPIM_SHORTS_END_START_Msk: u32 = 131072;
pub const SPIM_SHORTS_END_START_Disabled: u32 = 0;
pub const SPIM_SHORTS_END_START_Enabled: u32 = 1;
pub const SPIM_INTENSET_STARTED_Pos: u32 = 19;
pub const SPIM_INTENSET_STARTED_Msk: u32 = 524288;
pub const SPIM_INTENSET_STARTED_Disabled: u32 = 0;
pub const SPIM_INTENSET_STARTED_Enabled: u32 = 1;
pub const SPIM_INTENSET_STARTED_Set: u32 = 1;
pub const SPIM_INTENSET_ENDTX_Pos: u32 = 8;
pub const SPIM_INTENSET_ENDTX_Msk: u32 = 256;
pub const SPIM_INTENSET_ENDTX_Disabled: u32 = 0;
pub const SPIM_INTENSET_ENDTX_Enabled: u32 = 1;
pub const SPIM_INTENSET_ENDTX_Set: u32 = 1;
pub const SPIM_INTENSET_END_Pos: u32 = 6;
pub const SPIM_INTENSET_END_Msk: u32 = 64;
pub const SPIM_INTENSET_END_Disabled: u32 = 0;
pub const SPIM_INTENSET_END_Enabled: u32 = 1;
pub const SPIM_INTENSET_END_Set: u32 = 1;
pub const SPIM_INTENSET_ENDRX_Pos: u32 = 4;
pub const SPIM_INTENSET_ENDRX_Msk: u32 = 16;
pub const SPIM_INTENSET_ENDRX_Disabled: u32 = 0;
pub const SPIM_INTENSET_ENDRX_Enabled: u32 = 1;
pub const SPIM_INTENSET_ENDRX_Set: u32 = 1;
pub const SPIM_INTENSET_STOPPED_Pos: u32 = 1;
pub const SPIM_INTENSET_STOPPED_Msk: u32 = 2;
pub const SPIM_INTENSET_STOPPED_Disabled: u32 = 0;
pub const SPIM_INTENSET_STOPPED_Enabled: u32 = 1;
pub const SPIM_INTENSET_STOPPED_Set: u32 = 1;
pub const SPIM_INTENCLR_STARTED_Pos: u32 = 19;
pub const SPIM_INTENCLR_STARTED_Msk: u32 = 524288;
pub const SPIM_INTENCLR_STARTED_Disabled: u32 = 0;
pub const SPIM_INTENCLR_STARTED_Enabled: u32 = 1;
pub const SPIM_INTENCLR_STARTED_Clear: u32 = 1;
pub const SPIM_INTENCLR_ENDTX_Pos: u32 = 8;
pub const SPIM_INTENCLR_ENDTX_Msk: u32 = 256;
pub const SPIM_INTENCLR_ENDTX_Disabled: u32 = 0;
pub const SPIM_INTENCLR_ENDTX_Enabled: u32 = 1;
pub const SPIM_INTENCLR_ENDTX_Clear: u32 = 1;
pub const SPIM_INTENCLR_END_Pos: u32 = 6;
pub const SPIM_INTENCLR_END_Msk: u32 = 64;
pub const SPIM_INTENCLR_END_Disabled: u32 = 0;
pub const SPIM_INTENCLR_END_Enabled: u32 = 1;
pub const SPIM_INTENCLR_END_Clear: u32 = 1;
pub const SPIM_INTENCLR_ENDRX_Pos: u32 = 4;
pub const SPIM_INTENCLR_ENDRX_Msk: u32 = 16;
pub const SPIM_INTENCLR_ENDRX_Disabled: u32 = 0;
pub const SPIM_INTENCLR_ENDRX_Enabled: u32 = 1;
pub const SPIM_INTENCLR_ENDRX_Clear: u32 = 1;
pub const SPIM_INTENCLR_STOPPED_Pos: u32 = 1;
pub const SPIM_INTENCLR_STOPPED_Msk: u32 = 2;
pub const SPIM_INTENCLR_STOPPED_Disabled: u32 = 0;
pub const SPIM_INTENCLR_STOPPED_Enabled: u32 = 1;
pub const SPIM_INTENCLR_STOPPED_Clear: u32 = 1;
pub const SPIM_STALLSTAT_RX_Pos: u32 = 1;
pub const SPIM_STALLSTAT_RX_Msk: u32 = 2;
pub const SPIM_STALLSTAT_RX_NOSTALL: u32 = 0;
pub const SPIM_STALLSTAT_RX_STALL: u32 = 1;
pub const SPIM_STALLSTAT_TX_Pos: u32 = 0;
pub const SPIM_STALLSTAT_TX_Msk: u32 = 1;
pub const SPIM_STALLSTAT_TX_NOSTALL: u32 = 0;
pub const SPIM_STALLSTAT_TX_STALL: u32 = 1;
pub const SPIM_ENABLE_ENABLE_Pos: u32 = 0;
pub const SPIM_ENABLE_ENABLE_Msk: u32 = 15;
pub const SPIM_ENABLE_ENABLE_Disabled: u32 = 0;
pub const SPIM_ENABLE_ENABLE_Enabled: u32 = 7;
pub const SPIM_PSEL_SCK_CONNECT_Pos: u32 = 31;
pub const SPIM_PSEL_SCK_CONNECT_Msk: u32 = 2147483648;
pub const SPIM_PSEL_SCK_CONNECT_Connected: u32 = 0;
pub const SPIM_PSEL_SCK_CONNECT_Disconnected: u32 = 1;
pub const SPIM_PSEL_SCK_PORT_Pos: u32 = 5;
pub const SPIM_PSEL_SCK_PORT_Msk: u32 = 32;
pub const SPIM_PSEL_SCK_PIN_Pos: u32 = 0;
pub const SPIM_PSEL_SCK_PIN_Msk: u32 = 31;
pub const SPIM_PSEL_MOSI_CONNECT_Pos: u32 = 31;
pub const SPIM_PSEL_MOSI_CONNECT_Msk: u32 = 2147483648;
pub const SPIM_PSEL_MOSI_CONNECT_Connected: u32 = 0;
pub const SPIM_PSEL_MOSI_CONNECT_Disconnected: u32 = 1;
pub const SPIM_PSEL_MOSI_PORT_Pos: u32 = 5;
pub const SPIM_PSEL_MOSI_PORT_Msk: u32 = 32;
pub const SPIM_PSEL_MOSI_PIN_Pos: u32 = 0;
pub const SPIM_PSEL_MOSI_PIN_Msk: u32 = 31;
pub const SPIM_PSEL_MISO_CONNECT_Pos: u32 = 31;
pub const SPIM_PSEL_MISO_CONNECT_Msk: u32 = 2147483648;
pub const SPIM_PSEL_MISO_CONNECT_Connected: u32 = 0;
pub const SPIM_PSEL_MISO_CONNECT_Disconnected: u32 = 1;
pub const SPIM_PSEL_MISO_PORT_Pos: u32 = 5;
pub const SPIM_PSEL_MISO_PORT_Msk: u32 = 32;
pub const SPIM_PSEL_MISO_PIN_Pos: u32 = 0;
pub const SPIM_PSEL_MISO_PIN_Msk: u32 = 31;
pub const SPIM_PSEL_CSN_CONNECT_Pos: u32 = 31;
pub const SPIM_PSEL_CSN_CONNECT_Msk: u32 = 2147483648;
pub const SPIM_PSEL_CSN_CONNECT_Connected: u32 = 0;
pub const SPIM_PSEL_CSN_CONNECT_Disconnected: u32 = 1;
pub const SPIM_PSEL_CSN_PORT_Pos: u32 = 5;
pub const SPIM_PSEL_CSN_PORT_Msk: u32 = 32;
pub const SPIM_PSEL_CSN_PIN_Pos: u32 = 0;
pub const SPIM_PSEL_CSN_PIN_Msk: u32 = 31;
pub const SPIM_FREQUENCY_FREQUENCY_Pos: u32 = 0;
pub const SPIM_FREQUENCY_FREQUENCY_Msk: u32 = 4294967295;
pub const SPIM_FREQUENCY_FREQUENCY_K125: u32 = 33554432;
pub const SPIM_FREQUENCY_FREQUENCY_K250: u32 = 67108864;
pub const SPIM_FREQUENCY_FREQUENCY_K500: u32 = 134217728;
pub const SPIM_FREQUENCY_FREQUENCY_M16: u32 = 167772160;
pub const SPIM_FREQUENCY_FREQUENCY_M1: u32 = 268435456;
pub const SPIM_FREQUENCY_FREQUENCY_M32: u32 = 335544320;
pub const SPIM_FREQUENCY_FREQUENCY_M2: u32 = 536870912;
pub const SPIM_FREQUENCY_FREQUENCY_M4: u32 = 1073741824;
pub const SPIM_FREQUENCY_FREQUENCY_M8: u32 = 2147483648;
pub const SPIM_RXD_PTR_PTR_Pos: u32 = 0;
pub const SPIM_RXD_PTR_PTR_Msk: u32 = 4294967295;
pub const SPIM_RXD_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const SPIM_RXD_MAXCNT_MAXCNT_Msk: u32 = 65535;
pub const SPIM_RXD_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const SPIM_RXD_AMOUNT_AMOUNT_Msk: u32 = 65535;
pub const SPIM_RXD_LIST_LIST_Pos: u32 = 0;
pub const SPIM_RXD_LIST_LIST_Msk: u32 = 3;
pub const SPIM_RXD_LIST_LIST_Disabled: u32 = 0;
pub const SPIM_RXD_LIST_LIST_ArrayList: u32 = 1;
pub const SPIM_TXD_PTR_PTR_Pos: u32 = 0;
pub const SPIM_TXD_PTR_PTR_Msk: u32 = 4294967295;
pub const SPIM_TXD_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const SPIM_TXD_MAXCNT_MAXCNT_Msk: u32 = 65535;
pub const SPIM_TXD_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const SPIM_TXD_AMOUNT_AMOUNT_Msk: u32 = 65535;
pub const SPIM_TXD_LIST_LIST_Pos: u32 = 0;
pub const SPIM_TXD_LIST_LIST_Msk: u32 = 3;
pub const SPIM_TXD_LIST_LIST_Disabled: u32 = 0;
pub const SPIM_TXD_LIST_LIST_ArrayList: u32 = 1;
pub const SPIM_CONFIG_CPOL_Pos: u32 = 2;
pub const SPIM_CONFIG_CPOL_Msk: u32 = 4;
pub const SPIM_CONFIG_CPOL_ActiveHigh: u32 = 0;
pub const SPIM_CONFIG_CPOL_ActiveLow: u32 = 1;
pub const SPIM_CONFIG_CPHA_Pos: u32 = 1;
pub const SPIM_CONFIG_CPHA_Msk: u32 = 2;
pub const SPIM_CONFIG_CPHA_Leading: u32 = 0;
pub const SPIM_CONFIG_CPHA_Trailing: u32 = 1;
pub const SPIM_CONFIG_ORDER_Pos: u32 = 0;
pub const SPIM_CONFIG_ORDER_Msk: u32 = 1;
pub const SPIM_CONFIG_ORDER_MsbFirst: u32 = 0;
pub const SPIM_CONFIG_ORDER_LsbFirst: u32 = 1;
pub const SPIM_IFTIMING_RXDELAY_RXDELAY_Pos: u32 = 0;
pub const SPIM_IFTIMING_RXDELAY_RXDELAY_Msk: u32 = 7;
pub const SPIM_IFTIMING_CSNDUR_CSNDUR_Pos: u32 = 0;
pub const SPIM_IFTIMING_CSNDUR_CSNDUR_Msk: u32 = 255;
pub const SPIM_CSNPOL_CSNPOL_Pos: u32 = 0;
pub const SPIM_CSNPOL_CSNPOL_Msk: u32 = 1;
pub const SPIM_CSNPOL_CSNPOL_LOW: u32 = 0;
pub const SPIM_CSNPOL_CSNPOL_HIGH: u32 = 1;
pub const SPIM_PSELDCX_CONNECT_Pos: u32 = 31;
pub const SPIM_PSELDCX_CONNECT_Msk: u32 = 2147483648;
pub const SPIM_PSELDCX_CONNECT_Connected: u32 = 0;
pub const SPIM_PSELDCX_CONNECT_Disconnected: u32 = 1;
pub const SPIM_PSELDCX_PORT_Pos: u32 = 5;
pub const SPIM_PSELDCX_PORT_Msk: u32 = 32;
pub const SPIM_PSELDCX_PIN_Pos: u32 = 0;
pub const SPIM_PSELDCX_PIN_Msk: u32 = 31;
pub const SPIM_DCXCNT_DCXCNT_Pos: u32 = 0;
pub const SPIM_DCXCNT_DCXCNT_Msk: u32 = 15;
pub const SPIM_ORC_ORC_Pos: u32 = 0;
pub const SPIM_ORC_ORC_Msk: u32 = 255;
pub const SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Pos: u32 = 0;
pub const SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Msk: u32 = 1;
pub const SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Trigger: u32 = 1;
pub const SPIS_TASKS_RELEASE_TASKS_RELEASE_Pos: u32 = 0;
pub const SPIS_TASKS_RELEASE_TASKS_RELEASE_Msk: u32 = 1;
pub const SPIS_TASKS_RELEASE_TASKS_RELEASE_Trigger: u32 = 1;
pub const SPIS_EVENTS_END_EVENTS_END_Pos: u32 = 0;
pub const SPIS_EVENTS_END_EVENTS_END_Msk: u32 = 1;
pub const SPIS_EVENTS_END_EVENTS_END_NotGenerated: u32 = 0;
pub const SPIS_EVENTS_END_EVENTS_END_Generated: u32 = 1;
pub const SPIS_EVENTS_ENDRX_EVENTS_ENDRX_Pos: u32 = 0;
pub const SPIS_EVENTS_ENDRX_EVENTS_ENDRX_Msk: u32 = 1;
pub const SPIS_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated: u32 = 0;
pub const SPIS_EVENTS_ENDRX_EVENTS_ENDRX_Generated: u32 = 1;
pub const SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Pos: u32 = 0;
pub const SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Msk: u32 = 1;
pub const SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_NotGenerated: u32 = 0;
pub const SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Generated: u32 = 1;
pub const SPIS_SHORTS_END_ACQUIRE_Pos: u32 = 2;
pub const SPIS_SHORTS_END_ACQUIRE_Msk: u32 = 4;
pub const SPIS_SHORTS_END_ACQUIRE_Disabled: u32 = 0;
pub const SPIS_SHORTS_END_ACQUIRE_Enabled: u32 = 1;
pub const SPIS_INTENSET_ACQUIRED_Pos: u32 = 10;
pub const SPIS_INTENSET_ACQUIRED_Msk: u32 = 1024;
pub const SPIS_INTENSET_ACQUIRED_Disabled: u32 = 0;
pub const SPIS_INTENSET_ACQUIRED_Enabled: u32 = 1;
pub const SPIS_INTENSET_ACQUIRED_Set: u32 = 1;
pub const SPIS_INTENSET_ENDRX_Pos: u32 = 4;
pub const SPIS_INTENSET_ENDRX_Msk: u32 = 16;
pub const SPIS_INTENSET_ENDRX_Disabled: u32 = 0;
pub const SPIS_INTENSET_ENDRX_Enabled: u32 = 1;
pub const SPIS_INTENSET_ENDRX_Set: u32 = 1;
pub const SPIS_INTENSET_END_Pos: u32 = 1;
pub const SPIS_INTENSET_END_Msk: u32 = 2;
pub const SPIS_INTENSET_END_Disabled: u32 = 0;
pub const SPIS_INTENSET_END_Enabled: u32 = 1;
pub const SPIS_INTENSET_END_Set: u32 = 1;
pub const SPIS_INTENCLR_ACQUIRED_Pos: u32 = 10;
pub const SPIS_INTENCLR_ACQUIRED_Msk: u32 = 1024;
pub const SPIS_INTENCLR_ACQUIRED_Disabled: u32 = 0;
pub const SPIS_INTENCLR_ACQUIRED_Enabled: u32 = 1;
pub const SPIS_INTENCLR_ACQUIRED_Clear: u32 = 1;
pub const SPIS_INTENCLR_ENDRX_Pos: u32 = 4;
pub const SPIS_INTENCLR_ENDRX_Msk: u32 = 16;
pub const SPIS_INTENCLR_ENDRX_Disabled: u32 = 0;
pub const SPIS_INTENCLR_ENDRX_Enabled: u32 = 1;
pub const SPIS_INTENCLR_ENDRX_Clear: u32 = 1;
pub const SPIS_INTENCLR_END_Pos: u32 = 1;
pub const SPIS_INTENCLR_END_Msk: u32 = 2;
pub const SPIS_INTENCLR_END_Disabled: u32 = 0;
pub const SPIS_INTENCLR_END_Enabled: u32 = 1;
pub const SPIS_INTENCLR_END_Clear: u32 = 1;
pub const SPIS_SEMSTAT_SEMSTAT_Pos: u32 = 0;
pub const SPIS_SEMSTAT_SEMSTAT_Msk: u32 = 3;
pub const SPIS_SEMSTAT_SEMSTAT_Free: u32 = 0;
pub const SPIS_SEMSTAT_SEMSTAT_CPU: u32 = 1;
pub const SPIS_SEMSTAT_SEMSTAT_SPIS: u32 = 2;
pub const SPIS_SEMSTAT_SEMSTAT_CPUPending: u32 = 3;
pub const SPIS_STATUS_OVERFLOW_Pos: u32 = 1;
pub const SPIS_STATUS_OVERFLOW_Msk: u32 = 2;
pub const SPIS_STATUS_OVERFLOW_NotPresent: u32 = 0;
pub const SPIS_STATUS_OVERFLOW_Present: u32 = 1;
pub const SPIS_STATUS_OVERFLOW_Clear: u32 = 1;
pub const SPIS_STATUS_OVERREAD_Pos: u32 = 0;
pub const SPIS_STATUS_OVERREAD_Msk: u32 = 1;
pub const SPIS_STATUS_OVERREAD_NotPresent: u32 = 0;
pub const SPIS_STATUS_OVERREAD_Present: u32 = 1;
pub const SPIS_STATUS_OVERREAD_Clear: u32 = 1;
pub const SPIS_ENABLE_ENABLE_Pos: u32 = 0;
pub const SPIS_ENABLE_ENABLE_Msk: u32 = 15;
pub const SPIS_ENABLE_ENABLE_Disabled: u32 = 0;
pub const SPIS_ENABLE_ENABLE_Enabled: u32 = 2;
pub const SPIS_PSEL_SCK_CONNECT_Pos: u32 = 31;
pub const SPIS_PSEL_SCK_CONNECT_Msk: u32 = 2147483648;
pub const SPIS_PSEL_SCK_CONNECT_Connected: u32 = 0;
pub const SPIS_PSEL_SCK_CONNECT_Disconnected: u32 = 1;
pub const SPIS_PSEL_SCK_PORT_Pos: u32 = 5;
pub const SPIS_PSEL_SCK_PORT_Msk: u32 = 32;
pub const SPIS_PSEL_SCK_PIN_Pos: u32 = 0;
pub const SPIS_PSEL_SCK_PIN_Msk: u32 = 31;
pub const SPIS_PSEL_MISO_CONNECT_Pos: u32 = 31;
pub const SPIS_PSEL_MISO_CONNECT_Msk: u32 = 2147483648;
pub const SPIS_PSEL_MISO_CONNECT_Connected: u32 = 0;
pub const SPIS_PSEL_MISO_CONNECT_Disconnected: u32 = 1;
pub const SPIS_PSEL_MISO_PORT_Pos: u32 = 5;
pub const SPIS_PSEL_MISO_PORT_Msk: u32 = 32;
pub const SPIS_PSEL_MISO_PIN_Pos: u32 = 0;
pub const SPIS_PSEL_MISO_PIN_Msk: u32 = 31;
pub const SPIS_PSEL_MOSI_CONNECT_Pos: u32 = 31;
pub const SPIS_PSEL_MOSI_CONNECT_Msk: u32 = 2147483648;
pub const SPIS_PSEL_MOSI_CONNECT_Connected: u32 = 0;
pub const SPIS_PSEL_MOSI_CONNECT_Disconnected: u32 = 1;
pub const SPIS_PSEL_MOSI_PORT_Pos: u32 = 5;
pub const SPIS_PSEL_MOSI_PORT_Msk: u32 = 32;
pub const SPIS_PSEL_MOSI_PIN_Pos: u32 = 0;
pub const SPIS_PSEL_MOSI_PIN_Msk: u32 = 31;
pub const SPIS_PSEL_CSN_CONNECT_Pos: u32 = 31;
pub const SPIS_PSEL_CSN_CONNECT_Msk: u32 = 2147483648;
pub const SPIS_PSEL_CSN_CONNECT_Connected: u32 = 0;
pub const SPIS_PSEL_CSN_CONNECT_Disconnected: u32 = 1;
pub const SPIS_PSEL_CSN_PORT_Pos: u32 = 5;
pub const SPIS_PSEL_CSN_PORT_Msk: u32 = 32;
pub const SPIS_PSEL_CSN_PIN_Pos: u32 = 0;
pub const SPIS_PSEL_CSN_PIN_Msk: u32 = 31;
pub const SPIS_RXD_PTR_PTR_Pos: u32 = 0;
pub const SPIS_RXD_PTR_PTR_Msk: u32 = 4294967295;
pub const SPIS_RXD_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const SPIS_RXD_MAXCNT_MAXCNT_Msk: u32 = 65535;
pub const SPIS_RXD_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const SPIS_RXD_AMOUNT_AMOUNT_Msk: u32 = 65535;
pub const SPIS_RXD_LIST_LIST_Pos: u32 = 0;
pub const SPIS_RXD_LIST_LIST_Msk: u32 = 3;
pub const SPIS_RXD_LIST_LIST_Disabled: u32 = 0;
pub const SPIS_RXD_LIST_LIST_ArrayList: u32 = 1;
pub const SPIS_TXD_PTR_PTR_Pos: u32 = 0;
pub const SPIS_TXD_PTR_PTR_Msk: u32 = 4294967295;
pub const SPIS_TXD_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const SPIS_TXD_MAXCNT_MAXCNT_Msk: u32 = 65535;
pub const SPIS_TXD_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const SPIS_TXD_AMOUNT_AMOUNT_Msk: u32 = 65535;
pub const SPIS_TXD_LIST_LIST_Pos: u32 = 0;
pub const SPIS_TXD_LIST_LIST_Msk: u32 = 3;
pub const SPIS_TXD_LIST_LIST_Disabled: u32 = 0;
pub const SPIS_TXD_LIST_LIST_ArrayList: u32 = 1;
pub const SPIS_CONFIG_CPOL_Pos: u32 = 2;
pub const SPIS_CONFIG_CPOL_Msk: u32 = 4;
pub const SPIS_CONFIG_CPOL_ActiveHigh: u32 = 0;
pub const SPIS_CONFIG_CPOL_ActiveLow: u32 = 1;
pub const SPIS_CONFIG_CPHA_Pos: u32 = 1;
pub const SPIS_CONFIG_CPHA_Msk: u32 = 2;
pub const SPIS_CONFIG_CPHA_Leading: u32 = 0;
pub const SPIS_CONFIG_CPHA_Trailing: u32 = 1;
pub const SPIS_CONFIG_ORDER_Pos: u32 = 0;
pub const SPIS_CONFIG_ORDER_Msk: u32 = 1;
pub const SPIS_CONFIG_ORDER_MsbFirst: u32 = 0;
pub const SPIS_CONFIG_ORDER_LsbFirst: u32 = 1;
pub const SPIS_DEF_DEF_Pos: u32 = 0;
pub const SPIS_DEF_DEF_Msk: u32 = 255;
pub const SPIS_ORC_ORC_Pos: u32 = 0;
pub const SPIS_ORC_ORC_Msk: u32 = 255;
pub const TEMP_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const TEMP_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const TEMP_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const TEMP_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const TEMP_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const TEMP_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Pos: u32 = 0;
pub const TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Msk: u32 = 1;
pub const TEMP_EVENTS_DATARDY_EVENTS_DATARDY_NotGenerated: u32 = 0;
pub const TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Generated: u32 = 1;
pub const TEMP_INTENSET_DATARDY_Pos: u32 = 0;
pub const TEMP_INTENSET_DATARDY_Msk: u32 = 1;
pub const TEMP_INTENSET_DATARDY_Disabled: u32 = 0;
pub const TEMP_INTENSET_DATARDY_Enabled: u32 = 1;
pub const TEMP_INTENSET_DATARDY_Set: u32 = 1;
pub const TEMP_INTENCLR_DATARDY_Pos: u32 = 0;
pub const TEMP_INTENCLR_DATARDY_Msk: u32 = 1;
pub const TEMP_INTENCLR_DATARDY_Disabled: u32 = 0;
pub const TEMP_INTENCLR_DATARDY_Enabled: u32 = 1;
pub const TEMP_INTENCLR_DATARDY_Clear: u32 = 1;
pub const TEMP_TEMP_TEMP_Pos: u32 = 0;
pub const TEMP_TEMP_TEMP_Msk: u32 = 4294967295;
pub const TEMP_A0_A0_Pos: u32 = 0;
pub const TEMP_A0_A0_Msk: u32 = 4095;
pub const TEMP_A1_A1_Pos: u32 = 0;
pub const TEMP_A1_A1_Msk: u32 = 4095;
pub const TEMP_A2_A2_Pos: u32 = 0;
pub const TEMP_A2_A2_Msk: u32 = 4095;
pub const TEMP_A3_A3_Pos: u32 = 0;
pub const TEMP_A3_A3_Msk: u32 = 4095;
pub const TEMP_A4_A4_Pos: u32 = 0;
pub const TEMP_A4_A4_Msk: u32 = 4095;
pub const TEMP_A5_A5_Pos: u32 = 0;
pub const TEMP_A5_A5_Msk: u32 = 4095;
pub const TEMP_B0_B0_Pos: u32 = 0;
pub const TEMP_B0_B0_Msk: u32 = 16383;
pub const TEMP_B1_B1_Pos: u32 = 0;
pub const TEMP_B1_B1_Msk: u32 = 16383;
pub const TEMP_B2_B2_Pos: u32 = 0;
pub const TEMP_B2_B2_Msk: u32 = 16383;
pub const TEMP_B3_B3_Pos: u32 = 0;
pub const TEMP_B3_B3_Msk: u32 = 16383;
pub const TEMP_B4_B4_Pos: u32 = 0;
pub const TEMP_B4_B4_Msk: u32 = 16383;
pub const TEMP_B5_B5_Pos: u32 = 0;
pub const TEMP_B5_B5_Msk: u32 = 16383;
pub const TEMP_T0_T0_Pos: u32 = 0;
pub const TEMP_T0_T0_Msk: u32 = 255;
pub const TEMP_T1_T1_Pos: u32 = 0;
pub const TEMP_T1_T1_Msk: u32 = 255;
pub const TEMP_T2_T2_Pos: u32 = 0;
pub const TEMP_T2_T2_Msk: u32 = 255;
pub const TEMP_T3_T3_Pos: u32 = 0;
pub const TEMP_T3_T3_Msk: u32 = 255;
pub const TEMP_T4_T4_Pos: u32 = 0;
pub const TEMP_T4_T4_Msk: u32 = 255;
pub const TIMER_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const TIMER_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const TIMER_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const TIMER_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const TIMER_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const TIMER_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const TIMER_TASKS_COUNT_TASKS_COUNT_Pos: u32 = 0;
pub const TIMER_TASKS_COUNT_TASKS_COUNT_Msk: u32 = 1;
pub const TIMER_TASKS_COUNT_TASKS_COUNT_Trigger: u32 = 1;
pub const TIMER_TASKS_CLEAR_TASKS_CLEAR_Pos: u32 = 0;
pub const TIMER_TASKS_CLEAR_TASKS_CLEAR_Msk: u32 = 1;
pub const TIMER_TASKS_CLEAR_TASKS_CLEAR_Trigger: u32 = 1;
pub const TIMER_TASKS_SHUTDOWN_TASKS_SHUTDOWN_Pos: u32 = 0;
pub const TIMER_TASKS_SHUTDOWN_TASKS_SHUTDOWN_Msk: u32 = 1;
pub const TIMER_TASKS_SHUTDOWN_TASKS_SHUTDOWN_Trigger: u32 = 1;
pub const TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Pos: u32 = 0;
pub const TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Msk: u32 = 1;
pub const TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Trigger: u32 = 1;
pub const TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Pos: u32 = 0;
pub const TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Msk: u32 = 1;
pub const TIMER_EVENTS_COMPARE_EVENTS_COMPARE_NotGenerated: u32 = 0;
pub const TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Generated: u32 = 1;
pub const TIMER_SHORTS_COMPARE5_STOP_Pos: u32 = 13;
pub const TIMER_SHORTS_COMPARE5_STOP_Msk: u32 = 8192;
pub const TIMER_SHORTS_COMPARE5_STOP_Disabled: u32 = 0;
pub const TIMER_SHORTS_COMPARE5_STOP_Enabled: u32 = 1;
pub const TIMER_SHORTS_COMPARE4_STOP_Pos: u32 = 12;
pub const TIMER_SHORTS_COMPARE4_STOP_Msk: u32 = 4096;
pub const TIMER_SHORTS_COMPARE4_STOP_Disabled: u32 = 0;
pub const TIMER_SHORTS_COMPARE4_STOP_Enabled: u32 = 1;
pub const TIMER_SHORTS_COMPARE3_STOP_Pos: u32 = 11;
pub const TIMER_SHORTS_COMPARE3_STOP_Msk: u32 = 2048;
pub const TIMER_SHORTS_COMPARE3_STOP_Disabled: u32 = 0;
pub const TIMER_SHORTS_COMPARE3_STOP_Enabled: u32 = 1;
pub const TIMER_SHORTS_COMPARE2_STOP_Pos: u32 = 10;
pub const TIMER_SHORTS_COMPARE2_STOP_Msk: u32 = 1024;
pub const TIMER_SHORTS_COMPARE2_STOP_Disabled: u32 = 0;
pub const TIMER_SHORTS_COMPARE2_STOP_Enabled: u32 = 1;
pub const TIMER_SHORTS_COMPARE1_STOP_Pos: u32 = 9;
pub const TIMER_SHORTS_COMPARE1_STOP_Msk: u32 = 512;
pub const TIMER_SHORTS_COMPARE1_STOP_Disabled: u32 = 0;
pub const TIMER_SHORTS_COMPARE1_STOP_Enabled: u32 = 1;
pub const TIMER_SHORTS_COMPARE0_STOP_Pos: u32 = 8;
pub const TIMER_SHORTS_COMPARE0_STOP_Msk: u32 = 256;
pub const TIMER_SHORTS_COMPARE0_STOP_Disabled: u32 = 0;
pub const TIMER_SHORTS_COMPARE0_STOP_Enabled: u32 = 1;
pub const TIMER_SHORTS_COMPARE5_CLEAR_Pos: u32 = 5;
pub const TIMER_SHORTS_COMPARE5_CLEAR_Msk: u32 = 32;
pub const TIMER_SHORTS_COMPARE5_CLEAR_Disabled: u32 = 0;
pub const TIMER_SHORTS_COMPARE5_CLEAR_Enabled: u32 = 1;
pub const TIMER_SHORTS_COMPARE4_CLEAR_Pos: u32 = 4;
pub const TIMER_SHORTS_COMPARE4_CLEAR_Msk: u32 = 16;
pub const TIMER_SHORTS_COMPARE4_CLEAR_Disabled: u32 = 0;
pub const TIMER_SHORTS_COMPARE4_CLEAR_Enabled: u32 = 1;
pub const TIMER_SHORTS_COMPARE3_CLEAR_Pos: u32 = 3;
pub const TIMER_SHORTS_COMPARE3_CLEAR_Msk: u32 = 8;
pub const TIMER_SHORTS_COMPARE3_CLEAR_Disabled: u32 = 0;
pub const TIMER_SHORTS_COMPARE3_CLEAR_Enabled: u32 = 1;
pub const TIMER_SHORTS_COMPARE2_CLEAR_Pos: u32 = 2;
pub const TIMER_SHORTS_COMPARE2_CLEAR_Msk: u32 = 4;
pub const TIMER_SHORTS_COMPARE2_CLEAR_Disabled: u32 = 0;
pub const TIMER_SHORTS_COMPARE2_CLEAR_Enabled: u32 = 1;
pub const TIMER_SHORTS_COMPARE1_CLEAR_Pos: u32 = 1;
pub const TIMER_SHORTS_COMPARE1_CLEAR_Msk: u32 = 2;
pub const TIMER_SHORTS_COMPARE1_CLEAR_Disabled: u32 = 0;
pub const TIMER_SHORTS_COMPARE1_CLEAR_Enabled: u32 = 1;
pub const TIMER_SHORTS_COMPARE0_CLEAR_Pos: u32 = 0;
pub const TIMER_SHORTS_COMPARE0_CLEAR_Msk: u32 = 1;
pub const TIMER_SHORTS_COMPARE0_CLEAR_Disabled: u32 = 0;
pub const TIMER_SHORTS_COMPARE0_CLEAR_Enabled: u32 = 1;
pub const TIMER_INTENSET_COMPARE5_Pos: u32 = 21;
pub const TIMER_INTENSET_COMPARE5_Msk: u32 = 2097152;
pub const TIMER_INTENSET_COMPARE5_Disabled: u32 = 0;
pub const TIMER_INTENSET_COMPARE5_Enabled: u32 = 1;
pub const TIMER_INTENSET_COMPARE5_Set: u32 = 1;
pub const TIMER_INTENSET_COMPARE4_Pos: u32 = 20;
pub const TIMER_INTENSET_COMPARE4_Msk: u32 = 1048576;
pub const TIMER_INTENSET_COMPARE4_Disabled: u32 = 0;
pub const TIMER_INTENSET_COMPARE4_Enabled: u32 = 1;
pub const TIMER_INTENSET_COMPARE4_Set: u32 = 1;
pub const TIMER_INTENSET_COMPARE3_Pos: u32 = 19;
pub const TIMER_INTENSET_COMPARE3_Msk: u32 = 524288;
pub const TIMER_INTENSET_COMPARE3_Disabled: u32 = 0;
pub const TIMER_INTENSET_COMPARE3_Enabled: u32 = 1;
pub const TIMER_INTENSET_COMPARE3_Set: u32 = 1;
pub const TIMER_INTENSET_COMPARE2_Pos: u32 = 18;
pub const TIMER_INTENSET_COMPARE2_Msk: u32 = 262144;
pub const TIMER_INTENSET_COMPARE2_Disabled: u32 = 0;
pub const TIMER_INTENSET_COMPARE2_Enabled: u32 = 1;
pub const TIMER_INTENSET_COMPARE2_Set: u32 = 1;
pub const TIMER_INTENSET_COMPARE1_Pos: u32 = 17;
pub const TIMER_INTENSET_COMPARE1_Msk: u32 = 131072;
pub const TIMER_INTENSET_COMPARE1_Disabled: u32 = 0;
pub const TIMER_INTENSET_COMPARE1_Enabled: u32 = 1;
pub const TIMER_INTENSET_COMPARE1_Set: u32 = 1;
pub const TIMER_INTENSET_COMPARE0_Pos: u32 = 16;
pub const TIMER_INTENSET_COMPARE0_Msk: u32 = 65536;
pub const TIMER_INTENSET_COMPARE0_Disabled: u32 = 0;
pub const TIMER_INTENSET_COMPARE0_Enabled: u32 = 1;
pub const TIMER_INTENSET_COMPARE0_Set: u32 = 1;
pub const TIMER_INTENCLR_COMPARE5_Pos: u32 = 21;
pub const TIMER_INTENCLR_COMPARE5_Msk: u32 = 2097152;
pub const TIMER_INTENCLR_COMPARE5_Disabled: u32 = 0;
pub const TIMER_INTENCLR_COMPARE5_Enabled: u32 = 1;
pub const TIMER_INTENCLR_COMPARE5_Clear: u32 = 1;
pub const TIMER_INTENCLR_COMPARE4_Pos: u32 = 20;
pub const TIMER_INTENCLR_COMPARE4_Msk: u32 = 1048576;
pub const TIMER_INTENCLR_COMPARE4_Disabled: u32 = 0;
pub const TIMER_INTENCLR_COMPARE4_Enabled: u32 = 1;
pub const TIMER_INTENCLR_COMPARE4_Clear: u32 = 1;
pub const TIMER_INTENCLR_COMPARE3_Pos: u32 = 19;
pub const TIMER_INTENCLR_COMPARE3_Msk: u32 = 524288;
pub const TIMER_INTENCLR_COMPARE3_Disabled: u32 = 0;
pub const TIMER_INTENCLR_COMPARE3_Enabled: u32 = 1;
pub const TIMER_INTENCLR_COMPARE3_Clear: u32 = 1;
pub const TIMER_INTENCLR_COMPARE2_Pos: u32 = 18;
pub const TIMER_INTENCLR_COMPARE2_Msk: u32 = 262144;
pub const TIMER_INTENCLR_COMPARE2_Disabled: u32 = 0;
pub const TIMER_INTENCLR_COMPARE2_Enabled: u32 = 1;
pub const TIMER_INTENCLR_COMPARE2_Clear: u32 = 1;
pub const TIMER_INTENCLR_COMPARE1_Pos: u32 = 17;
pub const TIMER_INTENCLR_COMPARE1_Msk: u32 = 131072;
pub const TIMER_INTENCLR_COMPARE1_Disabled: u32 = 0;
pub const TIMER_INTENCLR_COMPARE1_Enabled: u32 = 1;
pub const TIMER_INTENCLR_COMPARE1_Clear: u32 = 1;
pub const TIMER_INTENCLR_COMPARE0_Pos: u32 = 16;
pub const TIMER_INTENCLR_COMPARE0_Msk: u32 = 65536;
pub const TIMER_INTENCLR_COMPARE0_Disabled: u32 = 0;
pub const TIMER_INTENCLR_COMPARE0_Enabled: u32 = 1;
pub const TIMER_INTENCLR_COMPARE0_Clear: u32 = 1;
pub const TIMER_MODE_MODE_Pos: u32 = 0;
pub const TIMER_MODE_MODE_Msk: u32 = 3;
pub const TIMER_MODE_MODE_Timer: u32 = 0;
pub const TIMER_MODE_MODE_Counter: u32 = 1;
pub const TIMER_MODE_MODE_LowPowerCounter: u32 = 2;
pub const TIMER_BITMODE_BITMODE_Pos: u32 = 0;
pub const TIMER_BITMODE_BITMODE_Msk: u32 = 3;
pub const TIMER_BITMODE_BITMODE_16Bit: u32 = 0;
pub const TIMER_BITMODE_BITMODE_08Bit: u32 = 1;
pub const TIMER_BITMODE_BITMODE_24Bit: u32 = 2;
pub const TIMER_BITMODE_BITMODE_32Bit: u32 = 3;
pub const TIMER_PRESCALER_PRESCALER_Pos: u32 = 0;
pub const TIMER_PRESCALER_PRESCALER_Msk: u32 = 15;
pub const TIMER_CC_CC_Pos: u32 = 0;
pub const TIMER_CC_CC_Msk: u32 = 4294967295;
pub const TWI_TASKS_STARTRX_TASKS_STARTRX_Pos: u32 = 0;
pub const TWI_TASKS_STARTRX_TASKS_STARTRX_Msk: u32 = 1;
pub const TWI_TASKS_STARTRX_TASKS_STARTRX_Trigger: u32 = 1;
pub const TWI_TASKS_STARTTX_TASKS_STARTTX_Pos: u32 = 0;
pub const TWI_TASKS_STARTTX_TASKS_STARTTX_Msk: u32 = 1;
pub const TWI_TASKS_STARTTX_TASKS_STARTTX_Trigger: u32 = 1;
pub const TWI_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const TWI_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const TWI_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const TWI_TASKS_SUSPEND_TASKS_SUSPEND_Pos: u32 = 0;
pub const TWI_TASKS_SUSPEND_TASKS_SUSPEND_Msk: u32 = 1;
pub const TWI_TASKS_SUSPEND_TASKS_SUSPEND_Trigger: u32 = 1;
pub const TWI_TASKS_RESUME_TASKS_RESUME_Pos: u32 = 0;
pub const TWI_TASKS_RESUME_TASKS_RESUME_Msk: u32 = 1;
pub const TWI_TASKS_RESUME_TASKS_RESUME_Trigger: u32 = 1;
pub const TWI_EVENTS_STOPPED_EVENTS_STOPPED_Pos: u32 = 0;
pub const TWI_EVENTS_STOPPED_EVENTS_STOPPED_Msk: u32 = 1;
pub const TWI_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated: u32 = 0;
pub const TWI_EVENTS_STOPPED_EVENTS_STOPPED_Generated: u32 = 1;
pub const TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_Pos: u32 = 0;
pub const TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_Msk: u32 = 1;
pub const TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_NotGenerated: u32 = 0;
pub const TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_Generated: u32 = 1;
pub const TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_Pos: u32 = 0;
pub const TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_Msk: u32 = 1;
pub const TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_NotGenerated: u32 = 0;
pub const TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_Generated: u32 = 1;
pub const TWI_EVENTS_ERROR_EVENTS_ERROR_Pos: u32 = 0;
pub const TWI_EVENTS_ERROR_EVENTS_ERROR_Msk: u32 = 1;
pub const TWI_EVENTS_ERROR_EVENTS_ERROR_NotGenerated: u32 = 0;
pub const TWI_EVENTS_ERROR_EVENTS_ERROR_Generated: u32 = 1;
pub const TWI_EVENTS_BB_EVENTS_BB_Pos: u32 = 0;
pub const TWI_EVENTS_BB_EVENTS_BB_Msk: u32 = 1;
pub const TWI_EVENTS_BB_EVENTS_BB_NotGenerated: u32 = 0;
pub const TWI_EVENTS_BB_EVENTS_BB_Generated: u32 = 1;
pub const TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos: u32 = 0;
pub const TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Msk: u32 = 1;
pub const TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_NotGenerated: u32 = 0;
pub const TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Generated: u32 = 1;
pub const TWI_SHORTS_BB_STOP_Pos: u32 = 1;
pub const TWI_SHORTS_BB_STOP_Msk: u32 = 2;
pub const TWI_SHORTS_BB_STOP_Disabled: u32 = 0;
pub const TWI_SHORTS_BB_STOP_Enabled: u32 = 1;
pub const TWI_SHORTS_BB_SUSPEND_Pos: u32 = 0;
pub const TWI_SHORTS_BB_SUSPEND_Msk: u32 = 1;
pub const TWI_SHORTS_BB_SUSPEND_Disabled: u32 = 0;
pub const TWI_SHORTS_BB_SUSPEND_Enabled: u32 = 1;
pub const TWI_INTENSET_SUSPENDED_Pos: u32 = 18;
pub const TWI_INTENSET_SUSPENDED_Msk: u32 = 262144;
pub const TWI_INTENSET_SUSPENDED_Disabled: u32 = 0;
pub const TWI_INTENSET_SUSPENDED_Enabled: u32 = 1;
pub const TWI_INTENSET_SUSPENDED_Set: u32 = 1;
pub const TWI_INTENSET_BB_Pos: u32 = 14;
pub const TWI_INTENSET_BB_Msk: u32 = 16384;
pub const TWI_INTENSET_BB_Disabled: u32 = 0;
pub const TWI_INTENSET_BB_Enabled: u32 = 1;
pub const TWI_INTENSET_BB_Set: u32 = 1;
pub const TWI_INTENSET_ERROR_Pos: u32 = 9;
pub const TWI_INTENSET_ERROR_Msk: u32 = 512;
pub const TWI_INTENSET_ERROR_Disabled: u32 = 0;
pub const TWI_INTENSET_ERROR_Enabled: u32 = 1;
pub const TWI_INTENSET_ERROR_Set: u32 = 1;
pub const TWI_INTENSET_TXDSENT_Pos: u32 = 7;
pub const TWI_INTENSET_TXDSENT_Msk: u32 = 128;
pub const TWI_INTENSET_TXDSENT_Disabled: u32 = 0;
pub const TWI_INTENSET_TXDSENT_Enabled: u32 = 1;
pub const TWI_INTENSET_TXDSENT_Set: u32 = 1;
pub const TWI_INTENSET_RXDREADY_Pos: u32 = 2;
pub const TWI_INTENSET_RXDREADY_Msk: u32 = 4;
pub const TWI_INTENSET_RXDREADY_Disabled: u32 = 0;
pub const TWI_INTENSET_RXDREADY_Enabled: u32 = 1;
pub const TWI_INTENSET_RXDREADY_Set: u32 = 1;
pub const TWI_INTENSET_STOPPED_Pos: u32 = 1;
pub const TWI_INTENSET_STOPPED_Msk: u32 = 2;
pub const TWI_INTENSET_STOPPED_Disabled: u32 = 0;
pub const TWI_INTENSET_STOPPED_Enabled: u32 = 1;
pub const TWI_INTENSET_STOPPED_Set: u32 = 1;
pub const TWI_INTENCLR_SUSPENDED_Pos: u32 = 18;
pub const TWI_INTENCLR_SUSPENDED_Msk: u32 = 262144;
pub const TWI_INTENCLR_SUSPENDED_Disabled: u32 = 0;
pub const TWI_INTENCLR_SUSPENDED_Enabled: u32 = 1;
pub const TWI_INTENCLR_SUSPENDED_Clear: u32 = 1;
pub const TWI_INTENCLR_BB_Pos: u32 = 14;
pub const TWI_INTENCLR_BB_Msk: u32 = 16384;
pub const TWI_INTENCLR_BB_Disabled: u32 = 0;
pub const TWI_INTENCLR_BB_Enabled: u32 = 1;
pub const TWI_INTENCLR_BB_Clear: u32 = 1;
pub const TWI_INTENCLR_ERROR_Pos: u32 = 9;
pub const TWI_INTENCLR_ERROR_Msk: u32 = 512;
pub const TWI_INTENCLR_ERROR_Disabled: u32 = 0;
pub const TWI_INTENCLR_ERROR_Enabled: u32 = 1;
pub const TWI_INTENCLR_ERROR_Clear: u32 = 1;
pub const TWI_INTENCLR_TXDSENT_Pos: u32 = 7;
pub const TWI_INTENCLR_TXDSENT_Msk: u32 = 128;
pub const TWI_INTENCLR_TXDSENT_Disabled: u32 = 0;
pub const TWI_INTENCLR_TXDSENT_Enabled: u32 = 1;
pub const TWI_INTENCLR_TXDSENT_Clear: u32 = 1;
pub const TWI_INTENCLR_RXDREADY_Pos: u32 = 2;
pub const TWI_INTENCLR_RXDREADY_Msk: u32 = 4;
pub const TWI_INTENCLR_RXDREADY_Disabled: u32 = 0;
pub const TWI_INTENCLR_RXDREADY_Enabled: u32 = 1;
pub const TWI_INTENCLR_RXDREADY_Clear: u32 = 1;
pub const TWI_INTENCLR_STOPPED_Pos: u32 = 1;
pub const TWI_INTENCLR_STOPPED_Msk: u32 = 2;
pub const TWI_INTENCLR_STOPPED_Disabled: u32 = 0;
pub const TWI_INTENCLR_STOPPED_Enabled: u32 = 1;
pub const TWI_INTENCLR_STOPPED_Clear: u32 = 1;
pub const TWI_ERRORSRC_DNACK_Pos: u32 = 2;
pub const TWI_ERRORSRC_DNACK_Msk: u32 = 4;
pub const TWI_ERRORSRC_DNACK_NotPresent: u32 = 0;
pub const TWI_ERRORSRC_DNACK_Present: u32 = 1;
pub const TWI_ERRORSRC_ANACK_Pos: u32 = 1;
pub const TWI_ERRORSRC_ANACK_Msk: u32 = 2;
pub const TWI_ERRORSRC_ANACK_NotPresent: u32 = 0;
pub const TWI_ERRORSRC_ANACK_Present: u32 = 1;
pub const TWI_ERRORSRC_OVERRUN_Pos: u32 = 0;
pub const TWI_ERRORSRC_OVERRUN_Msk: u32 = 1;
pub const TWI_ERRORSRC_OVERRUN_NotPresent: u32 = 0;
pub const TWI_ERRORSRC_OVERRUN_Present: u32 = 1;
pub const TWI_ENABLE_ENABLE_Pos: u32 = 0;
pub const TWI_ENABLE_ENABLE_Msk: u32 = 15;
pub const TWI_ENABLE_ENABLE_Disabled: u32 = 0;
pub const TWI_ENABLE_ENABLE_Enabled: u32 = 5;
pub const TWI_PSEL_SCL_CONNECT_Pos: u32 = 31;
pub const TWI_PSEL_SCL_CONNECT_Msk: u32 = 2147483648;
pub const TWI_PSEL_SCL_CONNECT_Connected: u32 = 0;
pub const TWI_PSEL_SCL_CONNECT_Disconnected: u32 = 1;
pub const TWI_PSEL_SCL_PORT_Pos: u32 = 5;
pub const TWI_PSEL_SCL_PORT_Msk: u32 = 32;
pub const TWI_PSEL_SCL_PIN_Pos: u32 = 0;
pub const TWI_PSEL_SCL_PIN_Msk: u32 = 31;
pub const TWI_PSEL_SDA_CONNECT_Pos: u32 = 31;
pub const TWI_PSEL_SDA_CONNECT_Msk: u32 = 2147483648;
pub const TWI_PSEL_SDA_CONNECT_Connected: u32 = 0;
pub const TWI_PSEL_SDA_CONNECT_Disconnected: u32 = 1;
pub const TWI_PSEL_SDA_PORT_Pos: u32 = 5;
pub const TWI_PSEL_SDA_PORT_Msk: u32 = 32;
pub const TWI_PSEL_SDA_PIN_Pos: u32 = 0;
pub const TWI_PSEL_SDA_PIN_Msk: u32 = 31;
pub const TWI_RXD_RXD_Pos: u32 = 0;
pub const TWI_RXD_RXD_Msk: u32 = 255;
pub const TWI_TXD_TXD_Pos: u32 = 0;
pub const TWI_TXD_TXD_Msk: u32 = 255;
pub const TWI_FREQUENCY_FREQUENCY_Pos: u32 = 0;
pub const TWI_FREQUENCY_FREQUENCY_Msk: u32 = 4294967295;
pub const TWI_FREQUENCY_FREQUENCY_K100: u32 = 26738688;
pub const TWI_FREQUENCY_FREQUENCY_K250: u32 = 67108864;
pub const TWI_FREQUENCY_FREQUENCY_K400: u32 = 107479040;
pub const TWI_ADDRESS_ADDRESS_Pos: u32 = 0;
pub const TWI_ADDRESS_ADDRESS_Msk: u32 = 127;
pub const TWIM_TASKS_STARTRX_TASKS_STARTRX_Pos: u32 = 0;
pub const TWIM_TASKS_STARTRX_TASKS_STARTRX_Msk: u32 = 1;
pub const TWIM_TASKS_STARTRX_TASKS_STARTRX_Trigger: u32 = 1;
pub const TWIM_TASKS_STARTTX_TASKS_STARTTX_Pos: u32 = 0;
pub const TWIM_TASKS_STARTTX_TASKS_STARTTX_Msk: u32 = 1;
pub const TWIM_TASKS_STARTTX_TASKS_STARTTX_Trigger: u32 = 1;
pub const TWIM_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const TWIM_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const TWIM_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos: u32 = 0;
pub const TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Msk: u32 = 1;
pub const TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Trigger: u32 = 1;
pub const TWIM_TASKS_RESUME_TASKS_RESUME_Pos: u32 = 0;
pub const TWIM_TASKS_RESUME_TASKS_RESUME_Msk: u32 = 1;
pub const TWIM_TASKS_RESUME_TASKS_RESUME_Trigger: u32 = 1;
pub const TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos: u32 = 0;
pub const TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Msk: u32 = 1;
pub const TWIM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated: u32 = 0;
pub const TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Generated: u32 = 1;
pub const TWIM_EVENTS_ERROR_EVENTS_ERROR_Pos: u32 = 0;
pub const TWIM_EVENTS_ERROR_EVENTS_ERROR_Msk: u32 = 1;
pub const TWIM_EVENTS_ERROR_EVENTS_ERROR_NotGenerated: u32 = 0;
pub const TWIM_EVENTS_ERROR_EVENTS_ERROR_Generated: u32 = 1;
pub const TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos: u32 = 0;
pub const TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Msk: u32 = 1;
pub const TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_NotGenerated: u32 = 0;
pub const TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Generated: u32 = 1;
pub const TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos: u32 = 0;
pub const TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Msk: u32 = 1;
pub const TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_NotGenerated: u32 = 0;
pub const TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Generated: u32 = 1;
pub const TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos: u32 = 0;
pub const TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Msk: u32 = 1;
pub const TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_NotGenerated: u32 = 0;
pub const TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Generated: u32 = 1;
pub const TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Pos: u32 = 0;
pub const TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Msk: u32 = 1;
pub const TWIM_EVENTS_LASTRX_EVENTS_LASTRX_NotGenerated: u32 = 0;
pub const TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Generated: u32 = 1;
pub const TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Pos: u32 = 0;
pub const TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Msk: u32 = 1;
pub const TWIM_EVENTS_LASTTX_EVENTS_LASTTX_NotGenerated: u32 = 0;
pub const TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Generated: u32 = 1;
pub const TWIM_SHORTS_LASTRX_STOP_Pos: u32 = 12;
pub const TWIM_SHORTS_LASTRX_STOP_Msk: u32 = 4096;
pub const TWIM_SHORTS_LASTRX_STOP_Disabled: u32 = 0;
pub const TWIM_SHORTS_LASTRX_STOP_Enabled: u32 = 1;
pub const TWIM_SHORTS_LASTRX_SUSPEND_Pos: u32 = 11;
pub const TWIM_SHORTS_LASTRX_SUSPEND_Msk: u32 = 2048;
pub const TWIM_SHORTS_LASTRX_SUSPEND_Disabled: u32 = 0;
pub const TWIM_SHORTS_LASTRX_SUSPEND_Enabled: u32 = 1;
pub const TWIM_SHORTS_LASTRX_STARTTX_Pos: u32 = 10;
pub const TWIM_SHORTS_LASTRX_STARTTX_Msk: u32 = 1024;
pub const TWIM_SHORTS_LASTRX_STARTTX_Disabled: u32 = 0;
pub const TWIM_SHORTS_LASTRX_STARTTX_Enabled: u32 = 1;
pub const TWIM_SHORTS_LASTTX_STOP_Pos: u32 = 9;
pub const TWIM_SHORTS_LASTTX_STOP_Msk: u32 = 512;
pub const TWIM_SHORTS_LASTTX_STOP_Disabled: u32 = 0;
pub const TWIM_SHORTS_LASTTX_STOP_Enabled: u32 = 1;
pub const TWIM_SHORTS_LASTTX_SUSPEND_Pos: u32 = 8;
pub const TWIM_SHORTS_LASTTX_SUSPEND_Msk: u32 = 256;
pub const TWIM_SHORTS_LASTTX_SUSPEND_Disabled: u32 = 0;
pub const TWIM_SHORTS_LASTTX_SUSPEND_Enabled: u32 = 1;
pub const TWIM_SHORTS_LASTTX_STARTRX_Pos: u32 = 7;
pub const TWIM_SHORTS_LASTTX_STARTRX_Msk: u32 = 128;
pub const TWIM_SHORTS_LASTTX_STARTRX_Disabled: u32 = 0;
pub const TWIM_SHORTS_LASTTX_STARTRX_Enabled: u32 = 1;
pub const TWIM_INTEN_LASTTX_Pos: u32 = 24;
pub const TWIM_INTEN_LASTTX_Msk: u32 = 16777216;
pub const TWIM_INTEN_LASTTX_Disabled: u32 = 0;
pub const TWIM_INTEN_LASTTX_Enabled: u32 = 1;
pub const TWIM_INTEN_LASTRX_Pos: u32 = 23;
pub const TWIM_INTEN_LASTRX_Msk: u32 = 8388608;
pub const TWIM_INTEN_LASTRX_Disabled: u32 = 0;
pub const TWIM_INTEN_LASTRX_Enabled: u32 = 1;
pub const TWIM_INTEN_TXSTARTED_Pos: u32 = 20;
pub const TWIM_INTEN_TXSTARTED_Msk: u32 = 1048576;
pub const TWIM_INTEN_TXSTARTED_Disabled: u32 = 0;
pub const TWIM_INTEN_TXSTARTED_Enabled: u32 = 1;
pub const TWIM_INTEN_RXSTARTED_Pos: u32 = 19;
pub const TWIM_INTEN_RXSTARTED_Msk: u32 = 524288;
pub const TWIM_INTEN_RXSTARTED_Disabled: u32 = 0;
pub const TWIM_INTEN_RXSTARTED_Enabled: u32 = 1;
pub const TWIM_INTEN_SUSPENDED_Pos: u32 = 18;
pub const TWIM_INTEN_SUSPENDED_Msk: u32 = 262144;
pub const TWIM_INTEN_SUSPENDED_Disabled: u32 = 0;
pub const TWIM_INTEN_SUSPENDED_Enabled: u32 = 1;
pub const TWIM_INTEN_ERROR_Pos: u32 = 9;
pub const TWIM_INTEN_ERROR_Msk: u32 = 512;
pub const TWIM_INTEN_ERROR_Disabled: u32 = 0;
pub const TWIM_INTEN_ERROR_Enabled: u32 = 1;
pub const TWIM_INTEN_STOPPED_Pos: u32 = 1;
pub const TWIM_INTEN_STOPPED_Msk: u32 = 2;
pub const TWIM_INTEN_STOPPED_Disabled: u32 = 0;
pub const TWIM_INTEN_STOPPED_Enabled: u32 = 1;
pub const TWIM_INTENSET_LASTTX_Pos: u32 = 24;
pub const TWIM_INTENSET_LASTTX_Msk: u32 = 16777216;
pub const TWIM_INTENSET_LASTTX_Disabled: u32 = 0;
pub const TWIM_INTENSET_LASTTX_Enabled: u32 = 1;
pub const TWIM_INTENSET_LASTTX_Set: u32 = 1;
pub const TWIM_INTENSET_LASTRX_Pos: u32 = 23;
pub const TWIM_INTENSET_LASTRX_Msk: u32 = 8388608;
pub const TWIM_INTENSET_LASTRX_Disabled: u32 = 0;
pub const TWIM_INTENSET_LASTRX_Enabled: u32 = 1;
pub const TWIM_INTENSET_LASTRX_Set: u32 = 1;
pub const TWIM_INTENSET_TXSTARTED_Pos: u32 = 20;
pub const TWIM_INTENSET_TXSTARTED_Msk: u32 = 1048576;
pub const TWIM_INTENSET_TXSTARTED_Disabled: u32 = 0;
pub const TWIM_INTENSET_TXSTARTED_Enabled: u32 = 1;
pub const TWIM_INTENSET_TXSTARTED_Set: u32 = 1;
pub const TWIM_INTENSET_RXSTARTED_Pos: u32 = 19;
pub const TWIM_INTENSET_RXSTARTED_Msk: u32 = 524288;
pub const TWIM_INTENSET_RXSTARTED_Disabled: u32 = 0;
pub const TWIM_INTENSET_RXSTARTED_Enabled: u32 = 1;
pub const TWIM_INTENSET_RXSTARTED_Set: u32 = 1;
pub const TWIM_INTENSET_SUSPENDED_Pos: u32 = 18;
pub const TWIM_INTENSET_SUSPENDED_Msk: u32 = 262144;
pub const TWIM_INTENSET_SUSPENDED_Disabled: u32 = 0;
pub const TWIM_INTENSET_SUSPENDED_Enabled: u32 = 1;
pub const TWIM_INTENSET_SUSPENDED_Set: u32 = 1;
pub const TWIM_INTENSET_ERROR_Pos: u32 = 9;
pub const TWIM_INTENSET_ERROR_Msk: u32 = 512;
pub const TWIM_INTENSET_ERROR_Disabled: u32 = 0;
pub const TWIM_INTENSET_ERROR_Enabled: u32 = 1;
pub const TWIM_INTENSET_ERROR_Set: u32 = 1;
pub const TWIM_INTENSET_STOPPED_Pos: u32 = 1;
pub const TWIM_INTENSET_STOPPED_Msk: u32 = 2;
pub const TWIM_INTENSET_STOPPED_Disabled: u32 = 0;
pub const TWIM_INTENSET_STOPPED_Enabled: u32 = 1;
pub const TWIM_INTENSET_STOPPED_Set: u32 = 1;
pub const TWIM_INTENCLR_LASTTX_Pos: u32 = 24;
pub const TWIM_INTENCLR_LASTTX_Msk: u32 = 16777216;
pub const TWIM_INTENCLR_LASTTX_Disabled: u32 = 0;
pub const TWIM_INTENCLR_LASTTX_Enabled: u32 = 1;
pub const TWIM_INTENCLR_LASTTX_Clear: u32 = 1;
pub const TWIM_INTENCLR_LASTRX_Pos: u32 = 23;
pub const TWIM_INTENCLR_LASTRX_Msk: u32 = 8388608;
pub const TWIM_INTENCLR_LASTRX_Disabled: u32 = 0;
pub const TWIM_INTENCLR_LASTRX_Enabled: u32 = 1;
pub const TWIM_INTENCLR_LASTRX_Clear: u32 = 1;
pub const TWIM_INTENCLR_TXSTARTED_Pos: u32 = 20;
pub const TWIM_INTENCLR_TXSTARTED_Msk: u32 = 1048576;
pub const TWIM_INTENCLR_TXSTARTED_Disabled: u32 = 0;
pub const TWIM_INTENCLR_TXSTARTED_Enabled: u32 = 1;
pub const TWIM_INTENCLR_TXSTARTED_Clear: u32 = 1;
pub const TWIM_INTENCLR_RXSTARTED_Pos: u32 = 19;
pub const TWIM_INTENCLR_RXSTARTED_Msk: u32 = 524288;
pub const TWIM_INTENCLR_RXSTARTED_Disabled: u32 = 0;
pub const TWIM_INTENCLR_RXSTARTED_Enabled: u32 = 1;
pub const TWIM_INTENCLR_RXSTARTED_Clear: u32 = 1;
pub const TWIM_INTENCLR_SUSPENDED_Pos: u32 = 18;
pub const TWIM_INTENCLR_SUSPENDED_Msk: u32 = 262144;
pub const TWIM_INTENCLR_SUSPENDED_Disabled: u32 = 0;
pub const TWIM_INTENCLR_SUSPENDED_Enabled: u32 = 1;
pub const TWIM_INTENCLR_SUSPENDED_Clear: u32 = 1;
pub const TWIM_INTENCLR_ERROR_Pos: u32 = 9;
pub const TWIM_INTENCLR_ERROR_Msk: u32 = 512;
pub const TWIM_INTENCLR_ERROR_Disabled: u32 = 0;
pub const TWIM_INTENCLR_ERROR_Enabled: u32 = 1;
pub const TWIM_INTENCLR_ERROR_Clear: u32 = 1;
pub const TWIM_INTENCLR_STOPPED_Pos: u32 = 1;
pub const TWIM_INTENCLR_STOPPED_Msk: u32 = 2;
pub const TWIM_INTENCLR_STOPPED_Disabled: u32 = 0;
pub const TWIM_INTENCLR_STOPPED_Enabled: u32 = 1;
pub const TWIM_INTENCLR_STOPPED_Clear: u32 = 1;
pub const TWIM_ERRORSRC_DNACK_Pos: u32 = 2;
pub const TWIM_ERRORSRC_DNACK_Msk: u32 = 4;
pub const TWIM_ERRORSRC_DNACK_NotReceived: u32 = 0;
pub const TWIM_ERRORSRC_DNACK_Received: u32 = 1;
pub const TWIM_ERRORSRC_ANACK_Pos: u32 = 1;
pub const TWIM_ERRORSRC_ANACK_Msk: u32 = 2;
pub const TWIM_ERRORSRC_ANACK_NotReceived: u32 = 0;
pub const TWIM_ERRORSRC_ANACK_Received: u32 = 1;
pub const TWIM_ERRORSRC_OVERRUN_Pos: u32 = 0;
pub const TWIM_ERRORSRC_OVERRUN_Msk: u32 = 1;
pub const TWIM_ERRORSRC_OVERRUN_NotReceived: u32 = 0;
pub const TWIM_ERRORSRC_OVERRUN_Received: u32 = 1;
pub const TWIM_ENABLE_ENABLE_Pos: u32 = 0;
pub const TWIM_ENABLE_ENABLE_Msk: u32 = 15;
pub const TWIM_ENABLE_ENABLE_Disabled: u32 = 0;
pub const TWIM_ENABLE_ENABLE_Enabled: u32 = 6;
pub const TWIM_PSEL_SCL_CONNECT_Pos: u32 = 31;
pub const TWIM_PSEL_SCL_CONNECT_Msk: u32 = 2147483648;
pub const TWIM_PSEL_SCL_CONNECT_Connected: u32 = 0;
pub const TWIM_PSEL_SCL_CONNECT_Disconnected: u32 = 1;
pub const TWIM_PSEL_SCL_PORT_Pos: u32 = 5;
pub const TWIM_PSEL_SCL_PORT_Msk: u32 = 32;
pub const TWIM_PSEL_SCL_PIN_Pos: u32 = 0;
pub const TWIM_PSEL_SCL_PIN_Msk: u32 = 31;
pub const TWIM_PSEL_SDA_CONNECT_Pos: u32 = 31;
pub const TWIM_PSEL_SDA_CONNECT_Msk: u32 = 2147483648;
pub const TWIM_PSEL_SDA_CONNECT_Connected: u32 = 0;
pub const TWIM_PSEL_SDA_CONNECT_Disconnected: u32 = 1;
pub const TWIM_PSEL_SDA_PORT_Pos: u32 = 5;
pub const TWIM_PSEL_SDA_PORT_Msk: u32 = 32;
pub const TWIM_PSEL_SDA_PIN_Pos: u32 = 0;
pub const TWIM_PSEL_SDA_PIN_Msk: u32 = 31;
pub const TWIM_FREQUENCY_FREQUENCY_Pos: u32 = 0;
pub const TWIM_FREQUENCY_FREQUENCY_Msk: u32 = 4294967295;
pub const TWIM_FREQUENCY_FREQUENCY_K100: u32 = 26738688;
pub const TWIM_FREQUENCY_FREQUENCY_K250: u32 = 67108864;
pub const TWIM_FREQUENCY_FREQUENCY_K400: u32 = 104857600;
pub const TWIM_RXD_PTR_PTR_Pos: u32 = 0;
pub const TWIM_RXD_PTR_PTR_Msk: u32 = 4294967295;
pub const TWIM_RXD_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const TWIM_RXD_MAXCNT_MAXCNT_Msk: u32 = 65535;
pub const TWIM_RXD_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const TWIM_RXD_AMOUNT_AMOUNT_Msk: u32 = 65535;
pub const TWIM_RXD_LIST_LIST_Pos: u32 = 0;
pub const TWIM_RXD_LIST_LIST_Msk: u32 = 7;
pub const TWIM_RXD_LIST_LIST_Disabled: u32 = 0;
pub const TWIM_RXD_LIST_LIST_ArrayList: u32 = 1;
pub const TWIM_TXD_PTR_PTR_Pos: u32 = 0;
pub const TWIM_TXD_PTR_PTR_Msk: u32 = 4294967295;
pub const TWIM_TXD_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const TWIM_TXD_MAXCNT_MAXCNT_Msk: u32 = 65535;
pub const TWIM_TXD_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const TWIM_TXD_AMOUNT_AMOUNT_Msk: u32 = 65535;
pub const TWIM_TXD_LIST_LIST_Pos: u32 = 0;
pub const TWIM_TXD_LIST_LIST_Msk: u32 = 7;
pub const TWIM_TXD_LIST_LIST_Disabled: u32 = 0;
pub const TWIM_TXD_LIST_LIST_ArrayList: u32 = 1;
pub const TWIM_ADDRESS_ADDRESS_Pos: u32 = 0;
pub const TWIM_ADDRESS_ADDRESS_Msk: u32 = 127;
pub const TWIS_TASKS_STOP_TASKS_STOP_Pos: u32 = 0;
pub const TWIS_TASKS_STOP_TASKS_STOP_Msk: u32 = 1;
pub const TWIS_TASKS_STOP_TASKS_STOP_Trigger: u32 = 1;
pub const TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Pos: u32 = 0;
pub const TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Msk: u32 = 1;
pub const TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Trigger: u32 = 1;
pub const TWIS_TASKS_RESUME_TASKS_RESUME_Pos: u32 = 0;
pub const TWIS_TASKS_RESUME_TASKS_RESUME_Msk: u32 = 1;
pub const TWIS_TASKS_RESUME_TASKS_RESUME_Trigger: u32 = 1;
pub const TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Pos: u32 = 0;
pub const TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Msk: u32 = 1;
pub const TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Trigger: u32 = 1;
pub const TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Pos: u32 = 0;
pub const TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Msk: u32 = 1;
pub const TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Trigger: u32 = 1;
pub const TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Pos: u32 = 0;
pub const TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Msk: u32 = 1;
pub const TWIS_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated: u32 = 0;
pub const TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Generated: u32 = 1;
pub const TWIS_EVENTS_ERROR_EVENTS_ERROR_Pos: u32 = 0;
pub const TWIS_EVENTS_ERROR_EVENTS_ERROR_Msk: u32 = 1;
pub const TWIS_EVENTS_ERROR_EVENTS_ERROR_NotGenerated: u32 = 0;
pub const TWIS_EVENTS_ERROR_EVENTS_ERROR_Generated: u32 = 1;
pub const TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos: u32 = 0;
pub const TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Msk: u32 = 1;
pub const TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_NotGenerated: u32 = 0;
pub const TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Generated: u32 = 1;
pub const TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos: u32 = 0;
pub const TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Msk: u32 = 1;
pub const TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_NotGenerated: u32 = 0;
pub const TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Generated: u32 = 1;
pub const TWIS_EVENTS_WRITE_EVENTS_WRITE_Pos: u32 = 0;
pub const TWIS_EVENTS_WRITE_EVENTS_WRITE_Msk: u32 = 1;
pub const TWIS_EVENTS_WRITE_EVENTS_WRITE_NotGenerated: u32 = 0;
pub const TWIS_EVENTS_WRITE_EVENTS_WRITE_Generated: u32 = 1;
pub const TWIS_EVENTS_READ_EVENTS_READ_Pos: u32 = 0;
pub const TWIS_EVENTS_READ_EVENTS_READ_Msk: u32 = 1;
pub const TWIS_EVENTS_READ_EVENTS_READ_NotGenerated: u32 = 0;
pub const TWIS_EVENTS_READ_EVENTS_READ_Generated: u32 = 1;
pub const TWIS_SHORTS_READ_SUSPEND_Pos: u32 = 14;
pub const TWIS_SHORTS_READ_SUSPEND_Msk: u32 = 16384;
pub const TWIS_SHORTS_READ_SUSPEND_Disabled: u32 = 0;
pub const TWIS_SHORTS_READ_SUSPEND_Enabled: u32 = 1;
pub const TWIS_SHORTS_WRITE_SUSPEND_Pos: u32 = 13;
pub const TWIS_SHORTS_WRITE_SUSPEND_Msk: u32 = 8192;
pub const TWIS_SHORTS_WRITE_SUSPEND_Disabled: u32 = 0;
pub const TWIS_SHORTS_WRITE_SUSPEND_Enabled: u32 = 1;
pub const TWIS_INTEN_READ_Pos: u32 = 26;
pub const TWIS_INTEN_READ_Msk: u32 = 67108864;
pub const TWIS_INTEN_READ_Disabled: u32 = 0;
pub const TWIS_INTEN_READ_Enabled: u32 = 1;
pub const TWIS_INTEN_WRITE_Pos: u32 = 25;
pub const TWIS_INTEN_WRITE_Msk: u32 = 33554432;
pub const TWIS_INTEN_WRITE_Disabled: u32 = 0;
pub const TWIS_INTEN_WRITE_Enabled: u32 = 1;
pub const TWIS_INTEN_TXSTARTED_Pos: u32 = 20;
pub const TWIS_INTEN_TXSTARTED_Msk: u32 = 1048576;
pub const TWIS_INTEN_TXSTARTED_Disabled: u32 = 0;
pub const TWIS_INTEN_TXSTARTED_Enabled: u32 = 1;
pub const TWIS_INTEN_RXSTARTED_Pos: u32 = 19;
pub const TWIS_INTEN_RXSTARTED_Msk: u32 = 524288;
pub const TWIS_INTEN_RXSTARTED_Disabled: u32 = 0;
pub const TWIS_INTEN_RXSTARTED_Enabled: u32 = 1;
pub const TWIS_INTEN_ERROR_Pos: u32 = 9;
pub const TWIS_INTEN_ERROR_Msk: u32 = 512;
pub const TWIS_INTEN_ERROR_Disabled: u32 = 0;
pub const TWIS_INTEN_ERROR_Enabled: u32 = 1;
pub const TWIS_INTEN_STOPPED_Pos: u32 = 1;
pub const TWIS_INTEN_STOPPED_Msk: u32 = 2;
pub const TWIS_INTEN_STOPPED_Disabled: u32 = 0;
pub const TWIS_INTEN_STOPPED_Enabled: u32 = 1;
pub const TWIS_INTENSET_READ_Pos: u32 = 26;
pub const TWIS_INTENSET_READ_Msk: u32 = 67108864;
pub const TWIS_INTENSET_READ_Disabled: u32 = 0;
pub const TWIS_INTENSET_READ_Enabled: u32 = 1;
pub const TWIS_INTENSET_READ_Set: u32 = 1;
pub const TWIS_INTENSET_WRITE_Pos: u32 = 25;
pub const TWIS_INTENSET_WRITE_Msk: u32 = 33554432;
pub const TWIS_INTENSET_WRITE_Disabled: u32 = 0;
pub const TWIS_INTENSET_WRITE_Enabled: u32 = 1;
pub const TWIS_INTENSET_WRITE_Set: u32 = 1;
pub const TWIS_INTENSET_TXSTARTED_Pos: u32 = 20;
pub const TWIS_INTENSET_TXSTARTED_Msk: u32 = 1048576;
pub const TWIS_INTENSET_TXSTARTED_Disabled: u32 = 0;
pub const TWIS_INTENSET_TXSTARTED_Enabled: u32 = 1;
pub const TWIS_INTENSET_TXSTARTED_Set: u32 = 1;
pub const TWIS_INTENSET_RXSTARTED_Pos: u32 = 19;
pub const TWIS_INTENSET_RXSTARTED_Msk: u32 = 524288;
pub const TWIS_INTENSET_RXSTARTED_Disabled: u32 = 0;
pub const TWIS_INTENSET_RXSTARTED_Enabled: u32 = 1;
pub const TWIS_INTENSET_RXSTARTED_Set: u32 = 1;
pub const TWIS_INTENSET_ERROR_Pos: u32 = 9;
pub const TWIS_INTENSET_ERROR_Msk: u32 = 512;
pub const TWIS_INTENSET_ERROR_Disabled: u32 = 0;
pub const TWIS_INTENSET_ERROR_Enabled: u32 = 1;
pub const TWIS_INTENSET_ERROR_Set: u32 = 1;
pub const TWIS_INTENSET_STOPPED_Pos: u32 = 1;
pub const TWIS_INTENSET_STOPPED_Msk: u32 = 2;
pub const TWIS_INTENSET_STOPPED_Disabled: u32 = 0;
pub const TWIS_INTENSET_STOPPED_Enabled: u32 = 1;
pub const TWIS_INTENSET_STOPPED_Set: u32 = 1;
pub const TWIS_INTENCLR_READ_Pos: u32 = 26;
pub const TWIS_INTENCLR_READ_Msk: u32 = 67108864;
pub const TWIS_INTENCLR_READ_Disabled: u32 = 0;
pub const TWIS_INTENCLR_READ_Enabled: u32 = 1;
pub const TWIS_INTENCLR_READ_Clear: u32 = 1;
pub const TWIS_INTENCLR_WRITE_Pos: u32 = 25;
pub const TWIS_INTENCLR_WRITE_Msk: u32 = 33554432;
pub const TWIS_INTENCLR_WRITE_Disabled: u32 = 0;
pub const TWIS_INTENCLR_WRITE_Enabled: u32 = 1;
pub const TWIS_INTENCLR_WRITE_Clear: u32 = 1;
pub const TWIS_INTENCLR_TXSTARTED_Pos: u32 = 20;
pub const TWIS_INTENCLR_TXSTARTED_Msk: u32 = 1048576;
pub const TWIS_INTENCLR_TXSTARTED_Disabled: u32 = 0;
pub const TWIS_INTENCLR_TXSTARTED_Enabled: u32 = 1;
pub const TWIS_INTENCLR_TXSTARTED_Clear: u32 = 1;
pub const TWIS_INTENCLR_RXSTARTED_Pos: u32 = 19;
pub const TWIS_INTENCLR_RXSTARTED_Msk: u32 = 524288;
pub const TWIS_INTENCLR_RXSTARTED_Disabled: u32 = 0;
pub const TWIS_INTENCLR_RXSTARTED_Enabled: u32 = 1;
pub const TWIS_INTENCLR_RXSTARTED_Clear: u32 = 1;
pub const TWIS_INTENCLR_ERROR_Pos: u32 = 9;
pub const TWIS_INTENCLR_ERROR_Msk: u32 = 512;
pub const TWIS_INTENCLR_ERROR_Disabled: u32 = 0;
pub const TWIS_INTENCLR_ERROR_Enabled: u32 = 1;
pub const TWIS_INTENCLR_ERROR_Clear: u32 = 1;
pub const TWIS_INTENCLR_STOPPED_Pos: u32 = 1;
pub const TWIS_INTENCLR_STOPPED_Msk: u32 = 2;
pub const TWIS_INTENCLR_STOPPED_Disabled: u32 = 0;
pub const TWIS_INTENCLR_STOPPED_Enabled: u32 = 1;
pub const TWIS_INTENCLR_STOPPED_Clear: u32 = 1;
pub const TWIS_ERRORSRC_OVERREAD_Pos: u32 = 3;
pub const TWIS_ERRORSRC_OVERREAD_Msk: u32 = 8;
pub const TWIS_ERRORSRC_OVERREAD_NotDetected: u32 = 0;
pub const TWIS_ERRORSRC_OVERREAD_Detected: u32 = 1;
pub const TWIS_ERRORSRC_DNACK_Pos: u32 = 2;
pub const TWIS_ERRORSRC_DNACK_Msk: u32 = 4;
pub const TWIS_ERRORSRC_DNACK_NotReceived: u32 = 0;
pub const TWIS_ERRORSRC_DNACK_Received: u32 = 1;
pub const TWIS_ERRORSRC_OVERFLOW_Pos: u32 = 0;
pub const TWIS_ERRORSRC_OVERFLOW_Msk: u32 = 1;
pub const TWIS_ERRORSRC_OVERFLOW_NotDetected: u32 = 0;
pub const TWIS_ERRORSRC_OVERFLOW_Detected: u32 = 1;
pub const TWIS_MATCH_MATCH_Pos: u32 = 0;
pub const TWIS_MATCH_MATCH_Msk: u32 = 1;
pub const TWIS_ENABLE_ENABLE_Pos: u32 = 0;
pub const TWIS_ENABLE_ENABLE_Msk: u32 = 15;
pub const TWIS_ENABLE_ENABLE_Disabled: u32 = 0;
pub const TWIS_ENABLE_ENABLE_Enabled: u32 = 9;
pub const TWIS_PSEL_SCL_CONNECT_Pos: u32 = 31;
pub const TWIS_PSEL_SCL_CONNECT_Msk: u32 = 2147483648;
pub const TWIS_PSEL_SCL_CONNECT_Connected: u32 = 0;
pub const TWIS_PSEL_SCL_CONNECT_Disconnected: u32 = 1;
pub const TWIS_PSEL_SCL_PORT_Pos: u32 = 5;
pub const TWIS_PSEL_SCL_PORT_Msk: u32 = 32;
pub const TWIS_PSEL_SCL_PIN_Pos: u32 = 0;
pub const TWIS_PSEL_SCL_PIN_Msk: u32 = 31;
pub const TWIS_PSEL_SDA_CONNECT_Pos: u32 = 31;
pub const TWIS_PSEL_SDA_CONNECT_Msk: u32 = 2147483648;
pub const TWIS_PSEL_SDA_CONNECT_Connected: u32 = 0;
pub const TWIS_PSEL_SDA_CONNECT_Disconnected: u32 = 1;
pub const TWIS_PSEL_SDA_PORT_Pos: u32 = 5;
pub const TWIS_PSEL_SDA_PORT_Msk: u32 = 32;
pub const TWIS_PSEL_SDA_PIN_Pos: u32 = 0;
pub const TWIS_PSEL_SDA_PIN_Msk: u32 = 31;
pub const TWIS_RXD_PTR_PTR_Pos: u32 = 0;
pub const TWIS_RXD_PTR_PTR_Msk: u32 = 4294967295;
pub const TWIS_RXD_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const TWIS_RXD_MAXCNT_MAXCNT_Msk: u32 = 65535;
pub const TWIS_RXD_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const TWIS_RXD_AMOUNT_AMOUNT_Msk: u32 = 65535;
pub const TWIS_RXD_LIST_LIST_Pos: u32 = 0;
pub const TWIS_RXD_LIST_LIST_Msk: u32 = 3;
pub const TWIS_RXD_LIST_LIST_Disabled: u32 = 0;
pub const TWIS_RXD_LIST_LIST_ArrayList: u32 = 1;
pub const TWIS_TXD_PTR_PTR_Pos: u32 = 0;
pub const TWIS_TXD_PTR_PTR_Msk: u32 = 4294967295;
pub const TWIS_TXD_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const TWIS_TXD_MAXCNT_MAXCNT_Msk: u32 = 65535;
pub const TWIS_TXD_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const TWIS_TXD_AMOUNT_AMOUNT_Msk: u32 = 65535;
pub const TWIS_TXD_LIST_LIST_Pos: u32 = 0;
pub const TWIS_TXD_LIST_LIST_Msk: u32 = 3;
pub const TWIS_TXD_LIST_LIST_Disabled: u32 = 0;
pub const TWIS_TXD_LIST_LIST_ArrayList: u32 = 1;
pub const TWIS_ADDRESS_ADDRESS_Pos: u32 = 0;
pub const TWIS_ADDRESS_ADDRESS_Msk: u32 = 127;
pub const TWIS_CONFIG_ADDRESS1_Pos: u32 = 1;
pub const TWIS_CONFIG_ADDRESS1_Msk: u32 = 2;
pub const TWIS_CONFIG_ADDRESS1_Disabled: u32 = 0;
pub const TWIS_CONFIG_ADDRESS1_Enabled: u32 = 1;
pub const TWIS_CONFIG_ADDRESS0_Pos: u32 = 0;
pub const TWIS_CONFIG_ADDRESS0_Msk: u32 = 1;
pub const TWIS_CONFIG_ADDRESS0_Disabled: u32 = 0;
pub const TWIS_CONFIG_ADDRESS0_Enabled: u32 = 1;
pub const TWIS_ORC_ORC_Pos: u32 = 0;
pub const TWIS_ORC_ORC_Msk: u32 = 255;
pub const UART_TASKS_STARTRX_TASKS_STARTRX_Pos: u32 = 0;
pub const UART_TASKS_STARTRX_TASKS_STARTRX_Msk: u32 = 1;
pub const UART_TASKS_STARTRX_TASKS_STARTRX_Trigger: u32 = 1;
pub const UART_TASKS_STOPRX_TASKS_STOPRX_Pos: u32 = 0;
pub const UART_TASKS_STOPRX_TASKS_STOPRX_Msk: u32 = 1;
pub const UART_TASKS_STOPRX_TASKS_STOPRX_Trigger: u32 = 1;
pub const UART_TASKS_STARTTX_TASKS_STARTTX_Pos: u32 = 0;
pub const UART_TASKS_STARTTX_TASKS_STARTTX_Msk: u32 = 1;
pub const UART_TASKS_STARTTX_TASKS_STARTTX_Trigger: u32 = 1;
pub const UART_TASKS_STOPTX_TASKS_STOPTX_Pos: u32 = 0;
pub const UART_TASKS_STOPTX_TASKS_STOPTX_Msk: u32 = 1;
pub const UART_TASKS_STOPTX_TASKS_STOPTX_Trigger: u32 = 1;
pub const UART_TASKS_SUSPEND_TASKS_SUSPEND_Pos: u32 = 0;
pub const UART_TASKS_SUSPEND_TASKS_SUSPEND_Msk: u32 = 1;
pub const UART_TASKS_SUSPEND_TASKS_SUSPEND_Trigger: u32 = 1;
pub const UART_EVENTS_CTS_EVENTS_CTS_Pos: u32 = 0;
pub const UART_EVENTS_CTS_EVENTS_CTS_Msk: u32 = 1;
pub const UART_EVENTS_CTS_EVENTS_CTS_NotGenerated: u32 = 0;
pub const UART_EVENTS_CTS_EVENTS_CTS_Generated: u32 = 1;
pub const UART_EVENTS_NCTS_EVENTS_NCTS_Pos: u32 = 0;
pub const UART_EVENTS_NCTS_EVENTS_NCTS_Msk: u32 = 1;
pub const UART_EVENTS_NCTS_EVENTS_NCTS_NotGenerated: u32 = 0;
pub const UART_EVENTS_NCTS_EVENTS_NCTS_Generated: u32 = 1;
pub const UART_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos: u32 = 0;
pub const UART_EVENTS_RXDRDY_EVENTS_RXDRDY_Msk: u32 = 1;
pub const UART_EVENTS_RXDRDY_EVENTS_RXDRDY_NotGenerated: u32 = 0;
pub const UART_EVENTS_RXDRDY_EVENTS_RXDRDY_Generated: u32 = 1;
pub const UART_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos: u32 = 0;
pub const UART_EVENTS_TXDRDY_EVENTS_TXDRDY_Msk: u32 = 1;
pub const UART_EVENTS_TXDRDY_EVENTS_TXDRDY_NotGenerated: u32 = 0;
pub const UART_EVENTS_TXDRDY_EVENTS_TXDRDY_Generated: u32 = 1;
pub const UART_EVENTS_ERROR_EVENTS_ERROR_Pos: u32 = 0;
pub const UART_EVENTS_ERROR_EVENTS_ERROR_Msk: u32 = 1;
pub const UART_EVENTS_ERROR_EVENTS_ERROR_NotGenerated: u32 = 0;
pub const UART_EVENTS_ERROR_EVENTS_ERROR_Generated: u32 = 1;
pub const UART_EVENTS_RXTO_EVENTS_RXTO_Pos: u32 = 0;
pub const UART_EVENTS_RXTO_EVENTS_RXTO_Msk: u32 = 1;
pub const UART_EVENTS_RXTO_EVENTS_RXTO_NotGenerated: u32 = 0;
pub const UART_EVENTS_RXTO_EVENTS_RXTO_Generated: u32 = 1;
pub const UART_SHORTS_NCTS_STOPRX_Pos: u32 = 4;
pub const UART_SHORTS_NCTS_STOPRX_Msk: u32 = 16;
pub const UART_SHORTS_NCTS_STOPRX_Disabled: u32 = 0;
pub const UART_SHORTS_NCTS_STOPRX_Enabled: u32 = 1;
pub const UART_SHORTS_CTS_STARTRX_Pos: u32 = 3;
pub const UART_SHORTS_CTS_STARTRX_Msk: u32 = 8;
pub const UART_SHORTS_CTS_STARTRX_Disabled: u32 = 0;
pub const UART_SHORTS_CTS_STARTRX_Enabled: u32 = 1;
pub const UART_INTENSET_RXTO_Pos: u32 = 17;
pub const UART_INTENSET_RXTO_Msk: u32 = 131072;
pub const UART_INTENSET_RXTO_Disabled: u32 = 0;
pub const UART_INTENSET_RXTO_Enabled: u32 = 1;
pub const UART_INTENSET_RXTO_Set: u32 = 1;
pub const UART_INTENSET_ERROR_Pos: u32 = 9;
pub const UART_INTENSET_ERROR_Msk: u32 = 512;
pub const UART_INTENSET_ERROR_Disabled: u32 = 0;
pub const UART_INTENSET_ERROR_Enabled: u32 = 1;
pub const UART_INTENSET_ERROR_Set: u32 = 1;
pub const UART_INTENSET_TXDRDY_Pos: u32 = 7;
pub const UART_INTENSET_TXDRDY_Msk: u32 = 128;
pub const UART_INTENSET_TXDRDY_Disabled: u32 = 0;
pub const UART_INTENSET_TXDRDY_Enabled: u32 = 1;
pub const UART_INTENSET_TXDRDY_Set: u32 = 1;
pub const UART_INTENSET_RXDRDY_Pos: u32 = 2;
pub const UART_INTENSET_RXDRDY_Msk: u32 = 4;
pub const UART_INTENSET_RXDRDY_Disabled: u32 = 0;
pub const UART_INTENSET_RXDRDY_Enabled: u32 = 1;
pub const UART_INTENSET_RXDRDY_Set: u32 = 1;
pub const UART_INTENSET_NCTS_Pos: u32 = 1;
pub const UART_INTENSET_NCTS_Msk: u32 = 2;
pub const UART_INTENSET_NCTS_Disabled: u32 = 0;
pub const UART_INTENSET_NCTS_Enabled: u32 = 1;
pub const UART_INTENSET_NCTS_Set: u32 = 1;
pub const UART_INTENSET_CTS_Pos: u32 = 0;
pub const UART_INTENSET_CTS_Msk: u32 = 1;
pub const UART_INTENSET_CTS_Disabled: u32 = 0;
pub const UART_INTENSET_CTS_Enabled: u32 = 1;
pub const UART_INTENSET_CTS_Set: u32 = 1;
pub const UART_INTENCLR_RXTO_Pos: u32 = 17;
pub const UART_INTENCLR_RXTO_Msk: u32 = 131072;
pub const UART_INTENCLR_RXTO_Disabled: u32 = 0;
pub const UART_INTENCLR_RXTO_Enabled: u32 = 1;
pub const UART_INTENCLR_RXTO_Clear: u32 = 1;
pub const UART_INTENCLR_ERROR_Pos: u32 = 9;
pub const UART_INTENCLR_ERROR_Msk: u32 = 512;
pub const UART_INTENCLR_ERROR_Disabled: u32 = 0;
pub const UART_INTENCLR_ERROR_Enabled: u32 = 1;
pub const UART_INTENCLR_ERROR_Clear: u32 = 1;
pub const UART_INTENCLR_TXDRDY_Pos: u32 = 7;
pub const UART_INTENCLR_TXDRDY_Msk: u32 = 128;
pub const UART_INTENCLR_TXDRDY_Disabled: u32 = 0;
pub const UART_INTENCLR_TXDRDY_Enabled: u32 = 1;
pub const UART_INTENCLR_TXDRDY_Clear: u32 = 1;
pub const UART_INTENCLR_RXDRDY_Pos: u32 = 2;
pub const UART_INTENCLR_RXDRDY_Msk: u32 = 4;
pub const UART_INTENCLR_RXDRDY_Disabled: u32 = 0;
pub const UART_INTENCLR_RXDRDY_Enabled: u32 = 1;
pub const UART_INTENCLR_RXDRDY_Clear: u32 = 1;
pub const UART_INTENCLR_NCTS_Pos: u32 = 1;
pub const UART_INTENCLR_NCTS_Msk: u32 = 2;
pub const UART_INTENCLR_NCTS_Disabled: u32 = 0;
pub const UART_INTENCLR_NCTS_Enabled: u32 = 1;
pub const UART_INTENCLR_NCTS_Clear: u32 = 1;
pub const UART_INTENCLR_CTS_Pos: u32 = 0;
pub const UART_INTENCLR_CTS_Msk: u32 = 1;
pub const UART_INTENCLR_CTS_Disabled: u32 = 0;
pub const UART_INTENCLR_CTS_Enabled: u32 = 1;
pub const UART_INTENCLR_CTS_Clear: u32 = 1;
pub const UART_ERRORSRC_BREAK_Pos: u32 = 3;
pub const UART_ERRORSRC_BREAK_Msk: u32 = 8;
pub const UART_ERRORSRC_BREAK_NotPresent: u32 = 0;
pub const UART_ERRORSRC_BREAK_Present: u32 = 1;
pub const UART_ERRORSRC_FRAMING_Pos: u32 = 2;
pub const UART_ERRORSRC_FRAMING_Msk: u32 = 4;
pub const UART_ERRORSRC_FRAMING_NotPresent: u32 = 0;
pub const UART_ERRORSRC_FRAMING_Present: u32 = 1;
pub const UART_ERRORSRC_PARITY_Pos: u32 = 1;
pub const UART_ERRORSRC_PARITY_Msk: u32 = 2;
pub const UART_ERRORSRC_PARITY_NotPresent: u32 = 0;
pub const UART_ERRORSRC_PARITY_Present: u32 = 1;
pub const UART_ERRORSRC_OVERRUN_Pos: u32 = 0;
pub const UART_ERRORSRC_OVERRUN_Msk: u32 = 1;
pub const UART_ERRORSRC_OVERRUN_NotPresent: u32 = 0;
pub const UART_ERRORSRC_OVERRUN_Present: u32 = 1;
pub const UART_ENABLE_ENABLE_Pos: u32 = 0;
pub const UART_ENABLE_ENABLE_Msk: u32 = 15;
pub const UART_ENABLE_ENABLE_Disabled: u32 = 0;
pub const UART_ENABLE_ENABLE_Enabled: u32 = 4;
pub const UART_PSEL_RTS_CONNECT_Pos: u32 = 31;
pub const UART_PSEL_RTS_CONNECT_Msk: u32 = 2147483648;
pub const UART_PSEL_RTS_CONNECT_Connected: u32 = 0;
pub const UART_PSEL_RTS_CONNECT_Disconnected: u32 = 1;
pub const UART_PSEL_RTS_PORT_Pos: u32 = 5;
pub const UART_PSEL_RTS_PORT_Msk: u32 = 32;
pub const UART_PSEL_RTS_PIN_Pos: u32 = 0;
pub const UART_PSEL_RTS_PIN_Msk: u32 = 31;
pub const UART_PSEL_TXD_CONNECT_Pos: u32 = 31;
pub const UART_PSEL_TXD_CONNECT_Msk: u32 = 2147483648;
pub const UART_PSEL_TXD_CONNECT_Connected: u32 = 0;
pub const UART_PSEL_TXD_CONNECT_Disconnected: u32 = 1;
pub const UART_PSEL_TXD_PORT_Pos: u32 = 5;
pub const UART_PSEL_TXD_PORT_Msk: u32 = 32;
pub const UART_PSEL_TXD_PIN_Pos: u32 = 0;
pub const UART_PSEL_TXD_PIN_Msk: u32 = 31;
pub const UART_PSEL_CTS_CONNECT_Pos: u32 = 31;
pub const UART_PSEL_CTS_CONNECT_Msk: u32 = 2147483648;
pub const UART_PSEL_CTS_CONNECT_Connected: u32 = 0;
pub const UART_PSEL_CTS_CONNECT_Disconnected: u32 = 1;
pub const UART_PSEL_CTS_PORT_Pos: u32 = 5;
pub const UART_PSEL_CTS_PORT_Msk: u32 = 32;
pub const UART_PSEL_CTS_PIN_Pos: u32 = 0;
pub const UART_PSEL_CTS_PIN_Msk: u32 = 31;
pub const UART_PSEL_RXD_CONNECT_Pos: u32 = 31;
pub const UART_PSEL_RXD_CONNECT_Msk: u32 = 2147483648;
pub const UART_PSEL_RXD_CONNECT_Connected: u32 = 0;
pub const UART_PSEL_RXD_CONNECT_Disconnected: u32 = 1;
pub const UART_PSEL_RXD_PORT_Pos: u32 = 5;
pub const UART_PSEL_RXD_PORT_Msk: u32 = 32;
pub const UART_PSEL_RXD_PIN_Pos: u32 = 0;
pub const UART_PSEL_RXD_PIN_Msk: u32 = 31;
pub const UART_RXD_RXD_Pos: u32 = 0;
pub const UART_RXD_RXD_Msk: u32 = 255;
pub const UART_TXD_TXD_Pos: u32 = 0;
pub const UART_TXD_TXD_Msk: u32 = 255;
pub const UART_BAUDRATE_BAUDRATE_Pos: u32 = 0;
pub const UART_BAUDRATE_BAUDRATE_Msk: u32 = 4294967295;
pub const UART_BAUDRATE_BAUDRATE_Baud1200: u32 = 323584;
pub const UART_BAUDRATE_BAUDRATE_Baud2400: u32 = 643072;
pub const UART_BAUDRATE_BAUDRATE_Baud4800: u32 = 1290240;
pub const UART_BAUDRATE_BAUDRATE_Baud9600: u32 = 2576384;
pub const UART_BAUDRATE_BAUDRATE_Baud14400: u32 = 3866624;
pub const UART_BAUDRATE_BAUDRATE_Baud19200: u32 = 5152768;
pub const UART_BAUDRATE_BAUDRATE_Baud28800: u32 = 7729152;
pub const UART_BAUDRATE_BAUDRATE_Baud31250: u32 = 8388608;
pub const UART_BAUDRATE_BAUDRATE_Baud38400: u32 = 10309632;
pub const UART_BAUDRATE_BAUDRATE_Baud56000: u32 = 15007744;
pub const UART_BAUDRATE_BAUDRATE_Baud57600: u32 = 15462400;
pub const UART_BAUDRATE_BAUDRATE_Baud76800: u32 = 20615168;
pub const UART_BAUDRATE_BAUDRATE_Baud115200: u32 = 30924800;
pub const UART_BAUDRATE_BAUDRATE_Baud230400: u32 = 61845504;
pub const UART_BAUDRATE_BAUDRATE_Baud250000: u32 = 67108864;
pub const UART_BAUDRATE_BAUDRATE_Baud460800: u32 = 123695104;
pub const UART_BAUDRATE_BAUDRATE_Baud921600: u32 = 247386112;
pub const UART_BAUDRATE_BAUDRATE_Baud1M: u32 = 268435456;
pub const UART_CONFIG_STOP_Pos: u32 = 4;
pub const UART_CONFIG_STOP_Msk: u32 = 16;
pub const UART_CONFIG_STOP_One: u32 = 0;
pub const UART_CONFIG_STOP_Two: u32 = 1;
pub const UART_CONFIG_PARITY_Pos: u32 = 1;
pub const UART_CONFIG_PARITY_Msk: u32 = 14;
pub const UART_CONFIG_PARITY_Excluded: u32 = 0;
pub const UART_CONFIG_PARITY_Included: u32 = 7;
pub const UART_CONFIG_HWFC_Pos: u32 = 0;
pub const UART_CONFIG_HWFC_Msk: u32 = 1;
pub const UART_CONFIG_HWFC_Disabled: u32 = 0;
pub const UART_CONFIG_HWFC_Enabled: u32 = 1;
pub const UARTE_TASKS_STARTRX_TASKS_STARTRX_Pos: u32 = 0;
pub const UARTE_TASKS_STARTRX_TASKS_STARTRX_Msk: u32 = 1;
pub const UARTE_TASKS_STARTRX_TASKS_STARTRX_Trigger: u32 = 1;
pub const UARTE_TASKS_STOPRX_TASKS_STOPRX_Pos: u32 = 0;
pub const UARTE_TASKS_STOPRX_TASKS_STOPRX_Msk: u32 = 1;
pub const UARTE_TASKS_STOPRX_TASKS_STOPRX_Trigger: u32 = 1;
pub const UARTE_TASKS_STARTTX_TASKS_STARTTX_Pos: u32 = 0;
pub const UARTE_TASKS_STARTTX_TASKS_STARTTX_Msk: u32 = 1;
pub const UARTE_TASKS_STARTTX_TASKS_STARTTX_Trigger: u32 = 1;
pub const UARTE_TASKS_STOPTX_TASKS_STOPTX_Pos: u32 = 0;
pub const UARTE_TASKS_STOPTX_TASKS_STOPTX_Msk: u32 = 1;
pub const UARTE_TASKS_STOPTX_TASKS_STOPTX_Trigger: u32 = 1;
pub const UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Pos: u32 = 0;
pub const UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Msk: u32 = 1;
pub const UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Trigger: u32 = 1;
pub const UARTE_EVENTS_CTS_EVENTS_CTS_Pos: u32 = 0;
pub const UARTE_EVENTS_CTS_EVENTS_CTS_Msk: u32 = 1;
pub const UARTE_EVENTS_CTS_EVENTS_CTS_NotGenerated: u32 = 0;
pub const UARTE_EVENTS_CTS_EVENTS_CTS_Generated: u32 = 1;
pub const UARTE_EVENTS_NCTS_EVENTS_NCTS_Pos: u32 = 0;
pub const UARTE_EVENTS_NCTS_EVENTS_NCTS_Msk: u32 = 1;
pub const UARTE_EVENTS_NCTS_EVENTS_NCTS_NotGenerated: u32 = 0;
pub const UARTE_EVENTS_NCTS_EVENTS_NCTS_Generated: u32 = 1;
pub const UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos: u32 = 0;
pub const UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Msk: u32 = 1;
pub const UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_NotGenerated: u32 = 0;
pub const UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Generated: u32 = 1;
pub const UARTE_EVENTS_ENDRX_EVENTS_ENDRX_Pos: u32 = 0;
pub const UARTE_EVENTS_ENDRX_EVENTS_ENDRX_Msk: u32 = 1;
pub const UARTE_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated: u32 = 0;
pub const UARTE_EVENTS_ENDRX_EVENTS_ENDRX_Generated: u32 = 1;
pub const UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos: u32 = 0;
pub const UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Msk: u32 = 1;
pub const UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_NotGenerated: u32 = 0;
pub const UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Generated: u32 = 1;
pub const UARTE_EVENTS_ENDTX_EVENTS_ENDTX_Pos: u32 = 0;
pub const UARTE_EVENTS_ENDTX_EVENTS_ENDTX_Msk: u32 = 1;
pub const UARTE_EVENTS_ENDTX_EVENTS_ENDTX_NotGenerated: u32 = 0;
pub const UARTE_EVENTS_ENDTX_EVENTS_ENDTX_Generated: u32 = 1;
pub const UARTE_EVENTS_ERROR_EVENTS_ERROR_Pos: u32 = 0;
pub const UARTE_EVENTS_ERROR_EVENTS_ERROR_Msk: u32 = 1;
pub const UARTE_EVENTS_ERROR_EVENTS_ERROR_NotGenerated: u32 = 0;
pub const UARTE_EVENTS_ERROR_EVENTS_ERROR_Generated: u32 = 1;
pub const UARTE_EVENTS_RXTO_EVENTS_RXTO_Pos: u32 = 0;
pub const UARTE_EVENTS_RXTO_EVENTS_RXTO_Msk: u32 = 1;
pub const UARTE_EVENTS_RXTO_EVENTS_RXTO_NotGenerated: u32 = 0;
pub const UARTE_EVENTS_RXTO_EVENTS_RXTO_Generated: u32 = 1;
pub const UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos: u32 = 0;
pub const UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Msk: u32 = 1;
pub const UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_NotGenerated: u32 = 0;
pub const UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Generated: u32 = 1;
pub const UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos: u32 = 0;
pub const UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Msk: u32 = 1;
pub const UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_NotGenerated: u32 = 0;
pub const UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Generated: u32 = 1;
pub const UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Pos: u32 = 0;
pub const UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Msk: u32 = 1;
pub const UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_NotGenerated: u32 = 0;
pub const UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Generated: u32 = 1;
pub const UARTE_SHORTS_ENDRX_STOPRX_Pos: u32 = 6;
pub const UARTE_SHORTS_ENDRX_STOPRX_Msk: u32 = 64;
pub const UARTE_SHORTS_ENDRX_STOPRX_Disabled: u32 = 0;
pub const UARTE_SHORTS_ENDRX_STOPRX_Enabled: u32 = 1;
pub const UARTE_SHORTS_ENDRX_STARTRX_Pos: u32 = 5;
pub const UARTE_SHORTS_ENDRX_STARTRX_Msk: u32 = 32;
pub const UARTE_SHORTS_ENDRX_STARTRX_Disabled: u32 = 0;
pub const UARTE_SHORTS_ENDRX_STARTRX_Enabled: u32 = 1;
pub const UARTE_INTEN_TXSTOPPED_Pos: u32 = 22;
pub const UARTE_INTEN_TXSTOPPED_Msk: u32 = 4194304;
pub const UARTE_INTEN_TXSTOPPED_Disabled: u32 = 0;
pub const UARTE_INTEN_TXSTOPPED_Enabled: u32 = 1;
pub const UARTE_INTEN_TXSTARTED_Pos: u32 = 20;
pub const UARTE_INTEN_TXSTARTED_Msk: u32 = 1048576;
pub const UARTE_INTEN_TXSTARTED_Disabled: u32 = 0;
pub const UARTE_INTEN_TXSTARTED_Enabled: u32 = 1;
pub const UARTE_INTEN_RXSTARTED_Pos: u32 = 19;
pub const UARTE_INTEN_RXSTARTED_Msk: u32 = 524288;
pub const UARTE_INTEN_RXSTARTED_Disabled: u32 = 0;
pub const UARTE_INTEN_RXSTARTED_Enabled: u32 = 1;
pub const UARTE_INTEN_RXTO_Pos: u32 = 17;
pub const UARTE_INTEN_RXTO_Msk: u32 = 131072;
pub const UARTE_INTEN_RXTO_Disabled: u32 = 0;
pub const UARTE_INTEN_RXTO_Enabled: u32 = 1;
pub const UARTE_INTEN_ERROR_Pos: u32 = 9;
pub const UARTE_INTEN_ERROR_Msk: u32 = 512;
pub const UARTE_INTEN_ERROR_Disabled: u32 = 0;
pub const UARTE_INTEN_ERROR_Enabled: u32 = 1;
pub const UARTE_INTEN_ENDTX_Pos: u32 = 8;
pub const UARTE_INTEN_ENDTX_Msk: u32 = 256;
pub const UARTE_INTEN_ENDTX_Disabled: u32 = 0;
pub const UARTE_INTEN_ENDTX_Enabled: u32 = 1;
pub const UARTE_INTEN_TXDRDY_Pos: u32 = 7;
pub const UARTE_INTEN_TXDRDY_Msk: u32 = 128;
pub const UARTE_INTEN_TXDRDY_Disabled: u32 = 0;
pub const UARTE_INTEN_TXDRDY_Enabled: u32 = 1;
pub const UARTE_INTEN_ENDRX_Pos: u32 = 4;
pub const UARTE_INTEN_ENDRX_Msk: u32 = 16;
pub const UARTE_INTEN_ENDRX_Disabled: u32 = 0;
pub const UARTE_INTEN_ENDRX_Enabled: u32 = 1;
pub const UARTE_INTEN_RXDRDY_Pos: u32 = 2;
pub const UARTE_INTEN_RXDRDY_Msk: u32 = 4;
pub const UARTE_INTEN_RXDRDY_Disabled: u32 = 0;
pub const UARTE_INTEN_RXDRDY_Enabled: u32 = 1;
pub const UARTE_INTEN_NCTS_Pos: u32 = 1;
pub const UARTE_INTEN_NCTS_Msk: u32 = 2;
pub const UARTE_INTEN_NCTS_Disabled: u32 = 0;
pub const UARTE_INTEN_NCTS_Enabled: u32 = 1;
pub const UARTE_INTEN_CTS_Pos: u32 = 0;
pub const UARTE_INTEN_CTS_Msk: u32 = 1;
pub const UARTE_INTEN_CTS_Disabled: u32 = 0;
pub const UARTE_INTEN_CTS_Enabled: u32 = 1;
pub const UARTE_INTENSET_TXSTOPPED_Pos: u32 = 22;
pub const UARTE_INTENSET_TXSTOPPED_Msk: u32 = 4194304;
pub const UARTE_INTENSET_TXSTOPPED_Disabled: u32 = 0;
pub const UARTE_INTENSET_TXSTOPPED_Enabled: u32 = 1;
pub const UARTE_INTENSET_TXSTOPPED_Set: u32 = 1;
pub const UARTE_INTENSET_TXSTARTED_Pos: u32 = 20;
pub const UARTE_INTENSET_TXSTARTED_Msk: u32 = 1048576;
pub const UARTE_INTENSET_TXSTARTED_Disabled: u32 = 0;
pub const UARTE_INTENSET_TXSTARTED_Enabled: u32 = 1;
pub const UARTE_INTENSET_TXSTARTED_Set: u32 = 1;
pub const UARTE_INTENSET_RXSTARTED_Pos: u32 = 19;
pub const UARTE_INTENSET_RXSTARTED_Msk: u32 = 524288;
pub const UARTE_INTENSET_RXSTARTED_Disabled: u32 = 0;
pub const UARTE_INTENSET_RXSTARTED_Enabled: u32 = 1;
pub const UARTE_INTENSET_RXSTARTED_Set: u32 = 1;
pub const UARTE_INTENSET_RXTO_Pos: u32 = 17;
pub const UARTE_INTENSET_RXTO_Msk: u32 = 131072;
pub const UARTE_INTENSET_RXTO_Disabled: u32 = 0;
pub const UARTE_INTENSET_RXTO_Enabled: u32 = 1;
pub const UARTE_INTENSET_RXTO_Set: u32 = 1;
pub const UARTE_INTENSET_ERROR_Pos: u32 = 9;
pub const UARTE_INTENSET_ERROR_Msk: u32 = 512;
pub const UARTE_INTENSET_ERROR_Disabled: u32 = 0;
pub const UARTE_INTENSET_ERROR_Enabled: u32 = 1;
pub const UARTE_INTENSET_ERROR_Set: u32 = 1;
pub const UARTE_INTENSET_ENDTX_Pos: u32 = 8;
pub const UARTE_INTENSET_ENDTX_Msk: u32 = 256;
pub const UARTE_INTENSET_ENDTX_Disabled: u32 = 0;
pub const UARTE_INTENSET_ENDTX_Enabled: u32 = 1;
pub const UARTE_INTENSET_ENDTX_Set: u32 = 1;
pub const UARTE_INTENSET_TXDRDY_Pos: u32 = 7;
pub const UARTE_INTENSET_TXDRDY_Msk: u32 = 128;
pub const UARTE_INTENSET_TXDRDY_Disabled: u32 = 0;
pub const UARTE_INTENSET_TXDRDY_Enabled: u32 = 1;
pub const UARTE_INTENSET_TXDRDY_Set: u32 = 1;
pub const UARTE_INTENSET_ENDRX_Pos: u32 = 4;
pub const UARTE_INTENSET_ENDRX_Msk: u32 = 16;
pub const UARTE_INTENSET_ENDRX_Disabled: u32 = 0;
pub const UARTE_INTENSET_ENDRX_Enabled: u32 = 1;
pub const UARTE_INTENSET_ENDRX_Set: u32 = 1;
pub const UARTE_INTENSET_RXDRDY_Pos: u32 = 2;
pub const UARTE_INTENSET_RXDRDY_Msk: u32 = 4;
pub const UARTE_INTENSET_RXDRDY_Disabled: u32 = 0;
pub const UARTE_INTENSET_RXDRDY_Enabled: u32 = 1;
pub const UARTE_INTENSET_RXDRDY_Set: u32 = 1;
pub const UARTE_INTENSET_NCTS_Pos: u32 = 1;
pub const UARTE_INTENSET_NCTS_Msk: u32 = 2;
pub const UARTE_INTENSET_NCTS_Disabled: u32 = 0;
pub const UARTE_INTENSET_NCTS_Enabled: u32 = 1;
pub const UARTE_INTENSET_NCTS_Set: u32 = 1;
pub const UARTE_INTENSET_CTS_Pos: u32 = 0;
pub const UARTE_INTENSET_CTS_Msk: u32 = 1;
pub const UARTE_INTENSET_CTS_Disabled: u32 = 0;
pub const UARTE_INTENSET_CTS_Enabled: u32 = 1;
pub const UARTE_INTENSET_CTS_Set: u32 = 1;
pub const UARTE_INTENCLR_TXSTOPPED_Pos: u32 = 22;
pub const UARTE_INTENCLR_TXSTOPPED_Msk: u32 = 4194304;
pub const UARTE_INTENCLR_TXSTOPPED_Disabled: u32 = 0;
pub const UARTE_INTENCLR_TXSTOPPED_Enabled: u32 = 1;
pub const UARTE_INTENCLR_TXSTOPPED_Clear: u32 = 1;
pub const UARTE_INTENCLR_TXSTARTED_Pos: u32 = 20;
pub const UARTE_INTENCLR_TXSTARTED_Msk: u32 = 1048576;
pub const UARTE_INTENCLR_TXSTARTED_Disabled: u32 = 0;
pub const UARTE_INTENCLR_TXSTARTED_Enabled: u32 = 1;
pub const UARTE_INTENCLR_TXSTARTED_Clear: u32 = 1;
pub const UARTE_INTENCLR_RXSTARTED_Pos: u32 = 19;
pub const UARTE_INTENCLR_RXSTARTED_Msk: u32 = 524288;
pub const UARTE_INTENCLR_RXSTARTED_Disabled: u32 = 0;
pub const UARTE_INTENCLR_RXSTARTED_Enabled: u32 = 1;
pub const UARTE_INTENCLR_RXSTARTED_Clear: u32 = 1;
pub const UARTE_INTENCLR_RXTO_Pos: u32 = 17;
pub const UARTE_INTENCLR_RXTO_Msk: u32 = 131072;
pub const UARTE_INTENCLR_RXTO_Disabled: u32 = 0;
pub const UARTE_INTENCLR_RXTO_Enabled: u32 = 1;
pub const UARTE_INTENCLR_RXTO_Clear: u32 = 1;
pub const UARTE_INTENCLR_ERROR_Pos: u32 = 9;
pub const UARTE_INTENCLR_ERROR_Msk: u32 = 512;
pub const UARTE_INTENCLR_ERROR_Disabled: u32 = 0;
pub const UARTE_INTENCLR_ERROR_Enabled: u32 = 1;
pub const UARTE_INTENCLR_ERROR_Clear: u32 = 1;
pub const UARTE_INTENCLR_ENDTX_Pos: u32 = 8;
pub const UARTE_INTENCLR_ENDTX_Msk: u32 = 256;
pub const UARTE_INTENCLR_ENDTX_Disabled: u32 = 0;
pub const UARTE_INTENCLR_ENDTX_Enabled: u32 = 1;
pub const UARTE_INTENCLR_ENDTX_Clear: u32 = 1;
pub const UARTE_INTENCLR_TXDRDY_Pos: u32 = 7;
pub const UARTE_INTENCLR_TXDRDY_Msk: u32 = 128;
pub const UARTE_INTENCLR_TXDRDY_Disabled: u32 = 0;
pub const UARTE_INTENCLR_TXDRDY_Enabled: u32 = 1;
pub const UARTE_INTENCLR_TXDRDY_Clear: u32 = 1;
pub const UARTE_INTENCLR_ENDRX_Pos: u32 = 4;
pub const UARTE_INTENCLR_ENDRX_Msk: u32 = 16;
pub const UARTE_INTENCLR_ENDRX_Disabled: u32 = 0;
pub const UARTE_INTENCLR_ENDRX_Enabled: u32 = 1;
pub const UARTE_INTENCLR_ENDRX_Clear: u32 = 1;
pub const UARTE_INTENCLR_RXDRDY_Pos: u32 = 2;
pub const UARTE_INTENCLR_RXDRDY_Msk: u32 = 4;
pub const UARTE_INTENCLR_RXDRDY_Disabled: u32 = 0;
pub const UARTE_INTENCLR_RXDRDY_Enabled: u32 = 1;
pub const UARTE_INTENCLR_RXDRDY_Clear: u32 = 1;
pub const UARTE_INTENCLR_NCTS_Pos: u32 = 1;
pub const UARTE_INTENCLR_NCTS_Msk: u32 = 2;
pub const UARTE_INTENCLR_NCTS_Disabled: u32 = 0;
pub const UARTE_INTENCLR_NCTS_Enabled: u32 = 1;
pub const UARTE_INTENCLR_NCTS_Clear: u32 = 1;
pub const UARTE_INTENCLR_CTS_Pos: u32 = 0;
pub const UARTE_INTENCLR_CTS_Msk: u32 = 1;
pub const UARTE_INTENCLR_CTS_Disabled: u32 = 0;
pub const UARTE_INTENCLR_CTS_Enabled: u32 = 1;
pub const UARTE_INTENCLR_CTS_Clear: u32 = 1;
pub const UARTE_ERRORSRC_BREAK_Pos: u32 = 3;
pub const UARTE_ERRORSRC_BREAK_Msk: u32 = 8;
pub const UARTE_ERRORSRC_BREAK_NotPresent: u32 = 0;
pub const UARTE_ERRORSRC_BREAK_Present: u32 = 1;
pub const UARTE_ERRORSRC_FRAMING_Pos: u32 = 2;
pub const UARTE_ERRORSRC_FRAMING_Msk: u32 = 4;
pub const UARTE_ERRORSRC_FRAMING_NotPresent: u32 = 0;
pub const UARTE_ERRORSRC_FRAMING_Present: u32 = 1;
pub const UARTE_ERRORSRC_PARITY_Pos: u32 = 1;
pub const UARTE_ERRORSRC_PARITY_Msk: u32 = 2;
pub const UARTE_ERRORSRC_PARITY_NotPresent: u32 = 0;
pub const UARTE_ERRORSRC_PARITY_Present: u32 = 1;
pub const UARTE_ERRORSRC_OVERRUN_Pos: u32 = 0;
pub const UARTE_ERRORSRC_OVERRUN_Msk: u32 = 1;
pub const UARTE_ERRORSRC_OVERRUN_NotPresent: u32 = 0;
pub const UARTE_ERRORSRC_OVERRUN_Present: u32 = 1;
pub const UARTE_ENABLE_ENABLE_Pos: u32 = 0;
pub const UARTE_ENABLE_ENABLE_Msk: u32 = 15;
pub const UARTE_ENABLE_ENABLE_Disabled: u32 = 0;
pub const UARTE_ENABLE_ENABLE_Enabled: u32 = 8;
pub const UARTE_PSEL_RTS_CONNECT_Pos: u32 = 31;
pub const UARTE_PSEL_RTS_CONNECT_Msk: u32 = 2147483648;
pub const UARTE_PSEL_RTS_CONNECT_Connected: u32 = 0;
pub const UARTE_PSEL_RTS_CONNECT_Disconnected: u32 = 1;
pub const UARTE_PSEL_RTS_PORT_Pos: u32 = 5;
pub const UARTE_PSEL_RTS_PORT_Msk: u32 = 32;
pub const UARTE_PSEL_RTS_PIN_Pos: u32 = 0;
pub const UARTE_PSEL_RTS_PIN_Msk: u32 = 31;
pub const UARTE_PSEL_TXD_CONNECT_Pos: u32 = 31;
pub const UARTE_PSEL_TXD_CONNECT_Msk: u32 = 2147483648;
pub const UARTE_PSEL_TXD_CONNECT_Connected: u32 = 0;
pub const UARTE_PSEL_TXD_CONNECT_Disconnected: u32 = 1;
pub const UARTE_PSEL_TXD_PORT_Pos: u32 = 5;
pub const UARTE_PSEL_TXD_PORT_Msk: u32 = 32;
pub const UARTE_PSEL_TXD_PIN_Pos: u32 = 0;
pub const UARTE_PSEL_TXD_PIN_Msk: u32 = 31;
pub const UARTE_PSEL_CTS_CONNECT_Pos: u32 = 31;
pub const UARTE_PSEL_CTS_CONNECT_Msk: u32 = 2147483648;
pub const UARTE_PSEL_CTS_CONNECT_Connected: u32 = 0;
pub const UARTE_PSEL_CTS_CONNECT_Disconnected: u32 = 1;
pub const UARTE_PSEL_CTS_PORT_Pos: u32 = 5;
pub const UARTE_PSEL_CTS_PORT_Msk: u32 = 32;
pub const UARTE_PSEL_CTS_PIN_Pos: u32 = 0;
pub const UARTE_PSEL_CTS_PIN_Msk: u32 = 31;
pub const UARTE_PSEL_RXD_CONNECT_Pos: u32 = 31;
pub const UARTE_PSEL_RXD_CONNECT_Msk: u32 = 2147483648;
pub const UARTE_PSEL_RXD_CONNECT_Connected: u32 = 0;
pub const UARTE_PSEL_RXD_CONNECT_Disconnected: u32 = 1;
pub const UARTE_PSEL_RXD_PORT_Pos: u32 = 5;
pub const UARTE_PSEL_RXD_PORT_Msk: u32 = 32;
pub const UARTE_PSEL_RXD_PIN_Pos: u32 = 0;
pub const UARTE_PSEL_RXD_PIN_Msk: u32 = 31;
pub const UARTE_BAUDRATE_BAUDRATE_Pos: u32 = 0;
pub const UARTE_BAUDRATE_BAUDRATE_Msk: u32 = 4294967295;
pub const UARTE_BAUDRATE_BAUDRATE_Baud1200: u32 = 323584;
pub const UARTE_BAUDRATE_BAUDRATE_Baud2400: u32 = 643072;
pub const UARTE_BAUDRATE_BAUDRATE_Baud4800: u32 = 1290240;
pub const UARTE_BAUDRATE_BAUDRATE_Baud9600: u32 = 2576384;
pub const UARTE_BAUDRATE_BAUDRATE_Baud14400: u32 = 3862528;
pub const UARTE_BAUDRATE_BAUDRATE_Baud19200: u32 = 5152768;
pub const UARTE_BAUDRATE_BAUDRATE_Baud28800: u32 = 7716864;
pub const UARTE_BAUDRATE_BAUDRATE_Baud31250: u32 = 8388608;
pub const UARTE_BAUDRATE_BAUDRATE_Baud38400: u32 = 10289152;
pub const UARTE_BAUDRATE_BAUDRATE_Baud56000: u32 = 15007744;
pub const UARTE_BAUDRATE_BAUDRATE_Baud57600: u32 = 15400960;
pub const UARTE_BAUDRATE_BAUDRATE_Baud76800: u32 = 20615168;
pub const UARTE_BAUDRATE_BAUDRATE_Baud115200: u32 = 30801920;
pub const UARTE_BAUDRATE_BAUDRATE_Baud230400: u32 = 61865984;
pub const UARTE_BAUDRATE_BAUDRATE_Baud250000: u32 = 67108864;
pub const UARTE_BAUDRATE_BAUDRATE_Baud460800: u32 = 121634816;
pub const UARTE_BAUDRATE_BAUDRATE_Baud921600: u32 = 251658240;
pub const UARTE_BAUDRATE_BAUDRATE_Baud1M: u32 = 268435456;
pub const UARTE_RXD_PTR_PTR_Pos: u32 = 0;
pub const UARTE_RXD_PTR_PTR_Msk: u32 = 4294967295;
pub const UARTE_RXD_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const UARTE_RXD_MAXCNT_MAXCNT_Msk: u32 = 65535;
pub const UARTE_RXD_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const UARTE_RXD_AMOUNT_AMOUNT_Msk: u32 = 65535;
pub const UARTE_TXD_PTR_PTR_Pos: u32 = 0;
pub const UARTE_TXD_PTR_PTR_Msk: u32 = 4294967295;
pub const UARTE_TXD_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const UARTE_TXD_MAXCNT_MAXCNT_Msk: u32 = 65535;
pub const UARTE_TXD_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const UARTE_TXD_AMOUNT_AMOUNT_Msk: u32 = 65535;
pub const UARTE_CONFIG_STOP_Pos: u32 = 4;
pub const UARTE_CONFIG_STOP_Msk: u32 = 16;
pub const UARTE_CONFIG_STOP_One: u32 = 0;
pub const UARTE_CONFIG_STOP_Two: u32 = 1;
pub const UARTE_CONFIG_PARITY_Pos: u32 = 1;
pub const UARTE_CONFIG_PARITY_Msk: u32 = 14;
pub const UARTE_CONFIG_PARITY_Excluded: u32 = 0;
pub const UARTE_CONFIG_PARITY_Included: u32 = 7;
pub const UARTE_CONFIG_HWFC_Pos: u32 = 0;
pub const UARTE_CONFIG_HWFC_Msk: u32 = 1;
pub const UARTE_CONFIG_HWFC_Disabled: u32 = 0;
pub const UARTE_CONFIG_HWFC_Enabled: u32 = 1;
pub const UICR_NRFFW_NRFFW_Pos: u32 = 0;
pub const UICR_NRFFW_NRFFW_Msk: u32 = 4294967295;
pub const UICR_NRFHW_NRFHW_Pos: u32 = 0;
pub const UICR_NRFHW_NRFHW_Msk: u32 = 4294967295;
pub const UICR_CUSTOMER_CUSTOMER_Pos: u32 = 0;
pub const UICR_CUSTOMER_CUSTOMER_Msk: u32 = 4294967295;
pub const UICR_PSELRESET_CONNECT_Pos: u32 = 31;
pub const UICR_PSELRESET_CONNECT_Msk: u32 = 2147483648;
pub const UICR_PSELRESET_CONNECT_Connected: u32 = 0;
pub const UICR_PSELRESET_CONNECT_Disconnected: u32 = 1;
pub const UICR_PSELRESET_PORT_Pos: u32 = 5;
pub const UICR_PSELRESET_PORT_Msk: u32 = 32;
pub const UICR_PSELRESET_PIN_Pos: u32 = 0;
pub const UICR_PSELRESET_PIN_Msk: u32 = 31;
pub const UICR_APPROTECT_PALL_Pos: u32 = 0;
pub const UICR_APPROTECT_PALL_Msk: u32 = 255;
pub const UICR_APPROTECT_PALL_Enabled: u32 = 0;
pub const UICR_APPROTECT_PALL_HwDisabled: u32 = 90;
pub const UICR_APPROTECT_PALL_Disabled: u32 = 255;
pub const UICR_NFCPINS_PROTECT_Pos: u32 = 0;
pub const UICR_NFCPINS_PROTECT_Msk: u32 = 1;
pub const UICR_NFCPINS_PROTECT_Disabled: u32 = 0;
pub const UICR_NFCPINS_PROTECT_NFC: u32 = 1;
pub const UICR_DEBUGCTRL_CPUFPBEN_Pos: u32 = 8;
pub const UICR_DEBUGCTRL_CPUFPBEN_Msk: u32 = 65280;
pub const UICR_DEBUGCTRL_CPUFPBEN_Disabled: u32 = 0;
pub const UICR_DEBUGCTRL_CPUFPBEN_Enabled: u32 = 255;
pub const UICR_DEBUGCTRL_CPUNIDEN_Pos: u32 = 0;
pub const UICR_DEBUGCTRL_CPUNIDEN_Msk: u32 = 255;
pub const UICR_DEBUGCTRL_CPUNIDEN_Disabled: u32 = 0;
pub const UICR_DEBUGCTRL_CPUNIDEN_Enabled: u32 = 255;
pub const UICR_REGOUT0_VOUT_Pos: u32 = 0;
pub const UICR_REGOUT0_VOUT_Msk: u32 = 7;
pub const UICR_REGOUT0_VOUT_1V8: u32 = 0;
pub const UICR_REGOUT0_VOUT_2V1: u32 = 1;
pub const UICR_REGOUT0_VOUT_2V4: u32 = 2;
pub const UICR_REGOUT0_VOUT_2V7: u32 = 3;
pub const UICR_REGOUT0_VOUT_3V0: u32 = 4;
pub const UICR_REGOUT0_VOUT_3V3: u32 = 5;
pub const UICR_REGOUT0_VOUT_DEFAULT: u32 = 7;
pub const USBD_TASKS_STARTEPIN_TASKS_STARTEPIN_Pos: u32 = 0;
pub const USBD_TASKS_STARTEPIN_TASKS_STARTEPIN_Msk: u32 = 1;
pub const USBD_TASKS_STARTEPIN_TASKS_STARTEPIN_Trigger: u32 = 1;
pub const USBD_TASKS_STARTISOIN_TASKS_STARTISOIN_Pos: u32 = 0;
pub const USBD_TASKS_STARTISOIN_TASKS_STARTISOIN_Msk: u32 = 1;
pub const USBD_TASKS_STARTISOIN_TASKS_STARTISOIN_Trigger: u32 = 1;
pub const USBD_TASKS_STARTEPOUT_TASKS_STARTEPOUT_Pos: u32 = 0;
pub const USBD_TASKS_STARTEPOUT_TASKS_STARTEPOUT_Msk: u32 = 1;
pub const USBD_TASKS_STARTEPOUT_TASKS_STARTEPOUT_Trigger: u32 = 1;
pub const USBD_TASKS_STARTISOOUT_TASKS_STARTISOOUT_Pos: u32 = 0;
pub const USBD_TASKS_STARTISOOUT_TASKS_STARTISOOUT_Msk: u32 = 1;
pub const USBD_TASKS_STARTISOOUT_TASKS_STARTISOOUT_Trigger: u32 = 1;
pub const USBD_TASKS_EP0RCVOUT_TASKS_EP0RCVOUT_Pos: u32 = 0;
pub const USBD_TASKS_EP0RCVOUT_TASKS_EP0RCVOUT_Msk: u32 = 1;
pub const USBD_TASKS_EP0RCVOUT_TASKS_EP0RCVOUT_Trigger: u32 = 1;
pub const USBD_TASKS_EP0STATUS_TASKS_EP0STATUS_Pos: u32 = 0;
pub const USBD_TASKS_EP0STATUS_TASKS_EP0STATUS_Msk: u32 = 1;
pub const USBD_TASKS_EP0STATUS_TASKS_EP0STATUS_Trigger: u32 = 1;
pub const USBD_TASKS_EP0STALL_TASKS_EP0STALL_Pos: u32 = 0;
pub const USBD_TASKS_EP0STALL_TASKS_EP0STALL_Msk: u32 = 1;
pub const USBD_TASKS_EP0STALL_TASKS_EP0STALL_Trigger: u32 = 1;
pub const USBD_TASKS_DPDMDRIVE_TASKS_DPDMDRIVE_Pos: u32 = 0;
pub const USBD_TASKS_DPDMDRIVE_TASKS_DPDMDRIVE_Msk: u32 = 1;
pub const USBD_TASKS_DPDMDRIVE_TASKS_DPDMDRIVE_Trigger: u32 = 1;
pub const USBD_TASKS_DPDMNODRIVE_TASKS_DPDMNODRIVE_Pos: u32 = 0;
pub const USBD_TASKS_DPDMNODRIVE_TASKS_DPDMNODRIVE_Msk: u32 = 1;
pub const USBD_TASKS_DPDMNODRIVE_TASKS_DPDMNODRIVE_Trigger: u32 = 1;
pub const USBD_EVENTS_USBRESET_EVENTS_USBRESET_Pos: u32 = 0;
pub const USBD_EVENTS_USBRESET_EVENTS_USBRESET_Msk: u32 = 1;
pub const USBD_EVENTS_USBRESET_EVENTS_USBRESET_NotGenerated: u32 = 0;
pub const USBD_EVENTS_USBRESET_EVENTS_USBRESET_Generated: u32 = 1;
pub const USBD_EVENTS_STARTED_EVENTS_STARTED_Pos: u32 = 0;
pub const USBD_EVENTS_STARTED_EVENTS_STARTED_Msk: u32 = 1;
pub const USBD_EVENTS_STARTED_EVENTS_STARTED_NotGenerated: u32 = 0;
pub const USBD_EVENTS_STARTED_EVENTS_STARTED_Generated: u32 = 1;
pub const USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_Pos: u32 = 0;
pub const USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_Msk: u32 = 1;
pub const USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_NotGenerated: u32 = 0;
pub const USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_Generated: u32 = 1;
pub const USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_Pos: u32 = 0;
pub const USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_Msk: u32 = 1;
pub const USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_NotGenerated: u32 = 0;
pub const USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_Generated: u32 = 1;
pub const USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_Pos: u32 = 0;
pub const USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_Msk: u32 = 1;
pub const USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_NotGenerated: u32 = 0;
pub const USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_Generated: u32 = 1;
pub const USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_Pos: u32 = 0;
pub const USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_Msk: u32 = 1;
pub const USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_NotGenerated: u32 = 0;
pub const USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_Generated: u32 = 1;
pub const USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_Pos: u32 = 0;
pub const USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_Msk: u32 = 1;
pub const USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_NotGenerated: u32 = 0;
pub const USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_Generated: u32 = 1;
pub const USBD_EVENTS_SOF_EVENTS_SOF_Pos: u32 = 0;
pub const USBD_EVENTS_SOF_EVENTS_SOF_Msk: u32 = 1;
pub const USBD_EVENTS_SOF_EVENTS_SOF_NotGenerated: u32 = 0;
pub const USBD_EVENTS_SOF_EVENTS_SOF_Generated: u32 = 1;
pub const USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_Pos: u32 = 0;
pub const USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_Msk: u32 = 1;
pub const USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_NotGenerated: u32 = 0;
pub const USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_Generated: u32 = 1;
pub const USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_Pos: u32 = 0;
pub const USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_Msk: u32 = 1;
pub const USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_NotGenerated: u32 = 0;
pub const USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_Generated: u32 = 1;
pub const USBD_EVENTS_EPDATA_EVENTS_EPDATA_Pos: u32 = 0;
pub const USBD_EVENTS_EPDATA_EVENTS_EPDATA_Msk: u32 = 1;
pub const USBD_EVENTS_EPDATA_EVENTS_EPDATA_NotGenerated: u32 = 0;
pub const USBD_EVENTS_EPDATA_EVENTS_EPDATA_Generated: u32 = 1;
pub const USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Pos: u32 = 4;
pub const USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Msk: u32 = 16;
pub const USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Disabled: u32 = 0;
pub const USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Enabled: u32 = 1;
pub const USBD_SHORTS_ENDEPOUT0_EP0STATUS_Pos: u32 = 3;
pub const USBD_SHORTS_ENDEPOUT0_EP0STATUS_Msk: u32 = 8;
pub const USBD_SHORTS_ENDEPOUT0_EP0STATUS_Disabled: u32 = 0;
pub const USBD_SHORTS_ENDEPOUT0_EP0STATUS_Enabled: u32 = 1;
pub const USBD_SHORTS_EP0DATADONE_EP0STATUS_Pos: u32 = 2;
pub const USBD_SHORTS_EP0DATADONE_EP0STATUS_Msk: u32 = 4;
pub const USBD_SHORTS_EP0DATADONE_EP0STATUS_Disabled: u32 = 0;
pub const USBD_SHORTS_EP0DATADONE_EP0STATUS_Enabled: u32 = 1;
pub const USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Pos: u32 = 1;
pub const USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Msk: u32 = 2;
pub const USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Disabled: u32 = 0;
pub const USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Enabled: u32 = 1;
pub const USBD_SHORTS_EP0DATADONE_STARTEPIN0_Pos: u32 = 0;
pub const USBD_SHORTS_EP0DATADONE_STARTEPIN0_Msk: u32 = 1;
pub const USBD_SHORTS_EP0DATADONE_STARTEPIN0_Disabled: u32 = 0;
pub const USBD_SHORTS_EP0DATADONE_STARTEPIN0_Enabled: u32 = 1;
pub const USBD_INTEN_EPDATA_Pos: u32 = 24;
pub const USBD_INTEN_EPDATA_Msk: u32 = 16777216;
pub const USBD_INTEN_EPDATA_Disabled: u32 = 0;
pub const USBD_INTEN_EPDATA_Enabled: u32 = 1;
pub const USBD_INTEN_EP0SETUP_Pos: u32 = 23;
pub const USBD_INTEN_EP0SETUP_Msk: u32 = 8388608;
pub const USBD_INTEN_EP0SETUP_Disabled: u32 = 0;
pub const USBD_INTEN_EP0SETUP_Enabled: u32 = 1;
pub const USBD_INTEN_USBEVENT_Pos: u32 = 22;
pub const USBD_INTEN_USBEVENT_Msk: u32 = 4194304;
pub const USBD_INTEN_USBEVENT_Disabled: u32 = 0;
pub const USBD_INTEN_USBEVENT_Enabled: u32 = 1;
pub const USBD_INTEN_SOF_Pos: u32 = 21;
pub const USBD_INTEN_SOF_Msk: u32 = 2097152;
pub const USBD_INTEN_SOF_Disabled: u32 = 0;
pub const USBD_INTEN_SOF_Enabled: u32 = 1;
pub const USBD_INTEN_ENDISOOUT_Pos: u32 = 20;
pub const USBD_INTEN_ENDISOOUT_Msk: u32 = 1048576;
pub const USBD_INTEN_ENDISOOUT_Disabled: u32 = 0;
pub const USBD_INTEN_ENDISOOUT_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPOUT7_Pos: u32 = 19;
pub const USBD_INTEN_ENDEPOUT7_Msk: u32 = 524288;
pub const USBD_INTEN_ENDEPOUT7_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPOUT7_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPOUT6_Pos: u32 = 18;
pub const USBD_INTEN_ENDEPOUT6_Msk: u32 = 262144;
pub const USBD_INTEN_ENDEPOUT6_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPOUT6_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPOUT5_Pos: u32 = 17;
pub const USBD_INTEN_ENDEPOUT5_Msk: u32 = 131072;
pub const USBD_INTEN_ENDEPOUT5_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPOUT5_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPOUT4_Pos: u32 = 16;
pub const USBD_INTEN_ENDEPOUT4_Msk: u32 = 65536;
pub const USBD_INTEN_ENDEPOUT4_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPOUT4_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPOUT3_Pos: u32 = 15;
pub const USBD_INTEN_ENDEPOUT3_Msk: u32 = 32768;
pub const USBD_INTEN_ENDEPOUT3_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPOUT3_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPOUT2_Pos: u32 = 14;
pub const USBD_INTEN_ENDEPOUT2_Msk: u32 = 16384;
pub const USBD_INTEN_ENDEPOUT2_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPOUT2_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPOUT1_Pos: u32 = 13;
pub const USBD_INTEN_ENDEPOUT1_Msk: u32 = 8192;
pub const USBD_INTEN_ENDEPOUT1_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPOUT1_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPOUT0_Pos: u32 = 12;
pub const USBD_INTEN_ENDEPOUT0_Msk: u32 = 4096;
pub const USBD_INTEN_ENDEPOUT0_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPOUT0_Enabled: u32 = 1;
pub const USBD_INTEN_ENDISOIN_Pos: u32 = 11;
pub const USBD_INTEN_ENDISOIN_Msk: u32 = 2048;
pub const USBD_INTEN_ENDISOIN_Disabled: u32 = 0;
pub const USBD_INTEN_ENDISOIN_Enabled: u32 = 1;
pub const USBD_INTEN_EP0DATADONE_Pos: u32 = 10;
pub const USBD_INTEN_EP0DATADONE_Msk: u32 = 1024;
pub const USBD_INTEN_EP0DATADONE_Disabled: u32 = 0;
pub const USBD_INTEN_EP0DATADONE_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPIN7_Pos: u32 = 9;
pub const USBD_INTEN_ENDEPIN7_Msk: u32 = 512;
pub const USBD_INTEN_ENDEPIN7_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPIN7_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPIN6_Pos: u32 = 8;
pub const USBD_INTEN_ENDEPIN6_Msk: u32 = 256;
pub const USBD_INTEN_ENDEPIN6_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPIN6_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPIN5_Pos: u32 = 7;
pub const USBD_INTEN_ENDEPIN5_Msk: u32 = 128;
pub const USBD_INTEN_ENDEPIN5_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPIN5_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPIN4_Pos: u32 = 6;
pub const USBD_INTEN_ENDEPIN4_Msk: u32 = 64;
pub const USBD_INTEN_ENDEPIN4_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPIN4_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPIN3_Pos: u32 = 5;
pub const USBD_INTEN_ENDEPIN3_Msk: u32 = 32;
pub const USBD_INTEN_ENDEPIN3_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPIN3_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPIN2_Pos: u32 = 4;
pub const USBD_INTEN_ENDEPIN2_Msk: u32 = 16;
pub const USBD_INTEN_ENDEPIN2_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPIN2_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPIN1_Pos: u32 = 3;
pub const USBD_INTEN_ENDEPIN1_Msk: u32 = 8;
pub const USBD_INTEN_ENDEPIN1_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPIN1_Enabled: u32 = 1;
pub const USBD_INTEN_ENDEPIN0_Pos: u32 = 2;
pub const USBD_INTEN_ENDEPIN0_Msk: u32 = 4;
pub const USBD_INTEN_ENDEPIN0_Disabled: u32 = 0;
pub const USBD_INTEN_ENDEPIN0_Enabled: u32 = 1;
pub const USBD_INTEN_STARTED_Pos: u32 = 1;
pub const USBD_INTEN_STARTED_Msk: u32 = 2;
pub const USBD_INTEN_STARTED_Disabled: u32 = 0;
pub const USBD_INTEN_STARTED_Enabled: u32 = 1;
pub const USBD_INTEN_USBRESET_Pos: u32 = 0;
pub const USBD_INTEN_USBRESET_Msk: u32 = 1;
pub const USBD_INTEN_USBRESET_Disabled: u32 = 0;
pub const USBD_INTEN_USBRESET_Enabled: u32 = 1;
pub const USBD_INTENSET_EPDATA_Pos: u32 = 24;
pub const USBD_INTENSET_EPDATA_Msk: u32 = 16777216;
pub const USBD_INTENSET_EPDATA_Disabled: u32 = 0;
pub const USBD_INTENSET_EPDATA_Enabled: u32 = 1;
pub const USBD_INTENSET_EPDATA_Set: u32 = 1;
pub const USBD_INTENSET_EP0SETUP_Pos: u32 = 23;
pub const USBD_INTENSET_EP0SETUP_Msk: u32 = 8388608;
pub const USBD_INTENSET_EP0SETUP_Disabled: u32 = 0;
pub const USBD_INTENSET_EP0SETUP_Enabled: u32 = 1;
pub const USBD_INTENSET_EP0SETUP_Set: u32 = 1;
pub const USBD_INTENSET_USBEVENT_Pos: u32 = 22;
pub const USBD_INTENSET_USBEVENT_Msk: u32 = 4194304;
pub const USBD_INTENSET_USBEVENT_Disabled: u32 = 0;
pub const USBD_INTENSET_USBEVENT_Enabled: u32 = 1;
pub const USBD_INTENSET_USBEVENT_Set: u32 = 1;
pub const USBD_INTENSET_SOF_Pos: u32 = 21;
pub const USBD_INTENSET_SOF_Msk: u32 = 2097152;
pub const USBD_INTENSET_SOF_Disabled: u32 = 0;
pub const USBD_INTENSET_SOF_Enabled: u32 = 1;
pub const USBD_INTENSET_SOF_Set: u32 = 1;
pub const USBD_INTENSET_ENDISOOUT_Pos: u32 = 20;
pub const USBD_INTENSET_ENDISOOUT_Msk: u32 = 1048576;
pub const USBD_INTENSET_ENDISOOUT_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDISOOUT_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDISOOUT_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT7_Pos: u32 = 19;
pub const USBD_INTENSET_ENDEPOUT7_Msk: u32 = 524288;
pub const USBD_INTENSET_ENDEPOUT7_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPOUT7_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT7_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT6_Pos: u32 = 18;
pub const USBD_INTENSET_ENDEPOUT6_Msk: u32 = 262144;
pub const USBD_INTENSET_ENDEPOUT6_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPOUT6_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT6_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT5_Pos: u32 = 17;
pub const USBD_INTENSET_ENDEPOUT5_Msk: u32 = 131072;
pub const USBD_INTENSET_ENDEPOUT5_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPOUT5_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT5_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT4_Pos: u32 = 16;
pub const USBD_INTENSET_ENDEPOUT4_Msk: u32 = 65536;
pub const USBD_INTENSET_ENDEPOUT4_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPOUT4_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT4_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT3_Pos: u32 = 15;
pub const USBD_INTENSET_ENDEPOUT3_Msk: u32 = 32768;
pub const USBD_INTENSET_ENDEPOUT3_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPOUT3_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT3_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT2_Pos: u32 = 14;
pub const USBD_INTENSET_ENDEPOUT2_Msk: u32 = 16384;
pub const USBD_INTENSET_ENDEPOUT2_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPOUT2_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT2_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT1_Pos: u32 = 13;
pub const USBD_INTENSET_ENDEPOUT1_Msk: u32 = 8192;
pub const USBD_INTENSET_ENDEPOUT1_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPOUT1_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT1_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT0_Pos: u32 = 12;
pub const USBD_INTENSET_ENDEPOUT0_Msk: u32 = 4096;
pub const USBD_INTENSET_ENDEPOUT0_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPOUT0_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPOUT0_Set: u32 = 1;
pub const USBD_INTENSET_ENDISOIN_Pos: u32 = 11;
pub const USBD_INTENSET_ENDISOIN_Msk: u32 = 2048;
pub const USBD_INTENSET_ENDISOIN_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDISOIN_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDISOIN_Set: u32 = 1;
pub const USBD_INTENSET_EP0DATADONE_Pos: u32 = 10;
pub const USBD_INTENSET_EP0DATADONE_Msk: u32 = 1024;
pub const USBD_INTENSET_EP0DATADONE_Disabled: u32 = 0;
pub const USBD_INTENSET_EP0DATADONE_Enabled: u32 = 1;
pub const USBD_INTENSET_EP0DATADONE_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPIN7_Pos: u32 = 9;
pub const USBD_INTENSET_ENDEPIN7_Msk: u32 = 512;
pub const USBD_INTENSET_ENDEPIN7_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPIN7_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPIN7_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPIN6_Pos: u32 = 8;
pub const USBD_INTENSET_ENDEPIN6_Msk: u32 = 256;
pub const USBD_INTENSET_ENDEPIN6_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPIN6_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPIN6_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPIN5_Pos: u32 = 7;
pub const USBD_INTENSET_ENDEPIN5_Msk: u32 = 128;
pub const USBD_INTENSET_ENDEPIN5_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPIN5_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPIN5_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPIN4_Pos: u32 = 6;
pub const USBD_INTENSET_ENDEPIN4_Msk: u32 = 64;
pub const USBD_INTENSET_ENDEPIN4_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPIN4_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPIN4_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPIN3_Pos: u32 = 5;
pub const USBD_INTENSET_ENDEPIN3_Msk: u32 = 32;
pub const USBD_INTENSET_ENDEPIN3_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPIN3_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPIN3_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPIN2_Pos: u32 = 4;
pub const USBD_INTENSET_ENDEPIN2_Msk: u32 = 16;
pub const USBD_INTENSET_ENDEPIN2_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPIN2_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPIN2_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPIN1_Pos: u32 = 3;
pub const USBD_INTENSET_ENDEPIN1_Msk: u32 = 8;
pub const USBD_INTENSET_ENDEPIN1_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPIN1_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPIN1_Set: u32 = 1;
pub const USBD_INTENSET_ENDEPIN0_Pos: u32 = 2;
pub const USBD_INTENSET_ENDEPIN0_Msk: u32 = 4;
pub const USBD_INTENSET_ENDEPIN0_Disabled: u32 = 0;
pub const USBD_INTENSET_ENDEPIN0_Enabled: u32 = 1;
pub const USBD_INTENSET_ENDEPIN0_Set: u32 = 1;
pub const USBD_INTENSET_STARTED_Pos: u32 = 1;
pub const USBD_INTENSET_STARTED_Msk: u32 = 2;
pub const USBD_INTENSET_STARTED_Disabled: u32 = 0;
pub const USBD_INTENSET_STARTED_Enabled: u32 = 1;
pub const USBD_INTENSET_STARTED_Set: u32 = 1;
pub const USBD_INTENSET_USBRESET_Pos: u32 = 0;
pub const USBD_INTENSET_USBRESET_Msk: u32 = 1;
pub const USBD_INTENSET_USBRESET_Disabled: u32 = 0;
pub const USBD_INTENSET_USBRESET_Enabled: u32 = 1;
pub const USBD_INTENSET_USBRESET_Set: u32 = 1;
pub const USBD_INTENCLR_EPDATA_Pos: u32 = 24;
pub const USBD_INTENCLR_EPDATA_Msk: u32 = 16777216;
pub const USBD_INTENCLR_EPDATA_Disabled: u32 = 0;
pub const USBD_INTENCLR_EPDATA_Enabled: u32 = 1;
pub const USBD_INTENCLR_EPDATA_Clear: u32 = 1;
pub const USBD_INTENCLR_EP0SETUP_Pos: u32 = 23;
pub const USBD_INTENCLR_EP0SETUP_Msk: u32 = 8388608;
pub const USBD_INTENCLR_EP0SETUP_Disabled: u32 = 0;
pub const USBD_INTENCLR_EP0SETUP_Enabled: u32 = 1;
pub const USBD_INTENCLR_EP0SETUP_Clear: u32 = 1;
pub const USBD_INTENCLR_USBEVENT_Pos: u32 = 22;
pub const USBD_INTENCLR_USBEVENT_Msk: u32 = 4194304;
pub const USBD_INTENCLR_USBEVENT_Disabled: u32 = 0;
pub const USBD_INTENCLR_USBEVENT_Enabled: u32 = 1;
pub const USBD_INTENCLR_USBEVENT_Clear: u32 = 1;
pub const USBD_INTENCLR_SOF_Pos: u32 = 21;
pub const USBD_INTENCLR_SOF_Msk: u32 = 2097152;
pub const USBD_INTENCLR_SOF_Disabled: u32 = 0;
pub const USBD_INTENCLR_SOF_Enabled: u32 = 1;
pub const USBD_INTENCLR_SOF_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDISOOUT_Pos: u32 = 20;
pub const USBD_INTENCLR_ENDISOOUT_Msk: u32 = 1048576;
pub const USBD_INTENCLR_ENDISOOUT_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDISOOUT_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDISOOUT_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT7_Pos: u32 = 19;
pub const USBD_INTENCLR_ENDEPOUT7_Msk: u32 = 524288;
pub const USBD_INTENCLR_ENDEPOUT7_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPOUT7_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT7_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT6_Pos: u32 = 18;
pub const USBD_INTENCLR_ENDEPOUT6_Msk: u32 = 262144;
pub const USBD_INTENCLR_ENDEPOUT6_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPOUT6_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT6_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT5_Pos: u32 = 17;
pub const USBD_INTENCLR_ENDEPOUT5_Msk: u32 = 131072;
pub const USBD_INTENCLR_ENDEPOUT5_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPOUT5_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT5_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT4_Pos: u32 = 16;
pub const USBD_INTENCLR_ENDEPOUT4_Msk: u32 = 65536;
pub const USBD_INTENCLR_ENDEPOUT4_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPOUT4_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT4_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT3_Pos: u32 = 15;
pub const USBD_INTENCLR_ENDEPOUT3_Msk: u32 = 32768;
pub const USBD_INTENCLR_ENDEPOUT3_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPOUT3_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT3_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT2_Pos: u32 = 14;
pub const USBD_INTENCLR_ENDEPOUT2_Msk: u32 = 16384;
pub const USBD_INTENCLR_ENDEPOUT2_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPOUT2_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT2_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT1_Pos: u32 = 13;
pub const USBD_INTENCLR_ENDEPOUT1_Msk: u32 = 8192;
pub const USBD_INTENCLR_ENDEPOUT1_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPOUT1_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT1_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT0_Pos: u32 = 12;
pub const USBD_INTENCLR_ENDEPOUT0_Msk: u32 = 4096;
pub const USBD_INTENCLR_ENDEPOUT0_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPOUT0_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPOUT0_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDISOIN_Pos: u32 = 11;
pub const USBD_INTENCLR_ENDISOIN_Msk: u32 = 2048;
pub const USBD_INTENCLR_ENDISOIN_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDISOIN_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDISOIN_Clear: u32 = 1;
pub const USBD_INTENCLR_EP0DATADONE_Pos: u32 = 10;
pub const USBD_INTENCLR_EP0DATADONE_Msk: u32 = 1024;
pub const USBD_INTENCLR_EP0DATADONE_Disabled: u32 = 0;
pub const USBD_INTENCLR_EP0DATADONE_Enabled: u32 = 1;
pub const USBD_INTENCLR_EP0DATADONE_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN7_Pos: u32 = 9;
pub const USBD_INTENCLR_ENDEPIN7_Msk: u32 = 512;
pub const USBD_INTENCLR_ENDEPIN7_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPIN7_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN7_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN6_Pos: u32 = 8;
pub const USBD_INTENCLR_ENDEPIN6_Msk: u32 = 256;
pub const USBD_INTENCLR_ENDEPIN6_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPIN6_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN6_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN5_Pos: u32 = 7;
pub const USBD_INTENCLR_ENDEPIN5_Msk: u32 = 128;
pub const USBD_INTENCLR_ENDEPIN5_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPIN5_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN5_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN4_Pos: u32 = 6;
pub const USBD_INTENCLR_ENDEPIN4_Msk: u32 = 64;
pub const USBD_INTENCLR_ENDEPIN4_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPIN4_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN4_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN3_Pos: u32 = 5;
pub const USBD_INTENCLR_ENDEPIN3_Msk: u32 = 32;
pub const USBD_INTENCLR_ENDEPIN3_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPIN3_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN3_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN2_Pos: u32 = 4;
pub const USBD_INTENCLR_ENDEPIN2_Msk: u32 = 16;
pub const USBD_INTENCLR_ENDEPIN2_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPIN2_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN2_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN1_Pos: u32 = 3;
pub const USBD_INTENCLR_ENDEPIN1_Msk: u32 = 8;
pub const USBD_INTENCLR_ENDEPIN1_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPIN1_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN1_Clear: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN0_Pos: u32 = 2;
pub const USBD_INTENCLR_ENDEPIN0_Msk: u32 = 4;
pub const USBD_INTENCLR_ENDEPIN0_Disabled: u32 = 0;
pub const USBD_INTENCLR_ENDEPIN0_Enabled: u32 = 1;
pub const USBD_INTENCLR_ENDEPIN0_Clear: u32 = 1;
pub const USBD_INTENCLR_STARTED_Pos: u32 = 1;
pub const USBD_INTENCLR_STARTED_Msk: u32 = 2;
pub const USBD_INTENCLR_STARTED_Disabled: u32 = 0;
pub const USBD_INTENCLR_STARTED_Enabled: u32 = 1;
pub const USBD_INTENCLR_STARTED_Clear: u32 = 1;
pub const USBD_INTENCLR_USBRESET_Pos: u32 = 0;
pub const USBD_INTENCLR_USBRESET_Msk: u32 = 1;
pub const USBD_INTENCLR_USBRESET_Disabled: u32 = 0;
pub const USBD_INTENCLR_USBRESET_Enabled: u32 = 1;
pub const USBD_INTENCLR_USBRESET_Clear: u32 = 1;
pub const USBD_EVENTCAUSE_READY_Pos: u32 = 11;
pub const USBD_EVENTCAUSE_READY_Msk: u32 = 2048;
pub const USBD_EVENTCAUSE_READY_NotDetected: u32 = 0;
pub const USBD_EVENTCAUSE_READY_Ready: u32 = 1;
pub const USBD_EVENTCAUSE_USBWUALLOWED_Pos: u32 = 10;
pub const USBD_EVENTCAUSE_USBWUALLOWED_Msk: u32 = 1024;
pub const USBD_EVENTCAUSE_USBWUALLOWED_NotAllowed: u32 = 0;
pub const USBD_EVENTCAUSE_USBWUALLOWED_Allowed: u32 = 1;
pub const USBD_EVENTCAUSE_RESUME_Pos: u32 = 9;
pub const USBD_EVENTCAUSE_RESUME_Msk: u32 = 512;
pub const USBD_EVENTCAUSE_RESUME_NotDetected: u32 = 0;
pub const USBD_EVENTCAUSE_RESUME_Detected: u32 = 1;
pub const USBD_EVENTCAUSE_SUSPEND_Pos: u32 = 8;
pub const USBD_EVENTCAUSE_SUSPEND_Msk: u32 = 256;
pub const USBD_EVENTCAUSE_SUSPEND_NotDetected: u32 = 0;
pub const USBD_EVENTCAUSE_SUSPEND_Detected: u32 = 1;
pub const USBD_EVENTCAUSE_ISOOUTCRC_Pos: u32 = 0;
pub const USBD_EVENTCAUSE_ISOOUTCRC_Msk: u32 = 1;
pub const USBD_EVENTCAUSE_ISOOUTCRC_NotDetected: u32 = 0;
pub const USBD_EVENTCAUSE_ISOOUTCRC_Detected: u32 = 1;
pub const USBD_HALTED_EPIN_GETSTATUS_Pos: u32 = 0;
pub const USBD_HALTED_EPIN_GETSTATUS_Msk: u32 = 65535;
pub const USBD_HALTED_EPIN_GETSTATUS_NotHalted: u32 = 0;
pub const USBD_HALTED_EPIN_GETSTATUS_Halted: u32 = 1;
pub const USBD_HALTED_EPOUT_GETSTATUS_Pos: u32 = 0;
pub const USBD_HALTED_EPOUT_GETSTATUS_Msk: u32 = 65535;
pub const USBD_HALTED_EPOUT_GETSTATUS_NotHalted: u32 = 0;
pub const USBD_HALTED_EPOUT_GETSTATUS_Halted: u32 = 1;
pub const USBD_EPSTATUS_EPOUT8_Pos: u32 = 24;
pub const USBD_EPSTATUS_EPOUT8_Msk: u32 = 16777216;
pub const USBD_EPSTATUS_EPOUT8_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPOUT8_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPOUT7_Pos: u32 = 23;
pub const USBD_EPSTATUS_EPOUT7_Msk: u32 = 8388608;
pub const USBD_EPSTATUS_EPOUT7_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPOUT7_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPOUT6_Pos: u32 = 22;
pub const USBD_EPSTATUS_EPOUT6_Msk: u32 = 4194304;
pub const USBD_EPSTATUS_EPOUT6_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPOUT6_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPOUT5_Pos: u32 = 21;
pub const USBD_EPSTATUS_EPOUT5_Msk: u32 = 2097152;
pub const USBD_EPSTATUS_EPOUT5_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPOUT5_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPOUT4_Pos: u32 = 20;
pub const USBD_EPSTATUS_EPOUT4_Msk: u32 = 1048576;
pub const USBD_EPSTATUS_EPOUT4_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPOUT4_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPOUT3_Pos: u32 = 19;
pub const USBD_EPSTATUS_EPOUT3_Msk: u32 = 524288;
pub const USBD_EPSTATUS_EPOUT3_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPOUT3_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPOUT2_Pos: u32 = 18;
pub const USBD_EPSTATUS_EPOUT2_Msk: u32 = 262144;
pub const USBD_EPSTATUS_EPOUT2_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPOUT2_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPOUT1_Pos: u32 = 17;
pub const USBD_EPSTATUS_EPOUT1_Msk: u32 = 131072;
pub const USBD_EPSTATUS_EPOUT1_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPOUT1_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPOUT0_Pos: u32 = 16;
pub const USBD_EPSTATUS_EPOUT0_Msk: u32 = 65536;
pub const USBD_EPSTATUS_EPOUT0_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPOUT0_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPIN8_Pos: u32 = 8;
pub const USBD_EPSTATUS_EPIN8_Msk: u32 = 256;
pub const USBD_EPSTATUS_EPIN8_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPIN8_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPIN7_Pos: u32 = 7;
pub const USBD_EPSTATUS_EPIN7_Msk: u32 = 128;
pub const USBD_EPSTATUS_EPIN7_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPIN7_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPIN6_Pos: u32 = 6;
pub const USBD_EPSTATUS_EPIN6_Msk: u32 = 64;
pub const USBD_EPSTATUS_EPIN6_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPIN6_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPIN5_Pos: u32 = 5;
pub const USBD_EPSTATUS_EPIN5_Msk: u32 = 32;
pub const USBD_EPSTATUS_EPIN5_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPIN5_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPIN4_Pos: u32 = 4;
pub const USBD_EPSTATUS_EPIN4_Msk: u32 = 16;
pub const USBD_EPSTATUS_EPIN4_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPIN4_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPIN3_Pos: u32 = 3;
pub const USBD_EPSTATUS_EPIN3_Msk: u32 = 8;
pub const USBD_EPSTATUS_EPIN3_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPIN3_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPIN2_Pos: u32 = 2;
pub const USBD_EPSTATUS_EPIN2_Msk: u32 = 4;
pub const USBD_EPSTATUS_EPIN2_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPIN2_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPIN1_Pos: u32 = 1;
pub const USBD_EPSTATUS_EPIN1_Msk: u32 = 2;
pub const USBD_EPSTATUS_EPIN1_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPIN1_DataDone: u32 = 1;
pub const USBD_EPSTATUS_EPIN0_Pos: u32 = 0;
pub const USBD_EPSTATUS_EPIN0_Msk: u32 = 1;
pub const USBD_EPSTATUS_EPIN0_NoData: u32 = 0;
pub const USBD_EPSTATUS_EPIN0_DataDone: u32 = 1;
pub const USBD_EPDATASTATUS_EPOUT7_Pos: u32 = 23;
pub const USBD_EPDATASTATUS_EPOUT7_Msk: u32 = 8388608;
pub const USBD_EPDATASTATUS_EPOUT7_NotStarted: u32 = 0;
pub const USBD_EPDATASTATUS_EPOUT7_Started: u32 = 1;
pub const USBD_EPDATASTATUS_EPOUT6_Pos: u32 = 22;
pub const USBD_EPDATASTATUS_EPOUT6_Msk: u32 = 4194304;
pub const USBD_EPDATASTATUS_EPOUT6_NotStarted: u32 = 0;
pub const USBD_EPDATASTATUS_EPOUT6_Started: u32 = 1;
pub const USBD_EPDATASTATUS_EPOUT5_Pos: u32 = 21;
pub const USBD_EPDATASTATUS_EPOUT5_Msk: u32 = 2097152;
pub const USBD_EPDATASTATUS_EPOUT5_NotStarted: u32 = 0;
pub const USBD_EPDATASTATUS_EPOUT5_Started: u32 = 1;
pub const USBD_EPDATASTATUS_EPOUT4_Pos: u32 = 20;
pub const USBD_EPDATASTATUS_EPOUT4_Msk: u32 = 1048576;
pub const USBD_EPDATASTATUS_EPOUT4_NotStarted: u32 = 0;
pub const USBD_EPDATASTATUS_EPOUT4_Started: u32 = 1;
pub const USBD_EPDATASTATUS_EPOUT3_Pos: u32 = 19;
pub const USBD_EPDATASTATUS_EPOUT3_Msk: u32 = 524288;
pub const USBD_EPDATASTATUS_EPOUT3_NotStarted: u32 = 0;
pub const USBD_EPDATASTATUS_EPOUT3_Started: u32 = 1;
pub const USBD_EPDATASTATUS_EPOUT2_Pos: u32 = 18;
pub const USBD_EPDATASTATUS_EPOUT2_Msk: u32 = 262144;
pub const USBD_EPDATASTATUS_EPOUT2_NotStarted: u32 = 0;
pub const USBD_EPDATASTATUS_EPOUT2_Started: u32 = 1;
pub const USBD_EPDATASTATUS_EPOUT1_Pos: u32 = 17;
pub const USBD_EPDATASTATUS_EPOUT1_Msk: u32 = 131072;
pub const USBD_EPDATASTATUS_EPOUT1_NotStarted: u32 = 0;
pub const USBD_EPDATASTATUS_EPOUT1_Started: u32 = 1;
pub const USBD_EPDATASTATUS_EPIN7_Pos: u32 = 7;
pub const USBD_EPDATASTATUS_EPIN7_Msk: u32 = 128;
pub const USBD_EPDATASTATUS_EPIN7_NotDone: u32 = 0;
pub const USBD_EPDATASTATUS_EPIN7_DataDone: u32 = 1;
pub const USBD_EPDATASTATUS_EPIN6_Pos: u32 = 6;
pub const USBD_EPDATASTATUS_EPIN6_Msk: u32 = 64;
pub const USBD_EPDATASTATUS_EPIN6_NotDone: u32 = 0;
pub const USBD_EPDATASTATUS_EPIN6_DataDone: u32 = 1;
pub const USBD_EPDATASTATUS_EPIN5_Pos: u32 = 5;
pub const USBD_EPDATASTATUS_EPIN5_Msk: u32 = 32;
pub const USBD_EPDATASTATUS_EPIN5_NotDone: u32 = 0;
pub const USBD_EPDATASTATUS_EPIN5_DataDone: u32 = 1;
pub const USBD_EPDATASTATUS_EPIN4_Pos: u32 = 4;
pub const USBD_EPDATASTATUS_EPIN4_Msk: u32 = 16;
pub const USBD_EPDATASTATUS_EPIN4_NotDone: u32 = 0;
pub const USBD_EPDATASTATUS_EPIN4_DataDone: u32 = 1;
pub const USBD_EPDATASTATUS_EPIN3_Pos: u32 = 3;
pub const USBD_EPDATASTATUS_EPIN3_Msk: u32 = 8;
pub const USBD_EPDATASTATUS_EPIN3_NotDone: u32 = 0;
pub const USBD_EPDATASTATUS_EPIN3_DataDone: u32 = 1;
pub const USBD_EPDATASTATUS_EPIN2_Pos: u32 = 2;
pub const USBD_EPDATASTATUS_EPIN2_Msk: u32 = 4;
pub const USBD_EPDATASTATUS_EPIN2_NotDone: u32 = 0;
pub const USBD_EPDATASTATUS_EPIN2_DataDone: u32 = 1;
pub const USBD_EPDATASTATUS_EPIN1_Pos: u32 = 1;
pub const USBD_EPDATASTATUS_EPIN1_Msk: u32 = 2;
pub const USBD_EPDATASTATUS_EPIN1_NotDone: u32 = 0;
pub const USBD_EPDATASTATUS_EPIN1_DataDone: u32 = 1;
pub const USBD_USBADDR_ADDR_Pos: u32 = 0;
pub const USBD_USBADDR_ADDR_Msk: u32 = 127;
pub const USBD_BMREQUESTTYPE_DIRECTION_Pos: u32 = 7;
pub const USBD_BMREQUESTTYPE_DIRECTION_Msk: u32 = 128;
pub const USBD_BMREQUESTTYPE_DIRECTION_HostToDevice: u32 = 0;
pub const USBD_BMREQUESTTYPE_DIRECTION_DeviceToHost: u32 = 1;
pub const USBD_BMREQUESTTYPE_TYPE_Pos: u32 = 5;
pub const USBD_BMREQUESTTYPE_TYPE_Msk: u32 = 96;
pub const USBD_BMREQUESTTYPE_TYPE_Standard: u32 = 0;
pub const USBD_BMREQUESTTYPE_TYPE_Class: u32 = 1;
pub const USBD_BMREQUESTTYPE_TYPE_Vendor: u32 = 2;
pub const USBD_BMREQUESTTYPE_RECIPIENT_Pos: u32 = 0;
pub const USBD_BMREQUESTTYPE_RECIPIENT_Msk: u32 = 31;
pub const USBD_BMREQUESTTYPE_RECIPIENT_Device: u32 = 0;
pub const USBD_BMREQUESTTYPE_RECIPIENT_Interface: u32 = 1;
pub const USBD_BMREQUESTTYPE_RECIPIENT_Endpoint: u32 = 2;
pub const USBD_BMREQUESTTYPE_RECIPIENT_Other: u32 = 3;
pub const USBD_BREQUEST_BREQUEST_Pos: u32 = 0;
pub const USBD_BREQUEST_BREQUEST_Msk: u32 = 255;
pub const USBD_BREQUEST_BREQUEST_STD_GET_STATUS: u32 = 0;
pub const USBD_BREQUEST_BREQUEST_STD_CLEAR_FEATURE: u32 = 1;
pub const USBD_BREQUEST_BREQUEST_STD_SET_FEATURE: u32 = 3;
pub const USBD_BREQUEST_BREQUEST_STD_SET_ADDRESS: u32 = 5;
pub const USBD_BREQUEST_BREQUEST_STD_GET_DESCRIPTOR: u32 = 6;
pub const USBD_BREQUEST_BREQUEST_STD_SET_DESCRIPTOR: u32 = 7;
pub const USBD_BREQUEST_BREQUEST_STD_GET_CONFIGURATION: u32 = 8;
pub const USBD_BREQUEST_BREQUEST_STD_SET_CONFIGURATION: u32 = 9;
pub const USBD_BREQUEST_BREQUEST_STD_GET_INTERFACE: u32 = 10;
pub const USBD_BREQUEST_BREQUEST_STD_SET_INTERFACE: u32 = 11;
pub const USBD_BREQUEST_BREQUEST_STD_SYNCH_FRAME: u32 = 12;
pub const USBD_WVALUEL_WVALUEL_Pos: u32 = 0;
pub const USBD_WVALUEL_WVALUEL_Msk: u32 = 255;
pub const USBD_WVALUEH_WVALUEH_Pos: u32 = 0;
pub const USBD_WVALUEH_WVALUEH_Msk: u32 = 255;
pub const USBD_WINDEXL_WINDEXL_Pos: u32 = 0;
pub const USBD_WINDEXL_WINDEXL_Msk: u32 = 255;
pub const USBD_WINDEXH_WINDEXH_Pos: u32 = 0;
pub const USBD_WINDEXH_WINDEXH_Msk: u32 = 255;
pub const USBD_WLENGTHL_WLENGTHL_Pos: u32 = 0;
pub const USBD_WLENGTHL_WLENGTHL_Msk: u32 = 255;
pub const USBD_WLENGTHH_WLENGTHH_Pos: u32 = 0;
pub const USBD_WLENGTHH_WLENGTHH_Msk: u32 = 255;
pub const USBD_SIZE_EPOUT_SIZE_Pos: u32 = 0;
pub const USBD_SIZE_EPOUT_SIZE_Msk: u32 = 127;
pub const USBD_SIZE_ISOOUT_ZERO_Pos: u32 = 16;
pub const USBD_SIZE_ISOOUT_ZERO_Msk: u32 = 65536;
pub const USBD_SIZE_ISOOUT_ZERO_Normal: u32 = 0;
pub const USBD_SIZE_ISOOUT_ZERO_ZeroData: u32 = 1;
pub const USBD_SIZE_ISOOUT_SIZE_Pos: u32 = 0;
pub const USBD_SIZE_ISOOUT_SIZE_Msk: u32 = 1023;
pub const USBD_ENABLE_ENABLE_Pos: u32 = 0;
pub const USBD_ENABLE_ENABLE_Msk: u32 = 1;
pub const USBD_ENABLE_ENABLE_Disabled: u32 = 0;
pub const USBD_ENABLE_ENABLE_Enabled: u32 = 1;
pub const USBD_USBPULLUP_CONNECT_Pos: u32 = 0;
pub const USBD_USBPULLUP_CONNECT_Msk: u32 = 1;
pub const USBD_USBPULLUP_CONNECT_Disabled: u32 = 0;
pub const USBD_USBPULLUP_CONNECT_Enabled: u32 = 1;
pub const USBD_DPDMVALUE_STATE_Pos: u32 = 0;
pub const USBD_DPDMVALUE_STATE_Msk: u32 = 31;
pub const USBD_DPDMVALUE_STATE_Resume: u32 = 1;
pub const USBD_DPDMVALUE_STATE_J: u32 = 2;
pub const USBD_DPDMVALUE_STATE_K: u32 = 4;
pub const USBD_DTOGGLE_VALUE_Pos: u32 = 8;
pub const USBD_DTOGGLE_VALUE_Msk: u32 = 768;
pub const USBD_DTOGGLE_VALUE_Nop: u32 = 0;
pub const USBD_DTOGGLE_VALUE_Data0: u32 = 1;
pub const USBD_DTOGGLE_VALUE_Data1: u32 = 2;
pub const USBD_DTOGGLE_IO_Pos: u32 = 7;
pub const USBD_DTOGGLE_IO_Msk: u32 = 128;
pub const USBD_DTOGGLE_IO_Out: u32 = 0;
pub const USBD_DTOGGLE_IO_In: u32 = 1;
pub const USBD_DTOGGLE_EP_Pos: u32 = 0;
pub const USBD_DTOGGLE_EP_Msk: u32 = 7;
pub const USBD_EPINEN_ISOIN_Pos: u32 = 8;
pub const USBD_EPINEN_ISOIN_Msk: u32 = 256;
pub const USBD_EPINEN_ISOIN_Disable: u32 = 0;
pub const USBD_EPINEN_ISOIN_Enable: u32 = 1;
pub const USBD_EPINEN_IN7_Pos: u32 = 7;
pub const USBD_EPINEN_IN7_Msk: u32 = 128;
pub const USBD_EPINEN_IN7_Disable: u32 = 0;
pub const USBD_EPINEN_IN7_Enable: u32 = 1;
pub const USBD_EPINEN_IN6_Pos: u32 = 6;
pub const USBD_EPINEN_IN6_Msk: u32 = 64;
pub const USBD_EPINEN_IN6_Disable: u32 = 0;
pub const USBD_EPINEN_IN6_Enable: u32 = 1;
pub const USBD_EPINEN_IN5_Pos: u32 = 5;
pub const USBD_EPINEN_IN5_Msk: u32 = 32;
pub const USBD_EPINEN_IN5_Disable: u32 = 0;
pub const USBD_EPINEN_IN5_Enable: u32 = 1;
pub const USBD_EPINEN_IN4_Pos: u32 = 4;
pub const USBD_EPINEN_IN4_Msk: u32 = 16;
pub const USBD_EPINEN_IN4_Disable: u32 = 0;
pub const USBD_EPINEN_IN4_Enable: u32 = 1;
pub const USBD_EPINEN_IN3_Pos: u32 = 3;
pub const USBD_EPINEN_IN3_Msk: u32 = 8;
pub const USBD_EPINEN_IN3_Disable: u32 = 0;
pub const USBD_EPINEN_IN3_Enable: u32 = 1;
pub const USBD_EPINEN_IN2_Pos: u32 = 2;
pub const USBD_EPINEN_IN2_Msk: u32 = 4;
pub const USBD_EPINEN_IN2_Disable: u32 = 0;
pub const USBD_EPINEN_IN2_Enable: u32 = 1;
pub const USBD_EPINEN_IN1_Pos: u32 = 1;
pub const USBD_EPINEN_IN1_Msk: u32 = 2;
pub const USBD_EPINEN_IN1_Disable: u32 = 0;
pub const USBD_EPINEN_IN1_Enable: u32 = 1;
pub const USBD_EPINEN_IN0_Pos: u32 = 0;
pub const USBD_EPINEN_IN0_Msk: u32 = 1;
pub const USBD_EPINEN_IN0_Disable: u32 = 0;
pub const USBD_EPINEN_IN0_Enable: u32 = 1;
pub const USBD_EPOUTEN_ISOOUT_Pos: u32 = 8;
pub const USBD_EPOUTEN_ISOOUT_Msk: u32 = 256;
pub const USBD_EPOUTEN_ISOOUT_Disable: u32 = 0;
pub const USBD_EPOUTEN_ISOOUT_Enable: u32 = 1;
pub const USBD_EPOUTEN_OUT7_Pos: u32 = 7;
pub const USBD_EPOUTEN_OUT7_Msk: u32 = 128;
pub const USBD_EPOUTEN_OUT7_Disable: u32 = 0;
pub const USBD_EPOUTEN_OUT7_Enable: u32 = 1;
pub const USBD_EPOUTEN_OUT6_Pos: u32 = 6;
pub const USBD_EPOUTEN_OUT6_Msk: u32 = 64;
pub const USBD_EPOUTEN_OUT6_Disable: u32 = 0;
pub const USBD_EPOUTEN_OUT6_Enable: u32 = 1;
pub const USBD_EPOUTEN_OUT5_Pos: u32 = 5;
pub const USBD_EPOUTEN_OUT5_Msk: u32 = 32;
pub const USBD_EPOUTEN_OUT5_Disable: u32 = 0;
pub const USBD_EPOUTEN_OUT5_Enable: u32 = 1;
pub const USBD_EPOUTEN_OUT4_Pos: u32 = 4;
pub const USBD_EPOUTEN_OUT4_Msk: u32 = 16;
pub const USBD_EPOUTEN_OUT4_Disable: u32 = 0;
pub const USBD_EPOUTEN_OUT4_Enable: u32 = 1;
pub const USBD_EPOUTEN_OUT3_Pos: u32 = 3;
pub const USBD_EPOUTEN_OUT3_Msk: u32 = 8;
pub const USBD_EPOUTEN_OUT3_Disable: u32 = 0;
pub const USBD_EPOUTEN_OUT3_Enable: u32 = 1;
pub const USBD_EPOUTEN_OUT2_Pos: u32 = 2;
pub const USBD_EPOUTEN_OUT2_Msk: u32 = 4;
pub const USBD_EPOUTEN_OUT2_Disable: u32 = 0;
pub const USBD_EPOUTEN_OUT2_Enable: u32 = 1;
pub const USBD_EPOUTEN_OUT1_Pos: u32 = 1;
pub const USBD_EPOUTEN_OUT1_Msk: u32 = 2;
pub const USBD_EPOUTEN_OUT1_Disable: u32 = 0;
pub const USBD_EPOUTEN_OUT1_Enable: u32 = 1;
pub const USBD_EPOUTEN_OUT0_Pos: u32 = 0;
pub const USBD_EPOUTEN_OUT0_Msk: u32 = 1;
pub const USBD_EPOUTEN_OUT0_Disable: u32 = 0;
pub const USBD_EPOUTEN_OUT0_Enable: u32 = 1;
pub const USBD_EPSTALL_STALL_Pos: u32 = 8;
pub const USBD_EPSTALL_STALL_Msk: u32 = 256;
pub const USBD_EPSTALL_STALL_UnStall: u32 = 0;
pub const USBD_EPSTALL_STALL_Stall: u32 = 1;
pub const USBD_EPSTALL_IO_Pos: u32 = 7;
pub const USBD_EPSTALL_IO_Msk: u32 = 128;
pub const USBD_EPSTALL_IO_Out: u32 = 0;
pub const USBD_EPSTALL_IO_In: u32 = 1;
pub const USBD_EPSTALL_EP_Pos: u32 = 0;
pub const USBD_EPSTALL_EP_Msk: u32 = 7;
pub const USBD_ISOSPLIT_SPLIT_Pos: u32 = 0;
pub const USBD_ISOSPLIT_SPLIT_Msk: u32 = 65535;
pub const USBD_ISOSPLIT_SPLIT_OneDir: u32 = 0;
pub const USBD_ISOSPLIT_SPLIT_HalfIN: u32 = 128;
pub const USBD_FRAMECNTR_FRAMECNTR_Pos: u32 = 0;
pub const USBD_FRAMECNTR_FRAMECNTR_Msk: u32 = 2047;
pub const USBD_LOWPOWER_LOWPOWER_Pos: u32 = 0;
pub const USBD_LOWPOWER_LOWPOWER_Msk: u32 = 1;
pub const USBD_LOWPOWER_LOWPOWER_ForceNormal: u32 = 0;
pub const USBD_LOWPOWER_LOWPOWER_LowPower: u32 = 1;
pub const USBD_ISOINCONFIG_RESPONSE_Pos: u32 = 0;
pub const USBD_ISOINCONFIG_RESPONSE_Msk: u32 = 1;
pub const USBD_ISOINCONFIG_RESPONSE_NoResp: u32 = 0;
pub const USBD_ISOINCONFIG_RESPONSE_ZeroData: u32 = 1;
pub const USBD_EPIN_PTR_PTR_Pos: u32 = 0;
pub const USBD_EPIN_PTR_PTR_Msk: u32 = 4294967295;
pub const USBD_EPIN_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const USBD_EPIN_MAXCNT_MAXCNT_Msk: u32 = 127;
pub const USBD_EPIN_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const USBD_EPIN_AMOUNT_AMOUNT_Msk: u32 = 127;
pub const USBD_ISOIN_PTR_PTR_Pos: u32 = 0;
pub const USBD_ISOIN_PTR_PTR_Msk: u32 = 4294967295;
pub const USBD_ISOIN_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const USBD_ISOIN_MAXCNT_MAXCNT_Msk: u32 = 1023;
pub const USBD_ISOIN_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const USBD_ISOIN_AMOUNT_AMOUNT_Msk: u32 = 1023;
pub const USBD_EPOUT_PTR_PTR_Pos: u32 = 0;
pub const USBD_EPOUT_PTR_PTR_Msk: u32 = 4294967295;
pub const USBD_EPOUT_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const USBD_EPOUT_MAXCNT_MAXCNT_Msk: u32 = 127;
pub const USBD_EPOUT_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const USBD_EPOUT_AMOUNT_AMOUNT_Msk: u32 = 127;
pub const USBD_ISOOUT_PTR_PTR_Pos: u32 = 0;
pub const USBD_ISOOUT_PTR_PTR_Msk: u32 = 4294967295;
pub const USBD_ISOOUT_MAXCNT_MAXCNT_Pos: u32 = 0;
pub const USBD_ISOOUT_MAXCNT_MAXCNT_Msk: u32 = 1023;
pub const USBD_ISOOUT_AMOUNT_AMOUNT_Pos: u32 = 0;
pub const USBD_ISOOUT_AMOUNT_AMOUNT_Msk: u32 = 1023;
pub const WDT_TASKS_START_TASKS_START_Pos: u32 = 0;
pub const WDT_TASKS_START_TASKS_START_Msk: u32 = 1;
pub const WDT_TASKS_START_TASKS_START_Trigger: u32 = 1;
pub const WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Pos: u32 = 0;
pub const WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Msk: u32 = 1;
pub const WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_NotGenerated: u32 = 0;
pub const WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Generated: u32 = 1;
pub const WDT_INTENSET_TIMEOUT_Pos: u32 = 0;
pub const WDT_INTENSET_TIMEOUT_Msk: u32 = 1;
pub const WDT_INTENSET_TIMEOUT_Disabled: u32 = 0;
pub const WDT_INTENSET_TIMEOUT_Enabled: u32 = 1;
pub const WDT_INTENSET_TIMEOUT_Set: u32 = 1;
pub const WDT_INTENCLR_TIMEOUT_Pos: u32 = 0;
pub const WDT_INTENCLR_TIMEOUT_Msk: u32 = 1;
pub const WDT_INTENCLR_TIMEOUT_Disabled: u32 = 0;
pub const WDT_INTENCLR_TIMEOUT_Enabled: u32 = 1;
pub const WDT_INTENCLR_TIMEOUT_Clear: u32 = 1;
pub const WDT_RUNSTATUS_RUNSTATUS_Pos: u32 = 0;
pub const WDT_RUNSTATUS_RUNSTATUS_Msk: u32 = 1;
pub const WDT_RUNSTATUS_RUNSTATUS_NotRunning: u32 = 0;
pub const WDT_RUNSTATUS_RUNSTATUS_Running: u32 = 1;
pub const WDT_REQSTATUS_RR7_Pos: u32 = 7;
pub const WDT_REQSTATUS_RR7_Msk: u32 = 128;
pub const WDT_REQSTATUS_RR7_DisabledOrRequested: u32 = 0;
pub const WDT_REQSTATUS_RR7_EnabledAndUnrequested: u32 = 1;
pub const WDT_REQSTATUS_RR6_Pos: u32 = 6;
pub const WDT_REQSTATUS_RR6_Msk: u32 = 64;
pub const WDT_REQSTATUS_RR6_DisabledOrRequested: u32 = 0;
pub const WDT_REQSTATUS_RR6_EnabledAndUnrequested: u32 = 1;
pub const WDT_REQSTATUS_RR5_Pos: u32 = 5;
pub const WDT_REQSTATUS_RR5_Msk: u32 = 32;
pub const WDT_REQSTATUS_RR5_DisabledOrRequested: u32 = 0;
pub const WDT_REQSTATUS_RR5_EnabledAndUnrequested: u32 = 1;
pub const WDT_REQSTATUS_RR4_Pos: u32 = 4;
pub const WDT_REQSTATUS_RR4_Msk: u32 = 16;
pub const WDT_REQSTATUS_RR4_DisabledOrRequested: u32 = 0;
pub const WDT_REQSTATUS_RR4_EnabledAndUnrequested: u32 = 1;
pub const WDT_REQSTATUS_RR3_Pos: u32 = 3;
pub const WDT_REQSTATUS_RR3_Msk: u32 = 8;
pub const WDT_REQSTATUS_RR3_DisabledOrRequested: u32 = 0;
pub const WDT_REQSTATUS_RR3_EnabledAndUnrequested: u32 = 1;
pub const WDT_REQSTATUS_RR2_Pos: u32 = 2;
pub const WDT_REQSTATUS_RR2_Msk: u32 = 4;
pub const WDT_REQSTATUS_RR2_DisabledOrRequested: u32 = 0;
pub const WDT_REQSTATUS_RR2_EnabledAndUnrequested: u32 = 1;
pub const WDT_REQSTATUS_RR1_Pos: u32 = 1;
pub const WDT_REQSTATUS_RR1_Msk: u32 = 2;
pub const WDT_REQSTATUS_RR1_DisabledOrRequested: u32 = 0;
pub const WDT_REQSTATUS_RR1_EnabledAndUnrequested: u32 = 1;
pub const WDT_REQSTATUS_RR0_Pos: u32 = 0;
pub const WDT_REQSTATUS_RR0_Msk: u32 = 1;
pub const WDT_REQSTATUS_RR0_DisabledOrRequested: u32 = 0;
pub const WDT_REQSTATUS_RR0_EnabledAndUnrequested: u32 = 1;
pub const WDT_CRV_CRV_Pos: u32 = 0;
pub const WDT_CRV_CRV_Msk: u32 = 4294967295;
pub const WDT_RREN_RR7_Pos: u32 = 7;
pub const WDT_RREN_RR7_Msk: u32 = 128;
pub const WDT_RREN_RR7_Disabled: u32 = 0;
pub const WDT_RREN_RR7_Enabled: u32 = 1;
pub const WDT_RREN_RR6_Pos: u32 = 6;
pub const WDT_RREN_RR6_Msk: u32 = 64;
pub const WDT_RREN_RR6_Disabled: u32 = 0;
pub const WDT_RREN_RR6_Enabled: u32 = 1;
pub const WDT_RREN_RR5_Pos: u32 = 5;
pub const WDT_RREN_RR5_Msk: u32 = 32;
pub const WDT_RREN_RR5_Disabled: u32 = 0;
pub const WDT_RREN_RR5_Enabled: u32 = 1;
pub const WDT_RREN_RR4_Pos: u32 = 4;
pub const WDT_RREN_RR4_Msk: u32 = 16;
pub const WDT_RREN_RR4_Disabled: u32 = 0;
pub const WDT_RREN_RR4_Enabled: u32 = 1;
pub const WDT_RREN_RR3_Pos: u32 = 3;
pub const WDT_RREN_RR3_Msk: u32 = 8;
pub const WDT_RREN_RR3_Disabled: u32 = 0;
pub const WDT_RREN_RR3_Enabled: u32 = 1;
pub const WDT_RREN_RR2_Pos: u32 = 2;
pub const WDT_RREN_RR2_Msk: u32 = 4;
pub const WDT_RREN_RR2_Disabled: u32 = 0;
pub const WDT_RREN_RR2_Enabled: u32 = 1;
pub const WDT_RREN_RR1_Pos: u32 = 1;
pub const WDT_RREN_RR1_Msk: u32 = 2;
pub const WDT_RREN_RR1_Disabled: u32 = 0;
pub const WDT_RREN_RR1_Enabled: u32 = 1;
pub const WDT_RREN_RR0_Pos: u32 = 0;
pub const WDT_RREN_RR0_Msk: u32 = 1;
pub const WDT_RREN_RR0_Disabled: u32 = 0;
pub const WDT_RREN_RR0_Enabled: u32 = 1;
pub const WDT_CONFIG_HALT_Pos: u32 = 3;
pub const WDT_CONFIG_HALT_Msk: u32 = 8;
pub const WDT_CONFIG_HALT_Pause: u32 = 0;
pub const WDT_CONFIG_HALT_Run: u32 = 1;
pub const WDT_CONFIG_SLEEP_Pos: u32 = 0;
pub const WDT_CONFIG_SLEEP_Msk: u32 = 1;
pub const WDT_CONFIG_SLEEP_Pause: u32 = 0;
pub const WDT_CONFIG_SLEEP_Run: u32 = 1;
pub const WDT_RR_RR_Pos: u32 = 0;
pub const WDT_RR_RR_Msk: u32 = 4294967295;
pub const WDT_RR_RR_Reload: u32 = 1850885685;
pub const UICR_RBPCONF_PALL_Pos: u32 = 0;
pub const UICR_RBPCONF_PALL_Msk: u32 = 255;
pub const UICR_RBPCONF_PALL_Enabled: u32 = 0;
pub const UICR_RBPCONF_PALL_Disabled: u32 = 255;
pub const NRF_GPIO_BASE: u32 = 1342177280;
pub const SPIS_MAXRX_MAXRX_Pos: u32 = 0;
pub const SPIS_MAXRX_MAXRX_Msk: u32 = 65535;
pub const SPIS_AMOUNTRX_AMOUNTRX_Pos: u32 = 0;
pub const SPIS_AMOUNTRX_AMOUNTRX_Msk: u32 = 65535;
pub const SPIS_MAXTX_MAXTX_Pos: u32 = 0;
pub const SPIS_MAXTX_MAXTX_Msk: u32 = 65535;
pub const SPIS_AMOUNTTX_AMOUNTTX_Pos: u32 = 0;
pub const SPIS_AMOUNTTX_AMOUNTTX_Msk: u32 = 65535;
pub const LPCOMP_REFSEL_REFSEL_SupplyOneEighthPrescaling: u32 = 0;
pub const LPCOMP_REFSEL_REFSEL_SupplyTwoEighthsPrescaling: u32 = 1;
pub const LPCOMP_REFSEL_REFSEL_SupplyThreeEighthsPrescaling: u32 = 2;
pub const LPCOMP_REFSEL_REFSEL_SupplyFourEighthsPrescaling: u32 = 3;
pub const LPCOMP_REFSEL_REFSEL_SupplyFiveEighthsPrescaling: u32 = 4;
pub const LPCOMP_REFSEL_REFSEL_SupplySixEighthsPrescaling: u32 = 5;
pub const LPCOMP_REFSEL_REFSEL_SupplySevenEighthsPrescaling: u32 = 6;
pub const RADIO_CRCCNF_SKIP_ADDR_Pos: u32 = 8;
pub const RADIO_CRCCNF_SKIP_ADDR_Msk: u32 = 768;
pub const RADIO_CRCCNF_SKIP_ADDR_Include: u32 = 0;
pub const RADIO_CRCCNF_SKIP_ADDR_Skip: u32 = 1;
pub const PPI_CHG0_CH15_Pos: u32 = 15;
pub const PPI_CHG0_CH15_Msk: u32 = 32768;
pub const PPI_CHG0_CH15_Excluded: u32 = 0;
pub const PPI_CHG0_CH15_Included: u32 = 1;
pub const PPI_CHG0_CH14_Pos: u32 = 14;
pub const PPI_CHG0_CH14_Msk: u32 = 16384;
pub const PPI_CHG0_CH14_Excluded: u32 = 0;
pub const PPI_CHG0_CH14_Included: u32 = 1;
pub const PPI_CHG0_CH13_Pos: u32 = 13;
pub const PPI_CHG0_CH13_Msk: u32 = 8192;
pub const PPI_CHG0_CH13_Excluded: u32 = 0;
pub const PPI_CHG0_CH13_Included: u32 = 1;
pub const PPI_CHG0_CH12_Pos: u32 = 12;
pub const PPI_CHG0_CH12_Msk: u32 = 4096;
pub const PPI_CHG0_CH12_Excluded: u32 = 0;
pub const PPI_CHG0_CH12_Included: u32 = 1;
pub const PPI_CHG0_CH11_Pos: u32 = 11;
pub const PPI_CHG0_CH11_Msk: u32 = 2048;
pub const PPI_CHG0_CH11_Excluded: u32 = 0;
pub const PPI_CHG0_CH11_Included: u32 = 1;
pub const PPI_CHG0_CH10_Pos: u32 = 10;
pub const PPI_CHG0_CH10_Msk: u32 = 1024;
pub const PPI_CHG0_CH10_Excluded: u32 = 0;
pub const PPI_CHG0_CH10_Included: u32 = 1;
pub const PPI_CHG0_CH9_Pos: u32 = 9;
pub const PPI_CHG0_CH9_Msk: u32 = 512;
pub const PPI_CHG0_CH9_Excluded: u32 = 0;
pub const PPI_CHG0_CH9_Included: u32 = 1;
pub const PPI_CHG0_CH8_Pos: u32 = 8;
pub const PPI_CHG0_CH8_Msk: u32 = 256;
pub const PPI_CHG0_CH8_Excluded: u32 = 0;
pub const PPI_CHG0_CH8_Included: u32 = 1;
pub const PPI_CHG0_CH7_Pos: u32 = 7;
pub const PPI_CHG0_CH7_Msk: u32 = 128;
pub const PPI_CHG0_CH7_Excluded: u32 = 0;
pub const PPI_CHG0_CH7_Included: u32 = 1;
pub const PPI_CHG0_CH6_Pos: u32 = 6;
pub const PPI_CHG0_CH6_Msk: u32 = 64;
pub const PPI_CHG0_CH6_Excluded: u32 = 0;
pub const PPI_CHG0_CH6_Included: u32 = 1;
pub const PPI_CHG0_CH5_Pos: u32 = 5;
pub const PPI_CHG0_CH5_Msk: u32 = 32;
pub const PPI_CHG0_CH5_Excluded: u32 = 0;
pub const PPI_CHG0_CH5_Included: u32 = 1;
pub const PPI_CHG0_CH4_Pos: u32 = 4;
pub const PPI_CHG0_CH4_Msk: u32 = 16;
pub const PPI_CHG0_CH4_Excluded: u32 = 0;
pub const PPI_CHG0_CH4_Included: u32 = 1;
pub const PPI_CHG0_CH3_Pos: u32 = 3;
pub const PPI_CHG0_CH3_Msk: u32 = 8;
pub const PPI_CHG0_CH3_Excluded: u32 = 0;
pub const PPI_CHG0_CH3_Included: u32 = 1;
pub const PPI_CHG0_CH2_Pos: u32 = 2;
pub const PPI_CHG0_CH2_Msk: u32 = 4;
pub const PPI_CHG0_CH2_Excluded: u32 = 0;
pub const PPI_CHG0_CH2_Included: u32 = 1;
pub const PPI_CHG0_CH1_Pos: u32 = 1;
pub const PPI_CHG0_CH1_Msk: u32 = 2;
pub const PPI_CHG0_CH1_Excluded: u32 = 0;
pub const PPI_CHG0_CH1_Included: u32 = 1;
pub const PPI_CHG0_CH0_Pos: u32 = 0;
pub const PPI_CHG0_CH0_Msk: u32 = 1;
pub const PPI_CHG0_CH0_Excluded: u32 = 0;
pub const PPI_CHG0_CH0_Included: u32 = 1;
pub const PPI_CHG1_CH15_Pos: u32 = 15;
pub const PPI_CHG1_CH15_Msk: u32 = 32768;
pub const PPI_CHG1_CH15_Excluded: u32 = 0;
pub const PPI_CHG1_CH15_Included: u32 = 1;
pub const PPI_CHG1_CH14_Pos: u32 = 14;
pub const PPI_CHG1_CH14_Msk: u32 = 16384;
pub const PPI_CHG1_CH14_Excluded: u32 = 0;
pub const PPI_CHG1_CH14_Included: u32 = 1;
pub const PPI_CHG1_CH13_Pos: u32 = 13;
pub const PPI_CHG1_CH13_Msk: u32 = 8192;
pub const PPI_CHG1_CH13_Excluded: u32 = 0;
pub const PPI_CHG1_CH13_Included: u32 = 1;
pub const PPI_CHG1_CH12_Pos: u32 = 12;
pub const PPI_CHG1_CH12_Msk: u32 = 4096;
pub const PPI_CHG1_CH12_Excluded: u32 = 0;
pub const PPI_CHG1_CH12_Included: u32 = 1;
pub const PPI_CHG1_CH11_Pos: u32 = 11;
pub const PPI_CHG1_CH11_Msk: u32 = 2048;
pub const PPI_CHG1_CH11_Excluded: u32 = 0;
pub const PPI_CHG1_CH11_Included: u32 = 1;
pub const PPI_CHG1_CH10_Pos: u32 = 10;
pub const PPI_CHG1_CH10_Msk: u32 = 1024;
pub const PPI_CHG1_CH10_Excluded: u32 = 0;
pub const PPI_CHG1_CH10_Included: u32 = 1;
pub const PPI_CHG1_CH9_Pos: u32 = 9;
pub const PPI_CHG1_CH9_Msk: u32 = 512;
pub const PPI_CHG1_CH9_Excluded: u32 = 0;
pub const PPI_CHG1_CH9_Included: u32 = 1;
pub const PPI_CHG1_CH8_Pos: u32 = 8;
pub const PPI_CHG1_CH8_Msk: u32 = 256;
pub const PPI_CHG1_CH8_Excluded: u32 = 0;
pub const PPI_CHG1_CH8_Included: u32 = 1;
pub const PPI_CHG1_CH7_Pos: u32 = 7;
pub const PPI_CHG1_CH7_Msk: u32 = 128;
pub const PPI_CHG1_CH7_Excluded: u32 = 0;
pub const PPI_CHG1_CH7_Included: u32 = 1;
pub const PPI_CHG1_CH6_Pos: u32 = 6;
pub const PPI_CHG1_CH6_Msk: u32 = 64;
pub const PPI_CHG1_CH6_Excluded: u32 = 0;
pub const PPI_CHG1_CH6_Included: u32 = 1;
pub const PPI_CHG1_CH5_Pos: u32 = 5;
pub const PPI_CHG1_CH5_Msk: u32 = 32;
pub const PPI_CHG1_CH5_Excluded: u32 = 0;
pub const PPI_CHG1_CH5_Included: u32 = 1;
pub const PPI_CHG1_CH4_Pos: u32 = 4;
pub const PPI_CHG1_CH4_Msk: u32 = 16;
pub const PPI_CHG1_CH4_Excluded: u32 = 0;
pub const PPI_CHG1_CH4_Included: u32 = 1;
pub const PPI_CHG1_CH3_Pos: u32 = 3;
pub const PPI_CHG1_CH3_Msk: u32 = 8;
pub const PPI_CHG1_CH3_Excluded: u32 = 0;
pub const PPI_CHG1_CH3_Included: u32 = 1;
pub const PPI_CHG1_CH2_Pos: u32 = 2;
pub const PPI_CHG1_CH2_Msk: u32 = 4;
pub const PPI_CHG1_CH2_Excluded: u32 = 0;
pub const PPI_CHG1_CH2_Included: u32 = 1;
pub const PPI_CHG1_CH1_Pos: u32 = 1;
pub const PPI_CHG1_CH1_Msk: u32 = 2;
pub const PPI_CHG1_CH1_Excluded: u32 = 0;
pub const PPI_CHG1_CH1_Included: u32 = 1;
pub const PPI_CHG1_CH0_Pos: u32 = 0;
pub const PPI_CHG1_CH0_Msk: u32 = 1;
pub const PPI_CHG1_CH0_Excluded: u32 = 0;
pub const PPI_CHG1_CH0_Included: u32 = 1;
pub const PPI_CHG2_CH15_Pos: u32 = 15;
pub const PPI_CHG2_CH15_Msk: u32 = 32768;
pub const PPI_CHG2_CH15_Excluded: u32 = 0;
pub const PPI_CHG2_CH15_Included: u32 = 1;
pub const PPI_CHG2_CH14_Pos: u32 = 14;
pub const PPI_CHG2_CH14_Msk: u32 = 16384;
pub const PPI_CHG2_CH14_Excluded: u32 = 0;
pub const PPI_CHG2_CH14_Included: u32 = 1;
pub const PPI_CHG2_CH13_Pos: u32 = 13;
pub const PPI_CHG2_CH13_Msk: u32 = 8192;
pub const PPI_CHG2_CH13_Excluded: u32 = 0;
pub const PPI_CHG2_CH13_Included: u32 = 1;
pub const PPI_CHG2_CH12_Pos: u32 = 12;
pub const PPI_CHG2_CH12_Msk: u32 = 4096;
pub const PPI_CHG2_CH12_Excluded: u32 = 0;
pub const PPI_CHG2_CH12_Included: u32 = 1;
pub const PPI_CHG2_CH11_Pos: u32 = 11;
pub const PPI_CHG2_CH11_Msk: u32 = 2048;
pub const PPI_CHG2_CH11_Excluded: u32 = 0;
pub const PPI_CHG2_CH11_Included: u32 = 1;
pub const PPI_CHG2_CH10_Pos: u32 = 10;
pub const PPI_CHG2_CH10_Msk: u32 = 1024;
pub const PPI_CHG2_CH10_Excluded: u32 = 0;
pub const PPI_CHG2_CH10_Included: u32 = 1;
pub const PPI_CHG2_CH9_Pos: u32 = 9;
pub const PPI_CHG2_CH9_Msk: u32 = 512;
pub const PPI_CHG2_CH9_Excluded: u32 = 0;
pub const PPI_CHG2_CH9_Included: u32 = 1;
pub const PPI_CHG2_CH8_Pos: u32 = 8;
pub const PPI_CHG2_CH8_Msk: u32 = 256;
pub const PPI_CHG2_CH8_Excluded: u32 = 0;
pub const PPI_CHG2_CH8_Included: u32 = 1;
pub const PPI_CHG2_CH7_Pos: u32 = 7;
pub const PPI_CHG2_CH7_Msk: u32 = 128;
pub const PPI_CHG2_CH7_Excluded: u32 = 0;
pub const PPI_CHG2_CH7_Included: u32 = 1;
pub const PPI_CHG2_CH6_Pos: u32 = 6;
pub const PPI_CHG2_CH6_Msk: u32 = 64;
pub const PPI_CHG2_CH6_Excluded: u32 = 0;
pub const PPI_CHG2_CH6_Included: u32 = 1;
pub const PPI_CHG2_CH5_Pos: u32 = 5;
pub const PPI_CHG2_CH5_Msk: u32 = 32;
pub const PPI_CHG2_CH5_Excluded: u32 = 0;
pub const PPI_CHG2_CH5_Included: u32 = 1;
pub const PPI_CHG2_CH4_Pos: u32 = 4;
pub const PPI_CHG2_CH4_Msk: u32 = 16;
pub const PPI_CHG2_CH4_Excluded: u32 = 0;
pub const PPI_CHG2_CH4_Included: u32 = 1;
pub const PPI_CHG2_CH3_Pos: u32 = 3;
pub const PPI_CHG2_CH3_Msk: u32 = 8;
pub const PPI_CHG2_CH3_Excluded: u32 = 0;
pub const PPI_CHG2_CH3_Included: u32 = 1;
pub const PPI_CHG2_CH2_Pos: u32 = 2;
pub const PPI_CHG2_CH2_Msk: u32 = 4;
pub const PPI_CHG2_CH2_Excluded: u32 = 0;
pub const PPI_CHG2_CH2_Included: u32 = 1;
pub const PPI_CHG2_CH1_Pos: u32 = 1;
pub const PPI_CHG2_CH1_Msk: u32 = 2;
pub const PPI_CHG2_CH1_Excluded: u32 = 0;
pub const PPI_CHG2_CH1_Included: u32 = 1;
pub const PPI_CHG2_CH0_Pos: u32 = 0;
pub const PPI_CHG2_CH0_Msk: u32 = 1;
pub const PPI_CHG2_CH0_Excluded: u32 = 0;
pub const PPI_CHG2_CH0_Included: u32 = 1;
pub const PPI_CHG3_CH15_Pos: u32 = 15;
pub const PPI_CHG3_CH15_Msk: u32 = 32768;
pub const PPI_CHG3_CH15_Excluded: u32 = 0;
pub const PPI_CHG3_CH15_Included: u32 = 1;
pub const PPI_CHG3_CH14_Pos: u32 = 14;
pub const PPI_CHG3_CH14_Msk: u32 = 16384;
pub const PPI_CHG3_CH14_Excluded: u32 = 0;
pub const PPI_CHG3_CH14_Included: u32 = 1;
pub const PPI_CHG3_CH13_Pos: u32 = 13;
pub const PPI_CHG3_CH13_Msk: u32 = 8192;
pub const PPI_CHG3_CH13_Excluded: u32 = 0;
pub const PPI_CHG3_CH13_Included: u32 = 1;
pub const PPI_CHG3_CH12_Pos: u32 = 12;
pub const PPI_CHG3_CH12_Msk: u32 = 4096;
pub const PPI_CHG3_CH12_Excluded: u32 = 0;
pub const PPI_CHG3_CH12_Included: u32 = 1;
pub const PPI_CHG3_CH11_Pos: u32 = 11;
pub const PPI_CHG3_CH11_Msk: u32 = 2048;
pub const PPI_CHG3_CH11_Excluded: u32 = 0;
pub const PPI_CHG3_CH11_Included: u32 = 1;
pub const PPI_CHG3_CH10_Pos: u32 = 10;
pub const PPI_CHG3_CH10_Msk: u32 = 1024;
pub const PPI_CHG3_CH10_Excluded: u32 = 0;
pub const PPI_CHG3_CH10_Included: u32 = 1;
pub const PPI_CHG3_CH9_Pos: u32 = 9;
pub const PPI_CHG3_CH9_Msk: u32 = 512;
pub const PPI_CHG3_CH9_Excluded: u32 = 0;
pub const PPI_CHG3_CH9_Included: u32 = 1;
pub const PPI_CHG3_CH8_Pos: u32 = 8;
pub const PPI_CHG3_CH8_Msk: u32 = 256;
pub const PPI_CHG3_CH8_Excluded: u32 = 0;
pub const PPI_CHG3_CH8_Included: u32 = 1;
pub const PPI_CHG3_CH7_Pos: u32 = 7;
pub const PPI_CHG3_CH7_Msk: u32 = 128;
pub const PPI_CHG3_CH7_Excluded: u32 = 0;
pub const PPI_CHG3_CH7_Included: u32 = 1;
pub const PPI_CHG3_CH6_Pos: u32 = 6;
pub const PPI_CHG3_CH6_Msk: u32 = 64;
pub const PPI_CHG3_CH6_Excluded: u32 = 0;
pub const PPI_CHG3_CH6_Included: u32 = 1;
pub const PPI_CHG3_CH5_Pos: u32 = 5;
pub const PPI_CHG3_CH5_Msk: u32 = 32;
pub const PPI_CHG3_CH5_Excluded: u32 = 0;
pub const PPI_CHG3_CH5_Included: u32 = 1;
pub const PPI_CHG3_CH4_Pos: u32 = 4;
pub const PPI_CHG3_CH4_Msk: u32 = 16;
pub const PPI_CHG3_CH4_Excluded: u32 = 0;
pub const PPI_CHG3_CH4_Included: u32 = 1;
pub const PPI_CHG3_CH3_Pos: u32 = 3;
pub const PPI_CHG3_CH3_Msk: u32 = 8;
pub const PPI_CHG3_CH3_Excluded: u32 = 0;
pub const PPI_CHG3_CH3_Included: u32 = 1;
pub const PPI_CHG3_CH2_Pos: u32 = 2;
pub const PPI_CHG3_CH2_Msk: u32 = 4;
pub const PPI_CHG3_CH2_Excluded: u32 = 0;
pub const PPI_CHG3_CH2_Included: u32 = 1;
pub const PPI_CHG3_CH1_Pos: u32 = 1;
pub const PPI_CHG3_CH1_Msk: u32 = 2;
pub const PPI_CHG3_CH1_Excluded: u32 = 0;
pub const PPI_CHG3_CH1_Included: u32 = 1;
pub const PPI_CHG3_CH0_Pos: u32 = 0;
pub const PPI_CHG3_CH0_Msk: u32 = 1;
pub const PPI_CHG3_CH0_Excluded: u32 = 0;
pub const PPI_CHG3_CH0_Included: u32 = 1;
pub const LPCOMP_HYST_HYST_NoHyst: u32 = 0;
pub const LPCOMP_HYST_HYST_Hyst50mV: u32 = 1;
pub const I2S_ENABLE_ENABLE_DISABLE: u32 = 0;
pub const I2S_ENABLE_ENABLE_ENABLE: u32 = 1;
pub const I2S_CONFIG_MODE_MODE_MASTER: u32 = 0;
pub const I2S_CONFIG_MODE_MODE_SLAVE: u32 = 1;
pub const I2S_CONFIG_RXEN_RXEN_DISABLE: u32 = 0;
pub const I2S_CONFIG_RXEN_RXEN_ENABLE: u32 = 1;
pub const I2S_CONFIG_TXEN_TXEN_DISABLE: u32 = 0;
pub const I2S_CONFIG_TXEN_TXEN_ENABLE: u32 = 1;
pub const I2S_CONFIG_MCKEN_MCKEN_DISABLE: u32 = 0;
pub const I2S_CONFIG_MCKEN_MCKEN_ENABLE: u32 = 1;
pub const I2S_CONFIG_SWIDTH_SWIDTH_8BIT: u32 = 0;
pub const I2S_CONFIG_SWIDTH_SWIDTH_16BIT: u32 = 1;
pub const I2S_CONFIG_SWIDTH_SWIDTH_24BIT: u32 = 2;
pub const I2S_CONFIG_ALIGN_ALIGN_LEFT: u32 = 0;
pub const I2S_CONFIG_ALIGN_ALIGN_RIGHT: u32 = 1;
pub const I2S_CONFIG_FORMAT_FORMAT_ALIGNED: u32 = 1;
pub const I2S_CONFIG_CHANNELS_CHANNELS_STEREO: u32 = 0;
pub const I2S_CONFIG_CHANNELS_CHANNELS_LEFT: u32 = 1;
pub const I2S_CONFIG_CHANNELS_CHANNELS_RIGHT: u32 = 2;
pub const LPCOMP_RESULT_RESULT_Bellow: u32 = 0;
pub const CLOCK_COUNT: u32 = 1;
pub const POWER_COUNT: u32 = 1;
pub const POWER_FEATURE_RAM_REGISTERS_COUNT: u32 = 9;
pub const NVMC_COUNT: u32 = 1;
pub const FPU_COUNT: u32 = 1;
pub const SYSTICK_COUNT: u32 = 1;
pub const SWI_COUNT: u32 = 6;
pub const MWU_COUNT: u32 = 1;
pub const GPIO_COUNT: u32 = 2;
pub const P0_PIN_NUM: u32 = 32;
pub const P1_PIN_NUM: u32 = 16;
pub const P0_FEATURE_PINS_PRESENT: u32 = 4294967295;
pub const P1_FEATURE_PINS_PRESENT: u32 = 65535;
pub const ACL_REGIONS_COUNT: u32 = 8;
pub const RADIO_COUNT: u32 = 1;
pub const RADIO_EASYDMA_MAXCNT_SIZE: u32 = 8;
pub const RADIO_TXPOWER_TXPOWER_Max: u32 = 8;
pub const AAR_COUNT: u32 = 1;
pub const AAR_MAX_IRK_NUM: u32 = 16;
pub const ECB_COUNT: u32 = 1;
pub const CCM_COUNT: u32 = 1;
pub const NFCT_COUNT: u32 = 1;
pub const NFCT_EASYDMA_MAXCNT_SIZE: u32 = 9;
pub const PPI_COUNT: u32 = 1;
pub const PPI_CH_NUM: u32 = 20;
pub const PPI_FIXED_CH_NUM: u32 = 12;
pub const PPI_GROUP_NUM: u32 = 6;
pub const EGU_COUNT: u32 = 6;
pub const EGU0_CH_NUM: u32 = 16;
pub const EGU1_CH_NUM: u32 = 16;
pub const EGU2_CH_NUM: u32 = 16;
pub const EGU3_CH_NUM: u32 = 16;
pub const EGU4_CH_NUM: u32 = 16;
pub const EGU5_CH_NUM: u32 = 16;
pub const TIMER_COUNT: u32 = 5;
pub const TIMER0_MAX_SIZE: u32 = 32;
pub const TIMER1_MAX_SIZE: u32 = 32;
pub const TIMER2_MAX_SIZE: u32 = 32;
pub const TIMER3_MAX_SIZE: u32 = 32;
pub const TIMER4_MAX_SIZE: u32 = 32;
pub const TIMER0_CC_NUM: u32 = 4;
pub const TIMER1_CC_NUM: u32 = 4;
pub const TIMER2_CC_NUM: u32 = 4;
pub const TIMER3_CC_NUM: u32 = 6;
pub const TIMER4_CC_NUM: u32 = 6;
pub const RTC_COUNT: u32 = 3;
pub const RTC0_CC_NUM: u32 = 3;
pub const RTC1_CC_NUM: u32 = 4;
pub const RTC2_CC_NUM: u32 = 4;
pub const RNG_COUNT: u32 = 1;
pub const WDT_COUNT: u32 = 1;
pub const TEMP_COUNT: u32 = 1;
pub const SPI_COUNT: u32 = 3;
pub const SPIM_COUNT: u32 = 4;
pub const SPIM0_MAX_DATARATE: u32 = 8;
pub const SPIM1_MAX_DATARATE: u32 = 8;
pub const SPIM2_MAX_DATARATE: u32 = 8;
pub const SPIM3_MAX_DATARATE: u32 = 32;
pub const SPIM0_FEATURE_HARDWARE_CSN_PRESENT: u32 = 0;
pub const SPIM1_FEATURE_HARDWARE_CSN_PRESENT: u32 = 0;
pub const SPIM2_FEATURE_HARDWARE_CSN_PRESENT: u32 = 0;
pub const SPIM3_FEATURE_HARDWARE_CSN_PRESENT: u32 = 1;
pub const SPIM0_FEATURE_DCX_PRESENT: u32 = 0;
pub const SPIM1_FEATURE_DCX_PRESENT: u32 = 0;
pub const SPIM2_FEATURE_DCX_PRESENT: u32 = 0;
pub const SPIM3_FEATURE_DCX_PRESENT: u32 = 1;
pub const SPIM0_FEATURE_RXDELAY_PRESENT: u32 = 0;
pub const SPIM1_FEATURE_RXDELAY_PRESENT: u32 = 0;
pub const SPIM2_FEATURE_RXDELAY_PRESENT: u32 = 0;
pub const SPIM3_FEATURE_RXDELAY_PRESENT: u32 = 1;
pub const SPIM0_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const SPIM1_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const SPIM2_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const SPIM3_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const SPIS_COUNT: u32 = 3;
pub const SPIS0_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const SPIS1_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const SPIS2_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const TWI_COUNT: u32 = 2;
pub const TWIM_COUNT: u32 = 2;
pub const TWIM0_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const TWIM1_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const TWIS_COUNT: u32 = 2;
pub const TWIS0_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const TWIS1_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const UART_COUNT: u32 = 1;
pub const UARTE_COUNT: u32 = 2;
pub const UARTE0_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const UARTE1_EASYDMA_MAXCNT_SIZE: u32 = 16;
pub const QDEC_COUNT: u32 = 1;
pub const SAADC_COUNT: u32 = 1;
pub const SAADC_EASYDMA_MAXCNT_SIZE: u32 = 15;
pub const SAADC_CH_NUM: u32 = 8;
pub const GPIOTE_COUNT: u32 = 1;
pub const GPIOTE_CH_NUM: u32 = 8;
pub const LPCOMP_COUNT: u32 = 1;
pub const LPCOMP_REFSEL_RESOLUTION: u32 = 16;
pub const COMP_COUNT: u32 = 1;
pub const PWM_COUNT: u32 = 4;
pub const PWM0_CH_NUM: u32 = 4;
pub const PWM1_CH_NUM: u32 = 4;
pub const PWM2_CH_NUM: u32 = 4;
pub const PWM3_CH_NUM: u32 = 4;
pub const PWM0_EASYDMA_MAXCNT_SIZE: u32 = 15;
pub const PWM1_EASYDMA_MAXCNT_SIZE: u32 = 15;
pub const PWM2_EASYDMA_MAXCNT_SIZE: u32 = 15;
pub const PWM3_EASYDMA_MAXCNT_SIZE: u32 = 15;
pub const PDM_COUNT: u32 = 1;
pub const PDM_EASYDMA_MAXCNT_SIZE: u32 = 15;
pub const I2S_COUNT: u32 = 1;
pub const I2S_EASYDMA_MAXCNT_SIZE: u32 = 14;
pub const USBD_COUNT: u32 = 1;
pub const USBD_EASYDMA_MAXCNT_SIZE: u32 = 7;
pub const CRYPTOCELL_COUNT: u32 = 1;
pub const QSPI_COUNT: u32 = 1;
pub const QSPI_EASYDMA_MAXCNT_SIZE: u32 = 20;
pub const __DEFAULT_STACK_SIZE: u32 = 16384;
pub const __DEFAULT_HEAP_SIZE: u32 = 16384;
pub const NRF_MEMORY_FLASH_BASE: u32 = 0;
pub const NRF_MEMORY_FLASH_SIZE: u32 = 1048576;
pub const NRF_MEMORY_EXTFLASH_BASE: u32 = 301989888;
pub const NRF_MEMORY_EXTFLASH_SIZE: u32 = 134217728;
pub const NRF_MEMORY_CODERAM_BASE: u32 = 8388608;
pub const NRF_MEMORY_CODERAM_SIZE: u32 = 262144;
pub const NRF_MEMORY_FICR_BASE: u32 = 268435456;
pub const NRF_MEMORY_FICR_SIZE: u32 = 4096;
pub const NRF_MEMORY_UICR_BASE: u32 = 268439552;
pub const NRF_MEMORY_UICR_SIZE: u32 = 4096;
pub const NRF_MEMORY_RAM_BASE: u32 = 536870912;
pub const NRF_MEMORY_RAM_SIZE: u32 = 262144;
pub const NRF_MEMORY_PERIPHERALSAPB_BASE: u32 = 1073741824;
pub const NRF_MEMORY_PERIPHERALSAPB_SIZE: u32 = 196608;
pub const NRF_MEMORY_PERIPHERALSAHB_BASE: u32 = 1342177280;
pub const NRF_MEMORY_PERIPHERALSAHB_SIZE: u32 = 4096;
pub const NRF_MEMORY_SYSTEMSFR_BASE: u32 = 3758096384;
pub const NRF_MEMORY_SYSTEMSFR_SIZE: u32 = 1048576;
pub const __STACK_SIZE: u32 = 16384;
pub const __STACK_ALIGNMENT: u32 = 3;
pub const __HEAP_SIZE: u32 = 16384;
pub const __HEAP_ALIGNMENT: u32 = 3;
pub const ISA_ARM: u32 = 1;
pub const NRFX_DELAY_DWT_BASED: u32 = 0;
pub const NRFX_CUSTOM_ERROR_CODES: u32 = 0;
pub const NRFX_EVENT_READBACK_ENABLED: u32 = 1;
pub const NRFX_PPI_CHANNELS_USED_BY_BT_CTLR: u32 = 0;
pub const NRFX_PPI_GROUPS_USED_BY_BT_CTLR: u32 = 0;
pub const NRFX_GPIOTE_CHANNELS_USED_BY_BT_CTLR: u32 = 0;
pub const NRFX_PPI_CHANNELS_USED_BY_802154_DRV: u32 = 0;
pub const NRFX_PPI_GROUPS_USED_BY_802154_DRV: u32 = 0;
pub const NRFX_PPI_CHANNELS_USED_BY_MPSL: u32 = 0;
pub const NRFX_PPI_GROUPS_USED_BY_MPSL: u32 = 0;
pub const NRFX_EGUS_USED: u32 = 0;
pub const NRFX_TIMERS_USED: u32 = 0;
pub const NRFX_ERROR_BASE_NUM: u32 = 195887104;
pub const NRFX_ERROR_DRIVERS_BASE_NUM: u32 = 195952640;
pub const FLASH_PAGE_ERASE_MAX_TIME_US: u32 = 89700;
pub const FLASH_PAGE_MAX_CNT: u32 = 256;
pub const NO_ACCESS: u32 = 0;
pub const NO_ACCESS_Msk: u32 = 0;
pub const P_NA_U_NA: u32 = 0;
pub const P_NA_U_NA_Msk: u32 = 0;
pub const P_RW_U_NA: u32 = 1;
pub const P_RW_U_NA_Msk: u32 = 16777216;
pub const P_RW_U_RO: u32 = 2;
pub const P_RW_U_RO_Msk: u32 = 33554432;
pub const P_RW_U_RW: u32 = 3;
pub const P_RW_U_RW_Msk: u32 = 50331648;
pub const FULL_ACCESS: u32 = 3;
pub const FULL_ACCESS_Msk: u32 = 50331648;
pub const P_RO_U_NA: u32 = 5;
pub const P_RO_U_NA_Msk: u32 = 83886080;
pub const P_RO_U_RO: u32 = 6;
pub const P_RO_U_RO_Msk: u32 = 100663296;
pub const RO: u32 = 7;
pub const RO_Msk: u32 = 117440512;
pub const NOT_EXEC: u32 = 268435456;
pub const STRONGLY_ORDERED_SHAREABLE: u32 = 262144;
pub const DEVICE_SHAREABLE: u32 = 327680;
pub const NORMAL_OUTER_INNER_WRITE_THROUGH_SHAREABLE: u32 = 393216;
pub const NORMAL_OUTER_INNER_WRITE_THROUGH_NON_SHAREABLE: u32 = 131072;
pub const NORMAL_OUTER_INNER_WRITE_BACK_SHAREABLE: u32 = 458752;
pub const NORMAL_OUTER_INNER_WRITE_BACK_NON_SHAREABLE: u32 = 196608;
pub const NORMAL_OUTER_INNER_NON_CACHEABLE_SHAREABLE: u32 = 786432;
pub const NORMAL_OUTER_INNER_NON_CACHEABLE_NON_SHAREABLE: u32 = 524288;
pub const NORMAL_OUTER_INNER_WRITE_BACK_WRITE_READ_ALLOCATE_SHAREABLE: u32 = 983040;
pub const NORMAL_OUTER_INNER_WRITE_BACK_WRITE_READ_ALLOCATE_NON_SHAREABLE: u32 = 720896;
pub const DEVICE_NON_SHAREABLE: u32 = 1048576;
pub const SUB_REGION_0_DISABLED: u32 = 256;
pub const SUB_REGION_1_DISABLED: u32 = 512;
pub const SUB_REGION_2_DISABLED: u32 = 1024;
pub const SUB_REGION_3_DISABLED: u32 = 2048;
pub const SUB_REGION_4_DISABLED: u32 = 4096;
pub const SUB_REGION_5_DISABLED: u32 = 8192;
pub const SUB_REGION_6_DISABLED: u32 = 16384;
pub const SUB_REGION_7_DISABLED: u32 = 32768;
pub const _K_MEM_PARTITION_P_NA_U_NA: u32 = 268435456;
pub const _K_MEM_PARTITION_P_RW_U_RW: u32 = 318767104;
pub const _K_MEM_PARTITION_P_RW_U_RO: u32 = 301989888;
pub const _K_MEM_PARTITION_P_RW_U_NA: u32 = 285212672;
pub const _K_MEM_PARTITION_P_RO_U_RO: u32 = 369098752;
pub const _K_MEM_PARTITION_P_RO_U_NA: u32 = 352321536;
pub const _K_MEM_PARTITION_P_RWX_U_RWX: u32 = 50331648;
pub const _K_MEM_PARTITION_P_RWX_U_RX: u32 = 33554432;
pub const _K_MEM_PARTITION_P_RX_U_RX: u32 = 100663296;
pub const NSEC_PER_USEC: u32 = 1000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const USEC_PER_MSEC: u32 = 1000;
pub const MSEC_PER_SEC: u32 = 1000;
pub const SEC_PER_MIN: u32 = 60;
pub const MIN_PER_HOUR: u32 = 60;
pub const HOUR_PER_DAY: u32 = 24;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const _TICK_ALIGN: u32 = 1;
pub const __error_t_defined: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const ENOMSG: u32 = 35;
pub const EIDRM: u32 = 36;
pub const ECHRNG: u32 = 37;
pub const EL2NSYNC: u32 = 38;
pub const EL3HLT: u32 = 39;
pub const EL3RST: u32 = 40;
pub const ELNRNG: u32 = 41;
pub const EUNATCH: u32 = 42;
pub const ENOCSI: u32 = 43;
pub const EL2HLT: u32 = 44;
pub const EDEADLK: u32 = 45;
pub const ENOLCK: u32 = 46;
pub const EBADE: u32 = 50;
pub const EBADR: u32 = 51;
pub const EXFULL: u32 = 52;
pub const ENOANO: u32 = 53;
pub const EBADRQC: u32 = 54;
pub const EBADSLT: u32 = 55;
pub const EDEADLOCK: u32 = 56;
pub const EBFONT: u32 = 57;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 74;
pub const ELBIN: u32 = 75;
pub const EDOTDOT: u32 = 76;
pub const EBADMSG: u32 = 77;
pub const EFTYPE: u32 = 79;
pub const ENOTUNIQ: u32 = 80;
pub const EBADFD: u32 = 81;
pub const EREMCHG: u32 = 82;
pub const ELIBACC: u32 = 83;
pub const ELIBBAD: u32 = 84;
pub const ELIBSCN: u32 = 85;
pub const ELIBMAX: u32 = 86;
pub const ELIBEXEC: u32 = 87;
pub const ENOSYS: u32 = 88;
pub const ENOTEMPTY: u32 = 90;
pub const ENAMETOOLONG: u32 = 91;
pub const ELOOP: u32 = 92;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EAFNOSUPPORT: u32 = 106;
pub const EPROTOTYPE: u32 = 107;
pub const ENOTSOCK: u32 = 108;
pub const ENOPROTOOPT: u32 = 109;
pub const ESHUTDOWN: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EADDRINUSE: u32 = 112;
pub const ECONNABORTED: u32 = 113;
pub const ENETUNREACH: u32 = 114;
pub const ENETDOWN: u32 = 115;
pub const ETIMEDOUT: u32 = 116;
pub const EHOSTDOWN: u32 = 117;
pub const EHOSTUNREACH: u32 = 118;
pub const EINPROGRESS: u32 = 119;
pub const EALREADY: u32 = 120;
pub const EDESTADDRREQ: u32 = 121;
pub const EMSGSIZE: u32 = 122;
pub const EPROTONOSUPPORT: u32 = 123;
pub const ESOCKTNOSUPPORT: u32 = 124;
pub const EADDRNOTAVAIL: u32 = 125;
pub const ENETRESET: u32 = 126;
pub const EISCONN: u32 = 127;
pub const ENOTCONN: u32 = 128;
pub const ETOOMANYREFS: u32 = 129;
pub const EPROCLIM: u32 = 130;
pub const EUSERS: u32 = 131;
pub const EDQUOT: u32 = 132;
pub const ESTALE: u32 = 133;
pub const ENOTSUP: u32 = 134;
pub const ENOMEDIUM: u32 = 135;
pub const EILSEQ: u32 = 138;
pub const EOVERFLOW: u32 = 139;
pub const ECANCELED: u32 = 140;
pub const ENOTRECOVERABLE: u32 = 141;
pub const EOWNERDEAD: u32 = 142;
pub const ESTRPIPE: u32 = 143;
pub const EWOULDBLOCK: u32 = 11;
pub const __ELASTERROR: u32 = 2000;
pub const K_HIGHEST_THREAD_PRIO: i32 = -16;
pub const K_LOWEST_THREAD_PRIO: u32 = 15;
pub const K_IDLE_PRIO: u32 = 15;
pub const K_HIGHEST_APPLICATION_THREAD_PRIO: i32 = -16;
pub const K_LOWEST_APPLICATION_THREAD_PRIO: u32 = 14;
pub const K_POLL_TYPE_IGNORE: u32 = 0;
pub const K_POLL_STATE_NOT_READY: u32 = 0;
pub const SYS_REBOOT_WARM: u32 = 0;
pub const SYS_REBOOT_COLD: u32 = 1;
pub type wchar_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::core::mem::MaybeUninit<max_align_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        16usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        8usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_longlong;
pub type __uint64_t = ::core::ffi::c_ulonglong;
pub type __int_least8_t = ::core::ffi::c_schar;
pub type __uint_least8_t = ::core::ffi::c_uchar;
pub type __int_least16_t = ::core::ffi::c_short;
pub type __uint_least16_t = ::core::ffi::c_ushort;
pub type __int_least32_t = ::core::ffi::c_int;
pub type __uint_least32_t = ::core::ffi::c_uint;
pub type __int_least64_t = ::core::ffi::c_longlong;
pub type __uint_least64_t = ::core::ffi::c_ulonglong;
pub type __intmax_t = ::core::ffi::c_longlong;
pub type __uintmax_t = ::core::ffi::c_ulonglong;
pub type __intptr_t = ::core::ffi::c_int;
pub type __uintptr_t = ::core::ffi::c_uint;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type int_fast16_t = ::core::ffi::c_short;
pub type uint_fast16_t = ::core::ffi::c_ushort;
pub type int_fast32_t = ::core::ffi::c_int;
pub type uint_fast32_t = ::core::ffi::c_uint;
pub type int_fast64_t = ::core::ffi::c_longlong;
pub type uint_fast64_t = ::core::ffi::c_ulonglong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union z_max_align_t {
    pub thelonglong: ::core::ffi::c_longlong,
    pub thelongdouble: f64,
    pub theuintmax_t: uintmax_t,
    pub thesize_t: usize,
    pub theuintptr_t: usize,
    pub thepvoid: *mut ::core::ffi::c_void,
    pub thepfunc: ::core::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_z_max_align_t() {
    const UNINIT: ::core::mem::MaybeUninit<z_max_align_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<z_max_align_t>(),
        8usize,
        concat!("Size of: ", stringify!(z_max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<z_max_align_t>(),
        8usize,
        concat!("Alignment of ", stringify!(z_max_align_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thelonglong) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_max_align_t),
            "::",
            stringify!(thelonglong)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thelongdouble) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_max_align_t),
            "::",
            stringify!(thelongdouble)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).theuintmax_t) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_max_align_t),
            "::",
            stringify!(theuintmax_t)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thesize_t) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_max_align_t),
            "::",
            stringify!(thesize_t)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).theuintptr_t) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_max_align_t),
            "::",
            stringify!(theuintptr_t)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thepvoid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_max_align_t),
            "::",
            stringify!(thepvoid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thepfunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_max_align_t),
            "::",
            stringify!(thepfunc)
        )
    );
}
pub type atomic_t = ::core::ffi::c_long;
pub type atomic_val_t = atomic_t;
pub type atomic_ptr_t = *mut ::core::ffi::c_void;
pub type atomic_ptr_val_t = atomic_ptr_t;
extern "C" {
    #[doc = " @brief Atomic compare-and-set.\n\n This routine performs an atomic compare-and-set on @a target. If the current\n value of @a target equals @a old_value, @a target is set to @a new_value.\n If the current value of @a target does not equal @a old_value, @a target\n is left unchanged.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n @param old_value Original value to compare against.\n @param new_value New value to store.\n @return true if @a new_value is written, false otherwise."]
    #[link_name = "atomic_cas__extern"]
    pub fn atomic_cas(
        target: *mut atomic_t,
        old_value: atomic_val_t,
        new_value: atomic_val_t,
    ) -> bool;
}
extern "C" {
    #[doc = " @brief Atomic compare-and-set with pointer values\n\n This routine performs an atomic compare-and-set on @a target. If the current\n value of @a target equals @a old_value, @a target is set to @a new_value.\n If the current value of @a target does not equal @a old_value, @a target\n is left unchanged.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n @param old_value Original value to compare against.\n @param new_value New value to store.\n @return true if @a new_value is written, false otherwise."]
    #[link_name = "atomic_ptr_cas__extern"]
    pub fn atomic_ptr_cas(
        target: *mut atomic_ptr_t,
        old_value: atomic_ptr_val_t,
        new_value: atomic_ptr_val_t,
    ) -> bool;
}
extern "C" {
    #[doc = " @brief Atomic addition.\n\n This routine performs an atomic addition on @a target.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n @param value Value to add.\n\n @return Previous value of @a target."]
    #[link_name = "atomic_add__extern"]
    pub fn atomic_add(target: *mut atomic_t, value: atomic_val_t) -> atomic_val_t;
}
extern "C" {
    #[doc = " @brief Atomic subtraction.\n\n This routine performs an atomic subtraction on @a target.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n @param value Value to subtract.\n\n @return Previous value of @a target."]
    #[link_name = "atomic_sub__extern"]
    pub fn atomic_sub(target: *mut atomic_t, value: atomic_val_t) -> atomic_val_t;
}
extern "C" {
    #[doc = " @brief Atomic increment.\n\n This routine performs an atomic increment by 1 on @a target.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n\n @return Previous value of @a target."]
    #[link_name = "atomic_inc__extern"]
    pub fn atomic_inc(target: *mut atomic_t) -> atomic_val_t;
}
extern "C" {
    #[doc = " @brief Atomic decrement.\n\n This routine performs an atomic decrement by 1 on @a target.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n\n @return Previous value of @a target."]
    #[link_name = "atomic_dec__extern"]
    pub fn atomic_dec(target: *mut atomic_t) -> atomic_val_t;
}
extern "C" {
    #[doc = " @brief Atomic get.\n\n This routine performs an atomic read on @a target.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n\n @return Value of @a target."]
    #[link_name = "atomic_get__extern"]
    pub fn atomic_get(target: *const atomic_t) -> atomic_val_t;
}
extern "C" {
    #[doc = " @brief Atomic get a pointer value\n\n This routine performs an atomic read on @a target.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of pointer variable.\n\n @return Value of @a target."]
    #[link_name = "atomic_ptr_get__extern"]
    pub fn atomic_ptr_get(target: *const atomic_ptr_t) -> atomic_ptr_val_t;
}
extern "C" {
    #[doc = " @brief Atomic get-and-set.\n\n This routine atomically sets @a target to @a value and returns\n the previous value of @a target.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n @param value Value to write to @a target.\n\n @return Previous value of @a target."]
    #[link_name = "atomic_set__extern"]
    pub fn atomic_set(target: *mut atomic_t, value: atomic_val_t) -> atomic_val_t;
}
extern "C" {
    #[doc = " @brief Atomic get-and-set for pointer values\n\n This routine atomically sets @a target to @a value and returns\n the previous value of @a target.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n @param value Value to write to @a target.\n\n @return Previous value of @a target."]
    #[link_name = "atomic_ptr_set__extern"]
    pub fn atomic_ptr_set(target: *mut atomic_ptr_t, value: atomic_ptr_val_t) -> atomic_ptr_val_t;
}
extern "C" {
    #[doc = " @brief Atomic clear.\n\n This routine atomically sets @a target to zero and returns its previous\n value. (Hence, it is equivalent to atomic_set(target, 0).)\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n\n @return Previous value of @a target."]
    #[link_name = "atomic_clear__extern"]
    pub fn atomic_clear(target: *mut atomic_t) -> atomic_val_t;
}
extern "C" {
    #[doc = " @brief Atomic clear of a pointer value\n\n This routine atomically sets @a target to zero and returns its previous\n value. (Hence, it is equivalent to atomic_set(target, 0).)\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n\n @return Previous value of @a target."]
    #[link_name = "atomic_ptr_clear__extern"]
    pub fn atomic_ptr_clear(target: *mut atomic_ptr_t) -> atomic_ptr_val_t;
}
extern "C" {
    #[doc = " @brief Atomic bitwise inclusive OR.\n\n This routine atomically sets @a target to the bitwise inclusive OR of\n @a target and @a value.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n @param value Value to OR.\n\n @return Previous value of @a target."]
    #[link_name = "atomic_or__extern"]
    pub fn atomic_or(target: *mut atomic_t, value: atomic_val_t) -> atomic_val_t;
}
extern "C" {
    #[doc = " @brief Atomic bitwise exclusive OR (XOR).\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n This routine atomically sets @a target to the bitwise exclusive OR (XOR) of\n @a target and @a value.\n\n @param target Address of atomic variable.\n @param value Value to XOR\n\n @return Previous value of @a target."]
    #[link_name = "atomic_xor__extern"]
    pub fn atomic_xor(target: *mut atomic_t, value: atomic_val_t) -> atomic_val_t;
}
extern "C" {
    #[doc = " @brief Atomic bitwise AND.\n\n This routine atomically sets @a target to the bitwise AND of @a target\n and @a value.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n @param value Value to AND.\n\n @return Previous value of @a target."]
    #[link_name = "atomic_and__extern"]
    pub fn atomic_and(target: *mut atomic_t, value: atomic_val_t) -> atomic_val_t;
}
extern "C" {
    #[doc = " @brief Atomic bitwise NAND.\n\n This routine atomically sets @a target to the bitwise NAND of @a target\n and @a value. (This operation is equivalent to target = ~(target & value).)\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable.\n @param value Value to NAND.\n\n @return Previous value of @a target."]
    #[link_name = "atomic_nand__extern"]
    pub fn atomic_nand(target: *mut atomic_t, value: atomic_val_t) -> atomic_val_t;
}
extern "C" {
    #[doc = " @brief Atomically test a bit.\n\n This routine tests whether bit number @a bit of @a target is set or not.\n The target may be a single atomic variable or an array of them.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable or array.\n @param bit Bit number (starting from 0).\n\n @return true if the bit was set, false if it wasn't."]
    #[link_name = "atomic_test_bit__extern"]
    pub fn atomic_test_bit(target: *const atomic_t, bit: ::core::ffi::c_int) -> bool;
}
extern "C" {
    #[doc = " @brief Atomically test and clear a bit.\n\n Atomically clear bit number @a bit of @a target and return its old value.\n The target may be a single atomic variable or an array of them.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable or array.\n @param bit Bit number (starting from 0).\n\n @return false if the bit was already cleared, true if it wasn't."]
    #[link_name = "atomic_test_and_clear_bit__extern"]
    pub fn atomic_test_and_clear_bit(target: *mut atomic_t, bit: ::core::ffi::c_int) -> bool;
}
extern "C" {
    #[doc = " @brief Atomically set a bit.\n\n Atomically set bit number @a bit of @a target and return its old value.\n The target may be a single atomic variable or an array of them.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable or array.\n @param bit Bit number (starting from 0).\n\n @return true if the bit was already set, false if it wasn't."]
    #[link_name = "atomic_test_and_set_bit__extern"]
    pub fn atomic_test_and_set_bit(target: *mut atomic_t, bit: ::core::ffi::c_int) -> bool;
}
extern "C" {
    #[doc = " @brief Atomically clear a bit.\n\n Atomically clear bit number @a bit of @a target.\n The target may be a single atomic variable or an array of them.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable or array.\n @param bit Bit number (starting from 0)."]
    #[link_name = "atomic_clear_bit__extern"]
    pub fn atomic_clear_bit(target: *mut atomic_t, bit: ::core::ffi::c_int);
}
extern "C" {
    #[doc = " @brief Atomically set a bit.\n\n Atomically set bit number @a bit of @a target.\n The target may be a single atomic variable or an array of them.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable or array.\n @param bit Bit number (starting from 0)."]
    #[link_name = "atomic_set_bit__extern"]
    pub fn atomic_set_bit(target: *mut atomic_t, bit: ::core::ffi::c_int);
}
extern "C" {
    #[doc = " @brief Atomically set a bit to a given value.\n\n Atomically set bit number @a bit of @a target to value @a val.\n The target may be a single atomic variable or an array of them.\n\n @note As for all atomic APIs, includes a\n full/sequentially-consistent memory barrier (where applicable).\n\n @param target Address of atomic variable or array.\n @param bit Bit number (starting from 0).\n @param val true for 1, false for 0."]
    #[link_name = "atomic_set_bit_to__extern"]
    pub fn atomic_set_bit_to(target: *mut atomic_t, bit: ::core::ffi::c_int, val: bool);
}
extern "C" {
    pub fn assert_print(fmt: *const ::core::ffi::c_char, ...);
}
extern "C" {
    #[doc = " @brief Is @p x a power of two?\n @param x value to check\n @return true if @p x is a power of two, false otherwise"]
    #[link_name = "is_power_of_two__extern"]
    pub fn is_power_of_two(x: ::core::ffi::c_uint) -> bool;
}
extern "C" {
    #[doc = " @brief Arithmetic shift right\n @param value value to shift\n @param shift number of bits to shift\n @return @p value shifted right by @p shift; opened bit positions are\n         filled with the sign bit"]
    #[link_name = "arithmetic_shift_right__extern"]
    pub fn arithmetic_shift_right(value: i64, shift: u8) -> i64;
}
extern "C" {
    #[doc = " @brief byte by byte memcpy.\n\n Copy `size` bytes of `src` into `dest`. This is guaranteed to be done byte by byte.\n\n @param dst Pointer to the destination memory.\n @param src Pointer to the source of the data.\n @param size The number of bytes to copy."]
    #[link_name = "bytecpy__extern"]
    pub fn bytecpy(dst: *mut ::core::ffi::c_void, src: *const ::core::ffi::c_void, size: usize);
}
extern "C" {
    #[doc = " @brief byte by byte swap.\n\n Swap @a size bytes between memory regions @a a and @a b. This is\n guaranteed to be done byte by byte.\n\n @param a Pointer to the the first memory region.\n @param b Pointer to the the second memory region.\n @param size The number of bytes to swap."]
    #[link_name = "byteswp__extern"]
    pub fn byteswp(a: *mut ::core::ffi::c_void, b: *mut ::core::ffi::c_void, size: usize);
}
extern "C" {
    #[doc = " @brief      Convert a single character into a hexadecimal nibble.\n\n @param c     The character to convert\n @param x     The address of storage for the converted number.\n\n  @return Zero on success or (negative) error code otherwise."]
    pub fn char2hex(c: ::core::ffi::c_char, x: *mut u8) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief      Convert a single hexadecimal nibble into a character.\n\n @param c     The number to convert\n @param x     The address of storage for the converted character.\n\n  @return Zero on success or (negative) error code otherwise."]
    pub fn hex2char(x: u8, c: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief      Convert a binary array into string representation.\n\n @param buf     The binary array to convert\n @param buflen  The length of the binary array to convert\n @param hex     Address of where to store the string representation.\n @param hexlen  Size of the storage area for string representation.\n\n @return     The length of the converted string, or 0 if an error occurred."]
    pub fn bin2hex(
        buf: *const u8,
        buflen: usize,
        hex: *mut ::core::ffi::c_char,
        hexlen: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " @brief      Convert a hexadecimal string into a binary array.\n\n @param hex     The hexadecimal string to convert\n @param hexlen  The length of the hexadecimal string to convert.\n @param buf     Address of where to store the binary data\n @param buflen  Size of the storage area for binary data\n\n @return     The length of the binary array, or 0 if an error occurred."]
    pub fn hex2bin(
        hex: *const ::core::ffi::c_char,
        hexlen: usize,
        buf: *mut u8,
        buflen: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " @brief Convert a binary coded decimal (BCD 8421) value to binary.\n\n @param bcd BCD 8421 value to convert.\n\n @return Binary representation of input value."]
    #[link_name = "bcd2bin__extern"]
    pub fn bcd2bin(bcd: u8) -> u8;
}
extern "C" {
    #[doc = " @brief Convert a binary value to binary coded decimal (BCD 8421).\n\n @param bin Binary value to convert.\n\n @return BCD 8421 representation of input value."]
    #[link_name = "bin2bcd__extern"]
    pub fn bin2bcd(bin: u8) -> u8;
}
extern "C" {
    #[doc = " @brief      Convert a uint8_t into a decimal string representation.\n\n Convert a uint8_t value into its ASCII decimal string representation.\n The string is terminated if there is enough space in buf.\n\n @param buf     Address of where to store the string representation.\n @param buflen  Size of the storage area for string representation.\n @param value   The value to convert to decimal string\n\n @return     The length of the converted string (excluding terminator if\n             any), or 0 if an error occurred."]
    pub fn u8_to_dec(buf: *mut ::core::ffi::c_char, buflen: u8, value: u8) -> u8;
}
extern "C" {
    #[doc = " @brief Properly truncate a NULL-terminated UTF-8 string\n\n Take a NULL-terminated UTF-8 string and ensure that if the string has been\n truncated (by setting the NULL terminator) earlier by other means, that\n the string ends with a properly formatted UTF-8 character (1-4 bytes).\n\n @htmlonly\n Example:\n      char test_str[] = \"€€€\";\n      char trunc_utf8[8];\n\n      printf(\"Original : %s\\n\", test_str); // €€€\n      strncpy(trunc_utf8, test_str, sizeof(trunc_utf8));\n      trunc_utf8[sizeof(trunc_utf8) - 1] = '\\0';\n      printf(\"Bad      : %s\\n\", trunc_utf8); // €€�\n      utf8_trunc(trunc_utf8);\n      printf(\"Truncated: %s\\n\", trunc_utf8); // €€\n @endhtmlonly\n\n @param utf8_str NULL-terminated string\n\n @return Pointer to the @p utf8_str"]
    pub fn utf8_trunc(utf8_str: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    #[doc = " @brief Copies a UTF-8 encoded string from @p src to @p dst\n\n The resulting @p dst will always be NULL terminated if @p n is larger than 0,\n and the @p dst string will always be properly UTF-8 truncated.\n\n @param dst The destination of the UTF-8 string.\n @param src The source string\n @param n   The size of the @p dst buffer. Maximum number of characters copied\n            is @p n - 1. If 0 nothing will be done, and the @p dst will not be\n            NULL terminated.\n\n @return Pointer to the @p dst"]
    pub fn utf8_lcpy(
        dst: *mut ::core::ffi::c_char,
        src: *const ::core::ffi::c_char,
        n: usize,
    ) -> *mut ::core::ffi::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _dnode {
    pub __bindgen_anon_1: _dnode__bindgen_ty_1,
    pub __bindgen_anon_2: _dnode__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dnode__bindgen_ty_1 {
    pub head: *mut _dnode,
    pub next: *mut _dnode,
}
#[test]
fn bindgen_test_layout__dnode__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<_dnode__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_dnode__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_dnode__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<_dnode__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_dnode__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnode__bindgen_ty_1),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnode__bindgen_ty_1),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _dnode__bindgen_ty_2 {
    pub tail: *mut _dnode,
    pub prev: *mut _dnode,
}
#[test]
fn bindgen_test_layout__dnode__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<_dnode__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_dnode__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(_dnode__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<_dnode__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_dnode__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnode__bindgen_ty_2),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dnode__bindgen_ty_2),
            "::",
            stringify!(prev)
        )
    );
}
#[test]
fn bindgen_test_layout__dnode() {
    assert_eq!(
        ::core::mem::size_of::<_dnode>(),
        8usize,
        concat!("Size of: ", stringify!(_dnode))
    );
    assert_eq!(
        ::core::mem::align_of::<_dnode>(),
        4usize,
        concat!("Alignment of ", stringify!(_dnode))
    );
}
#[doc = " @brief Doubly-linked list structure."]
pub type sys_dlist_t = _dnode;
#[doc = " @brief Doubly-linked list node structure."]
pub type sys_dnode_t = _dnode;
extern "C" {
    #[doc = " @brief initialize list to its empty state\n\n @param list the doubly-linked list"]
    #[link_name = "sys_dlist_init__extern"]
    pub fn sys_dlist_init(list: *mut sys_dlist_t);
}
extern "C" {
    #[doc = " @brief initialize node to its state when not in a list\n\n @param node the node"]
    #[link_name = "sys_dnode_init__extern"]
    pub fn sys_dnode_init(node: *mut sys_dnode_t);
}
extern "C" {
    #[doc = " @brief check if a node is a member of any list\n\n @param node the node\n\n @return true if node is linked into a list, false if it is not"]
    #[link_name = "sys_dnode_is_linked__extern"]
    pub fn sys_dnode_is_linked(node: *const sys_dnode_t) -> bool;
}
extern "C" {
    #[doc = " @brief check if a node is the list's head\n\n @param list the doubly-linked list to operate on\n @param node the node to check\n\n @return true if node is the head, false otherwise"]
    #[link_name = "sys_dlist_is_head__extern"]
    pub fn sys_dlist_is_head(list: *mut sys_dlist_t, node: *mut sys_dnode_t) -> bool;
}
extern "C" {
    #[doc = " @brief check if a node is the list's tail\n\n @param list the doubly-linked list to operate on\n @param node the node to check\n\n @return true if node is the tail, false otherwise"]
    #[link_name = "sys_dlist_is_tail__extern"]
    pub fn sys_dlist_is_tail(list: *mut sys_dlist_t, node: *mut sys_dnode_t) -> bool;
}
extern "C" {
    #[doc = " @brief check if the list is empty\n\n @param list the doubly-linked list to operate on\n\n @return true if empty, false otherwise"]
    #[link_name = "sys_dlist_is_empty__extern"]
    pub fn sys_dlist_is_empty(list: *mut sys_dlist_t) -> bool;
}
extern "C" {
    #[doc = " @brief check if more than one node present\n\n This and other sys_dlist_*() functions are not thread safe.\n\n @param list the doubly-linked list to operate on\n\n @return true if multiple nodes, false otherwise"]
    #[link_name = "sys_dlist_has_multiple_nodes__extern"]
    pub fn sys_dlist_has_multiple_nodes(list: *mut sys_dlist_t) -> bool;
}
extern "C" {
    #[doc = " @brief get a reference to the head item in the list\n\n @param list the doubly-linked list to operate on\n\n @return a pointer to the head element, NULL if list is empty"]
    #[link_name = "sys_dlist_peek_head__extern"]
    pub fn sys_dlist_peek_head(list: *mut sys_dlist_t) -> *mut sys_dnode_t;
}
extern "C" {
    #[doc = " @brief get a reference to the head item in the list\n\n The list must be known to be non-empty.\n\n @param list the doubly-linked list to operate on\n\n @return a pointer to the head element"]
    #[link_name = "sys_dlist_peek_head_not_empty__extern"]
    pub fn sys_dlist_peek_head_not_empty(list: *mut sys_dlist_t) -> *mut sys_dnode_t;
}
extern "C" {
    #[doc = " @brief get a reference to the next item in the list, node is not NULL\n\n Faster than sys_dlist_peek_next() if node is known not to be NULL.\n\n @param list the doubly-linked list to operate on\n @param node the node from which to get the next element in the list\n\n @return a pointer to the next element from a node, NULL if node is the tail"]
    #[link_name = "sys_dlist_peek_next_no_check__extern"]
    pub fn sys_dlist_peek_next_no_check(
        list: *mut sys_dlist_t,
        node: *mut sys_dnode_t,
    ) -> *mut sys_dnode_t;
}
extern "C" {
    #[doc = " @brief get a reference to the next item in the list\n\n @param list the doubly-linked list to operate on\n @param node the node from which to get the next element in the list\n\n @return a pointer to the next element from a node, NULL if node is the tail\n or NULL (when node comes from reading the head of an empty list)."]
    #[link_name = "sys_dlist_peek_next__extern"]
    pub fn sys_dlist_peek_next(list: *mut sys_dlist_t, node: *mut sys_dnode_t) -> *mut sys_dnode_t;
}
extern "C" {
    #[doc = " @brief get a reference to the previous item in the list, node is not NULL\n\n Faster than sys_dlist_peek_prev() if node is known not to be NULL.\n\n @param list the doubly-linked list to operate on\n @param node the node from which to get the previous element in the list\n\n @return a pointer to the previous element from a node, NULL if node is the\n\t   tail"]
    #[link_name = "sys_dlist_peek_prev_no_check__extern"]
    pub fn sys_dlist_peek_prev_no_check(
        list: *mut sys_dlist_t,
        node: *mut sys_dnode_t,
    ) -> *mut sys_dnode_t;
}
extern "C" {
    #[doc = " @brief get a reference to the previous item in the list\n\n @param list the doubly-linked list to operate on\n @param node the node from which to get the previous element in the list\n\n @return a pointer to the previous element from a node, NULL if node is the\n \t   tail or NULL (when node comes from reading the head of an empty\n \t   list)."]
    #[link_name = "sys_dlist_peek_prev__extern"]
    pub fn sys_dlist_peek_prev(list: *mut sys_dlist_t, node: *mut sys_dnode_t) -> *mut sys_dnode_t;
}
extern "C" {
    #[doc = " @brief get a reference to the tail item in the list\n\n @param list the doubly-linked list to operate on\n\n @return a pointer to the tail element, NULL if list is empty"]
    #[link_name = "sys_dlist_peek_tail__extern"]
    pub fn sys_dlist_peek_tail(list: *mut sys_dlist_t) -> *mut sys_dnode_t;
}
extern "C" {
    #[doc = " @brief add node to tail of list\n\n This and other sys_dlist_*() functions are not thread safe.\n\n @param list the doubly-linked list to operate on\n @param node the element to append"]
    #[link_name = "sys_dlist_append__extern"]
    pub fn sys_dlist_append(list: *mut sys_dlist_t, node: *mut sys_dnode_t);
}
extern "C" {
    #[doc = " @brief add node to head of list\n\n This and other sys_dlist_*() functions are not thread safe.\n\n @param list the doubly-linked list to operate on\n @param node the element to append"]
    #[link_name = "sys_dlist_prepend__extern"]
    pub fn sys_dlist_prepend(list: *mut sys_dlist_t, node: *mut sys_dnode_t);
}
extern "C" {
    #[doc = " @brief Insert a node into a list\n\n Insert a node before a specified node in a dlist.\n\n @param successor the position before which \"node\" will be inserted\n @param node the element to insert"]
    #[link_name = "sys_dlist_insert__extern"]
    pub fn sys_dlist_insert(successor: *mut sys_dnode_t, node: *mut sys_dnode_t);
}
extern "C" {
    #[doc = " @brief insert node at position\n\n Insert a node in a location depending on a external condition. The cond()\n function checks if the node is to be inserted _before_ the current node\n against which it is checked.\n This and other sys_dlist_*() functions are not thread safe.\n\n @param list the doubly-linked list to operate on\n @param node the element to insert\n @param cond a function that determines if the current node is the correct\n             insert point\n @param data parameter to cond()"]
    #[link_name = "sys_dlist_insert_at__extern"]
    pub fn sys_dlist_insert_at(
        list: *mut sys_dlist_t,
        node: *mut sys_dnode_t,
        cond: ::core::option::Option<
            unsafe extern "C" fn(
                node: *mut sys_dnode_t,
                data: *mut ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
        data: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    #[doc = " @brief remove a specific node from a list\n\n The list is implicit from the node. The node must be part of a list.\n This and other sys_dlist_*() functions are not thread safe.\n\n @param node the node to remove"]
    #[link_name = "sys_dlist_remove__extern"]
    pub fn sys_dlist_remove(node: *mut sys_dnode_t);
}
extern "C" {
    #[doc = " @brief get the first node in a list\n\n This and other sys_dlist_*() functions are not thread safe.\n\n @param list the doubly-linked list to operate on\n\n @return the first node in the list, NULL if list is empty"]
    #[link_name = "sys_dlist_get__extern"]
    pub fn sys_dlist_get(list: *mut sys_dlist_t) -> *mut sys_dnode_t;
}
extern "C" {
    #[doc = " @brief Compute the size of the given list in O(n) time\n\n @param list A pointer on the list\n\n @return an integer equal to the size of the list, or 0 if empty"]
    #[link_name = "sys_dlist_len__extern"]
    pub fn sys_dlist_len(list: *mut sys_dlist_t) -> usize;
}
#[doc = " @brief Balanced red/black tree node structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rbnode {
    #[doc = " @cond INTERNAL_HIDDEN"]
    pub children: [*mut rbnode; 2usize],
}
#[test]
fn bindgen_test_layout_rbnode() {
    const UNINIT: ::core::mem::MaybeUninit<rbnode> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rbnode>(),
        8usize,
        concat!("Size of: ", stringify!(rbnode))
    );
    assert_eq!(
        ::core::mem::align_of::<rbnode>(),
        4usize,
        concat!("Alignment of ", stringify!(rbnode))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).children) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rbnode),
            "::",
            stringify!(children)
        )
    );
}
#[doc = " @typedef rb_lessthan_t\n @brief Red/black tree comparison predicate\n\n Compares the two nodes and returns true if node A is strictly less\n than B according to the tree's sorting criteria, false otherwise.\n\n Note that during insert, the new node being inserted will always be\n \"A\", where \"B\" is the existing node within the tree against which\n it is being compared.  This trait can be used (with care!) to\n implement \"most/least recently added\" semantics between nodes which\n would otherwise compare as equal."]
pub type rb_lessthan_t =
    ::core::option::Option<unsafe extern "C" fn(a: *mut rbnode, b: *mut rbnode) -> bool>;
#[doc = " @brief Balanced red/black tree structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rbtree {
    #[doc = " Root node of the tree"]
    pub root: *mut rbnode,
    #[doc = " Comparison function for nodes in the tree"]
    pub lessthan_fn: rb_lessthan_t,
    #[doc = " @cond INTERNAL_HIDDEN"]
    pub max_depth: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_rbtree() {
    const UNINIT: ::core::mem::MaybeUninit<rbtree> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rbtree>(),
        12usize,
        concat!("Size of: ", stringify!(rbtree))
    );
    assert_eq!(
        ::core::mem::align_of::<rbtree>(),
        4usize,
        concat!("Alignment of ", stringify!(rbtree))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rbtree),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lessthan_fn) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rbtree),
            "::",
            stringify!(lessthan_fn)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_depth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rbtree),
            "::",
            stringify!(max_depth)
        )
    );
}
#[doc = " @brief Prototype for node visitor callback.\n @param node Node being visited\n @param cookie User-specified data"]
pub type rb_visit_t = ::core::option::Option<
    unsafe extern "C" fn(node: *mut rbnode, cookie: *mut ::core::ffi::c_void),
>;
extern "C" {
    pub fn z_rb_child(node: *mut rbnode, side: u8) -> *mut rbnode;
}
extern "C" {
    pub fn z_rb_is_black(node: *mut rbnode) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_rb_walk(node: *mut rbnode, visit_fn: rb_visit_t, cookie: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn z_rb_get_minmax(tree: *mut rbtree, side: u8) -> *mut rbnode;
}
extern "C" {
    #[doc = " @brief Insert node into tree"]
    pub fn rb_insert(tree: *mut rbtree, node: *mut rbnode);
}
extern "C" {
    #[doc = " @brief Remove node from tree"]
    pub fn rb_remove(tree: *mut rbtree, node: *mut rbnode);
}
extern "C" {
    #[doc = " @brief Returns the lowest-sorted member of the tree"]
    #[link_name = "rb_get_min__extern"]
    pub fn rb_get_min(tree: *mut rbtree) -> *mut rbnode;
}
extern "C" {
    #[doc = " @brief Returns the highest-sorted member of the tree"]
    #[link_name = "rb_get_max__extern"]
    pub fn rb_get_max(tree: *mut rbtree) -> *mut rbnode;
}
extern "C" {
    #[doc = " @brief Returns true if the given node is part of the tree\n\n Note that this does not internally dereference the node pointer\n (though the tree's lessthan callback might!), it just tests it for\n equality with items in the tree.  So it's feasible to use this to\n implement a \"set\" construct by simply testing the pointer value\n itself."]
    pub fn rb_contains(tree: *mut rbtree, node: *mut rbnode) -> bool;
}
extern "C" {
    #[doc = " @brief Walk/enumerate a rbtree\n\n Very simple recursive enumeration.  Low code size, but requiring a\n separate function can be clumsy for the user and there is no way to\n break out of the loop early.  See RB_FOR_EACH for an iterative\n implementation."]
    #[link_name = "rb_walk__extern"]
    pub fn rb_walk(tree: *mut rbtree, visit_fn: rb_visit_t, cookie: *mut ::core::ffi::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rb_foreach {
    pub stack: *mut *mut rbnode,
    pub is_left: *mut u8,
    pub top: i32,
}
#[test]
fn bindgen_test_layout__rb_foreach() {
    const UNINIT: ::core::mem::MaybeUninit<_rb_foreach> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rb_foreach>(),
        12usize,
        concat!("Size of: ", stringify!(_rb_foreach))
    );
    assert_eq!(
        ::core::mem::align_of::<_rb_foreach>(),
        4usize,
        concat!("Alignment of ", stringify!(_rb_foreach))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stack) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rb_foreach),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_left) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_rb_foreach),
            "::",
            stringify!(is_left)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_rb_foreach),
            "::",
            stringify!(top)
        )
    );
}
extern "C" {
    pub fn z_rb_foreach_next(tree: *mut rbtree, f: *mut _rb_foreach) -> *mut rbnode;
}
extern "C" {
    pub fn z_priq_dumb_best(pq: *mut sys_dlist_t) -> *mut k_thread;
}
extern "C" {
    pub fn z_priq_dumb_remove(pq: *mut sys_dlist_t, thread: *mut k_thread);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _priq_rb {
    pub tree: rbtree,
    pub next_order_key: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout__priq_rb() {
    const UNINIT: ::core::mem::MaybeUninit<_priq_rb> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_priq_rb>(),
        16usize,
        concat!("Size of: ", stringify!(_priq_rb))
    );
    assert_eq!(
        ::core::mem::align_of::<_priq_rb>(),
        4usize,
        concat!("Alignment of ", stringify!(_priq_rb))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tree) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_priq_rb),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next_order_key) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_priq_rb),
            "::",
            stringify!(next_order_key)
        )
    );
}
extern "C" {
    pub fn z_priq_rb_add(pq: *mut _priq_rb, thread: *mut k_thread);
}
extern "C" {
    pub fn z_priq_rb_remove(pq: *mut _priq_rb, thread: *mut k_thread);
}
extern "C" {
    pub fn z_priq_rb_best(pq: *mut _priq_rb) -> *mut k_thread;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _priq_mq {
    pub queues: [sys_dlist_t; 32usize],
    pub bitmask: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout__priq_mq() {
    const UNINIT: ::core::mem::MaybeUninit<_priq_mq> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_priq_mq>(),
        260usize,
        concat!("Size of: ", stringify!(_priq_mq))
    );
    assert_eq!(
        ::core::mem::align_of::<_priq_mq>(),
        4usize,
        concat!("Alignment of ", stringify!(_priq_mq))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).queues) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_priq_mq),
            "::",
            stringify!(queues)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bitmask) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_priq_mq),
            "::",
            stringify!(bitmask)
        )
    );
}
extern "C" {
    pub fn z_priq_mq_best(pq: *mut _priq_mq) -> *mut k_thread;
}
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snode {
    pub next: *mut _snode,
}
#[test]
fn bindgen_test_layout__snode() {
    const UNINIT: ::core::mem::MaybeUninit<_snode> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_snode>(),
        4usize,
        concat!("Size of: ", stringify!(_snode))
    );
    assert_eq!(
        ::core::mem::align_of::<_snode>(),
        4usize,
        concat!("Alignment of ", stringify!(_snode))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_snode),
            "::",
            stringify!(next)
        )
    );
}
#[doc = " Single-linked list node structure."]
pub type sys_snode_t = _snode;
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _slist {
    pub head: *mut sys_snode_t,
    pub tail: *mut sys_snode_t,
}
#[test]
fn bindgen_test_layout__slist() {
    const UNINIT: ::core::mem::MaybeUninit<_slist> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_slist>(),
        8usize,
        concat!("Size of: ", stringify!(_slist))
    );
    assert_eq!(
        ::core::mem::align_of::<_slist>(),
        4usize,
        concat!("Alignment of ", stringify!(_slist))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_slist),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_slist),
            "::",
            stringify!(tail)
        )
    );
}
#[doc = " Single-linked list structure."]
pub type sys_slist_t = _slist;
extern "C" {
    #[doc = " @brief Initialize a list\n\n @param list A pointer on the list to initialize"]
    #[link_name = "sys_slist_init__extern"]
    pub fn sys_slist_init(list: *mut sys_slist_t);
}
extern "C" {
    #[link_name = "z_snode_next_peek__extern"]
    pub fn z_snode_next_peek(node: *mut sys_snode_t) -> *mut sys_snode_t;
}
extern "C" {
    #[link_name = "z_snode_next_set__extern"]
    pub fn z_snode_next_set(parent: *mut sys_snode_t, child: *mut sys_snode_t);
}
extern "C" {
    #[link_name = "z_slist_head_set__extern"]
    pub fn z_slist_head_set(list: *mut sys_slist_t, node: *mut sys_snode_t);
}
extern "C" {
    #[link_name = "z_slist_tail_set__extern"]
    pub fn z_slist_tail_set(list: *mut sys_slist_t, node: *mut sys_snode_t);
}
extern "C" {
    #[doc = " @brief Peek the first node from the list\n\n @param list A point on the list to peek the first node from\n\n @return A pointer on the first node of the list (or NULL if none)"]
    #[link_name = "sys_slist_peek_head__extern"]
    pub fn sys_slist_peek_head(list: *mut sys_slist_t) -> *mut sys_snode_t;
}
extern "C" {
    #[doc = " @brief Peek the last node from the list\n\n @param list A point on the list to peek the last node from\n\n @return A pointer on the last node of the list (or NULL if none)"]
    #[link_name = "sys_slist_peek_tail__extern"]
    pub fn sys_slist_peek_tail(list: *mut sys_slist_t) -> *mut sys_snode_t;
}
extern "C" {
    #[doc = " @brief Test if the given list is empty\n\n @param list A pointer on the list to test\n\n @return a boolean, true if it's empty, false otherwise"]
    #[link_name = "sys_slist_is_empty__extern"]
    pub fn sys_slist_is_empty(list: *mut sys_slist_t) -> bool;
}
extern "C" {
    #[doc = " @brief Peek the next node from current node, node is not NULL\n\n Faster then sys_slist_peek_next() if node is known not to be NULL.\n\n @param node A pointer on the node where to peek the next node\n\n @return a pointer on the next node (or NULL if none)"]
    #[link_name = "sys_slist_peek_next_no_check__extern"]
    pub fn sys_slist_peek_next_no_check(node: *mut sys_snode_t) -> *mut sys_snode_t;
}
extern "C" {
    #[doc = " @brief Peek the next node from current node\n\n @param node A pointer on the node where to peek the next node\n\n @return a pointer on the next node (or NULL if none)"]
    #[link_name = "sys_slist_peek_next__extern"]
    pub fn sys_slist_peek_next(node: *mut sys_snode_t) -> *mut sys_snode_t;
}
extern "C" {
    #[doc = " @brief Prepend a node to the given list\n\n This and other sys_slist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n @param node A pointer on the node to prepend"]
    #[link_name = "sys_slist_prepend__extern"]
    pub fn sys_slist_prepend(list: *mut sys_slist_t, node: *mut sys_snode_t);
}
extern "C" {
    #[doc = " @brief Append a node to the given list\n\n This and other sys_slist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n @param node A pointer on the node to append"]
    #[link_name = "sys_slist_append__extern"]
    pub fn sys_slist_append(list: *mut sys_slist_t, node: *mut sys_snode_t);
}
extern "C" {
    #[doc = " @brief Append a list to the given list\n\n Append a singly-linked, NULL-terminated list consisting of nodes containing\n the pointer to the next node as the first element of a node, to @a list.\n This and other sys_slist_*() functions are not thread safe.\n\n FIXME: Why are the element parameters void *?\n\n @param list A pointer on the list to affect\n @param head A pointer to the first element of the list to append\n @param tail A pointer to the last element of the list to append"]
    #[link_name = "sys_slist_append_list__extern"]
    pub fn sys_slist_append_list(
        list: *mut sys_slist_t,
        head: *mut ::core::ffi::c_void,
        tail: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    #[doc = " @brief merge two slists, appending the second one to the first\n\n When the operation is completed, the appending list is empty.\n This and other sys_slist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n @param list_to_append A pointer to the list to append."]
    #[link_name = "sys_slist_merge_slist__extern"]
    pub fn sys_slist_merge_slist(list: *mut sys_slist_t, list_to_append: *mut sys_slist_t);
}
extern "C" {
    #[doc = " @brief Insert a node to the given list\n\n This and other sys_slist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n @param prev A pointer on the previous node\n @param node A pointer on the node to insert"]
    #[link_name = "sys_slist_insert__extern"]
    pub fn sys_slist_insert(list: *mut sys_slist_t, prev: *mut sys_snode_t, node: *mut sys_snode_t);
}
extern "C" {
    #[doc = " @brief Fetch and remove the first node of the given list\n\n List must be known to be non-empty.\n This and other sys_slist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n\n @return A pointer to the first node of the list"]
    #[link_name = "sys_slist_get_not_empty__extern"]
    pub fn sys_slist_get_not_empty(list: *mut sys_slist_t) -> *mut sys_snode_t;
}
extern "C" {
    #[doc = " @brief Fetch and remove the first node of the given list\n\n This and other sys_slist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n\n @return A pointer to the first node of the list (or NULL if empty)"]
    #[link_name = "sys_slist_get__extern"]
    pub fn sys_slist_get(list: *mut sys_slist_t) -> *mut sys_snode_t;
}
extern "C" {
    #[doc = " @brief Remove a node\n\n This and other sys_slist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n @param prev_node A pointer on the previous node\n        (can be NULL, which means the node is the list's head)\n @param node A pointer on the node to remove"]
    #[link_name = "sys_slist_remove__extern"]
    pub fn sys_slist_remove(
        list: *mut sys_slist_t,
        prev_node: *mut sys_snode_t,
        node: *mut sys_snode_t,
    );
}
extern "C" {
    #[doc = " @brief Find and remove a node from a list\n\n This and other sys_slist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n @param node A pointer on the node to remove from the list\n\n @return true if node was removed"]
    #[link_name = "sys_slist_find_and_remove__extern"]
    pub fn sys_slist_find_and_remove(list: *mut sys_slist_t, node: *mut sys_snode_t) -> bool;
}
extern "C" {
    #[doc = " @brief Compute the size of the given list in O(n) time\n\n @param list A pointer on the list\n\n @return an integer equal to the size of the list, or 0 if empty"]
    #[link_name = "sys_slist_len__extern"]
    pub fn sys_slist_len(list: *mut sys_slist_t) -> usize;
}
pub type unative_t = u32;
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sfnode {
    pub next_and_flags: unative_t,
}
#[test]
fn bindgen_test_layout__sfnode() {
    const UNINIT: ::core::mem::MaybeUninit<_sfnode> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_sfnode>(),
        4usize,
        concat!("Size of: ", stringify!(_sfnode))
    );
    assert_eq!(
        ::core::mem::align_of::<_sfnode>(),
        4usize,
        concat!("Alignment of ", stringify!(_sfnode))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next_and_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sfnode),
            "::",
            stringify!(next_and_flags)
        )
    );
}
#[doc = " Flagged single-linked list node structure."]
pub type sys_sfnode_t = _sfnode;
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sflist {
    pub head: *mut sys_sfnode_t,
    pub tail: *mut sys_sfnode_t,
}
#[test]
fn bindgen_test_layout__sflist() {
    const UNINIT: ::core::mem::MaybeUninit<_sflist> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_sflist>(),
        8usize,
        concat!("Size of: ", stringify!(_sflist))
    );
    assert_eq!(
        ::core::mem::align_of::<_sflist>(),
        4usize,
        concat!("Alignment of ", stringify!(_sflist))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sflist),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_sflist),
            "::",
            stringify!(tail)
        )
    );
}
#[doc = " Flagged single-linked list structure."]
pub type sys_sflist_t = _sflist;
extern "C" {
    #[doc = " @brief Initialize a list\n\n @param list A pointer on the list to initialize"]
    #[link_name = "sys_sflist_init__extern"]
    pub fn sys_sflist_init(list: *mut sys_sflist_t);
}
extern "C" {
    #[link_name = "z_sfnode_next_peek__extern"]
    pub fn z_sfnode_next_peek(node: *mut sys_sfnode_t) -> *mut sys_sfnode_t;
}
extern "C" {
    #[doc = " @brief Fetch flags value for a particular sfnode\n\n @param node A pointer to the node to fetch flags from\n @return The value of flags, which will be between 0 and 3"]
    #[link_name = "sys_sfnode_flags_get__extern"]
    pub fn sys_sfnode_flags_get(node: *mut sys_sfnode_t) -> u8;
}
extern "C" {
    #[link_name = "z_sfnode_next_set__extern"]
    pub fn z_sfnode_next_set(parent: *mut sys_sfnode_t, child: *mut sys_sfnode_t);
}
extern "C" {
    #[link_name = "z_sflist_head_set__extern"]
    pub fn z_sflist_head_set(list: *mut sys_sflist_t, node: *mut sys_sfnode_t);
}
extern "C" {
    #[link_name = "z_sflist_tail_set__extern"]
    pub fn z_sflist_tail_set(list: *mut sys_sflist_t, node: *mut sys_sfnode_t);
}
extern "C" {
    #[doc = " @brief Peek the first node from the list\n\n @param list A point on the list to peek the first node from\n\n @return A pointer on the first node of the list (or NULL if none)"]
    #[link_name = "sys_sflist_peek_head__extern"]
    pub fn sys_sflist_peek_head(list: *mut sys_sflist_t) -> *mut sys_sfnode_t;
}
extern "C" {
    #[doc = " @brief Peek the last node from the list\n\n @param list A point on the list to peek the last node from\n\n @return A pointer on the last node of the list (or NULL if none)"]
    #[link_name = "sys_sflist_peek_tail__extern"]
    pub fn sys_sflist_peek_tail(list: *mut sys_sflist_t) -> *mut sys_sfnode_t;
}
extern "C" {
    #[doc = " @brief Initialize an sflist node\n\n Set an initial flags value for this slist node, which can be a value between\n 0 and 3. These flags will persist even if the node is moved around\n within a list, removed, or transplanted to a different slist.\n\n This is ever so slightly faster than sys_sfnode_flags_set() and should\n only be used on a node that hasn't been added to any list.\n\n @param node A pointer to the node to set the flags on\n @param flags A value between 0 and 3 to set the flags value"]
    #[link_name = "sys_sfnode_init__extern"]
    pub fn sys_sfnode_init(node: *mut sys_sfnode_t, flags: u8);
}
extern "C" {
    #[doc = " @brief Set flags value for an sflist node\n\n Set a flags value for this slist node, which can be a value between\n 0 and 3. These flags will persist even if the node is moved around\n within a list, removed, or transplanted to a different slist.\n\n @param node A pointer to the node to set the flags on\n @param flags A value between 0 and 3 to set the flags value"]
    #[link_name = "sys_sfnode_flags_set__extern"]
    pub fn sys_sfnode_flags_set(node: *mut sys_sfnode_t, flags: u8);
}
extern "C" {
    #[doc = " @brief Test if the given list is empty\n\n @param list A pointer on the list to test\n\n @return a boolean, true if it's empty, false otherwise"]
    #[link_name = "sys_sflist_is_empty__extern"]
    pub fn sys_sflist_is_empty(list: *mut sys_sflist_t) -> bool;
}
extern "C" {
    #[doc = " @brief Peek the next node from current node, node is not NULL\n\n Faster then sys_sflist_peek_next() if node is known not to be NULL.\n\n @param node A pointer on the node where to peek the next node\n\n @return a pointer on the next node (or NULL if none)"]
    #[link_name = "sys_sflist_peek_next_no_check__extern"]
    pub fn sys_sflist_peek_next_no_check(node: *mut sys_sfnode_t) -> *mut sys_sfnode_t;
}
extern "C" {
    #[doc = " @brief Peek the next node from current node\n\n @param node A pointer on the node where to peek the next node\n\n @return a pointer on the next node (or NULL if none)"]
    #[link_name = "sys_sflist_peek_next__extern"]
    pub fn sys_sflist_peek_next(node: *mut sys_sfnode_t) -> *mut sys_sfnode_t;
}
extern "C" {
    #[doc = " @brief Prepend a node to the given list\n\n This and other sys_sflist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n @param node A pointer on the node to prepend"]
    #[link_name = "sys_sflist_prepend__extern"]
    pub fn sys_sflist_prepend(list: *mut sys_sflist_t, node: *mut sys_sfnode_t);
}
extern "C" {
    #[doc = " @brief Append a node to the given list\n\n This and other sys_sflist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n @param node A pointer on the node to append"]
    #[link_name = "sys_sflist_append__extern"]
    pub fn sys_sflist_append(list: *mut sys_sflist_t, node: *mut sys_sfnode_t);
}
extern "C" {
    #[doc = " @brief Append a list to the given list\n\n Append a singly-linked, NULL-terminated list consisting of nodes containing\n the pointer to the next node as the first element of a node, to @a list.\n This and other sys_sflist_*() functions are not thread safe.\n\n FIXME: Why are the element parameters void *?\n\n @param list A pointer on the list to affect\n @param head A pointer to the first element of the list to append\n @param tail A pointer to the last element of the list to append"]
    #[link_name = "sys_sflist_append_list__extern"]
    pub fn sys_sflist_append_list(
        list: *mut sys_sflist_t,
        head: *mut ::core::ffi::c_void,
        tail: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    #[doc = " @brief merge two sflists, appending the second one to the first\n\n When the operation is completed, the appending list is empty.\n This and other sys_sflist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n @param list_to_append A pointer to the list to append."]
    #[link_name = "sys_sflist_merge_sflist__extern"]
    pub fn sys_sflist_merge_sflist(list: *mut sys_sflist_t, list_to_append: *mut sys_sflist_t);
}
extern "C" {
    #[doc = " @brief Insert a node to the given list\n\n This and other sys_sflist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n @param prev A pointer on the previous node\n @param node A pointer on the node to insert"]
    #[link_name = "sys_sflist_insert__extern"]
    pub fn sys_sflist_insert(
        list: *mut sys_sflist_t,
        prev: *mut sys_sfnode_t,
        node: *mut sys_sfnode_t,
    );
}
extern "C" {
    #[doc = " @brief Fetch and remove the first node of the given list\n\n List must be known to be non-empty.\n This and other sys_sflist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n\n @return A pointer to the first node of the list"]
    #[link_name = "sys_sflist_get_not_empty__extern"]
    pub fn sys_sflist_get_not_empty(list: *mut sys_sflist_t) -> *mut sys_sfnode_t;
}
extern "C" {
    #[doc = " @brief Fetch and remove the first node of the given list\n\n This and other sys_sflist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n\n @return A pointer to the first node of the list (or NULL if empty)"]
    #[link_name = "sys_sflist_get__extern"]
    pub fn sys_sflist_get(list: *mut sys_sflist_t) -> *mut sys_sfnode_t;
}
extern "C" {
    #[doc = " @brief Remove a node\n\n This and other sys_sflist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n @param prev_node A pointer on the previous node\n        (can be NULL, which means the node is the list's head)\n @param node A pointer on the node to remove"]
    #[link_name = "sys_sflist_remove__extern"]
    pub fn sys_sflist_remove(
        list: *mut sys_sflist_t,
        prev_node: *mut sys_sfnode_t,
        node: *mut sys_sfnode_t,
    );
}
extern "C" {
    #[doc = " @brief Find and remove a node from a list\n\n This and other sys_sflist_*() functions are not thread safe.\n\n @param list A pointer on the list to affect\n @param node A pointer on the node to remove from the list\n\n @return true if node was removed"]
    #[link_name = "sys_sflist_find_and_remove__extern"]
    pub fn sys_sflist_find_and_remove(list: *mut sys_sflist_t, node: *mut sys_sfnode_t) -> bool;
}
extern "C" {
    #[doc = " @brief Compute the size of the given list in O(n) time\n\n @param list A pointer on the list\n\n @return an integer equal to the size of the list, or 0 if empty"]
    #[link_name = "sys_sflist_len__extern"]
    pub fn sys_sflist_len(list: *mut sys_sflist_t) -> usize;
}
extern "C" {
    #[doc = " Tools may use this list as an entry point to identify all registered\n object types and the object cores linked to them."]
    pub static mut z_obj_type_list: sys_slist_t;
}
#[doc = " Object core statistics descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_obj_core_stats_desc {
    #[doc = "< Internal representation stats buffer size"]
    pub raw_size: usize,
    #[doc = "< Stats buffer size used for reporting"]
    pub query_size: usize,
    #[doc = " Function pointer to retrieve internal representation of stats"]
    pub raw: ::core::option::Option<
        unsafe extern "C" fn(
            obj_core: *mut k_obj_core,
            stats: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >,
    #[doc = " Function pointer to retrieve reported statistics"]
    pub query: ::core::option::Option<
        unsafe extern "C" fn(
            obj_core: *mut k_obj_core,
            stats: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >,
    #[doc = " Function pointer to reset object's statistics"]
    pub reset: ::core::option::Option<
        unsafe extern "C" fn(obj_core: *mut k_obj_core) -> ::core::ffi::c_int,
    >,
    #[doc = " Function pointer to disable object's statistics gathering"]
    pub disable: ::core::option::Option<
        unsafe extern "C" fn(obj_core: *mut k_obj_core) -> ::core::ffi::c_int,
    >,
    #[doc = " Function pointer to enable object's statistics gathering"]
    pub enable: ::core::option::Option<
        unsafe extern "C" fn(obj_core: *mut k_obj_core) -> ::core::ffi::c_int,
    >,
}
#[test]
fn bindgen_test_layout_k_obj_core_stats_desc() {
    const UNINIT: ::core::mem::MaybeUninit<k_obj_core_stats_desc> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_obj_core_stats_desc>(),
        28usize,
        concat!("Size of: ", stringify!(k_obj_core_stats_desc))
    );
    assert_eq!(
        ::core::mem::align_of::<k_obj_core_stats_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(k_obj_core_stats_desc))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_core_stats_desc),
            "::",
            stringify!(raw_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).query_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_core_stats_desc),
            "::",
            stringify!(query_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).raw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_core_stats_desc),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).query) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_core_stats_desc),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_core_stats_desc),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).disable) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_core_stats_desc),
            "::",
            stringify!(disable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_core_stats_desc),
            "::",
            stringify!(enable)
        )
    );
}
#[doc = " Object type structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_obj_type {
    #[doc = "< Node within list of object types"]
    pub node: sys_snode_t,
    #[doc = "< List of objects of this object type"]
    pub list: sys_slist_t,
    #[doc = "< Unique type ID"]
    pub id: u32,
    #[doc = "< Offset to obj_core field"]
    pub obj_core_offset: usize,
}
#[test]
fn bindgen_test_layout_k_obj_type() {
    const UNINIT: ::core::mem::MaybeUninit<k_obj_type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_obj_type>(),
        20usize,
        concat!("Size of: ", stringify!(k_obj_type))
    );
    assert_eq!(
        ::core::mem::align_of::<k_obj_type>(),
        4usize,
        concat!("Alignment of ", stringify!(k_obj_type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_type),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_type),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_type),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).obj_core_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_type),
            "::",
            stringify!(obj_core_offset)
        )
    );
}
#[doc = " Object core structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_obj_core {
    #[doc = "< Object node within object type's list"]
    pub node: sys_snode_t,
    #[doc = "< Object type to which object belongs"]
    pub type_: *mut k_obj_type,
}
#[test]
fn bindgen_test_layout_k_obj_core() {
    const UNINIT: ::core::mem::MaybeUninit<k_obj_core> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_obj_core>(),
        8usize,
        concat!("Size of: ", stringify!(k_obj_core))
    );
    assert_eq!(
        ::core::mem::align_of::<k_obj_core>(),
        4usize,
        concat!("Alignment of ", stringify!(k_obj_core))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_core),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(k_obj_core),
            "::",
            stringify!(type_)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a specific object type\n\n Initializes a specific object type and links it into the object core\n framework.\n\n @param type Pointer to the object type to initialize\n @param id A means to identify the object type\n @param off Offset of object core within the structure\n\n @retval Pointer to initialized object type"]
    pub fn z_obj_type_init(type_: *mut k_obj_type, id: u32, off: usize) -> *mut k_obj_type;
}
extern "C" {
    #[doc = " @brief Find a specific object type by ID\n\n Given an object type ID, this function searches for the object type that\n is associated with the specified type ID @a type_id.\n\n @param type_id  Type ID associated with object type\n\n @retval NULL if object type not found\n @retval Pointer to object type if found"]
    pub fn k_obj_type_find(type_id: u32) -> *mut k_obj_type;
}
extern "C" {
    #[doc = " @brief Walk the object type's list of object cores\n\n This function takes a global spinlock and walks the object type's list\n of object cores and invokes the callback function on each element while\n holding that lock. Although this will ensure that the list is not modified,\n one can expect a significant penalty in terms of performance and latency.\n\n The callback function shall either return non-zero to stop further walking,\n or it shall return 0 to continue walking.\n\n @param type  Pointer to the object type\n @param func  Callback to invoke on each object core of the object type\n @param data  Custom data passed to the callback\n\n @retval non-zero if walk is terminated by the callback; otherwise 0"]
    pub fn k_obj_type_walk_locked(
        type_: *mut k_obj_type,
        func: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut k_obj_core,
                arg2: *mut ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
        data: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Walk the object type's list of object cores\n\n This function is similar to k_obj_type_walk_locked() except that it walks\n the list without obtaining the global spinlock. No synchronization is\n provided here. Mutation of the list of objects while this function is in\n progress must be prevented at the application layer, otherwise\n undefined/unreliable behavior, corruption and/or crashes may result.\n\n The callback function shall either return non-zero to stop further walking,\n or it shall return 0 to continue walking.\n\n @param type  Pointer to the object type\n @param func  Callback to invoke on each object core of the object type\n @param data  Custom data passed to the callback\n\n @retval non-zero if walk is terminated by the callback; otherwise 0"]
    pub fn k_obj_type_walk_unlocked(
        type_: *mut k_obj_type,
        func: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut k_obj_core,
                arg2: *mut ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
        data: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Initialize the core of the kernel object\n\n Initializing the kernel object core associates it with the specified\n kernel object type.\n\n @param obj_core Pointer to the kernel object to initialize\n @param type Pointer to the kernel object type"]
    pub fn k_obj_core_init(obj_core: *mut k_obj_core, type_: *mut k_obj_type);
}
extern "C" {
    #[doc = " @brief Link the kernel object to the kernel object type list\n\n A kernel object can be optionally linked into the kernel object type's\n list of objects. A kernel object must have been initialized before it\n can be linked. Linked kernel objects can be traversed and have information\n extracted from them by system tools.\n\n @param obj_core Pointer to the kernel object"]
    pub fn k_obj_core_link(obj_core: *mut k_obj_core);
}
extern "C" {
    #[doc = " @brief Automatically link the kernel object after initializing it\n\n A useful wrapper to both initialize the core of the kernel object and\n automatically link it into the kernel object type's list of objects.\n\n @param obj_core Pointer to the kernel object to initialize\n @param type Pointer to the kernel object type"]
    pub fn k_obj_core_init_and_link(obj_core: *mut k_obj_core, type_: *mut k_obj_type);
}
extern "C" {
    #[doc = " @brief Unlink the kernel object from the kernel object type list\n\n Kernel objects can be unlinked from their respective kernel object type\n lists. If on a list, it must be done at the end of the kernel object's life\n cycle.\n\n @param obj_core Pointer to the kernel object"]
    pub fn k_obj_core_unlink(obj_core: *mut k_obj_core);
}
extern "C" {
    #[doc = " @brief Register kernel object for gathering statistics\n\n Before a kernel object can gather statistics, it must be registered to do\n so. Registering will also automatically enable the kernel object to gather\n its statistics.\n\n @param obj_core Pointer to kernel object core\n @param stats Pointer to raw kernel statistics\n @param stats_len Size of raw kernel statistics buffer\n\n @retval 0 on success\n @retval -errno on failure"]
    pub fn k_obj_core_stats_register(
        obj_core: *mut k_obj_core,
        stats: *mut ::core::ffi::c_void,
        stats_len: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Deregister kernel object from gathering statistics\n\n Deregistering a kernel object core from gathering statistics prevents it\n from gathering any more statistics. It is expected to be invoked at the end\n of a kernel object's life cycle.\n\n @param obj_core Pointer to kernel object core\n\n @retval 0 on success\n @retval -errno on failure"]
    pub fn k_obj_core_stats_deregister(obj_core: *mut k_obj_core) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Retrieve the raw statistics associated with the kernel object\n\n This function copies the raw statistics associated with the kernel object\n core specified by @a obj_core into the buffer @a stats. Note that the size\n of the buffer (@a stats_len) must match the size specified by the kernel\n object type's statistics descriptor.\n\n @param obj_core Pointer to kernel object core\n @param stats Pointer to memory buffer into which to copy raw stats\n @param stats_len Length of the memory buffer\n\n @retval 0 on success\n @retval -errno on failure"]
    pub fn k_obj_core_stats_raw(
        obj_core: *mut k_obj_core,
        stats: *mut ::core::ffi::c_void,
        stats_len: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Retrieve the statistics associated with the kernel object\n\n This function copies the statistics associated with the kernel object core\n specified by @a obj_core into the buffer @a stats. Unlike the raw statistics\n this may report calculated values such as averages.  Note that the size of\n the buffer (@a stats_len) must match the size specified by the kernel object\n type's statistics descriptor.\n\n @param obj_core Pointer to kernel object core\n @param stats Pointer to memory buffer into which to copy the queried stats\n @param stats_len Length of the memory buffer\n\n @retval 0 on success\n @retval -errno on failure"]
    pub fn k_obj_core_stats_query(
        obj_core: *mut k_obj_core,
        stats: *mut ::core::ffi::c_void,
        stats_len: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Reset the stats associated with the kernel object\n\n This function resets the statistics associated with the kernel object core\n specified by @a obj_core.\n\n @param obj_core Pointer to kernel object core\n\n @retval 0 on success\n @retval -errno on failure"]
    pub fn k_obj_core_stats_reset(obj_core: *mut k_obj_core) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Stop gathering the stats associated with the kernel object\n\n This function temporarily stops the gathering of statistics associated with\n the kernel object core specified by @a obj_core. The gathering of statistics\n can be resumed by invoking :c:func :`k_obj_core_stats_enable`.\n\n @param obj_core Pointer to kernel object core\n\n @retval 0 on success\n @retval -errno on failure"]
    pub fn k_obj_core_stats_disable(obj_core: *mut k_obj_core) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Reset the stats associated with the kernel object\n\n This function resumes the gathering of statistics associated with the kernel\n object core specified by @a obj_core.\n\n @param obj_core Pointer to kernel object core\n\n @retval 0 on success\n @retval -errno on failure"]
    pub fn k_obj_core_stats_enable(obj_core: *mut k_obj_core) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sys_memory_stats {
    pub free_bytes: usize,
    pub allocated_bytes: usize,
    pub max_allocated_bytes: usize,
}
#[test]
fn bindgen_test_layout_sys_memory_stats() {
    const UNINIT: ::core::mem::MaybeUninit<sys_memory_stats> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sys_memory_stats>(),
        12usize,
        concat!("Size of: ", stringify!(sys_memory_stats))
    );
    assert_eq!(
        ::core::mem::align_of::<sys_memory_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(sys_memory_stats))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_memory_stats),
            "::",
            stringify!(free_bytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).allocated_bytes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_memory_stats),
            "::",
            stringify!(allocated_bytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_allocated_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_memory_stats),
            "::",
            stringify!(max_allocated_bytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sys_heap {
    pub heap: *mut z_heap,
    pub init_mem: *mut ::core::ffi::c_void,
    pub init_bytes: usize,
}
#[test]
fn bindgen_test_layout_sys_heap() {
    const UNINIT: ::core::mem::MaybeUninit<sys_heap> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sys_heap>(),
        12usize,
        concat!("Size of: ", stringify!(sys_heap))
    );
    assert_eq!(
        ::core::mem::align_of::<sys_heap>(),
        4usize,
        concat!("Alignment of ", stringify!(sys_heap))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).heap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_heap),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_mem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_heap),
            "::",
            stringify!(init_mem)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_heap),
            "::",
            stringify!(init_bytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct z_heap_stress_result {
    pub total_allocs: u32,
    pub successful_allocs: u32,
    pub total_frees: u32,
    pub accumulated_in_use_bytes: u64,
}
#[test]
fn bindgen_test_layout_z_heap_stress_result() {
    const UNINIT: ::core::mem::MaybeUninit<z_heap_stress_result> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<z_heap_stress_result>(),
        24usize,
        concat!("Size of: ", stringify!(z_heap_stress_result))
    );
    assert_eq!(
        ::core::mem::align_of::<z_heap_stress_result>(),
        8usize,
        concat!("Alignment of ", stringify!(z_heap_stress_result))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).total_allocs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_heap_stress_result),
            "::",
            stringify!(total_allocs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).successful_allocs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(z_heap_stress_result),
            "::",
            stringify!(successful_allocs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).total_frees) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(z_heap_stress_result),
            "::",
            stringify!(total_frees)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).accumulated_in_use_bytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(z_heap_stress_result),
            "::",
            stringify!(accumulated_in_use_bytes)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize sys_heap\n\n Initializes a sys_heap struct to manage the specified memory.\n\n @param heap Heap to initialize\n @param mem Untyped pointer to unused memory\n @param bytes Size of region pointed to by @a mem"]
    pub fn sys_heap_init(heap: *mut sys_heap, mem: *mut ::core::ffi::c_void, bytes: usize);
}
extern "C" {
    #[doc = " @brief Allocate memory from a sys_heap\n\n Returns a pointer to a block of unused memory in the heap.  This\n memory will not otherwise be used until it is freed with\n sys_heap_free().  If no memory can be allocated, NULL will be\n returned.  The allocated memory is guaranteed to have a starting\n address which is a multiple of sizeof(void *).  If a bigger alignment\n is necessary then sys_heap_aligned_alloc() should be used instead.\n\n @note The sys_heap implementation is not internally synchronized.\n No two sys_heap functions should operate on the same heap at the\n same time.  All locking must be provided by the user.\n\n @param heap Heap from which to allocate\n @param bytes Number of bytes requested\n @return Pointer to memory the caller can now use"]
    pub fn sys_heap_alloc(heap: *mut sys_heap, bytes: usize) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " @brief Allocate aligned memory from a sys_heap\n\n Behaves in all ways like sys_heap_alloc(), except that the returned\n memory (if available) will have a starting address in memory which\n is a multiple of the specified power-of-two alignment value in\n bytes.  With align=0 this behaves exactly like sys_heap_alloc().\n The resulting memory can be returned to the heap using sys_heap_free().\n\n @param heap Heap from which to allocate\n @param align Alignment in bytes, must be a power of two\n @param bytes Number of bytes requested\n @return Pointer to memory the caller can now use"]
    pub fn sys_heap_aligned_alloc(
        heap: *mut sys_heap,
        align: usize,
        bytes: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " @brief Free memory into a sys_heap\n\n De-allocates a pointer to memory previously returned from\n sys_heap_alloc such that it can be used for other purposes.  The\n caller must not use the memory region after entry to this function.\n\n @note The sys_heap implementation is not internally synchronized.\n No two sys_heap functions should operate on the same heap at the\n same time.  All locking must be provided by the user.\n\n @param heap Heap to which to return the memory\n @param mem A pointer previously returned from sys_heap_alloc()"]
    pub fn sys_heap_free(heap: *mut sys_heap, mem: *mut ::core::ffi::c_void);
}
extern "C" {
    #[doc = " @brief Expand the size of an existing allocation\n\n Returns a pointer to a new memory region with the same contents,\n but a different allocated size.  If the new allocation can be\n expanded in place, the pointer returned will be identical.\n Otherwise the data will be copies to a new block and the old one\n will be freed as per sys_heap_free().  If the specified size is\n smaller than the original, the block will be truncated in place and\n the remaining memory returned to the heap.  If the allocation of a\n new block fails, then NULL will be returned and the old block will\n not be freed or modified.\n\n @note The return of a NULL on failure is a different behavior than\n POSIX realloc(), which specifies that the original pointer will be\n returned (i.e. it is not possible to safely detect realloc()\n failure in POSIX, but it is here).\n\n @param heap Heap from which to allocate\n @param ptr Original pointer returned from a previous allocation\n @param align Alignment in bytes, must be a power of two\n @param bytes Number of bytes requested for the new block\n @return Pointer to memory the caller can now use, or NULL"]
    pub fn sys_heap_aligned_realloc(
        heap: *mut sys_heap,
        ptr: *mut ::core::ffi::c_void,
        align: usize,
        bytes: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " @brief Return allocated memory size\n\n Returns the size, in bytes, of a block returned from a successful\n sys_heap_alloc() or sys_heap_alloc_aligned() call.  The value\n returned is the size of the heap-managed memory, which may be\n larger than the number of bytes requested due to allocation\n granularity.  The heap code is guaranteed to make no access to this\n region of memory until a subsequent sys_heap_free() on the same\n pointer.\n\n @param heap Heap containing the block\n @param mem Pointer to memory allocated from this heap\n @return Size in bytes of the memory region"]
    pub fn sys_heap_usable_size(heap: *mut sys_heap, mem: *mut ::core::ffi::c_void) -> usize;
}
extern "C" {
    #[doc = " @brief Validate heap integrity\n\n Validates the internal integrity of a sys_heap.  Intended for unit\n test and validation code, though potentially useful as a user API\n for applications with complicated runtime reliability requirements.\n Note: this cannot catch every possible error, but if it returns\n true then the heap is in a consistent state and can correctly\n handle any sys_heap_alloc() request and free any live pointer\n returned from a previous allocation.\n\n @param heap Heap to validate\n @return true, if the heap is valid, otherwise false"]
    pub fn sys_heap_validate(heap: *mut sys_heap) -> bool;
}
extern "C" {
    #[doc = " @brief sys_heap stress test rig\n\n Test rig for heap allocation validation.  This will loop for @a\n op_count cycles, in each iteration making a random choice to\n allocate or free a pointer of randomized (power law) size based on\n heuristics designed to keep the heap in a state where it is near @a\n target_percent full.  Allocation and free operations are provided\n by the caller as callbacks (i.e. this can in theory test any heap).\n Results, including counts of frees and successful/unsuccessful\n allocations, are returned via the @a result struct.\n\n @param alloc_fn Callback to perform an allocation.  Passes back the @a\n              arg parameter as a context handle.\n @param free_fn Callback to perform a free of a pointer returned from\n             @a alloc.  Passes back the @a arg parameter as a\n             context handle.\n @param arg Context handle to pass back to the callbacks\n @param total_bytes Size of the byte array the heap was initialized in\n @param op_count How many iterations to test\n @param scratch_mem A pointer to scratch memory to be used by the\n                    test.  Should be about 1/2 the size of the heap\n                    for tests that need to stress fragmentation.\n @param scratch_bytes Size of the memory pointed to by @a scratch_mem\n @param target_percent Percentage fill value (1-100) to which the\n                       random allocation choices will seek.  High\n                       values will result in significant allocation\n                       failures and a very fragmented heap.\n @param result Struct into which to store test results."]
    pub fn sys_heap_stress(
        alloc_fn: ::core::option::Option<
            unsafe extern "C" fn(
                arg: *mut ::core::ffi::c_void,
                bytes: usize,
            ) -> *mut ::core::ffi::c_void,
        >,
        free_fn: ::core::option::Option<
            unsafe extern "C" fn(arg: *mut ::core::ffi::c_void, p: *mut ::core::ffi::c_void),
        >,
        arg: *mut ::core::ffi::c_void,
        total_bytes: usize,
        op_count: u32,
        scratch_mem: *mut ::core::ffi::c_void,
        scratch_bytes: usize,
        target_percent: ::core::ffi::c_int,
        result: *mut z_heap_stress_result,
    );
}
extern "C" {
    #[doc = " @brief Print heap internal structure information to the console\n\n Print information on the heap structure such as its size, chunk buckets,\n chunk list and some statistics for debugging purpose.\n\n @param heap Heap to print information about\n @param dump_chunks True to print the entire heap chunk list"]
    pub fn sys_heap_print_info(heap: *mut sys_heap, dump_chunks: bool);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpu_arch {}
#[test]
fn bindgen_test_layout__cpu_arch() {
    assert_eq!(
        ::core::mem::size_of::<_cpu_arch>(),
        0usize,
        concat!("Size of: ", stringify!(_cpu_arch))
    );
    assert_eq!(
        ::core::mem::align_of::<_cpu_arch>(),
        1usize,
        concat!("Alignment of ", stringify!(_cpu_arch))
    );
}
pub type _cpu_arch_t = _cpu_arch;
#[doc = " Structure used to track internal statistics about both thread\n and CPU usage."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_cycle_stats {
    #[doc = "< total usage in cycles"]
    pub total: u64,
    #[doc = "< true if gathering usage stats"]
    pub track_usage: bool,
}
#[test]
fn bindgen_test_layout_k_cycle_stats() {
    const UNINIT: ::core::mem::MaybeUninit<k_cycle_stats> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_cycle_stats>(),
        16usize,
        concat!("Size of: ", stringify!(k_cycle_stats))
    );
    assert_eq!(
        ::core::mem::align_of::<k_cycle_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(k_cycle_stats))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_cycle_stats),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).track_usage) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_cycle_stats),
            "::",
            stringify!(track_usage)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ready_q {
    pub cache: *mut k_thread,
    pub runq: sys_dlist_t,
}
#[test]
fn bindgen_test_layout__ready_q() {
    const UNINIT: ::core::mem::MaybeUninit<_ready_q> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_ready_q>(),
        12usize,
        concat!("Size of: ", stringify!(_ready_q))
    );
    assert_eq!(
        ::core::mem::align_of::<_ready_q>(),
        4usize,
        concat!("Alignment of ", stringify!(_ready_q))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ready_q),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).runq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ready_q),
            "::",
            stringify!(runq)
        )
    );
}
pub type _ready_q_t = _ready_q;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpu {
    pub nested: u32,
    pub irq_stack: *mut ::core::ffi::c_char,
    pub current: *mut k_thread,
    pub idle_thread: *mut k_thread,
    pub id: u8,
    pub arch: _cpu_arch,
}
#[test]
fn bindgen_test_layout__cpu() {
    const UNINIT: ::core::mem::MaybeUninit<_cpu> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_cpu>(),
        20usize,
        concat!("Size of: ", stringify!(_cpu))
    );
    assert_eq!(
        ::core::mem::align_of::<_cpu>(),
        4usize,
        concat!("Alignment of ", stringify!(_cpu))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nested) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cpu),
            "::",
            stringify!(nested)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).irq_stack) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cpu),
            "::",
            stringify!(irq_stack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cpu),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).idle_thread) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cpu),
            "::",
            stringify!(idle_thread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_cpu), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).arch) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_cpu),
            "::",
            stringify!(arch)
        )
    );
}
pub type _cpu_t = _cpu;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct z_kernel {
    pub cpus: [_cpu; 1usize],
    pub ready_q: _ready_q,
}
#[test]
fn bindgen_test_layout_z_kernel() {
    const UNINIT: ::core::mem::MaybeUninit<z_kernel> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<z_kernel>(),
        32usize,
        concat!("Size of: ", stringify!(z_kernel))
    );
    assert_eq!(
        ::core::mem::align_of::<z_kernel>(),
        4usize,
        concat!("Alignment of ", stringify!(z_kernel))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cpus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_kernel),
            "::",
            stringify!(cpus)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ready_q) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(z_kernel),
            "::",
            stringify!(ready_q)
        )
    );
}
pub type _kernel_t = z_kernel;
extern "C" {
    pub static mut _kernel: z_kernel;
}
extern "C" {
    pub static mut _cpus_active: atomic_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _wait_q_t {
    pub waitq: sys_dlist_t,
}
#[test]
fn bindgen_test_layout__wait_q_t() {
    const UNINIT: ::core::mem::MaybeUninit<_wait_q_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_wait_q_t>(),
        8usize,
        concat!("Size of: ", stringify!(_wait_q_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_wait_q_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_wait_q_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).waitq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wait_q_t),
            "::",
            stringify!(waitq)
        )
    );
}
pub type _timeout_func_t = ::core::option::Option<unsafe extern "C" fn(t: *mut _timeout)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _timeout {
    pub node: sys_dnode_t,
    pub fn_: _timeout_func_t,
    pub dticks: i64,
}
#[test]
fn bindgen_test_layout__timeout() {
    const UNINIT: ::core::mem::MaybeUninit<_timeout> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_timeout>(),
        24usize,
        concat!("Size of: ", stringify!(_timeout))
    );
    assert_eq!(
        ::core::mem::align_of::<_timeout>(),
        8usize,
        concat!("Alignment of ", stringify!(_timeout))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_timeout),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fn_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_timeout),
            "::",
            stringify!(fn_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dticks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_timeout),
            "::",
            stringify!(dticks)
        )
    );
}
pub type k_thread_timeslice_fn_t = ::core::option::Option<
    unsafe extern "C" fn(thread: *mut k_thread, data: *mut ::core::ffi::c_void),
>;
extern "C" {
    #[doc = " @brief Return the kernel version of the present build\n\n The kernel version is a four-byte value, whose format is described in the\n file \"kernel_version.h\".\n\n @return kernel version"]
    pub fn sys_kernel_version_get() -> u32;
}
pub type __gnuc_va_list = u32;
pub type va_list = u32;
#[doc = " @typedef _k_syscall_handler_t\n @brief System call handler function type\n\n These are kernel-side skeleton functions for system calls. They are\n necessary to sanitize the arguments passed into the system call:\n\n - Any kernel object or device pointers are validated with _SYSCALL_IS_OBJ()\n - Any memory buffers passed in are checked to ensure that the calling thread\n   actually has access to them\n - Many kernel calls do no sanity checking of parameters other than\n   assertions. The handler must check all of these conditions using\n   _SYSCALL_ASSERT()\n - If the system call has more than 6 arguments, then arg6 will be a pointer\n   to some struct containing arguments 6+. The struct itself needs to be\n   validated like any other buffer passed in from userspace, and its members\n   individually validated (if necessary) and then passed to the real\n   implementation like normal arguments\n\n Even if the system call implementation has no return value, these always\n return something, even 0, to prevent register leakage to userspace.\n\n Once everything has been validated, the real implementation will be executed.\n\n @param arg1 system call argument 1\n @param arg2 system call argument 2\n @param arg3 system call argument 3\n @param arg4 system call argument 4\n @param arg5 system call argument 5\n @param arg6 system call argument 6\n @param ssf System call stack frame pointer. Used to generate kernel oops\n            via _arch_syscall_oops_at(). Contents are arch-specific.\n @return system call return value, or 0 if the system call implementation\n         return void\n"]
pub type _k_syscall_handler_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
        ssf: *mut ::core::ffi::c_void,
    ) -> usize,
>;
extern "C" {
    #[link_name = "z_syscall_trap__extern"]
    pub fn z_syscall_trap() -> bool;
}
extern "C" {
    #[doc = " Indicate whether the CPU is currently in user mode\n\n @return true if the CPU is currently running with user permissions"]
    #[link_name = "k_is_user_context__extern"]
    pub fn k_is_user_context() -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::core::mem::MaybeUninit<imaxdiv_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(numer: intmax_t, denomer: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn _strtoimax_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
        arg4: ::core::ffi::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _strtoumax_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
        arg4: ::core::ffi::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::core::ffi::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn _wcstoimax_r(
        arg1: *mut _reent,
        arg2: *const wchar_t,
        arg3: *mut *mut wchar_t,
        arg4: ::core::ffi::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::core::ffi::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _wcstoumax_r(
        arg1: *mut _reent,
        arg2: *const wchar_t,
        arg3: *mut *mut wchar_t,
        arg4: ::core::ffi::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn printk(fmt: *const ::core::ffi::c_char, ...);
}
extern "C" {
    pub fn vprintk(fmt: *const ::core::ffi::c_char, ap: va_list);
}
pub type wint_t = ::core::ffi::c_int;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blksize_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint32_t;
pub type _off_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
pub type __dev_t = ::core::ffi::c_short;
pub type __uid_t = ::core::ffi::c_ushort;
pub type __gid_t = ::core::ffi::c_ushort;
pub type __id_t = __uint32_t;
pub type __ino_t = ::core::ffi::c_ushort;
pub type __mode_t = __uint32_t;
pub type _off64_t = ::core::ffi::c_longlong;
pub type __off_t = _off_t;
pub type __loff_t = _off64_t;
pub type __key_t = ::core::ffi::c_long;
pub type _fpos_t = ::core::ffi::c_long;
pub type __size_t = ::core::ffi::c_uint;
pub type _ssize_t = ::core::ffi::c_int;
pub type __ssize_t = _ssize_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbstate_t {
    pub __count: ::core::ffi::c_int,
    pub __value: _mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _mbstate_t__bindgen_ty_1 {
    pub __wch: wint_t,
    pub __wchb: [::core::ffi::c_uchar; 4usize],
}
#[test]
fn bindgen_test_layout__mbstate_t__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<_mbstate_t__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<_mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout__mbstate_t() {
    const UNINIT: ::core::mem::MaybeUninit<_mbstate_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(_mbstate_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_mbstate_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
pub type _iconv_t = *mut ::core::ffi::c_void;
pub type __clock_t = ::core::ffi::c_ulong;
pub type __time_t = __int_least64_t;
pub type __clockid_t = ::core::ffi::c_ulong;
pub type __timer_t = ::core::ffi::c_ulong;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __nl_item = ::core::ffi::c_int;
pub type __nlink_t = ::core::ffi::c_ushort;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_ulong;
pub type __va_list = u32;
pub type __ULong = ::core::ffi::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __lock {
    _unused: [u8; 0],
}
pub type _LOCK_T = *mut __lock;
extern "C" {
    pub fn __retarget_lock_init(lock: *mut _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_init_recursive(lock: *mut _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_close(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_close_recursive(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_acquire(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_acquire_recursive(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_try_acquire(lock: _LOCK_T) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __retarget_lock_try_acquire_recursive(lock: _LOCK_T) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __retarget_lock_release(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_release_recursive(lock: _LOCK_T);
}
pub type _flock_t = _LOCK_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Bigint {
    pub _next: *mut _Bigint,
    pub _k: ::core::ffi::c_int,
    pub _maxwds: ::core::ffi::c_int,
    pub _sign: ::core::ffi::c_int,
    pub _wds: ::core::ffi::c_int,
    pub _x: [__ULong; 1usize],
}
#[test]
fn bindgen_test_layout__Bigint() {
    const UNINIT: ::core::mem::MaybeUninit<_Bigint> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_Bigint>(),
        24usize,
        concat!("Size of: ", stringify!(_Bigint))
    );
    assert_eq!(
        ::core::mem::align_of::<_Bigint>(),
        4usize,
        concat!("Alignment of ", stringify!(_Bigint))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bigint),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._k) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bigint),
            "::",
            stringify!(_k)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._maxwds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bigint),
            "::",
            stringify!(_maxwds)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._sign) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bigint),
            "::",
            stringify!(_sign)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._wds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bigint),
            "::",
            stringify!(_wds)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._x) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bigint),
            "::",
            stringify!(_x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __tm {
    pub __tm_sec: ::core::ffi::c_int,
    pub __tm_min: ::core::ffi::c_int,
    pub __tm_hour: ::core::ffi::c_int,
    pub __tm_mday: ::core::ffi::c_int,
    pub __tm_mon: ::core::ffi::c_int,
    pub __tm_year: ::core::ffi::c_int,
    pub __tm_wday: ::core::ffi::c_int,
    pub __tm_yday: ::core::ffi::c_int,
    pub __tm_isdst: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___tm() {
    const UNINIT: ::core::mem::MaybeUninit<__tm> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__tm>(),
        36usize,
        concat!("Size of: ", stringify!(__tm))
    );
    assert_eq!(
        ::core::mem::align_of::<__tm>(),
        4usize,
        concat!("Alignment of ", stringify!(__tm))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_min)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_year)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__tm),
            "::",
            stringify!(__tm_isdst)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _on_exit_args {
    pub _fnargs: [*mut ::core::ffi::c_void; 32usize],
    pub _dso_handle: [*mut ::core::ffi::c_void; 32usize],
    pub _fntypes: __ULong,
    pub _is_cxa: __ULong,
}
#[test]
fn bindgen_test_layout__on_exit_args() {
    const UNINIT: ::core::mem::MaybeUninit<_on_exit_args> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_on_exit_args>(),
        264usize,
        concat!("Size of: ", stringify!(_on_exit_args))
    );
    assert_eq!(
        ::core::mem::align_of::<_on_exit_args>(),
        4usize,
        concat!("Alignment of ", stringify!(_on_exit_args))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._fnargs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_on_exit_args),
            "::",
            stringify!(_fnargs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._dso_handle) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_on_exit_args),
            "::",
            stringify!(_dso_handle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._fntypes) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_on_exit_args),
            "::",
            stringify!(_fntypes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._is_cxa) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(_on_exit_args),
            "::",
            stringify!(_is_cxa)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _atexit {
    pub _next: *mut _atexit,
    pub _ind: ::core::ffi::c_int,
    pub _fns: [::core::option::Option<unsafe extern "C" fn()>; 32usize],
    pub _on_exit_args: _on_exit_args,
}
#[test]
fn bindgen_test_layout__atexit() {
    const UNINIT: ::core::mem::MaybeUninit<_atexit> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_atexit>(),
        400usize,
        concat!("Size of: ", stringify!(_atexit))
    );
    assert_eq!(
        ::core::mem::align_of::<_atexit>(),
        4usize,
        concat!("Alignment of ", stringify!(_atexit))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_atexit),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._ind) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_atexit),
            "::",
            stringify!(_ind)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._fns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_atexit),
            "::",
            stringify!(_fns)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._on_exit_args) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_atexit),
            "::",
            stringify!(_on_exit_args)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::core::ffi::c_uchar,
    pub _size: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::core::mem::MaybeUninit<__sbuf> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__sbuf>(),
        8usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::core::mem::align_of::<__sbuf>(),
        4usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::core::ffi::c_uchar,
    pub _r: ::core::ffi::c_int,
    pub _w: ::core::ffi::c_int,
    pub _flags: ::core::ffi::c_short,
    pub _file: ::core::ffi::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::core::ffi::c_int,
    pub _cookie: *mut ::core::ffi::c_void,
    pub _read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut ::core::ffi::c_void,
            arg3: *mut ::core::ffi::c_char,
            arg4: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub _write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut ::core::ffi::c_void,
            arg3: *const ::core::ffi::c_char,
            arg4: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub _seek: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut ::core::ffi::c_void,
            arg3: _fpos_t,
            arg4: ::core::ffi::c_int,
        ) -> _fpos_t,
    >,
    pub _close: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >,
    pub _ub: __sbuf,
    pub _up: *mut ::core::ffi::c_uchar,
    pub _ur: ::core::ffi::c_int,
    pub _ubuf: [::core::ffi::c_uchar; 3usize],
    pub _nbuf: [::core::ffi::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::core::ffi::c_int,
    pub _offset: _off_t,
    pub _data: *mut _reent,
    pub _lock: _flock_t,
    pub _mbstate: _mbstate_t,
    pub _flags2: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::core::mem::MaybeUninit<__sFILE> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__sFILE>(),
        104usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::core::mem::align_of::<__sFILE>(),
        4usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._up) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_up)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._data) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._mbstate) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_mbstate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags2)
        )
    );
}
pub type __FILE = __sFILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _glue {
    pub _next: *mut _glue,
    pub _niobs: ::core::ffi::c_int,
    pub _iobs: *mut __FILE,
}
#[test]
fn bindgen_test_layout__glue() {
    const UNINIT: ::core::mem::MaybeUninit<_glue> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_glue>(),
        12usize,
        concat!("Size of: ", stringify!(_glue))
    );
    assert_eq!(
        ::core::mem::align_of::<_glue>(),
        4usize,
        concat!("Alignment of ", stringify!(_glue))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_glue),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._niobs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_glue),
            "::",
            stringify!(_niobs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._iobs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_glue),
            "::",
            stringify!(_iobs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rand48 {
    pub _seed: [::core::ffi::c_ushort; 3usize],
    pub _mult: [::core::ffi::c_ushort; 3usize],
    pub _add: ::core::ffi::c_ushort,
}
#[test]
fn bindgen_test_layout__rand48() {
    const UNINIT: ::core::mem::MaybeUninit<_rand48> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_rand48>(),
        14usize,
        concat!("Size of: ", stringify!(_rand48))
    );
    assert_eq!(
        ::core::mem::align_of::<_rand48>(),
        2usize,
        concat!("Alignment of ", stringify!(_rand48))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._seed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_rand48),
            "::",
            stringify!(_seed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._mult) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_rand48),
            "::",
            stringify!(_mult)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._add) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_rand48),
            "::",
            stringify!(_add)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _reent {
    pub _errno: ::core::ffi::c_int,
    pub _stdin: *mut __FILE,
    pub _stdout: *mut __FILE,
    pub _stderr: *mut __FILE,
    pub _inc: ::core::ffi::c_int,
    pub _emergency: [::core::ffi::c_char; 25usize],
    pub _unspecified_locale_info: ::core::ffi::c_int,
    pub _locale: *mut __locale_t,
    pub __sdidinit: ::core::ffi::c_int,
    pub __cleanup: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent)>,
    pub _result: *mut _Bigint,
    pub _result_k: ::core::ffi::c_int,
    pub _p5s: *mut _Bigint,
    pub _freelist: *mut *mut _Bigint,
    pub _cvtlen: ::core::ffi::c_int,
    pub _cvtbuf: *mut ::core::ffi::c_char,
    pub _new: _reent__bindgen_ty_1,
    pub _sig_func: *mut ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>,
    pub __sglue: _glue,
    pub __sf: [__FILE; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _reent__bindgen_ty_1 {
    pub _reent: _reent__bindgen_ty_1__bindgen_ty_1,
    pub _unused: _reent__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _reent__bindgen_ty_1__bindgen_ty_1 {
    pub _unused_rand: ::core::ffi::c_uint,
    pub _strtok_last: *mut ::core::ffi::c_char,
    pub _asctime_buf: [::core::ffi::c_char; 26usize],
    pub _localtime_buf: __tm,
    pub _gamma_signgam: ::core::ffi::c_int,
    pub _rand_next: ::core::ffi::c_ulonglong,
    pub _r48: _rand48,
    pub _mblen_state: _mbstate_t,
    pub _mbtowc_state: _mbstate_t,
    pub _wctomb_state: _mbstate_t,
    pub _l64a_buf: [::core::ffi::c_char; 8usize],
    pub _signal_buf: [::core::ffi::c_char; 24usize],
    pub _getdate_err: ::core::ffi::c_int,
    pub _mbrlen_state: _mbstate_t,
    pub _mbrtowc_state: _mbstate_t,
    pub _mbsrtowcs_state: _mbstate_t,
    pub _wcrtomb_state: _mbstate_t,
    pub _wcsrtombs_state: _mbstate_t,
    pub _h_errno: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout__reent__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<_reent__bindgen_ty_1__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_reent__bindgen_ty_1__bindgen_ty_1>(),
        208usize,
        concat!("Size of: ", stringify!(_reent__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<_reent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._unused_rand) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_unused_rand)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._strtok_last) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_strtok_last)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._asctime_buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_asctime_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._localtime_buf) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_localtime_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._gamma_signgam) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_gamma_signgam)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._rand_next) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_rand_next)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._r48) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_r48)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._mblen_state) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_mblen_state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._mbtowc_state) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_mbtowc_state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._wctomb_state) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_wctomb_state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._l64a_buf) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_l64a_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._signal_buf) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_signal_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._getdate_err) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_getdate_err)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._mbrlen_state) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_mbrlen_state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._mbrtowc_state) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_mbrtowc_state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._mbsrtowcs_state) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_mbsrtowcs_state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._wcrtomb_state) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_wcrtomb_state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._wcsrtombs_state) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_wcsrtombs_state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._h_errno) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_h_errno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _reent__bindgen_ty_1__bindgen_ty_2 {
    pub _nextf: [*mut ::core::ffi::c_uchar; 30usize],
    pub _nmalloc: [::core::ffi::c_uint; 30usize],
}
#[test]
fn bindgen_test_layout__reent__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<_reent__bindgen_ty_1__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_reent__bindgen_ty_1__bindgen_ty_2>(),
        240usize,
        concat!("Size of: ", stringify!(_reent__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<_reent__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._nextf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(_nextf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._nmalloc) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(_nmalloc)
        )
    );
}
#[test]
fn bindgen_test_layout__reent__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<_reent__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_reent__bindgen_ty_1>(),
        240usize,
        concat!("Size of: ", stringify!(_reent__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<_reent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_reent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._reent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1),
            "::",
            stringify!(_reent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._unused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent__bindgen_ty_1),
            "::",
            stringify!(_unused)
        )
    );
}
#[test]
fn bindgen_test_layout__reent() {
    const UNINIT: ::core::mem::MaybeUninit<_reent> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_reent>(),
        656usize,
        concat!("Size of: ", stringify!(_reent))
    );
    assert_eq!(
        ::core::mem::align_of::<_reent>(),
        8usize,
        concat!("Alignment of ", stringify!(_reent))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._errno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_errno)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._stdin) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_stdin)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._stdout) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_stdout)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._stderr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_stderr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._inc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_inc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._emergency) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_emergency)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._unspecified_locale_info) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_unspecified_locale_info)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._locale) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_locale)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sdidinit) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(__sdidinit)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cleanup) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(__cleanup)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._result) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_result)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._result_k) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_result_k)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._p5s) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_p5s)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._freelist) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_freelist)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._cvtlen) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_cvtlen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._cvtbuf) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_cvtbuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._new) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_new)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._sig_func) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(_sig_func)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sglue) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(__sglue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sf) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_reent),
            "::",
            stringify!(__sf)
        )
    );
}
extern "C" {
    pub static mut _impure_ptr: *mut _reent;
}
extern "C" {
    pub static _global_impure_ptr: *mut _reent;
}
extern "C" {
    pub fn _reclaim_reent(arg1: *mut _reent);
}
extern "C" {
    pub static mut _global_atexit: *mut _atexit;
}
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = __intptr_t;
pub type blkcnt_t = __blkcnt_t;
pub type blksize_t = __blksize_t;
pub type clock_t = ::core::ffi::c_ulong;
pub type time_t = __int_least64_t;
pub type daddr_t = ::core::ffi::c_long;
pub type caddr_t = *mut ::core::ffi::c_char;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type id_t = __id_t;
pub type ino_t = __ino_t;
pub type off_t = __off_t;
pub type dev_t = __dev_t;
pub type uid_t = __uid_t;
pub type gid_t = __gid_t;
pub type pid_t = __pid_t;
pub type key_t = __key_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type sbintime_t = __int64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::core::mem::MaybeUninit<timespec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::core::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    const UNINIT: ::core::mem::MaybeUninit<sched_param> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::core::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sched_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
pub type pthread_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_attr_t {
    pub is_initialized: ::core::ffi::c_int,
    pub stackaddr: *mut ::core::ffi::c_void,
    pub stacksize: ::core::ffi::c_int,
    pub contentionscope: ::core::ffi::c_int,
    pub inheritsched: ::core::ffi::c_int,
    pub schedpolicy: ::core::ffi::c_int,
    pub schedparam: sched_param,
    pub detachstate: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_attr_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_attr_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_attr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_initialized) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(is_initialized)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stackaddr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(stackaddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stacksize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(stacksize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).contentionscope) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(contentionscope)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).inheritsched) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(inheritsched)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).schedpolicy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(schedpolicy)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).schedparam) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(schedparam)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).detachstate) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(detachstate)
        )
    );
}
pub type pthread_mutex_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutexattr_t {
    pub is_initialized: ::core::ffi::c_int,
    pub recursive: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_mutexattr_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_mutexattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_initialized) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(is_initialized)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).recursive) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(recursive)
        )
    );
}
pub type pthread_cond_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_condattr_t {
    pub is_initialized: ::core::ffi::c_int,
    pub clock: clock_t,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_condattr_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_condattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_initialized) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(is_initialized)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clock) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(clock)
        )
    );
}
pub type pthread_key_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_once_t {
    pub is_initialized: ::core::ffi::c_int,
    pub init_executed: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_pthread_once_t() {
    const UNINIT: ::core::mem::MaybeUninit<pthread_once_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<pthread_once_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_once_t))
    );
    assert_eq!(
        ::core::mem::align_of::<pthread_once_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_once_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_initialized) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_once_t),
            "::",
            stringify!(is_initialized)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_executed) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_once_t),
            "::",
            stringify!(init_executed)
        )
    );
}
pub type FILE = __FILE;
pub type fpos_t = _fpos_t;
extern "C" {
    pub fn ctermid(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn tempnam(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::core::ffi::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
        arg4: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn printf(arg1: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn scanf(arg1: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::core::ffi::c_char,
        arg3: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vprintf(arg1: *const ::core::ffi::c_char, arg2: u32) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
        arg3: *mut FILE,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn fputc(arg1: ::core::ffi::c_int, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::core::ffi::c_char, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getchar() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn putc(arg1: ::core::ffi::c_int, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ungetc(arg1: ::core::ffi::c_int, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fread(
        arg1: *mut ::core::ffi::c_void,
        _size: ::core::ffi::c_uint,
        _n: ::core::ffi::c_uint,
        arg2: *mut FILE,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn fwrite(
        arg1: *const ::core::ffi::c_void,
        _size: ::core::ffi::c_uint,
        _n: ::core::ffi::c_uint,
        arg2: *mut FILE,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::core::ffi::c_long,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn perror(arg1: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn fopen(_name: *const ::core::ffi::c_char, _type: *const ::core::ffi::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rename(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ftello(arg1: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        arg1: *mut ::core::ffi::c_char,
        arg2: ::core::ffi::c_uint,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vsnprintf(
        arg1: *mut ::core::ffi::c_char,
        arg2: ::core::ffi::c_uint,
        arg3: *const ::core::ffi::c_char,
        arg4: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vfscanf(
        arg1: *mut FILE,
        arg2: *const ::core::ffi::c_char,
        arg3: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vscanf(arg1: *const ::core::ffi::c_char, arg2: u32) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vsscanf(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fdopen(arg1: ::core::ffi::c_int, arg2: *const ::core::ffi::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn popen(arg1: *const ::core::ffi::c_char, arg2: *const ::core::ffi::c_char) -> *mut FILE;
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn putc_unlocked(arg1: ::core::ffi::c_int, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::core::ffi::c_int,
        arg2: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fmemopen(
        arg1: *mut ::core::ffi::c_void,
        arg2: usize,
        arg3: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(arg1: *mut *mut ::core::ffi::c_char, arg2: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::core::ffi::c_int,
        arg2: *const ::core::ffi::c_char,
        arg3: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn renameat(
        arg1: ::core::ffi::c_int,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
        arg4: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _asiprintf_r(
        arg1: *mut _reent,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _asniprintf_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: *mut usize,
        arg4: *const ::core::ffi::c_char,
        ...
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _asnprintf_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: *mut usize,
        arg4: *const ::core::ffi::c_char,
        ...
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _asprintf_r(
        arg1: *mut _reent,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _diprintf_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _dprintf_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fclose_r(arg1: *mut _reent, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fcloseall_r(arg1: *mut _reent) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fdopen_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fflush_r(arg1: *mut _reent, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fgetc_r(arg1: *mut _reent, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fgetc_unlocked_r(arg1: *mut _reent, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fgets_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
        arg4: *mut FILE,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _fgets_unlocked_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
        arg4: *mut FILE,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _fgetpos_r(arg1: *mut _reent, arg2: *mut FILE, arg3: *mut fpos_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fsetpos_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const fpos_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fiprintf_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fiscanf_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fmemopen_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_void,
        arg3: usize,
        arg4: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fopen_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _freopen_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        arg4: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fprintf_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fpurge_r(arg1: *mut _reent, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fputc_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: *mut FILE,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fputc_unlocked_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: *mut FILE,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fputs_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut FILE,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fputs_unlocked_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut FILE,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fread_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_void,
        _size: usize,
        _n: usize,
        arg3: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fread_unlocked_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_void,
        _size: usize,
        _n: usize,
        arg3: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fscanf_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fseek_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: ::core::ffi::c_long,
        arg4: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _fseeko_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: _off_t,
        arg4: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _ftell_r(arg1: *mut _reent, arg2: *mut FILE) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn _ftello_r(arg1: *mut _reent, arg2: *mut FILE) -> _off_t;
}
extern "C" {
    pub fn _rewind_r(arg1: *mut _reent, arg2: *mut FILE);
}
extern "C" {
    pub fn _fwrite_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_void,
        _size: usize,
        _n: usize,
        arg3: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fwrite_unlocked_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_void,
        _size: usize,
        _n: usize,
        arg3: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _getc_r(arg1: *mut _reent, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _getc_unlocked_r(arg1: *mut _reent, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _getchar_r(arg1: *mut _reent) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _getchar_unlocked_r(arg1: *mut _reent) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _gets_r(arg1: *mut _reent, arg2: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _iprintf_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iscanf_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _open_memstream_r(
        arg1: *mut _reent,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _perror_r(arg1: *mut _reent, arg2: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn _printf_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _putc_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: *mut FILE,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _putc_unlocked_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: *mut FILE,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _putchar_unlocked_r(arg1: *mut _reent, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _putchar_r(arg1: *mut _reent, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _puts_r(arg1: *mut _reent, arg2: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _remove_r(arg1: *mut _reent, arg2: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _rename_r(
        arg1: *mut _reent,
        _old: *const ::core::ffi::c_char,
        _new: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _scanf_r(arg1: *mut _reent, arg2: *const ::core::ffi::c_char, ...)
        -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _siprintf_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _siscanf_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _sniprintf_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: usize,
        arg4: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _snprintf_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: usize,
        arg4: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _sprintf_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _sscanf_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _tempnam_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _tmpfile_r(arg1: *mut _reent) -> *mut FILE;
}
extern "C" {
    pub fn _tmpnam_r(arg1: *mut _reent, arg2: *mut ::core::ffi::c_char)
        -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _ungetc_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: *mut FILE,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vasiprintf_r(
        arg1: *mut _reent,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        arg4: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vasniprintf_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: *mut usize,
        arg4: *const ::core::ffi::c_char,
        arg5: __gnuc_va_list,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _vasnprintf_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: *mut usize,
        arg4: *const ::core::ffi::c_char,
        arg5: __gnuc_va_list,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _vasprintf_r(
        arg1: *mut _reent,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        arg4: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vdiprintf_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: *const ::core::ffi::c_char,
        arg4: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vdprintf_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: *const ::core::ffi::c_char,
        arg4: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vfiprintf_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const ::core::ffi::c_char,
        arg4: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vfiscanf_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const ::core::ffi::c_char,
        arg4: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vfprintf_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const ::core::ffi::c_char,
        arg4: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vfscanf_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const ::core::ffi::c_char,
        arg4: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _viprintf_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _viscanf_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vprintf_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vscanf_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vsiprintf_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        arg4: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vsiscanf_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        arg4: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vsniprintf_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: usize,
        arg4: *const ::core::ffi::c_char,
        arg5: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vsnprintf_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: usize,
        arg4: *const ::core::ffi::c_char,
        arg5: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vsprintf_r(
        arg1: *mut _reent,
        arg2: *mut ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        arg4: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _vsscanf_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
        arg4: __gnuc_va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __getdelim(
        arg1: *mut *mut ::core::ffi::c_char,
        arg2: *mut usize,
        arg3: ::core::ffi::c_int,
        arg4: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn __getline(
        arg1: *mut *mut ::core::ffi::c_char,
        arg2: *mut usize,
        arg3: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn __srget_r(arg1: *mut _reent, arg2: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __swbuf_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: *mut FILE,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "__sputc_r__extern"]
    pub fn __sputc_r(
        _ptr: *mut _reent,
        _c: ::core::ffi::c_int,
        _p: *mut FILE,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "_getchar_unlocked__extern"]
    pub fn _getchar_unlocked() -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "_putchar_unlocked__extern"]
    pub fn _putchar_unlocked(_c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __stack_chk_fail() -> !;
}
extern "C" {
    pub fn __chk_fail() -> !;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
        arg3: usize,
        arg4: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
        arg3: usize,
        arg4: *const ::core::ffi::c_char,
        arg5: __va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::core::ffi::c_char,
        arg2: usize,
        arg3: ::core::ffi::c_int,
        arg4: usize,
        arg5: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::core::ffi::c_char,
        arg2: usize,
        arg3: ::core::ffi::c_int,
        arg4: usize,
        arg5: *const ::core::ffi::c_char,
        arg6: __va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __gets_chk(arg1: *mut ::core::ffi::c_char, arg2: usize) -> *mut ::core::ffi::c_char;
}
pub type irq_offload_routine_t =
    ::core::option::Option<unsafe extern "C" fn(parameter: *const ::core::ffi::c_void)>;
extern "C" {
    #[doc = " @brief Run a function in interrupt context\n\n This function synchronously runs the provided function in interrupt\n context, passing in the supplied device. Useful for test code\n which needs to show that kernel objects work correctly in interrupt\n context.\n\n Additionally, when CONFIG_IRQ_OFFLOAD_NESTED is set by the\n architecture, this routine works to synchronously invoke a nested\n interrupt when called from an ISR context (i.e. when k_is_in_isr()\n is true).  Note that not all platforms will have hardware support\n for this capability, and even on those some interrupts may be\n running at unpreemptible priorities.\n\n @param routine The function to run\n @param parameter Argument to pass to the function when it is run as an\n interrupt"]
    pub fn irq_offload(routine: irq_offload_routine_t, parameter: *const ::core::ffi::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_mem_domain {
    _unused: [u8; 0],
}
pub type k_thread_stack_t = z_thread_stack_element;
pub type k_thread_entry_t = ::core::option::Option<
    unsafe extern "C" fn(
        p1: *mut ::core::ffi::c_void,
        p2: *mut ::core::ffi::c_void,
        p3: *mut ::core::ffi::c_void,
    ),
>;
extern "C" {
    #[doc = " Obtain the current cycle count, in units specified by\n CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC.  While this is historically\n specified as part of the architecture API, in practice virtually\n all platforms forward it to the sys_clock_cycle_get_32() API\n provided by the timer driver.\n\n @see k_cycle_get_32()\n\n @return The current cycle time.  This should count up monotonically\n through the full 32 bit space, wrapping at 0xffffffff.  Hardware\n with fewer bits of precision in the timer is expected to synthesize\n a 32 bit count."]
    #[link_name = "arch_k_cycle_get_32__extern"]
    pub fn arch_k_cycle_get_32() -> u32;
}
extern "C" {
    #[doc = " As for arch_k_cycle_get_32(), but with a 64 bit return value.  Not\n all timer hardware has a 64 bit timer, this needs to be implemented\n only if CONFIG_TIMER_HAS_64BIT_CYCLE_COUNTER is set.\n\n @see arch_k_cycle_get_32()\n\n @return The current cycle time.  This should count up monotonically\n through the full 64 bit space, wrapping at 2^64-1.  Hardware with\n fewer bits of precision in the timer is generally not expected to\n implement this API."]
    #[link_name = "arch_k_cycle_get_64__extern"]
    pub fn arch_k_cycle_get_64() -> u64;
}
extern "C" {
    #[doc = " @brief Power save idle routine\n\n This function will be called by the kernel idle loop or possibly within\n an implementation of z_pm_save_idle in the kernel when the\n '_pm_save_flag' variable is non-zero.\n\n Architectures that do not implement power management instructions may\n immediately return, otherwise a power-saving instruction should be\n issued to wait for an interrupt.\n\n @note The function is expected to return after the interrupt that has\n caused the CPU to exit power-saving mode has been serviced, although\n this is not a firm requirement.\n\n @see k_cpu_idle()"]
    pub fn arch_cpu_idle();
}
extern "C" {
    #[doc = " @brief Atomically re-enable interrupts and enter low power mode\n\n The requirements for arch_cpu_atomic_idle() are as follows:\n\n -# Enabling interrupts and entering a low-power mode needs to be\n    atomic, i.e. there should be no period of time where interrupts are\n    enabled before the processor enters a low-power mode.  See the comments\n    in k_lifo_get(), for example, of the race condition that\n    occurs if this requirement is not met.\n\n -# After waking up from the low-power mode, the interrupt lockout state\n    must be restored as indicated in the 'key' input parameter.\n\n @see k_cpu_atomic_idle()\n\n @param key Lockout key returned by previous invocation of arch_irq_lock()"]
    pub fn arch_cpu_atomic_idle(key: ::core::ffi::c_uint);
}
#[doc = " Per-cpu entry function\n\n @param data context parameter, implementation specific"]
pub type arch_cpustart_t =
    ::core::option::Option<unsafe extern "C" fn(data: *mut ::core::ffi::c_void) -> !>;
extern "C" {
    #[doc = " @brief Start a numbered CPU on a MP-capable system\n\n This starts and initializes a specific CPU.  The main thread on startup is\n running on CPU zero, other processors are numbered sequentially.  On return\n from this function, the CPU is known to have begun operating and will enter\n the provided function.  Its interrupts will be initialized but disabled such\n that irq_unlock() with the provided key will work to enable them.\n\n Normally, in SMP mode this function will be called by the kernel\n initialization and should not be used as a user API.  But it is defined here\n for special-purpose apps which want Zephyr running on one core and to use\n others for design-specific processing.\n\n @param cpu_num Integer number of the CPU\n @param stack Stack memory for the CPU\n @param sz Stack buffer size, in bytes\n @param fn Function to begin running on the CPU.\n @param arg Untyped argument to be passed to \"fn\""]
    pub fn arch_start_cpu(
        cpu_num: ::core::ffi::c_int,
        stack: *mut k_thread_stack_t,
        sz: ::core::ffi::c_int,
        fn_: arch_cpustart_t,
        arg: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    #[doc = " @brief Return CPU power status\n\n @param cpu_num Integer number of the CPU"]
    pub fn arch_cpu_active(cpu_num: ::core::ffi::c_int) -> bool;
}
extern "C" {
    #[doc = " Lock interrupts on the current CPU\n\n @see irq_lock()"]
    #[link_name = "arch_irq_lock__extern"]
    pub fn arch_irq_lock() -> ::core::ffi::c_uint;
}
extern "C" {
    #[doc = " Unlock interrupts on the current CPU\n\n @see irq_unlock()"]
    #[link_name = "arch_irq_unlock__extern"]
    pub fn arch_irq_unlock(key: ::core::ffi::c_uint);
}
extern "C" {
    #[doc = " Test if calling arch_irq_unlock() with this key would unlock irqs\n\n @param key value returned by arch_irq_lock()\n @return true if interrupts were unlocked prior to the arch_irq_lock()\n call that produced the key argument."]
    #[link_name = "arch_irq_unlocked__extern"]
    pub fn arch_irq_unlocked(key: ::core::ffi::c_uint) -> bool;
}
extern "C" {
    #[doc = " Disable the specified interrupt line\n\n @note: The behavior of interrupts that arrive after this call\n returns and before the corresponding call to arch_irq_enable() is\n undefined.  The hardware is not required to latch and deliver such\n an interrupt, though on some architectures that may work.  Other\n architectures will simply lose such an interrupt and never deliver\n it.  Many drivers and subsystems are not tolerant of such dropped\n interrupts and it is the job of the application layer to ensure\n that behavior remains correct.\n\n @see irq_disable()"]
    pub fn arch_irq_disable(irq: ::core::ffi::c_uint);
}
extern "C" {
    #[doc = " Enable the specified interrupt line\n\n @see irq_enable()"]
    pub fn arch_irq_enable(irq: ::core::ffi::c_uint);
}
extern "C" {
    #[doc = " Test if an interrupt line is enabled\n\n @see irq_is_enabled()"]
    pub fn arch_irq_is_enabled(irq: ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " Arch-specific hook to install a dynamic interrupt.\n\n @param irq IRQ line number\n @param priority Interrupt priority\n @param routine Interrupt service routine\n @param parameter ISR parameter\n @param flags Arch-specific IRQ configuration flag\n\n @return The vector assigned to this interrupt"]
    pub fn arch_irq_connect_dynamic(
        irq: ::core::ffi::c_uint,
        priority: ::core::ffi::c_uint,
        routine: ::core::option::Option<
            unsafe extern "C" fn(parameter: *const ::core::ffi::c_void),
        >,
        parameter: *const ::core::ffi::c_void,
        flags: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " Arch-specific hook to dynamically uninstall a shared interrupt.\n If the interrupt is not being shared, then the associated\n _sw_isr_table entry will be replaced by (NULL, z_irq_spurious)\n (default entry).\n\n @param irq IRQ line number\n @param priority Interrupt priority\n @param routine Interrupt service routine\n @param parameter ISR parameter\n @param flags Arch-specific IRQ configuration flag\n\n @return 0 in case of success, negative value otherwise"]
    pub fn arch_irq_disconnect_dynamic(
        irq: ::core::ffi::c_uint,
        priority: ::core::ffi::c_uint,
        routine: ::core::option::Option<
            unsafe extern "C" fn(parameter: *const ::core::ffi::c_void),
        >,
        parameter: *const ::core::ffi::c_void,
        flags: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Arch-specific hook for allocating IRQs\n\n Note: disable/enable IRQ relevantly inside the implementation of such\n function to avoid concurrency issues. Also, an allocated IRQ is assumed\n to be used thus a following @see arch_irq_is_used() should return true.\n\n @return The newly allocated IRQ or UINT_MAX on error."]
    pub fn arch_irq_allocate() -> ::core::ffi::c_uint;
}
extern "C" {
    #[doc = " @brief Arch-specific hook for declaring an IRQ being used\n\n Note: disable/enable IRQ relevantly inside the implementation of such\n function to avoid concurrency issues.\n\n @param irq the IRQ to declare being used"]
    pub fn arch_irq_set_used(irq: ::core::ffi::c_uint);
}
extern "C" {
    #[doc = " @brief Arch-specific hook for checking if an IRQ is being used already\n\n @param irq the IRQ to check\n\n @return true if being, false otherwise"]
    pub fn arch_irq_is_used(irq: ::core::ffi::c_uint) -> bool;
}
extern "C" {
    #[doc = " @brief Returns the number of CPUs\n\n For most systems this will be the same as CONFIG_MP_MAX_NUM_CPUS,\n however some systems may determine this at runtime instead.\n\n @return the number of CPUs"]
    #[link_name = "arch_num_cpus__extern"]
    pub fn arch_num_cpus() -> ::core::ffi::c_uint;
}
extern "C" {
    #[link_name = "arch_mem_coherent__extern"]
    pub fn arch_mem_coherent(ptr: *mut ::core::ffi::c_void) -> bool;
}
extern "C" {
    #[link_name = "arch_cohere_stacks__extern"]
    pub fn arch_cohere_stacks(
        old_thread: *mut k_thread,
        old_switch_handle: *mut ::core::ffi::c_void,
        new_thread: *mut k_thread,
    );
}
extern "C" {
    #[doc = " @brief Perform architecture specific processing within spin loops\n\n This is invoked from busy loops with IRQs disabled such as the contended\n spinlock loop. The default implementation is a weak function that calls\n arch_nop(). Architectures may implement this function to perform extra\n checks or power management tricks if needed."]
    pub fn arch_spin_relax();
}
extern "C" {
    #[link_name = "read_mpuir__extern"]
    pub fn read_mpuir() -> u32;
}
extern "C" {
    #[link_name = "write_mpuir__extern"]
    pub fn write_mpuir(val: u32);
}
extern "C" {
    #[link_name = "read_mpidr__extern"]
    pub fn read_mpidr() -> u32;
}
extern "C" {
    #[link_name = "write_mpidr__extern"]
    pub fn write_mpidr(val: u32);
}
extern "C" {
    #[link_name = "read_sctlr__extern"]
    pub fn read_sctlr() -> u32;
}
extern "C" {
    #[link_name = "write_sctlr__extern"]
    pub fn write_sctlr(val: u32);
}
extern "C" {
    #[link_name = "read_prselr__extern"]
    pub fn read_prselr() -> u32;
}
extern "C" {
    #[link_name = "write_prselr__extern"]
    pub fn write_prselr(val: u32);
}
extern "C" {
    #[link_name = "read_prbar__extern"]
    pub fn read_prbar() -> u32;
}
extern "C" {
    #[link_name = "write_prbar__extern"]
    pub fn write_prbar(val: u32);
}
extern "C" {
    #[link_name = "read_prlar__extern"]
    pub fn read_prlar() -> u32;
}
extern "C" {
    #[link_name = "write_prlar__extern"]
    pub fn write_prlar(val: u32);
}
extern "C" {
    #[link_name = "read_mair0__extern"]
    pub fn read_mair0() -> u32;
}
extern "C" {
    #[link_name = "write_mair0__extern"]
    pub fn write_mair0(val: u32);
}
extern "C" {
    #[link_name = "read_vbar__extern"]
    pub fn read_vbar() -> u32;
}
extern "C" {
    #[link_name = "write_vbar__extern"]
    pub fn write_vbar(val: u32);
}
extern "C" {
    #[link_name = "read_cntv_ctl__extern"]
    pub fn read_cntv_ctl() -> u32;
}
extern "C" {
    #[link_name = "write_cntv_ctl__extern"]
    pub fn write_cntv_ctl(val: u32);
}
extern "C" {
    #[link_name = "read_ctr__extern"]
    pub fn read_ctr() -> u32;
}
extern "C" {
    #[link_name = "write_ctr__extern"]
    pub fn write_ctr(val: u32);
}
extern "C" {
    #[link_name = "read_tpidruro__extern"]
    pub fn read_tpidruro() -> u32;
}
extern "C" {
    #[link_name = "write_tpidruro__extern"]
    pub fn write_tpidruro(val: u32);
}
extern "C" {
    #[link_name = "read_ICC_SGI1R__extern"]
    pub fn read_ICC_SGI1R() -> u64;
}
extern "C" {
    #[link_name = "write_ICC_SGI1R__extern"]
    pub fn write_ICC_SGI1R(val: u64);
}
extern "C" {
    #[link_name = "read_cntvct__extern"]
    pub fn read_cntvct() -> u64;
}
extern "C" {
    #[link_name = "write_cntvct__extern"]
    pub fn write_cntvct(val: u64);
}
extern "C" {
    #[link_name = "read_cntv_cval__extern"]
    pub fn read_cntv_cval() -> u64;
}
extern "C" {
    #[link_name = "write_cntv_cval__extern"]
    pub fn write_cntv_cval(val: u64);
}
extern "C" {
    #[link_name = "read_ICC_PMR_EL1__extern"]
    pub fn read_ICC_PMR_EL1() -> u32;
}
extern "C" {
    #[link_name = "write_ICC_PMR_EL1__extern"]
    pub fn write_ICC_PMR_EL1(val: u32);
}
extern "C" {
    #[link_name = "read_ICC_IAR1_EL1__extern"]
    pub fn read_ICC_IAR1_EL1() -> u32;
}
extern "C" {
    #[link_name = "write_ICC_IAR1_EL1__extern"]
    pub fn write_ICC_IAR1_EL1(val: u32);
}
extern "C" {
    #[link_name = "read_ICC_EOIR1_EL1__extern"]
    pub fn read_ICC_EOIR1_EL1() -> u32;
}
extern "C" {
    #[link_name = "write_ICC_EOIR1_EL1__extern"]
    pub fn write_ICC_EOIR1_EL1(val: u32);
}
extern "C" {
    #[link_name = "read_ICC_SRE_EL1__extern"]
    pub fn read_ICC_SRE_EL1() -> u32;
}
extern "C" {
    #[link_name = "write_ICC_SRE_EL1__extern"]
    pub fn write_ICC_SRE_EL1(val: u32);
}
extern "C" {
    #[link_name = "read_ICC_IGRPEN1_EL1__extern"]
    pub fn read_ICC_IGRPEN1_EL1() -> u32;
}
extern "C" {
    #[link_name = "write_ICC_IGRPEN1_EL1__extern"]
    pub fn write_ICC_IGRPEN1_EL1(val: u32);
}
extern "C" {
    #[link_name = "arch_curr_cpu__extern"]
    pub fn arch_curr_cpu() -> *mut _cpu_t;
}
extern "C" {
    #[link_name = "arch_proc_id__extern"]
    pub fn arch_proc_id() -> u32;
}
extern "C" {
    #[doc = " @brief Return IRQ level\n This routine returns the interrupt level number of the provided interrupt.\n\n @param irq IRQ number in its zephyr format\n\n @return 1 if IRQ level 1, 2 if IRQ level 2, 3 if IRQ level 3"]
    #[link_name = "irq_get_level__extern"]
    pub fn irq_get_level(irq: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
extern "C" {
    #[doc = " @brief Return the 2nd level interrupt number\n\n This routine returns the second level irq number of the zephyr irq\n number passed in\n\n @param irq IRQ number in its zephyr format\n\n @return 2nd level IRQ number"]
    #[link_name = "irq_from_level_2__extern"]
    pub fn irq_from_level_2(irq: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
extern "C" {
    #[doc = " @brief Converts irq from level 1 to level 2 format\n\n\n This routine converts the input into the level 2 irq number format\n\n @note Values >= 0xFF are invalid\n\n @param irq IRQ number in its zephyr format\n\n @return 2nd level IRQ number"]
    #[link_name = "irq_to_level_2__extern"]
    pub fn irq_to_level_2(irq: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
extern "C" {
    #[doc = " @brief Returns the parent IRQ of the level 2 raw IRQ number\n\n\n The parent of a 2nd level interrupt is in the 1st byte\n\n @param irq IRQ number in its zephyr format\n\n @return 2nd level IRQ parent"]
    #[link_name = "irq_parent_level_2__extern"]
    pub fn irq_parent_level_2(irq: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
extern "C" {
    #[doc = " @brief Return the 3rd level interrupt number\n\n\n This routine returns the third level irq number of the zephyr irq\n number passed in\n\n @param irq IRQ number in its zephyr format\n\n @return 3rd level IRQ number"]
    #[link_name = "irq_from_level_3__extern"]
    pub fn irq_from_level_3(irq: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
extern "C" {
    #[doc = " @brief Converts irq from level 1 to level 3 format\n\n\n This routine converts the input into the level 3 irq number format\n\n @note Values >= 0xFF are invalid\n\n @param irq IRQ number in its zephyr format\n\n @return 3rd level IRQ number"]
    #[link_name = "irq_to_level_3__extern"]
    pub fn irq_to_level_3(irq: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
extern "C" {
    #[doc = " @brief Returns the parent IRQ of the level 3 raw IRQ number\n\n\n The parent of a 3rd level interrupt is in the 2nd byte\n\n @param irq IRQ number in its zephyr format\n\n @return 3rd level IRQ parent"]
    #[link_name = "irq_parent_level_3__extern"]
    pub fn irq_parent_level_3(irq: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _callee_saved {
    pub v1: u32,
    pub v2: u32,
    pub v3: u32,
    pub v4: u32,
    pub v5: u32,
    pub v6: u32,
    pub v7: u32,
    pub v8: u32,
    pub psp: u32,
}
#[test]
fn bindgen_test_layout__callee_saved() {
    const UNINIT: ::core::mem::MaybeUninit<_callee_saved> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_callee_saved>(),
        36usize,
        concat!("Size of: ", stringify!(_callee_saved))
    );
    assert_eq!(
        ::core::mem::align_of::<_callee_saved>(),
        4usize,
        concat!("Alignment of ", stringify!(_callee_saved))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_callee_saved),
            "::",
            stringify!(v1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_callee_saved),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_callee_saved),
            "::",
            stringify!(v3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_callee_saved),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v5) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_callee_saved),
            "::",
            stringify!(v5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v6) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_callee_saved),
            "::",
            stringify!(v6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v7) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_callee_saved),
            "::",
            stringify!(v7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v8) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_callee_saved),
            "::",
            stringify!(v8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).psp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_callee_saved),
            "::",
            stringify!(psp)
        )
    );
}
pub type _callee_saved_t = _callee_saved;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _thread_arch {
    pub basepri: u32,
    pub swap_return_value: u32,
}
#[test]
fn bindgen_test_layout__thread_arch() {
    const UNINIT: ::core::mem::MaybeUninit<_thread_arch> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_thread_arch>(),
        8usize,
        concat!("Size of: ", stringify!(_thread_arch))
    );
    assert_eq!(
        ::core::mem::align_of::<_thread_arch>(),
        4usize,
        concat!("Alignment of ", stringify!(_thread_arch))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).basepri) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_arch),
            "::",
            stringify!(basepri)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).swap_return_value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_arch),
            "::",
            stringify!(swap_return_value)
        )
    );
}
pub type _thread_arch_t = _thread_arch;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __esf {
    pub basic: __esf___basic_sf,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __esf___basic_sf {
    pub __bindgen_anon_1: __esf___basic_sf__bindgen_ty_1,
    pub __bindgen_anon_2: __esf___basic_sf__bindgen_ty_2,
    pub __bindgen_anon_3: __esf___basic_sf__bindgen_ty_3,
    pub __bindgen_anon_4: __esf___basic_sf__bindgen_ty_4,
    pub __bindgen_anon_5: __esf___basic_sf__bindgen_ty_5,
    pub __bindgen_anon_6: __esf___basic_sf__bindgen_ty_6,
    pub __bindgen_anon_7: __esf___basic_sf__bindgen_ty_7,
    pub xpsr: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __esf___basic_sf__bindgen_ty_1 {
    pub a1: u32,
    pub r0: u32,
}
#[test]
fn bindgen_test_layout___esf___basic_sf__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<__esf___basic_sf__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__esf___basic_sf__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__esf___basic_sf__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<__esf___basic_sf__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__esf___basic_sf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).a1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_1),
            "::",
            stringify!(a1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_1),
            "::",
            stringify!(r0)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __esf___basic_sf__bindgen_ty_2 {
    pub a2: u32,
    pub r1: u32,
}
#[test]
fn bindgen_test_layout___esf___basic_sf__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<__esf___basic_sf__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__esf___basic_sf__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(__esf___basic_sf__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<__esf___basic_sf__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(__esf___basic_sf__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).a2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_2),
            "::",
            stringify!(a2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_2),
            "::",
            stringify!(r1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __esf___basic_sf__bindgen_ty_3 {
    pub a3: u32,
    pub r2: u32,
}
#[test]
fn bindgen_test_layout___esf___basic_sf__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<__esf___basic_sf__bindgen_ty_3> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__esf___basic_sf__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(__esf___basic_sf__bindgen_ty_3))
    );
    assert_eq!(
        ::core::mem::align_of::<__esf___basic_sf__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(__esf___basic_sf__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).a3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_3),
            "::",
            stringify!(a3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_3),
            "::",
            stringify!(r2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __esf___basic_sf__bindgen_ty_4 {
    pub a4: u32,
    pub r3: u32,
}
#[test]
fn bindgen_test_layout___esf___basic_sf__bindgen_ty_4() {
    const UNINIT: ::core::mem::MaybeUninit<__esf___basic_sf__bindgen_ty_4> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__esf___basic_sf__bindgen_ty_4>(),
        4usize,
        concat!("Size of: ", stringify!(__esf___basic_sf__bindgen_ty_4))
    );
    assert_eq!(
        ::core::mem::align_of::<__esf___basic_sf__bindgen_ty_4>(),
        4usize,
        concat!("Alignment of ", stringify!(__esf___basic_sf__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).a4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_4),
            "::",
            stringify!(a4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_4),
            "::",
            stringify!(r3)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __esf___basic_sf__bindgen_ty_5 {
    pub ip: u32,
    pub r12: u32,
}
#[test]
fn bindgen_test_layout___esf___basic_sf__bindgen_ty_5() {
    const UNINIT: ::core::mem::MaybeUninit<__esf___basic_sf__bindgen_ty_5> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__esf___basic_sf__bindgen_ty_5>(),
        4usize,
        concat!("Size of: ", stringify!(__esf___basic_sf__bindgen_ty_5))
    );
    assert_eq!(
        ::core::mem::align_of::<__esf___basic_sf__bindgen_ty_5>(),
        4usize,
        concat!("Alignment of ", stringify!(__esf___basic_sf__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_5),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r12) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_5),
            "::",
            stringify!(r12)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __esf___basic_sf__bindgen_ty_6 {
    pub lr: u32,
    pub r14: u32,
}
#[test]
fn bindgen_test_layout___esf___basic_sf__bindgen_ty_6() {
    const UNINIT: ::core::mem::MaybeUninit<__esf___basic_sf__bindgen_ty_6> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__esf___basic_sf__bindgen_ty_6>(),
        4usize,
        concat!("Size of: ", stringify!(__esf___basic_sf__bindgen_ty_6))
    );
    assert_eq!(
        ::core::mem::align_of::<__esf___basic_sf__bindgen_ty_6>(),
        4usize,
        concat!("Alignment of ", stringify!(__esf___basic_sf__bindgen_ty_6))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_6),
            "::",
            stringify!(lr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r14) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_6),
            "::",
            stringify!(r14)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __esf___basic_sf__bindgen_ty_7 {
    pub pc: u32,
    pub r15: u32,
}
#[test]
fn bindgen_test_layout___esf___basic_sf__bindgen_ty_7() {
    const UNINIT: ::core::mem::MaybeUninit<__esf___basic_sf__bindgen_ty_7> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__esf___basic_sf__bindgen_ty_7>(),
        4usize,
        concat!("Size of: ", stringify!(__esf___basic_sf__bindgen_ty_7))
    );
    assert_eq!(
        ::core::mem::align_of::<__esf___basic_sf__bindgen_ty_7>(),
        4usize,
        concat!("Alignment of ", stringify!(__esf___basic_sf__bindgen_ty_7))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_7),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r15) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf__bindgen_ty_7),
            "::",
            stringify!(r15)
        )
    );
}
#[test]
fn bindgen_test_layout___esf___basic_sf() {
    const UNINIT: ::core::mem::MaybeUninit<__esf___basic_sf> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__esf___basic_sf>(),
        32usize,
        concat!("Size of: ", stringify!(__esf___basic_sf))
    );
    assert_eq!(
        ::core::mem::align_of::<__esf___basic_sf>(),
        4usize,
        concat!("Alignment of ", stringify!(__esf___basic_sf))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xpsr) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf___basic_sf),
            "::",
            stringify!(xpsr)
        )
    );
}
#[test]
fn bindgen_test_layout___esf() {
    const UNINIT: ::core::mem::MaybeUninit<__esf> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__esf>(),
        32usize,
        concat!("Size of: ", stringify!(__esf))
    );
    assert_eq!(
        ::core::mem::align_of::<__esf>(),
        4usize,
        concat!("Alignment of ", stringify!(__esf))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).basic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__esf),
            "::",
            stringify!(basic)
        )
    );
}
extern "C" {
    pub static mut z_arm_coredump_fault_sp: u32;
}
pub type z_arch_esf_t = __esf;
extern "C" {
    pub fn z_arm_exc_exit();
}
#[doc = " @brief Initialization function for init entries.\n\n Init entries support both the system initialization and the device\n APIs. Each API has its own init function signature; hence, we have a\n union to cover both."]
#[repr(C)]
#[derive(Copy, Clone)]
pub union init_function {
    #[doc = " System initialization function.\n\n @retval 0 On success\n @retval -errno If init fails."]
    pub sys: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    #[doc = " Device initialization function.\n\n @param dev Device instance.\n\n @retval 0 On success\n @retval -errno If device initialization fails."]
    pub dev: ::core::option::Option<unsafe extern "C" fn(dev: *const device) -> ::core::ffi::c_int>,
}
#[test]
fn bindgen_test_layout_init_function() {
    const UNINIT: ::core::mem::MaybeUninit<init_function> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<init_function>(),
        4usize,
        concat!("Size of: ", stringify!(init_function))
    );
    assert_eq!(
        ::core::mem::align_of::<init_function>(),
        4usize,
        concat!("Alignment of ", stringify!(init_function))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(init_function),
            "::",
            stringify!(sys)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(init_function),
            "::",
            stringify!(dev)
        )
    );
}
#[doc = " @brief Structure to store initialization entry information.\n\n @internal\n Init entries need to be defined following these rules:\n\n - Their name must be set using Z_INIT_ENTRY_NAME().\n - They must be placed in a special init section, given by\n   Z_INIT_ENTRY_SECTION().\n - They must be aligned, e.g. using Z_DECL_ALIGN().\n\n See SYS_INIT_NAMED() for an example.\n @endinternal"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct init_entry {
    #[doc = " Initialization function."]
    pub init_fn: init_function,
    pub __bindgen_anon_1: init_entry__bindgen_ty_1,
}
#[doc = " If the init entry belongs to a device, this fields stores a\n reference to it, otherwise it is set to NULL."]
#[repr(C)]
#[derive(Copy, Clone)]
pub union init_entry__bindgen_ty_1 {
    pub dev: *const device,
}
#[test]
fn bindgen_test_layout_init_entry__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<init_entry__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<init_entry__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(init_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<init_entry__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(init_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(init_entry__bindgen_ty_1),
            "::",
            stringify!(dev)
        )
    );
}
#[test]
fn bindgen_test_layout_init_entry() {
    const UNINIT: ::core::mem::MaybeUninit<init_entry> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<init_entry>(),
        8usize,
        concat!("Size of: ", stringify!(init_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<init_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(init_entry))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_fn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(init_entry),
            "::",
            stringify!(init_fn)
        )
    );
}
extern "C" {
    #[link_name = "z_mem_phys_addr__extern"]
    pub fn z_mem_phys_addr(virt: *mut ::core::ffi::c_void) -> usize;
}
extern "C" {
    #[link_name = "z_mem_virt_addr__extern"]
    pub fn z_mem_virt_addr(phys: usize) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " Map a physical memory region into the kernel's virtual address space\n\n This function is intended for mapping memory-mapped I/O regions into\n the virtual address space. Given a physical address and a size, return a\n linear address representing the base of where the physical region is mapped\n in the virtual address space for the Zephyr kernel.\n\n This function alters the active page tables in the area reserved\n for the kernel. This function will choose the virtual address\n and return it to the caller.\n\n Portable code should never assume that phys_addr and linear_addr will\n be equal.\n\n Caching and access properties are controlled by the 'flags' parameter.\n Unused bits in 'flags' are reserved for future expansion.\n A caching mode must be selected. By default, the region is read-only\n with user access and code execution forbidden. This policy is changed\n by passing K_MEM_CACHE_* and K_MEM_PERM_* macros into the 'flags' parameter.\n\n If there is insufficient virtual address space for the mapping this will\n generate a kernel panic.\n\n This API is only available if CONFIG_MMU is enabled.\n\n It is highly discouraged to use this function to map system RAM page\n frames. It may conflict with anonymous memory mappings and demand paging\n and produce undefined behavior.  Do not use this for RAM unless you know\n exactly what you are doing. If you need a chunk of memory, use k_mem_map().\n If you need a contiguous buffer of physical memory, statically declare it\n and pin it at build time, it will be mapped when the system boots.\n\n This API is part of infrastructure still under development and may\n change.\n\n @param virt [out] Output virtual address storage location\n @param phys Physical address base of the memory region\n @param size Size of the memory region\n @param flags Caching mode and access flags, see K_MAP_* macros"]
    pub fn z_phys_map(virt_ptr: *mut *mut u8, phys: usize, size: usize, flags: u32);
}
extern "C" {
    #[doc = " Unmap a virtual memory region from kernel's virtual address space.\n\n This function is intended to be used by drivers and early boot routines\n where temporary memory mappings need to be made. This allows these\n memory mappings to be discarded once they are no longer needed.\n\n This function alters the active page tables in the area reserved\n for the kernel.\n\n This will align the input parameters to page boundaries so that\n this can be used with the virtual address as returned by\n z_phys_map().\n\n This API is only available if CONFIG_MMU is enabled.\n\n It is highly discouraged to use this function to unmap memory mappings.\n It may conflict with anonymous memory mappings and demand paging and\n produce undefined behavior. Do not use this unless you know exactly\n what you are doing.\n\n This API is part of infrastructure still under development and may\n change.\n\n @param virt Starting address of the virtual address region to be unmapped.\n @param size Size of the virtual address region"]
    pub fn z_phys_unmap(virt: *mut u8, size: usize);
}
#[doc = " Paging Statistics."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_mem_paging_stats_t {}
#[test]
fn bindgen_test_layout_k_mem_paging_stats_t() {
    assert_eq!(
        ::core::mem::size_of::<k_mem_paging_stats_t>(),
        0usize,
        concat!("Size of: ", stringify!(k_mem_paging_stats_t))
    );
    assert_eq!(
        ::core::mem::align_of::<k_mem_paging_stats_t>(),
        1usize,
        concat!("Alignment of ", stringify!(k_mem_paging_stats_t))
    );
}
#[doc = " Paging Statistics Histograms."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_mem_paging_histogram_t {}
#[test]
fn bindgen_test_layout_k_mem_paging_histogram_t() {
    assert_eq!(
        ::core::mem::size_of::<k_mem_paging_histogram_t>(),
        0usize,
        concat!("Size of: ", stringify!(k_mem_paging_histogram_t))
    );
    assert_eq!(
        ::core::mem::align_of::<k_mem_paging_histogram_t>(),
        1usize,
        concat!("Alignment of ", stringify!(k_mem_paging_histogram_t))
    );
}
extern "C" {
    #[doc = " Evict a page-aligned virtual memory region to the backing store\n\n Useful if it is known that a memory region will not be used for some time.\n All the data pages within the specified region will be evicted to the\n backing store if they weren't already, with their associated page frames\n marked as available for mappings or page-ins.\n\n None of the associated page frames mapped to the provided region should\n be pinned.\n\n Note that there are no guarantees how long these pages will be evicted,\n they could take page faults immediately.\n\n If CONFIG_DEMAND_PAGING_ALLOW_IRQ is enabled, this function may not be\n called by ISRs as the backing store may be in-use.\n\n @param addr Base page-aligned virtual address\n @param size Page-aligned data region size\n @retval 0 Success\n @retval -ENOMEM Insufficient space in backing store to satisfy request.\n         The region may be partially paged out."]
    pub fn k_mem_page_out(addr: *mut ::core::ffi::c_void, size: usize) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " Load a virtual data region into memory\n\n After the function completes, all the page frames associated with this\n function will be paged in. However, they are not guaranteed to stay there.\n This is useful if the region is known to be used soon.\n\n If CONFIG_DEMAND_PAGING_ALLOW_IRQ is enabled, this function may not be\n called by ISRs as the backing store may be in-use.\n\n @param addr Base page-aligned virtual address\n @param size Page-aligned data region size"]
    pub fn k_mem_page_in(addr: *mut ::core::ffi::c_void, size: usize);
}
extern "C" {
    #[doc = " Pin an aligned virtual data region, paging in as necessary\n\n After the function completes, all the page frames associated with this\n region will be resident in memory and pinned such that they stay that way.\n This is a stronger version of z_mem_page_in().\n\n If CONFIG_DEMAND_PAGING_ALLOW_IRQ is enabled, this function may not be\n called by ISRs as the backing store may be in-use.\n\n @param addr Base page-aligned virtual address\n @param size Page-aligned data region size"]
    pub fn k_mem_pin(addr: *mut ::core::ffi::c_void, size: usize);
}
extern "C" {
    #[doc = " Un-pin an aligned virtual data region\n\n After the function completes, all the page frames associated with this\n region will be no longer marked as pinned. This does not evict the region,\n follow this with z_mem_page_out() if you need that.\n\n @param addr Base page-aligned virtual address\n @param size Page-aligned data region size"]
    pub fn k_mem_unpin(addr: *mut ::core::ffi::c_void, size: usize);
}
extern "C" {
    #[doc = " Get the paging statistics since system startup\n\n This populates the paging statistics struct being passed in\n as argument.\n\n @param[in,out] stats Paging statistics struct to be filled."]
    #[link_name = "k_mem_paging_stats_get__extern"]
    pub fn k_mem_paging_stats_get(stats: *mut k_mem_paging_stats_t);
}
extern "C" {
    #[doc = " Get the paging statistics since system startup for a thread\n\n This populates the paging statistics struct being passed in\n as argument for a particular thread.\n\n @param[in] thread Thread\n @param[in,out] stats Paging statistics struct to be filled."]
    #[link_name = "k_mem_paging_thread_stats_get__extern"]
    pub fn k_mem_paging_thread_stats_get(thread: *mut k_thread, stats: *mut k_mem_paging_stats_t);
}
extern "C" {
    #[doc = " Get the eviction timing histogram\n\n This populates the timing histogram struct being passed in\n as argument.\n\n @param[in,out] hist Timing histogram struct to be filled."]
    #[link_name = "k_mem_paging_histogram_eviction_get__extern"]
    pub fn k_mem_paging_histogram_eviction_get(hist: *mut k_mem_paging_histogram_t);
}
extern "C" {
    #[doc = " Get the backing store page-in timing histogram\n\n This populates the timing histogram struct being passed in\n as argument.\n\n @param[in,out] hist Timing histogram struct to be filled."]
    #[link_name = "k_mem_paging_histogram_backing_store_page_in_get__extern"]
    pub fn k_mem_paging_histogram_backing_store_page_in_get(hist: *mut k_mem_paging_histogram_t);
}
extern "C" {
    #[doc = " Get the backing store page-out timing histogram\n\n This populates the timing histogram struct being passed in\n as argument.\n\n @param[in,out] hist Timing histogram struct to be filled."]
    #[link_name = "k_mem_paging_histogram_backing_store_page_out_get__extern"]
    pub fn k_mem_paging_histogram_backing_store_page_out_get(hist: *mut k_mem_paging_histogram_t);
}
extern "C" {
    pub fn z_impl_k_mem_paging_stats_get(stats: *mut k_mem_paging_stats_t);
}
extern "C" {
    pub fn z_impl_k_mem_paging_thread_stats_get(
        thread: *mut k_thread,
        stats: *mut k_mem_paging_stats_t,
    );
}
extern "C" {
    pub fn z_impl_k_mem_paging_histogram_eviction_get(hist: *mut k_mem_paging_histogram_t);
}
extern "C" {
    pub fn z_impl_k_mem_paging_histogram_backing_store_page_in_get(
        hist: *mut k_mem_paging_histogram_t,
    );
}
extern "C" {
    pub fn z_impl_k_mem_paging_histogram_backing_store_page_out_get(
        hist: *mut k_mem_paging_histogram_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct z_page_frame {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Select a page frame for eviction\n\n The kernel will invoke this to choose a page frame to evict if there\n are no free page frames.\n\n This function will never be called before the initial\n k_mem_paging_eviction_init().\n\n This function is invoked with interrupts locked.\n\n @param [out] dirty Whether the page to evict is dirty\n @return The page frame to evict"]
    pub fn k_mem_paging_eviction_select(dirty: *mut bool) -> *mut z_page_frame;
}
extern "C" {
    #[doc = " Initialization function\n\n Called at POST_KERNEL to perform any necessary initialization tasks for the\n eviction algorithm. k_mem_paging_eviction_select() is guaranteed to never be\n called until this has returned, and this will only be called once."]
    pub fn k_mem_paging_eviction_init();
}
extern "C" {
    #[doc = " Reserve or fetch a storage location for a data page loaded into a page frame\n\n The returned location token must be unique to the mapped virtual address.\n This location will be used in the backing store to page out data page\n contents for later retrieval. The location value must be page-aligned.\n\n This function may be called multiple times on the same data page. If its\n page frame has its Z_PAGE_FRAME_BACKED bit set, it is expected to return\n the previous backing store location for the data page containing a cached\n clean copy. This clean copy may be updated on page-out, or used to\n discard clean pages without needing to write out their contents.\n\n If the backing store is full, some other backing store location which caches\n a loaded data page may be selected, in which case its associated page frame\n will have the Z_PAGE_FRAME_BACKED bit cleared (as it is no longer cached).\n\n pf->addr will indicate the virtual address the page is currently mapped to.\n Large, sparse backing stores which can contain the entire address space\n may simply generate location tokens purely as a function of pf->addr with no\n other management necessary.\n\n This function distinguishes whether it was called on behalf of a page\n fault. A free backing store location must always be reserved in order for\n page faults to succeed. If the page_fault parameter is not set, this\n function should return -ENOMEM even if one location is available.\n\n This function is invoked with interrupts locked.\n\n @param pf Virtual address to obtain a storage location\n @param [out] location storage location token\n @param page_fault Whether this request was for a page fault\n @return 0 Success\n @return -ENOMEM Backing store is full"]
    pub fn k_mem_paging_backing_store_location_get(
        pf: *mut z_page_frame,
        location: *mut usize,
        page_fault: bool,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " Free a backing store location\n\n Any stored data may be discarded, and the location token associated with\n this address may be re-used for some other data page.\n\n This function is invoked with interrupts locked.\n\n @param location Location token to free"]
    pub fn k_mem_paging_backing_store_location_free(location: usize);
}
extern "C" {
    #[doc = " Copy a data page from Z_SCRATCH_PAGE to the specified location\n\n Immediately before this is called, Z_SCRATCH_PAGE will be mapped read-write\n to the intended source page frame for the calling context.\n\n Calls to this and k_mem_paging_backing_store_page_in() will always be\n serialized, but interrupts may be enabled.\n\n @param location Location token for the data page, for later retrieval"]
    pub fn k_mem_paging_backing_store_page_out(location: usize);
}
extern "C" {
    #[doc = " Copy a data page from the provided location to Z_SCRATCH_PAGE.\n\n Immediately before this is called, Z_SCRATCH_PAGE will be mapped read-write\n to the intended destination page frame for the calling context.\n\n Calls to this and k_mem_paging_backing_store_page_out() will always be\n serialized, but interrupts may be enabled.\n\n @param location Location token for the data page"]
    pub fn k_mem_paging_backing_store_page_in(location: usize);
}
extern "C" {
    #[doc = " Update internal accounting after a page-in\n\n This is invoked after k_mem_paging_backing_store_page_in() and interrupts\n have been* re-locked, making it safe to access the z_page_frame data.\n The location value will be the same passed to\n k_mem_paging_backing_store_page_in().\n\n The primary use-case for this is to update custom fields for the backing\n store in the page frame, to reflect where the data should be evicted to\n if it is paged out again. This may be a no-op in some implementations.\n\n If the backing store caches paged-in data pages, this is the appropriate\n time to set the Z_PAGE_FRAME_BACKED bit. The kernel only skips paging\n out clean data pages if they are noted as clean in the page tables and the\n Z_PAGE_FRAME_BACKED bit is set in their associated page frame.\n\n @param pf Page frame that was loaded in\n @param location Location of where the loaded data page was retrieved"]
    pub fn k_mem_paging_backing_store_page_finalize(pf: *mut z_page_frame, location: usize);
}
extern "C" {
    #[doc = " Backing store initialization function.\n\n The implementation may expect to receive page in/out calls as soon as this\n returns, but not before that. Called at POST_KERNEL.\n\n This function is expected to do two things:\n - Initialize any internal data structures and accounting for the backing\n   store.\n - If the backing store already contains all or some loaded kernel data pages\n   at boot time, Z_PAGE_FRAME_BACKED should be appropriately set for their\n   associated page frames, and any internal accounting set up appropriately."]
    pub fn k_mem_paging_backing_store_init();
}
extern "C" {
    #[doc = " Return the amount of free memory available\n\n The returned value will reflect how many free RAM page frames are available.\n If demand paging is enabled, it may still be possible to allocate more.\n\n The information reported by this function may go stale immediately if\n concurrent memory mappings or page-ins take place.\n\n @return Free physical RAM, in bytes"]
    pub fn k_mem_free_get() -> usize;
}
extern "C" {
    #[doc = " Map anonymous memory into Zephyr's address space\n\n This function effectively increases the data space available to Zephyr.\n The kernel will choose a base virtual address and return it to the caller.\n The memory will have access permissions for all contexts set per the\n provided flags argument.\n\n If user thread access control needs to be managed in any way, do not enable\n K_MEM_PERM_USER flags here; instead manage the region's permissions\n with memory domain APIs after the mapping has been established. Setting\n K_MEM_PERM_USER here will allow all user threads to access this memory\n which is usually undesirable.\n\n Unless K_MEM_MAP_UNINIT is used, the returned memory will be zeroed.\n\n The mapped region is not guaranteed to be physically contiguous in memory.\n Physically contiguous buffers should be allocated statically and pinned\n at build time.\n\n Pages mapped in this way have write-back cache settings.\n\n The returned virtual memory pointer will be page-aligned. The size\n parameter, and any base address for re-mapping purposes must be page-\n aligned.\n\n Note that the allocation includes two guard pages immediately before\n and after the requested region. The total size of the allocation will be\n the requested size plus the size of these two guard pages.\n\n Many K_MEM_MAP_* flags have been implemented to alter the behavior of this\n function, with details in the documentation for these flags.\n\n @param size Size of the memory mapping. This must be page-aligned.\n @param flags K_MEM_PERM_*, K_MEM_MAP_* control flags.\n @return The mapped memory location, or NULL if insufficient virtual address\n         space, insufficient physical memory to establish the mapping,\n         or insufficient memory for paging structures."]
    pub fn k_mem_map(size: usize, flags: u32) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " Un-map mapped memory\n\n This removes a memory mapping for the provided page-aligned region.\n Associated page frames will be free and the kernel may re-use the associated\n virtual address region. Any paged out data pages may be discarded.\n\n Calling this function on a region which was not mapped to begin with is\n undefined behavior.\n\n @param addr Page-aligned memory region base virtual address\n @param size Page-aligned memory region size"]
    pub fn k_mem_unmap(addr: *mut ::core::ffi::c_void, size: usize);
}
extern "C" {
    #[doc = " Given an arbitrary region, provide a aligned region that covers it\n\n The returned region will have both its base address and size aligned\n to the provided alignment value.\n\n @param aligned_addr [out] Aligned address\n @param aligned_size [out] Aligned region size\n @param addr Region base address\n @param size Region size\n @param align What to align the address and size to\n @retval offset between aligned_addr and addr"]
    pub fn k_mem_region_align(
        aligned_addr: *mut usize,
        aligned_size: *mut usize,
        addr: usize,
        size: usize,
        align: usize,
    ) -> usize;
}
pub type io_port_t = u32;
pub type mm_reg_t = usize;
pub type mem_addr_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct z_device_mmio_rom {
    #[doc = " MMIO linear address"]
    pub addr: mm_reg_t,
}
#[test]
fn bindgen_test_layout_z_device_mmio_rom() {
    const UNINIT: ::core::mem::MaybeUninit<z_device_mmio_rom> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<z_device_mmio_rom>(),
        4usize,
        concat!("Size of: ", stringify!(z_device_mmio_rom))
    );
    assert_eq!(
        ::core::mem::align_of::<z_device_mmio_rom>(),
        4usize,
        concat!("Alignment of ", stringify!(z_device_mmio_rom))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_device_mmio_rom),
            "::",
            stringify!(addr)
        )
    );
}
#[doc = " @brief Type used to represent a \"handle\" for a device.\n\n Every @ref device has an associated handle. You can get a pointer to a\n @ref device from its handle and vice versa, but the handle uses less space\n than a pointer. The device.h API mainly uses handles to store lists of\n multiple devices in a compact way.\n\n The extreme values and zero have special significance. Negative values\n identify functionality that does not correspond to a Zephyr device, such as\n the system clock or a SYS_INIT() function.\n\n @see device_handle_get()\n @see device_from_handle()"]
pub type device_handle_t = i16;
#[doc = " @brief Runtime device dynamic structure (in RAM) per driver instance\n\n Fields in this are expected to be default-initialized to zero. The\n kernel driver infrastructure and driver access functions are\n responsible for ensuring that any non-zero initialization is done\n before they are accessed."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_state {
    #[doc = " Device initialization return code (positive errno value).\n\n Device initialization functions return a negative errno code if they\n fail. In Zephyr, errno values do not exceed 255, so we can store the\n positive result value in a uint8_t type."]
    pub init_res: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_device_state() {
    const UNINIT: ::core::mem::MaybeUninit<device_state> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<device_state>(),
        2usize,
        concat!("Size of: ", stringify!(device_state))
    );
    assert_eq!(
        ::core::mem::align_of::<device_state>(),
        1usize,
        concat!("Alignment of ", stringify!(device_state))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_res) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(device_state),
            "::",
            stringify!(init_res)
        )
    );
}
impl device_state {
    #[inline]
    pub fn initialized(&self) -> bool {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_initialized(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(initialized: bool) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let initialized: u8 = unsafe { ::core::mem::transmute(initialized) };
            initialized as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pm_device {
    _unused: [u8; 0],
}
#[doc = " @defgroup sys_init System Initialization\n @ingroup os_services\n\n Zephyr offers an infrastructure to call initialization code before `main`.\n Such initialization calls can be registered using SYS_INIT() or\n SYS_INIT_NAMED() macros. By using a combination of initialization levels and\n priorities init sequence can be adjusted as needed. The available\n initialization levels are described, in order, below:\n\n - `EARLY`: Used very early in the boot process, right after entering the C\n   domain (``z_cstart()``). This can be used in architectures and SoCs that\n   extend or implement architecture code and use drivers or system services\n   that have to be initialized before the Kernel calls any architecture\n   specific initialization code.\n - `PRE_KERNEL_1`: Executed in Kernel's initialization context, which uses\n   the interrupt stack. At this point Kernel services are not yet available.\n - `PRE_KERNEL_2`: Same as `PRE_KERNEL_1`.\n - `POST_KERNEL`: Executed after Kernel is alive. From this point on, Kernel\n   primitives can be used.\n - `APPLICATION`: Executed just before application code (`main`).\n - `SMP`: Only available if @kconfig{CONFIG_SMP} is enabled, specific for\n   SMP.\n\n Initialization priority can take a value in the range of 0 to 99.\n\n @note The same infrastructure is used by devices.\n @{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device {
    #[doc = " Name of the device instance"]
    pub name: *const ::core::ffi::c_char,
    #[doc = " Address of device instance config information"]
    pub config: *const ::core::ffi::c_void,
    #[doc = " Address of the API structure exposed by the device instance"]
    pub api: *const ::core::ffi::c_void,
    #[doc = " Address of the common device state"]
    pub state: *mut device_state,
    #[doc = " Address of the device instance private data"]
    pub data: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_device() {
    const UNINIT: ::core::mem::MaybeUninit<device> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<device>(),
        20usize,
        concat!("Size of: ", stringify!(device))
    );
    assert_eq!(
        ::core::mem::align_of::<device>(),
        4usize,
        concat!("Alignment of ", stringify!(device))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(device),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(device),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).api) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(device),
            "::",
            stringify!(api)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(device),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(device),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    #[doc = " @brief Get the handle for a given device\n\n @param dev the device for which a handle is desired.\n\n @return the handle for the device, or DEVICE_HANDLE_NULL if the device does\n not have an associated handle."]
    #[link_name = "device_handle_get__extern"]
    pub fn device_handle_get(dev: *const device) -> device_handle_t;
}
extern "C" {
    #[doc = " @brief Get the device corresponding to a handle.\n\n @param dev_handle the device handle\n\n @return the device that has that handle, or a null pointer if @p dev_handle\n does not identify a device."]
    #[link_name = "device_from_handle__extern"]
    pub fn device_from_handle(dev_handle: device_handle_t) -> *const device;
}
extern "C" {
    #[doc = " @brief Get a @ref device reference from its @ref device.name field.\n\n This function iterates through the devices on the system. If a device with\n the given @p name field is found, and that device initialized successfully at\n boot time, this function returns a pointer to the device.\n\n If no device has the given @p name, this function returns `NULL`.\n\n This function also returns NULL when a device is found, but it failed to\n initialize successfully at boot time. (To troubleshoot this case, set a\n breakpoint on your device driver's initialization function.)\n\n @param name device name to search for. A null pointer, or a pointer to an\n empty string, will cause NULL to be returned.\n\n @return pointer to device structure with the given name; `NULL` if the device\n is not found or if the device with that name's initialization function\n failed."]
    #[link_name = "device_get_binding__extern"]
    pub fn device_get_binding(name: *const ::core::ffi::c_char) -> *const device;
}
extern "C" {
    #[doc = " @brief Get access to the static array of static devices.\n\n @param devices where to store the pointer to the array of statically\n allocated devices. The array must not be mutated through this pointer.\n\n @return the number of statically allocated devices."]
    pub fn z_device_get_all_static(devices: *mut *const device) -> usize;
}
extern "C" {
    #[doc = " @brief Verify that a device is ready for use.\n\n This is the implementation underlying device_is_ready(), without the overhead\n of a syscall wrapper.\n\n @param dev pointer to the device in question.\n\n @retval true If the device is ready for use.\n @retval false If the device is not ready for use or if a NULL device pointer\n is passed as argument.\n\n @see device_is_ready()"]
    pub fn z_device_is_ready(dev: *const device) -> bool;
}
extern "C" {
    #[doc = " @brief Verify that a device is ready for use.\n\n Indicates whether the provided device pointer is for a device known to be\n in a state where it can be used with its standard API.\n\n This can be used with device pointers captured from DEVICE_DT_GET(), which\n does not include the readiness checks of device_get_binding(). At minimum\n this means that the device has been successfully initialized.\n\n @param dev pointer to the device in question.\n\n @retval true If the device is ready for use.\n @retval false If the device is not ready for use or if a NULL device pointer\n is passed as argument."]
    #[link_name = "device_is_ready__extern"]
    pub fn device_is_ready(dev: *const device) -> bool;
}
extern "C" {
    #[link_name = "z_impl_device_is_ready__extern"]
    pub fn z_impl_device_is_ready(dev: *const device) -> bool;
}
extern "C" {
    pub static __device_dts_ord_0: device;
}
extern "C" {
    pub static __device_dts_ord_3: device;
}
extern "C" {
    pub static __device_dts_ord_1: device;
}
extern "C" {
    pub static __device_dts_ord_6: device;
}
extern "C" {
    pub static __device_dts_ord_7: device;
}
extern "C" {
    pub static __device_dts_ord_85: device;
}
extern "C" {
    pub static __device_dts_ord_115: device;
}
extern "C" {
    pub static __device_dts_ord_89: device;
}
extern "C" {
    pub static __device_dts_ord_75: device;
}
extern "C" {
    pub static __device_dts_ord_125: device;
}
extern "C" {
    pub static __device_dts_ord_126: device;
}
extern "C" {
    pub static __device_dts_ord_127: device;
}
extern "C" {
    pub static __device_dts_ord_130: device;
}
extern "C" {
    pub static __device_dts_ord_131: device;
}
extern "C" {
    pub static __device_dts_ord_113: device;
}
extern "C" {
    pub static __device_dts_ord_86: device;
}
extern "C" {
    pub static __device_dts_ord_103: device;
}
extern "C" {
    pub static __device_dts_ord_91: device;
}
extern "C" {
    pub static __device_dts_ord_10: device;
}
extern "C" {
    pub static __device_dts_ord_73: device;
}
extern "C" {
    pub static __device_dts_ord_107: device;
}
extern "C" {
    pub static __device_dts_ord_98: device;
}
extern "C" {
    pub static __device_dts_ord_78: device;
}
extern "C" {
    pub static __device_dts_ord_74: device;
}
extern "C" {
    pub static __device_dts_ord_117: device;
}
extern "C" {
    pub static __device_dts_ord_79: device;
}
extern "C" {
    pub static __device_dts_ord_80: device;
}
extern "C" {
    pub static __device_dts_ord_81: device;
}
extern "C" {
    pub static __device_dts_ord_82: device;
}
extern "C" {
    pub static __device_dts_ord_83: device;
}
extern "C" {
    pub static __device_dts_ord_84: device;
}
extern "C" {
    pub static __device_dts_ord_69: device;
}
extern "C" {
    pub static __device_dts_ord_72: device;
}
extern "C" {
    pub static __device_dts_ord_118: device;
}
extern "C" {
    pub static __device_dts_ord_119: device;
}
extern "C" {
    pub static __device_dts_ord_120: device;
}
extern "C" {
    pub static __device_dts_ord_121: device;
}
extern "C" {
    pub static __device_dts_ord_122: device;
}
extern "C" {
    pub static __device_dts_ord_123: device;
}
extern "C" {
    pub static __device_dts_ord_124: device;
}
extern "C" {
    pub static __device_dts_ord_93: device;
}
extern "C" {
    pub static __device_dts_ord_90: device;
}
extern "C" {
    pub static __device_dts_ord_116: device;
}
extern "C" {
    pub static __device_dts_ord_128: device;
}
extern "C" {
    pub static __device_dts_ord_129: device;
}
extern "C" {
    pub static __device_dts_ord_106: device;
}
extern "C" {
    pub static __device_dts_ord_11: device;
}
extern "C" {
    pub static __device_dts_ord_105: device;
}
extern "C" {
    pub static __device_dts_ord_77: device;
}
extern "C" {
    pub static __device_dts_ord_25: device;
}
extern "C" {
    pub static __device_dts_ord_59: device;
}
extern "C" {
    pub static __device_dts_ord_60: device;
}
extern "C" {
    pub static __device_dts_ord_61: device;
}
extern "C" {
    pub static __device_dts_ord_62: device;
}
extern "C" {
    pub static __device_dts_ord_63: device;
}
extern "C" {
    pub static __device_dts_ord_64: device;
}
extern "C" {
    pub static __device_dts_ord_65: device;
}
extern "C" {
    pub static __device_dts_ord_66: device;
}
extern "C" {
    pub static __device_dts_ord_67: device;
}
extern "C" {
    pub static __device_dts_ord_68: device;
}
extern "C" {
    pub static __device_dts_ord_26: device;
}
extern "C" {
    pub static __device_dts_ord_27: device;
}
extern "C" {
    pub static __device_dts_ord_28: device;
}
extern "C" {
    pub static __device_dts_ord_29: device;
}
extern "C" {
    pub static __device_dts_ord_30: device;
}
extern "C" {
    pub static __device_dts_ord_31: device;
}
extern "C" {
    pub static __device_dts_ord_32: device;
}
extern "C" {
    pub static __device_dts_ord_33: device;
}
extern "C" {
    pub static __device_dts_ord_34: device;
}
extern "C" {
    pub static __device_dts_ord_35: device;
}
extern "C" {
    pub static __device_dts_ord_36: device;
}
extern "C" {
    pub static __device_dts_ord_37: device;
}
extern "C" {
    pub static __device_dts_ord_43: device;
}
extern "C" {
    pub static __device_dts_ord_44: device;
}
extern "C" {
    pub static __device_dts_ord_45: device;
}
extern "C" {
    pub static __device_dts_ord_46: device;
}
extern "C" {
    pub static __device_dts_ord_47: device;
}
extern "C" {
    pub static __device_dts_ord_48: device;
}
extern "C" {
    pub static __device_dts_ord_49: device;
}
extern "C" {
    pub static __device_dts_ord_50: device;
}
extern "C" {
    pub static __device_dts_ord_51: device;
}
extern "C" {
    pub static __device_dts_ord_52: device;
}
extern "C" {
    pub static __device_dts_ord_53: device;
}
extern "C" {
    pub static __device_dts_ord_54: device;
}
extern "C" {
    pub static __device_dts_ord_38: device;
}
extern "C" {
    pub static __device_dts_ord_39: device;
}
extern "C" {
    pub static __device_dts_ord_40: device;
}
extern "C" {
    pub static __device_dts_ord_41: device;
}
extern "C" {
    pub static __device_dts_ord_42: device;
}
extern "C" {
    pub static __device_dts_ord_55: device;
}
extern "C" {
    pub static __device_dts_ord_56: device;
}
extern "C" {
    pub static __device_dts_ord_57: device;
}
extern "C" {
    pub static __device_dts_ord_58: device;
}
extern "C" {
    pub static __device_dts_ord_5: device;
}
extern "C" {
    pub static __device_dts_ord_17: device;
}
extern "C" {
    pub static __device_dts_ord_18: device;
}
extern "C" {
    pub static __device_dts_ord_19: device;
}
extern "C" {
    pub static __device_dts_ord_20: device;
}
extern "C" {
    pub static __device_dts_ord_21: device;
}
extern "C" {
    pub static __device_dts_ord_22: device;
}
extern "C" {
    pub static __device_dts_ord_23: device;
}
extern "C" {
    pub static __device_dts_ord_24: device;
}
extern "C" {
    pub static __device_dts_ord_70: device;
}
extern "C" {
    pub static __device_dts_ord_71: device;
}
extern "C" {
    pub static __device_dts_ord_12: device;
}
extern "C" {
    pub static __device_dts_ord_13: device;
}
extern "C" {
    pub static __device_dts_ord_14: device;
}
extern "C" {
    pub static __device_dts_ord_15: device;
}
extern "C" {
    pub static __device_dts_ord_16: device;
}
extern "C" {
    pub static __device_dts_ord_4: device;
}
extern "C" {
    pub static __device_dts_ord_2: device;
}
extern "C" {
    pub fn z_impl_device_get_binding(name: *const ::core::ffi::c_char) -> *const device;
}
extern "C" {
    pub fn _isr_wrapper();
}
extern "C" {
    pub fn z_irq_spurious(unused: *const ::core::ffi::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _isr_table_entry {
    pub arg: *const ::core::ffi::c_void,
    pub isr: ::core::option::Option<unsafe extern "C" fn(arg1: *const ::core::ffi::c_void)>,
}
#[test]
fn bindgen_test_layout__isr_table_entry() {
    const UNINIT: ::core::mem::MaybeUninit<_isr_table_entry> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_isr_table_entry>(),
        8usize,
        concat!("Size of: ", stringify!(_isr_table_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<_isr_table_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(_isr_table_entry))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_isr_table_entry),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).isr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_isr_table_entry),
            "::",
            stringify!(isr)
        )
    );
}
extern "C" {
    pub static mut _sw_isr_table: [_isr_table_entry; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _irq_parent_entry {
    pub dev: *const device,
    pub irq: ::core::ffi::c_uint,
    pub offset: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout__irq_parent_entry() {
    const UNINIT: ::core::mem::MaybeUninit<_irq_parent_entry> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_irq_parent_entry>(),
        12usize,
        concat!("Size of: ", stringify!(_irq_parent_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<_irq_parent_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(_irq_parent_entry))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_irq_parent_entry),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).irq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_irq_parent_entry),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_irq_parent_entry),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _isr_list {
    #[doc = " IRQ line number"]
    pub irq: i32,
    #[doc = " Flags for this IRQ, see ISR_FLAG_* definitions"]
    pub flags: i32,
    #[doc = " ISR to call"]
    pub func: *mut ::core::ffi::c_void,
    #[doc = " Parameter for non-direct IRQs"]
    pub param: *const ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout__isr_list() {
    const UNINIT: ::core::mem::MaybeUninit<_isr_list> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_isr_list>(),
        16usize,
        concat!("Size of: ", stringify!(_isr_list))
    );
    assert_eq!(
        ::core::mem::align_of::<_isr_list>(),
        4usize,
        concat!("Alignment of ", stringify!(_isr_list))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).irq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_isr_list),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_isr_list),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_isr_list),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).param) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_isr_list),
            "::",
            stringify!(param)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct _isr_list_sname {
    #[doc = " IRQ line number"]
    pub irq: i32,
    #[doc = " Flags for this IRQ, see ISR_FLAG_* definitions"]
    pub flags: i32,
    #[doc = " The section name"]
    pub sname: __IncompleteArrayField<::core::ffi::c_char>,
}
#[test]
fn bindgen_test_layout__isr_list_sname() {
    const UNINIT: ::core::mem::MaybeUninit<_isr_list_sname> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_isr_list_sname>(),
        8usize,
        concat!("Size of: ", stringify!(_isr_list_sname))
    );
    assert_eq!(
        ::core::mem::align_of::<_isr_list_sname>(),
        4usize,
        concat!("Alignment of ", stringify!(_isr_list_sname))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).irq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_isr_list_sname),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_isr_list_sname),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_isr_list_sname),
            "::",
            stringify!(sname)
        )
    );
}
extern "C" {
    pub fn z_arm_irq_priority_set(irq: ::core::ffi::c_uint, prio: ::core::ffi::c_uint, flags: u32);
}
extern "C" {
    pub fn z_arm_int_exit();
}
extern "C" {
    pub fn z_arm_interrupt_init();
}
extern "C" {
    #[link_name = "arch_isr_direct_header__extern"]
    pub fn arch_isr_direct_header();
}
extern "C" {
    #[link_name = "arch_isr_direct_footer__extern"]
    pub fn arch_isr_direct_footer(maybe_swap: ::core::ffi::c_int);
}
extern "C" {
    pub fn sys_clock_cycle_get_32() -> u32;
}
extern "C" {
    pub fn sys_clock_cycle_get_64() -> u64;
}
extern "C" {
    #[link_name = "arch_nop__extern"]
    pub fn arch_nop();
}
pub type paddr_t = usize;
pub type vaddr_t = *mut ::core::ffi::c_void;
extern "C" {
    #[doc = " @brief find most significant bit set in a 32-bit word\n\n This routine finds the first bit set starting from the most significant bit\n in the argument passed in and returns the index of that bit.  Bits are\n numbered starting at 1 from the least significant bit.  A return value of\n zero indicates that the value passed is zero.\n\n @return most significant bit set, 0 if @a op is 0"]
    #[link_name = "find_msb_set__extern"]
    pub fn find_msb_set(op: u32) -> ::core::ffi::c_uint;
}
extern "C" {
    #[doc = " @brief find least significant bit set in a 32-bit word\n\n This routine finds the first bit set starting from the least significant bit\n in the argument passed in and returns the index of that bit.  Bits are\n numbered starting at 1 from the least significant bit.  A return value of\n zero indicates that the value passed is zero.\n\n @return least significant bit set, 0 if @a op is 0"]
    #[link_name = "find_lsb_set__extern"]
    pub fn find_lsb_set(op: u32) -> ::core::ffi::c_uint;
}
extern "C" {
    #[link_name = "sys_set_bit__extern"]
    pub fn sys_set_bit(addr: mem_addr_t, bit: ::core::ffi::c_uint);
}
extern "C" {
    #[link_name = "sys_clear_bit__extern"]
    pub fn sys_clear_bit(addr: mem_addr_t, bit: ::core::ffi::c_uint);
}
extern "C" {
    #[link_name = "sys_test_bit__extern"]
    pub fn sys_test_bit(addr: mem_addr_t, bit: ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "sys_set_bits__extern"]
    pub fn sys_set_bits(addr: mem_addr_t, mask: ::core::ffi::c_uint);
}
extern "C" {
    #[link_name = "sys_clear_bits__extern"]
    pub fn sys_clear_bits(addr: mem_addr_t, mask: ::core::ffi::c_uint);
}
extern "C" {
    #[link_name = "sys_bitfield_set_bit__extern"]
    pub fn sys_bitfield_set_bit(addr: mem_addr_t, bit: ::core::ffi::c_uint);
}
extern "C" {
    #[link_name = "sys_bitfield_clear_bit__extern"]
    pub fn sys_bitfield_clear_bit(addr: mem_addr_t, bit: ::core::ffi::c_uint);
}
extern "C" {
    #[link_name = "sys_bitfield_test_bit__extern"]
    pub fn sys_bitfield_test_bit(addr: mem_addr_t, bit: ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "sys_test_and_set_bit__extern"]
    pub fn sys_test_and_set_bit(addr: mem_addr_t, bit: ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "sys_test_and_clear_bit__extern"]
    pub fn sys_test_and_clear_bit(addr: mem_addr_t, bit: ::core::ffi::c_uint)
        -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "sys_bitfield_test_and_set_bit__extern"]
    pub fn sys_bitfield_test_and_set_bit(
        addr: mem_addr_t,
        bit: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "sys_bitfield_test_and_clear_bit__extern"]
    pub fn sys_bitfield_test_and_clear_bit(
        addr: mem_addr_t,
        bit: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "sys_read8__extern"]
    pub fn sys_read8(addr: mem_addr_t) -> u8;
}
extern "C" {
    #[link_name = "sys_write8__extern"]
    pub fn sys_write8(data: u8, addr: mem_addr_t);
}
extern "C" {
    #[link_name = "sys_read16__extern"]
    pub fn sys_read16(addr: mem_addr_t) -> u16;
}
extern "C" {
    #[link_name = "sys_write16__extern"]
    pub fn sys_write16(data: u16, addr: mem_addr_t);
}
extern "C" {
    #[link_name = "sys_read32__extern"]
    pub fn sys_read32(addr: mem_addr_t) -> u32;
}
extern "C" {
    #[link_name = "sys_write32__extern"]
    pub fn sys_write32(data: u32, addr: mem_addr_t);
}
extern "C" {
    #[link_name = "sys_read64__extern"]
    pub fn sys_read64(addr: mem_addr_t) -> u64;
}
extern "C" {
    #[link_name = "sys_write64__extern"]
    pub fn sys_write64(data: u64, addr: mem_addr_t);
}
#[doc = " Generic CPU exception, not covered by other codes"]
pub const k_fatal_error_reason_K_ERR_CPU_EXCEPTION: k_fatal_error_reason = 0;
#[doc = " Unhandled hardware interrupt"]
pub const k_fatal_error_reason_K_ERR_SPURIOUS_IRQ: k_fatal_error_reason = 1;
#[doc = " Faulting context overflowed its stack buffer"]
pub const k_fatal_error_reason_K_ERR_STACK_CHK_FAIL: k_fatal_error_reason = 2;
#[doc = " Moderate severity software error"]
pub const k_fatal_error_reason_K_ERR_KERNEL_OOPS: k_fatal_error_reason = 3;
#[doc = " High severity software error"]
pub const k_fatal_error_reason_K_ERR_KERNEL_PANIC: k_fatal_error_reason = 4;
#[doc = " Arch specific fatal errors"]
pub const k_fatal_error_reason_K_ERR_ARCH_START: k_fatal_error_reason = 16;
#[doc = " @defgroup fatal_types Fatal error base types\n @ingroup fatal_apis\n @{"]
pub type k_fatal_error_reason = ::core::ffi::c_uint;
pub const k_fatal_error_reason_arch_K_ERR_ARM_MEM_GENERIC: k_fatal_error_reason_arch = 16;
pub const k_fatal_error_reason_arch_K_ERR_ARM_MEM_STACKING: k_fatal_error_reason_arch = 17;
pub const k_fatal_error_reason_arch_K_ERR_ARM_MEM_UNSTACKING: k_fatal_error_reason_arch = 18;
pub const k_fatal_error_reason_arch_K_ERR_ARM_MEM_DATA_ACCESS: k_fatal_error_reason_arch = 19;
pub const k_fatal_error_reason_arch_K_ERR_ARM_MEM_INSTRUCTION_ACCESS: k_fatal_error_reason_arch =
    20;
pub const k_fatal_error_reason_arch_K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION:
    k_fatal_error_reason_arch = 21;
pub const k_fatal_error_reason_arch_K_ERR_ARM_BUS_GENERIC: k_fatal_error_reason_arch = 22;
pub const k_fatal_error_reason_arch_K_ERR_ARM_BUS_STACKING: k_fatal_error_reason_arch = 23;
pub const k_fatal_error_reason_arch_K_ERR_ARM_BUS_UNSTACKING: k_fatal_error_reason_arch = 24;
pub const k_fatal_error_reason_arch_K_ERR_ARM_BUS_PRECISE_DATA_BUS: k_fatal_error_reason_arch = 25;
pub const k_fatal_error_reason_arch_K_ERR_ARM_BUS_IMPRECISE_DATA_BUS: k_fatal_error_reason_arch =
    26;
pub const k_fatal_error_reason_arch_K_ERR_ARM_BUS_INSTRUCTION_BUS: k_fatal_error_reason_arch = 27;
pub const k_fatal_error_reason_arch_K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION:
    k_fatal_error_reason_arch = 28;
pub const k_fatal_error_reason_arch_K_ERR_ARM_USAGE_GENERIC: k_fatal_error_reason_arch = 29;
pub const k_fatal_error_reason_arch_K_ERR_ARM_USAGE_DIV_0: k_fatal_error_reason_arch = 30;
pub const k_fatal_error_reason_arch_K_ERR_ARM_USAGE_UNALIGNED_ACCESS: k_fatal_error_reason_arch =
    31;
pub const k_fatal_error_reason_arch_K_ERR_ARM_USAGE_STACK_OVERFLOW: k_fatal_error_reason_arch = 32;
pub const k_fatal_error_reason_arch_K_ERR_ARM_USAGE_NO_COPROCESSOR: k_fatal_error_reason_arch = 33;
pub const k_fatal_error_reason_arch_K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN: k_fatal_error_reason_arch =
    34;
pub const k_fatal_error_reason_arch_K_ERR_ARM_USAGE_ILLEGAL_EPSR: k_fatal_error_reason_arch = 35;
pub const k_fatal_error_reason_arch_K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION:
    k_fatal_error_reason_arch = 36;
pub const k_fatal_error_reason_arch_K_ERR_ARM_SECURE_GENERIC: k_fatal_error_reason_arch = 37;
pub const k_fatal_error_reason_arch_K_ERR_ARM_SECURE_ENTRY_POINT: k_fatal_error_reason_arch = 38;
pub const k_fatal_error_reason_arch_K_ERR_ARM_SECURE_INTEGRITY_SIGNATURE:
    k_fatal_error_reason_arch = 39;
pub const k_fatal_error_reason_arch_K_ERR_ARM_SECURE_EXCEPTION_RETURN: k_fatal_error_reason_arch =
    40;
pub const k_fatal_error_reason_arch_K_ERR_ARM_SECURE_ATTRIBUTION_UNIT: k_fatal_error_reason_arch =
    41;
pub const k_fatal_error_reason_arch_K_ERR_ARM_SECURE_TRANSITION: k_fatal_error_reason_arch = 42;
pub const k_fatal_error_reason_arch_K_ERR_ARM_SECURE_LAZY_STATE_PRESERVATION:
    k_fatal_error_reason_arch = 43;
pub const k_fatal_error_reason_arch_K_ERR_ARM_SECURE_LAZY_STATE_ERROR: k_fatal_error_reason_arch =
    44;
pub const k_fatal_error_reason_arch_K_ERR_ARM_UNDEFINED_INSTRUCTION: k_fatal_error_reason_arch = 45;
pub const k_fatal_error_reason_arch_K_ERR_ARM_ALIGNMENT_FAULT: k_fatal_error_reason_arch = 46;
pub const k_fatal_error_reason_arch_K_ERR_ARM_BACKGROUND_FAULT: k_fatal_error_reason_arch = 47;
pub const k_fatal_error_reason_arch_K_ERR_ARM_PERMISSION_FAULT: k_fatal_error_reason_arch = 48;
pub const k_fatal_error_reason_arch_K_ERR_ARM_SYNC_EXTERNAL_ABORT: k_fatal_error_reason_arch = 49;
pub const k_fatal_error_reason_arch_K_ERR_ARM_ASYNC_EXTERNAL_ABORT: k_fatal_error_reason_arch = 50;
pub const k_fatal_error_reason_arch_K_ERR_ARM_SYNC_PARITY_ERROR: k_fatal_error_reason_arch = 51;
pub const k_fatal_error_reason_arch_K_ERR_ARM_ASYNC_PARITY_ERROR: k_fatal_error_reason_arch = 52;
pub const k_fatal_error_reason_arch_K_ERR_ARM_DEBUG_EVENT: k_fatal_error_reason_arch = 53;
pub const k_fatal_error_reason_arch_K_ERR_ARM_TRANSLATION_FAULT: k_fatal_error_reason_arch = 54;
pub const k_fatal_error_reason_arch_K_ERR_ARM_UNSUPPORTED_EXCLUSIVE_ACCESS_FAULT:
    k_fatal_error_reason_arch = 55;
pub type k_fatal_error_reason_arch = ::core::ffi::c_uint;
pub type locale_t = *mut __locale_t;
extern "C" {
    pub fn memchr(
        arg1: *const ::core::ffi::c_void,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memcmp(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn memcpy(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memmove(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memset(
        arg1: *mut ::core::ffi::c_void,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn strcat(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strchr(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcoll(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcspn(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn strerror(arg1: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strlen(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn strncat(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strncmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strncpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strpbrk(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strrchr(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strspn(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn strstr(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strtok(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strxfrm(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strerror_l(arg1: ::core::ffi::c_int, arg2: locale_t) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strtok_r(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn memccpy(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_int,
        arg4: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn stpcpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn stpncpy(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strdup(arg1: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _strdup_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strndup(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _strndup_r(
        arg1: *mut _reent,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        arg1: ::core::ffi::c_int,
        arg2: *mut ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _strerror_r(
        arg1: *mut _reent,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
        arg4: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strnlen(arg1: *const ::core::ffi::c_char, arg2: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__signo: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __memcpy_chk(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: usize,
        arg4: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn __memmove_chk(
        arg1: *mut ::core::ffi::c_void,
        arg2: *mut ::core::ffi::c_void,
        arg3: usize,
        arg4: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn __mempcpy_chk(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: usize,
        arg4: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn __memset_chk(
        arg1: *mut ::core::ffi::c_void,
        arg2: ::core::ffi::c_int,
        arg3: usize,
        arg4: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn __stpcpy_chk(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __strcat_chk(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __strcpy_chk(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __strncat_chk(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
        arg4: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __strncpy_chk(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
        arg4: usize,
    ) -> *mut ::core::ffi::c_char;
}
#[doc = "< -15  Reset Vector, invoked on Power up and warm reset"]
pub const IRQn_Type_Reset_IRQn: IRQn_Type = -15;
#[doc = "< -14  Non maskable Interrupt, cannot be stopped or preempted"]
pub const IRQn_Type_NonMaskableInt_IRQn: IRQn_Type = -14;
#[doc = "< -13  Hard Fault, all classes of Fault"]
pub const IRQn_Type_HardFault_IRQn: IRQn_Type = -13;
#[doc = "< -12  Memory Management, MPU mismatch, including Access Violation\nand No Match"]
pub const IRQn_Type_MemoryManagement_IRQn: IRQn_Type = -12;
#[doc = "< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory\nrelated Fault"]
pub const IRQn_Type_BusFault_IRQn: IRQn_Type = -11;
#[doc = "< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition"]
pub const IRQn_Type_UsageFault_IRQn: IRQn_Type = -10;
#[doc = "< -5 System Service Call via SVC instruction"]
pub const IRQn_Type_SVCall_IRQn: IRQn_Type = -5;
#[doc = "< -4 Debug Monitor"]
pub const IRQn_Type_DebugMonitor_IRQn: IRQn_Type = -4;
#[doc = "< -2 Pendable request for system service"]
pub const IRQn_Type_PendSV_IRQn: IRQn_Type = -2;
#[doc = "< -1 System Tick Timer"]
pub const IRQn_Type_SysTick_IRQn: IRQn_Type = -1;
#[doc = "< 0  POWER_CLOCK"]
pub const IRQn_Type_POWER_CLOCK_IRQn: IRQn_Type = 0;
#[doc = "< 1  RADIO"]
pub const IRQn_Type_RADIO_IRQn: IRQn_Type = 1;
#[doc = "< 2  UARTE0_UART0"]
pub const IRQn_Type_UARTE0_UART0_IRQn: IRQn_Type = 2;
#[doc = "< 3  SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0"]
pub const IRQn_Type_SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn: IRQn_Type = 3;
#[doc = "< 4  SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1"]
pub const IRQn_Type_SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQn: IRQn_Type = 4;
#[doc = "< 5  NFCT"]
pub const IRQn_Type_NFCT_IRQn: IRQn_Type = 5;
#[doc = "< 6  GPIOTE"]
pub const IRQn_Type_GPIOTE_IRQn: IRQn_Type = 6;
#[doc = "< 7  SAADC"]
pub const IRQn_Type_SAADC_IRQn: IRQn_Type = 7;
#[doc = "< 8  TIMER0"]
pub const IRQn_Type_TIMER0_IRQn: IRQn_Type = 8;
#[doc = "< 9  TIMER1"]
pub const IRQn_Type_TIMER1_IRQn: IRQn_Type = 9;
#[doc = "< 10 TIMER2"]
pub const IRQn_Type_TIMER2_IRQn: IRQn_Type = 10;
#[doc = "< 11 RTC0"]
pub const IRQn_Type_RTC0_IRQn: IRQn_Type = 11;
#[doc = "< 12 TEMP"]
pub const IRQn_Type_TEMP_IRQn: IRQn_Type = 12;
#[doc = "< 13 RNG"]
pub const IRQn_Type_RNG_IRQn: IRQn_Type = 13;
#[doc = "< 14 ECB"]
pub const IRQn_Type_ECB_IRQn: IRQn_Type = 14;
#[doc = "< 15 CCM_AAR"]
pub const IRQn_Type_CCM_AAR_IRQn: IRQn_Type = 15;
#[doc = "< 16 WDT"]
pub const IRQn_Type_WDT_IRQn: IRQn_Type = 16;
#[doc = "< 17 RTC1"]
pub const IRQn_Type_RTC1_IRQn: IRQn_Type = 17;
#[doc = "< 18 QDEC"]
pub const IRQn_Type_QDEC_IRQn: IRQn_Type = 18;
#[doc = "< 19 COMP_LPCOMP"]
pub const IRQn_Type_COMP_LPCOMP_IRQn: IRQn_Type = 19;
#[doc = "< 20 SWI0_EGU0"]
pub const IRQn_Type_SWI0_EGU0_IRQn: IRQn_Type = 20;
#[doc = "< 21 SWI1_EGU1"]
pub const IRQn_Type_SWI1_EGU1_IRQn: IRQn_Type = 21;
#[doc = "< 22 SWI2_EGU2"]
pub const IRQn_Type_SWI2_EGU2_IRQn: IRQn_Type = 22;
#[doc = "< 23 SWI3_EGU3"]
pub const IRQn_Type_SWI3_EGU3_IRQn: IRQn_Type = 23;
#[doc = "< 24 SWI4_EGU4"]
pub const IRQn_Type_SWI4_EGU4_IRQn: IRQn_Type = 24;
#[doc = "< 25 SWI5_EGU5"]
pub const IRQn_Type_SWI5_EGU5_IRQn: IRQn_Type = 25;
#[doc = "< 26 TIMER3"]
pub const IRQn_Type_TIMER3_IRQn: IRQn_Type = 26;
#[doc = "< 27 TIMER4"]
pub const IRQn_Type_TIMER4_IRQn: IRQn_Type = 27;
#[doc = "< 28 PWM0"]
pub const IRQn_Type_PWM0_IRQn: IRQn_Type = 28;
#[doc = "< 29 PDM"]
pub const IRQn_Type_PDM_IRQn: IRQn_Type = 29;
#[doc = "< 32 MWU"]
pub const IRQn_Type_MWU_IRQn: IRQn_Type = 32;
#[doc = "< 33 PWM1"]
pub const IRQn_Type_PWM1_IRQn: IRQn_Type = 33;
#[doc = "< 34 PWM2"]
pub const IRQn_Type_PWM2_IRQn: IRQn_Type = 34;
#[doc = "< 35 SPIM2_SPIS2_SPI2"]
pub const IRQn_Type_SPIM2_SPIS2_SPI2_IRQn: IRQn_Type = 35;
#[doc = "< 36 RTC2"]
pub const IRQn_Type_RTC2_IRQn: IRQn_Type = 36;
#[doc = "< 37 I2S"]
pub const IRQn_Type_I2S_IRQn: IRQn_Type = 37;
#[doc = "< 38 FPU"]
pub const IRQn_Type_FPU_IRQn: IRQn_Type = 38;
#[doc = "< 39 USBD"]
pub const IRQn_Type_USBD_IRQn: IRQn_Type = 39;
#[doc = "< 40 UARTE1"]
pub const IRQn_Type_UARTE1_IRQn: IRQn_Type = 40;
#[doc = "< 41 QSPI"]
pub const IRQn_Type_QSPI_IRQn: IRQn_Type = 41;
#[doc = "< 42 CRYPTOCELL"]
pub const IRQn_Type_CRYPTOCELL_IRQn: IRQn_Type = 42;
#[doc = "< 45 PWM3"]
pub const IRQn_Type_PWM3_IRQn: IRQn_Type = 45;
#[doc = "< 47 SPIM3"]
pub const IRQn_Type_SPIM3_IRQn: IRQn_Type = 47;
#[doc = " @addtogroup Configuration_of_CMSIS\n @{"]
pub type IRQn_Type = ::core::ffi::c_int;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT32 {
    pub v: u32,
}
#[test]
fn bindgen_test_layout_T_UINT32() {
    const UNINIT: ::core::mem::MaybeUninit<T_UINT32> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<T_UINT32>(),
        4usize,
        concat!("Size of: ", stringify!(T_UINT32))
    );
    assert_eq!(
        ::core::mem::align_of::<T_UINT32>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT32))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT32),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT16_WRITE {
    pub v: u16,
}
#[test]
fn bindgen_test_layout_T_UINT16_WRITE() {
    const UNINIT: ::core::mem::MaybeUninit<T_UINT16_WRITE> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<T_UINT16_WRITE>(),
        2usize,
        concat!("Size of: ", stringify!(T_UINT16_WRITE))
    );
    assert_eq!(
        ::core::mem::align_of::<T_UINT16_WRITE>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT16_WRITE))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT16_WRITE),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT16_READ {
    pub v: u16,
}
#[test]
fn bindgen_test_layout_T_UINT16_READ() {
    const UNINIT: ::core::mem::MaybeUninit<T_UINT16_READ> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<T_UINT16_READ>(),
        2usize,
        concat!("Size of: ", stringify!(T_UINT16_READ))
    );
    assert_eq!(
        ::core::mem::align_of::<T_UINT16_READ>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT16_READ))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT16_READ),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT32_WRITE {
    pub v: u32,
}
#[test]
fn bindgen_test_layout_T_UINT32_WRITE() {
    const UNINIT: ::core::mem::MaybeUninit<T_UINT32_WRITE> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<T_UINT32_WRITE>(),
        4usize,
        concat!("Size of: ", stringify!(T_UINT32_WRITE))
    );
    assert_eq!(
        ::core::mem::align_of::<T_UINT32_WRITE>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT32_WRITE))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT32_WRITE),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT32_READ {
    pub v: u32,
}
#[test]
fn bindgen_test_layout_T_UINT32_READ() {
    const UNINIT: ::core::mem::MaybeUninit<T_UINT32_READ> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<T_UINT32_READ>(),
        4usize,
        concat!("Size of: ", stringify!(T_UINT32_READ))
    );
    assert_eq!(
        ::core::mem::align_of::<T_UINT32_READ>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT32_READ))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT32_READ),
            "::",
            stringify!(v)
        )
    );
}
extern "C" {
    #[link_name = "__ISB__extern"]
    pub fn __ISB();
}
extern "C" {
    #[link_name = "__DSB__extern"]
    pub fn __DSB();
}
extern "C" {
    #[link_name = "__DMB__extern"]
    pub fn __DMB();
}
extern "C" {
    #[link_name = "__REV__extern"]
    pub fn __REV(value: u32) -> u32;
}
extern "C" {
    #[link_name = "__REV16__extern"]
    pub fn __REV16(value: u32) -> u32;
}
extern "C" {
    #[link_name = "__REVSH__extern"]
    pub fn __REVSH(value: i16) -> i16;
}
extern "C" {
    #[link_name = "__ROR__extern"]
    pub fn __ROR(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__RBIT__extern"]
    pub fn __RBIT(value: u32) -> u32;
}
extern "C" {
    #[link_name = "__CLZ__extern"]
    pub fn __CLZ(value: u32) -> u8;
}
extern "C" {
    #[link_name = "__LDREXB__extern"]
    pub fn __LDREXB(addr: *mut u8) -> u8;
}
extern "C" {
    #[link_name = "__LDREXH__extern"]
    pub fn __LDREXH(addr: *mut u16) -> u16;
}
extern "C" {
    #[link_name = "__LDREXW__extern"]
    pub fn __LDREXW(addr: *mut u32) -> u32;
}
extern "C" {
    #[link_name = "__STREXB__extern"]
    pub fn __STREXB(value: u8, addr: *mut u8) -> u32;
}
extern "C" {
    #[link_name = "__STREXH__extern"]
    pub fn __STREXH(value: u16, addr: *mut u16) -> u32;
}
extern "C" {
    #[link_name = "__STREXW__extern"]
    pub fn __STREXW(value: u32, addr: *mut u32) -> u32;
}
extern "C" {
    #[link_name = "__CLREX__extern"]
    pub fn __CLREX();
}
extern "C" {
    #[link_name = "__RRX__extern"]
    pub fn __RRX(value: u32) -> u32;
}
extern "C" {
    #[link_name = "__LDRBT__extern"]
    pub fn __LDRBT(ptr: *mut u8) -> u8;
}
extern "C" {
    #[link_name = "__LDRHT__extern"]
    pub fn __LDRHT(ptr: *mut u16) -> u16;
}
extern "C" {
    #[link_name = "__LDRT__extern"]
    pub fn __LDRT(ptr: *mut u32) -> u32;
}
extern "C" {
    #[link_name = "__STRBT__extern"]
    pub fn __STRBT(value: u8, ptr: *mut u8);
}
extern "C" {
    #[link_name = "__STRHT__extern"]
    pub fn __STRHT(value: u16, ptr: *mut u16);
}
extern "C" {
    #[link_name = "__STRT__extern"]
    pub fn __STRT(value: u32, ptr: *mut u32);
}
extern "C" {
    #[link_name = "__enable_irq__extern"]
    pub fn __enable_irq();
}
extern "C" {
    #[link_name = "__disable_irq__extern"]
    pub fn __disable_irq();
}
extern "C" {
    #[link_name = "__get_CONTROL__extern"]
    pub fn __get_CONTROL() -> u32;
}
extern "C" {
    #[link_name = "__set_CONTROL__extern"]
    pub fn __set_CONTROL(control: u32);
}
extern "C" {
    #[link_name = "__get_IPSR__extern"]
    pub fn __get_IPSR() -> u32;
}
extern "C" {
    #[link_name = "__get_APSR__extern"]
    pub fn __get_APSR() -> u32;
}
extern "C" {
    #[link_name = "__get_xPSR__extern"]
    pub fn __get_xPSR() -> u32;
}
extern "C" {
    #[link_name = "__get_PSP__extern"]
    pub fn __get_PSP() -> u32;
}
extern "C" {
    #[link_name = "__set_PSP__extern"]
    pub fn __set_PSP(topOfProcStack: u32);
}
extern "C" {
    #[link_name = "__get_MSP__extern"]
    pub fn __get_MSP() -> u32;
}
extern "C" {
    #[link_name = "__set_MSP__extern"]
    pub fn __set_MSP(topOfMainStack: u32);
}
extern "C" {
    #[link_name = "__get_PRIMASK__extern"]
    pub fn __get_PRIMASK() -> u32;
}
extern "C" {
    #[link_name = "__set_PRIMASK__extern"]
    pub fn __set_PRIMASK(priMask: u32);
}
extern "C" {
    #[link_name = "__enable_fault_irq__extern"]
    pub fn __enable_fault_irq();
}
extern "C" {
    #[link_name = "__disable_fault_irq__extern"]
    pub fn __disable_fault_irq();
}
extern "C" {
    #[link_name = "__get_BASEPRI__extern"]
    pub fn __get_BASEPRI() -> u32;
}
extern "C" {
    #[link_name = "__set_BASEPRI__extern"]
    pub fn __set_BASEPRI(basePri: u32);
}
extern "C" {
    #[link_name = "__set_BASEPRI_MAX__extern"]
    pub fn __set_BASEPRI_MAX(basePri: u32);
}
extern "C" {
    #[link_name = "__get_FAULTMASK__extern"]
    pub fn __get_FAULTMASK() -> u32;
}
extern "C" {
    #[link_name = "__set_FAULTMASK__extern"]
    pub fn __set_FAULTMASK(faultMask: u32);
}
extern "C" {
    #[link_name = "__get_FPSCR__extern"]
    pub fn __get_FPSCR() -> u32;
}
extern "C" {
    #[link_name = "__set_FPSCR__extern"]
    pub fn __set_FPSCR(fpscr: u32);
}
extern "C" {
    #[link_name = "__SADD8__extern"]
    pub fn __SADD8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__QADD8__extern"]
    pub fn __QADD8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SHADD8__extern"]
    pub fn __SHADD8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UADD8__extern"]
    pub fn __UADD8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UQADD8__extern"]
    pub fn __UQADD8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UHADD8__extern"]
    pub fn __UHADD8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SSUB8__extern"]
    pub fn __SSUB8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__QSUB8__extern"]
    pub fn __QSUB8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SHSUB8__extern"]
    pub fn __SHSUB8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__USUB8__extern"]
    pub fn __USUB8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UQSUB8__extern"]
    pub fn __UQSUB8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UHSUB8__extern"]
    pub fn __UHSUB8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SADD16__extern"]
    pub fn __SADD16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__QADD16__extern"]
    pub fn __QADD16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SHADD16__extern"]
    pub fn __SHADD16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UADD16__extern"]
    pub fn __UADD16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UQADD16__extern"]
    pub fn __UQADD16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UHADD16__extern"]
    pub fn __UHADD16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SSUB16__extern"]
    pub fn __SSUB16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__QSUB16__extern"]
    pub fn __QSUB16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SHSUB16__extern"]
    pub fn __SHSUB16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__USUB16__extern"]
    pub fn __USUB16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UQSUB16__extern"]
    pub fn __UQSUB16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UHSUB16__extern"]
    pub fn __UHSUB16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SASX__extern"]
    pub fn __SASX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__QASX__extern"]
    pub fn __QASX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SHASX__extern"]
    pub fn __SHASX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UASX__extern"]
    pub fn __UASX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UQASX__extern"]
    pub fn __UQASX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UHASX__extern"]
    pub fn __UHASX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SSAX__extern"]
    pub fn __SSAX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__QSAX__extern"]
    pub fn __QSAX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SHSAX__extern"]
    pub fn __SHSAX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__USAX__extern"]
    pub fn __USAX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UQSAX__extern"]
    pub fn __UQSAX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__UHSAX__extern"]
    pub fn __UHSAX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__USAD8__extern"]
    pub fn __USAD8(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__USADA8__extern"]
    pub fn __USADA8(op1: u32, op2: u32, op3: u32) -> u32;
}
extern "C" {
    #[link_name = "__UXTB16__extern"]
    pub fn __UXTB16(op1: u32) -> u32;
}
extern "C" {
    #[link_name = "__UXTAB16__extern"]
    pub fn __UXTAB16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SXTB16__extern"]
    pub fn __SXTB16(op1: u32) -> u32;
}
extern "C" {
    #[link_name = "__SXTB16_RORn__extern"]
    pub fn __SXTB16_RORn(op1: u32, rotate: u32) -> u32;
}
extern "C" {
    #[link_name = "__SXTAB16__extern"]
    pub fn __SXTAB16(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SXTAB16_RORn__extern"]
    pub fn __SXTAB16_RORn(op1: u32, op2: u32, rotate: u32) -> u32;
}
extern "C" {
    #[link_name = "__SMUAD__extern"]
    pub fn __SMUAD(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SMUADX__extern"]
    pub fn __SMUADX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SMLAD__extern"]
    pub fn __SMLAD(op1: u32, op2: u32, op3: u32) -> u32;
}
extern "C" {
    #[link_name = "__SMLADX__extern"]
    pub fn __SMLADX(op1: u32, op2: u32, op3: u32) -> u32;
}
extern "C" {
    #[link_name = "__SMLALD__extern"]
    pub fn __SMLALD(op1: u32, op2: u32, acc: u64) -> u64;
}
extern "C" {
    #[link_name = "__SMLALDX__extern"]
    pub fn __SMLALDX(op1: u32, op2: u32, acc: u64) -> u64;
}
extern "C" {
    #[link_name = "__SMUSD__extern"]
    pub fn __SMUSD(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SMUSDX__extern"]
    pub fn __SMUSDX(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__SMLSD__extern"]
    pub fn __SMLSD(op1: u32, op2: u32, op3: u32) -> u32;
}
extern "C" {
    #[link_name = "__SMLSDX__extern"]
    pub fn __SMLSDX(op1: u32, op2: u32, op3: u32) -> u32;
}
extern "C" {
    #[link_name = "__SMLSLD__extern"]
    pub fn __SMLSLD(op1: u32, op2: u32, acc: u64) -> u64;
}
extern "C" {
    #[link_name = "__SMLSLDX__extern"]
    pub fn __SMLSLDX(op1: u32, op2: u32, acc: u64) -> u64;
}
extern "C" {
    #[link_name = "__SEL__extern"]
    pub fn __SEL(op1: u32, op2: u32) -> u32;
}
extern "C" {
    #[link_name = "__QADD__extern"]
    pub fn __QADD(op1: i32, op2: i32) -> i32;
}
extern "C" {
    #[link_name = "__QSUB__extern"]
    pub fn __QSUB(op1: i32, op2: i32) -> i32;
}
extern "C" {
    #[link_name = "__SMMLA__extern"]
    pub fn __SMMLA(op1: i32, op2: i32, op3: i32) -> i32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union APSR_Type {
    pub b: APSR_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct APSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_APSR_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<APSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(APSR_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<APSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(APSR_Type__bindgen_ty_1))
    );
}
impl APSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn GE(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_GE(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn Q(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _reserved0: u32,
        GE: u32,
        _reserved1: u32,
        Q: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let GE: u32 = unsafe { ::core::mem::transmute(GE) };
            GE as u64
        });
        __bindgen_bitfield_unit.set(20usize, 7u8, {
            let _reserved1: u32 = unsafe { ::core::mem::transmute(_reserved1) };
            _reserved1 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let Q: u32 = unsafe { ::core::mem::transmute(Q) };
            Q as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::core::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::core::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::core::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::core::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_APSR_Type() {
    const UNINIT: ::core::mem::MaybeUninit<APSR_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<APSR_Type>(),
        4usize,
        concat!("Size of: ", stringify!(APSR_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<APSR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(APSR_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(APSR_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(APSR_Type),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IPSR_Type {
    pub b: IPSR_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IPSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_IPSR_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<IPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(IPSR_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<IPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(IPSR_Type__bindgen_ty_1))
    );
}
impl IPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ISR: u32, _reserved0: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::core::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_IPSR_Type() {
    const UNINIT: ::core::mem::MaybeUninit<IPSR_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<IPSR_Type>(),
        4usize,
        concat!("Size of: ", stringify!(IPSR_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<IPSR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(IPSR_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IPSR_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IPSR_Type),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xPSR_Type {
    pub b: xPSR_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct xPSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_xPSR_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<xPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(xPSR_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<xPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(xPSR_Type__bindgen_ty_1))
    );
}
impl xPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ICI_IT_1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_ICI_IT_1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn GE(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_GE(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn T(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_T(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ICI_IT_2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ICI_IT_2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn Q(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ISR: u32,
        _reserved0: u32,
        ICI_IT_1: u32,
        GE: u32,
        _reserved1: u32,
        T: u32,
        ICI_IT_2: u32,
        Q: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::core::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let ICI_IT_1: u32 = unsafe { ::core::mem::transmute(ICI_IT_1) };
            ICI_IT_1 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let GE: u32 = unsafe { ::core::mem::transmute(GE) };
            GE as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let _reserved1: u32 = unsafe { ::core::mem::transmute(_reserved1) };
            _reserved1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let T: u32 = unsafe { ::core::mem::transmute(T) };
            T as u64
        });
        __bindgen_bitfield_unit.set(25usize, 2u8, {
            let ICI_IT_2: u32 = unsafe { ::core::mem::transmute(ICI_IT_2) };
            ICI_IT_2 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let Q: u32 = unsafe { ::core::mem::transmute(Q) };
            Q as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::core::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::core::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::core::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::core::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_xPSR_Type() {
    const UNINIT: ::core::mem::MaybeUninit<xPSR_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<xPSR_Type>(),
        4usize,
        concat!("Size of: ", stringify!(xPSR_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<xPSR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(xPSR_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPSR_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPSR_Type),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CONTROL_Type {
    pub b: CONTROL_Type__bindgen_ty_1,
    pub w: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CONTROL_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_CONTROL_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<CONTROL_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(CONTROL_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<CONTROL_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(CONTROL_Type__bindgen_ty_1))
    );
}
impl CONTROL_Type__bindgen_ty_1 {
    #[inline]
    pub fn nPRIV(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nPRIV(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SPSEL(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SPSEL(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn FPCA(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_FPCA(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nPRIV: u32,
        SPSEL: u32,
        FPCA: u32,
        _reserved0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nPRIV: u32 = unsafe { ::core::mem::transmute(nPRIV) };
            nPRIV as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let SPSEL: u32 = unsafe { ::core::mem::transmute(SPSEL) };
            SPSEL as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let FPCA: u32 = unsafe { ::core::mem::transmute(FPCA) };
            FPCA as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_CONTROL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<CONTROL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CONTROL_Type>(),
        4usize,
        concat!("Size of: ", stringify!(CONTROL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<CONTROL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CONTROL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CONTROL_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CONTROL_Type),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVIC_Type {
    pub ISER: [u32; 8usize],
    pub RESERVED0: [u32; 24usize],
    pub ICER: [u32; 8usize],
    pub RESERVED1: [u32; 24usize],
    pub ISPR: [u32; 8usize],
    pub RESERVED2: [u32; 24usize],
    pub ICPR: [u32; 8usize],
    pub RESERVED3: [u32; 24usize],
    pub IABR: [u32; 8usize],
    pub RESERVED4: [u32; 56usize],
    pub IP: [u8; 240usize],
    pub RESERVED5: [u32; 644usize],
    pub STIR: u32,
}
#[test]
fn bindgen_test_layout_NVIC_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NVIC_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NVIC_Type>(),
        3588usize,
        concat!("Size of: ", stringify!(NVIC_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NVIC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NVIC_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ISER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICER) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ICER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISPR) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ISPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICPR) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ICPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IABR) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(IABR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IP) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(IP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STIR) as usize - ptr as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(STIR)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCB_Type {
    pub CPUID: u32,
    pub ICSR: u32,
    pub VTOR: u32,
    pub AIRCR: u32,
    pub SCR: u32,
    pub CCR: u32,
    pub SHP: [u8; 12usize],
    pub SHCSR: u32,
    pub CFSR: u32,
    pub HFSR: u32,
    pub DFSR: u32,
    pub MMFAR: u32,
    pub BFAR: u32,
    pub AFSR: u32,
    pub PFR: [u32; 2usize],
    pub DFR: u32,
    pub ADR: u32,
    pub MMFR: [u32; 4usize],
    pub ISAR: [u32; 5usize],
    pub RESERVED0: [u32; 5usize],
    pub CPACR: u32,
}
#[test]
fn bindgen_test_layout_SCB_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SCB_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SCB_Type>(),
        140usize,
        concat!("Size of: ", stringify!(SCB_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SCB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SCB_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CPUID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CPUID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ICSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VTOR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(VTOR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AIRCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(AIRCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SCR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHP) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SHP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHCSR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SHCSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFSR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CFSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HFSR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(HFSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DFSR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(DFSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMFAR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(MMFAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BFAR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(BFAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFSR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(AFSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PFR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(PFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DFR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(DFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ADR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMFR) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(MMFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISAR) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ISAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CPACR) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CPACR)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCnSCB_Type {
    pub RESERVED0: [u32; 1usize],
    pub ICTR: u32,
    pub ACTLR: u32,
}
#[test]
fn bindgen_test_layout_SCnSCB_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SCnSCB_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SCnSCB_Type>(),
        12usize,
        concat!("Size of: ", stringify!(SCnSCB_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SCnSCB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SCnSCB_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SCnSCB_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SCnSCB_Type),
            "::",
            stringify!(ICTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ACTLR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SCnSCB_Type),
            "::",
            stringify!(ACTLR)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SysTick_Type {
    pub CTRL: u32,
    pub LOAD: u32,
    pub VAL: u32,
    pub CALIB: u32,
}
#[test]
fn bindgen_test_layout_SysTick_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SysTick_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SysTick_Type>(),
        16usize,
        concat!("Size of: ", stringify!(SysTick_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SysTick_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SysTick_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTRL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LOAD) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(LOAD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VAL) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(VAL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CALIB) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(CALIB)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ITM_Type {
    pub PORT: [ITM_Type__bindgen_ty_1; 32usize],
    pub RESERVED0: [u32; 864usize],
    pub TER: u32,
    pub RESERVED1: [u32; 15usize],
    pub TPR: u32,
    pub RESERVED2: [u32; 15usize],
    pub TCR: u32,
    pub RESERVED3: [u32; 32usize],
    pub RESERVED4: [u32; 43usize],
    pub LAR: u32,
    pub LSR: u32,
    pub RESERVED5: [u32; 6usize],
    pub PID4: u32,
    pub PID5: u32,
    pub PID6: u32,
    pub PID7: u32,
    pub PID0: u32,
    pub PID1: u32,
    pub PID2: u32,
    pub PID3: u32,
    pub CID0: u32,
    pub CID1: u32,
    pub CID2: u32,
    pub CID3: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ITM_Type__bindgen_ty_1 {
    pub u8_: u8,
    pub u16_: u16,
    pub u32_: u32,
}
#[test]
fn bindgen_test_layout_ITM_Type__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<ITM_Type__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ITM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ITM_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<ITM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ITM_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).u8_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u8_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).u16_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u16_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).u32_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u32_)
        )
    );
}
#[test]
fn bindgen_test_layout_ITM_Type() {
    const UNINIT: ::core::mem::MaybeUninit<ITM_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ITM_Type>(),
        4096usize,
        concat!("Size of: ", stringify!(ITM_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<ITM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(ITM_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PORT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PORT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TER) as usize - ptr as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        3588usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TPR) as usize - ptr as usize },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        3652usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TCR) as usize - ptr as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        3716usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        3844usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LAR) as usize - ptr as usize },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(LAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LSR) as usize - ptr as usize },
        4020usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(LSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        4024usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID4) as usize - ptr as usize },
        4048usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID5) as usize - ptr as usize },
        4052usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID6) as usize - ptr as usize },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID7) as usize - ptr as usize },
        4060usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID0) as usize - ptr as usize },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID1) as usize - ptr as usize },
        4068usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID2) as usize - ptr as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID3) as usize - ptr as usize },
        4076usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CID0) as usize - ptr as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CID1) as usize - ptr as usize },
        4084usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CID2) as usize - ptr as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CID3) as usize - ptr as usize },
        4092usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DWT_Type {
    pub CTRL: u32,
    pub CYCCNT: u32,
    pub CPICNT: u32,
    pub EXCCNT: u32,
    pub SLEEPCNT: u32,
    pub LSUCNT: u32,
    pub FOLDCNT: u32,
    pub PCSR: u32,
    pub COMP0: u32,
    pub MASK0: u32,
    pub FUNCTION0: u32,
    pub RESERVED0: [u32; 1usize],
    pub COMP1: u32,
    pub MASK1: u32,
    pub FUNCTION1: u32,
    pub RESERVED1: [u32; 1usize],
    pub COMP2: u32,
    pub MASK2: u32,
    pub FUNCTION2: u32,
    pub RESERVED2: [u32; 1usize],
    pub COMP3: u32,
    pub MASK3: u32,
    pub FUNCTION3: u32,
}
#[test]
fn bindgen_test_layout_DWT_Type() {
    const UNINIT: ::core::mem::MaybeUninit<DWT_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DWT_Type>(),
        92usize,
        concat!("Size of: ", stringify!(DWT_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<DWT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(DWT_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTRL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CYCCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(CYCCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CPICNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(CPICNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EXCCNT) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(EXCCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SLEEPCNT) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(SLEEPCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LSUCNT) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(LSUCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FOLDCNT) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FOLDCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PCSR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(PCSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).COMP0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MASK0) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FUNCTION0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).COMP1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MASK1) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FUNCTION1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).COMP2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MASK2) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FUNCTION2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).COMP3) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MASK3) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FUNCTION3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPI_Type {
    pub SSPSR: u32,
    pub CSPSR: u32,
    pub RESERVED0: [u32; 2usize],
    pub ACPR: u32,
    pub RESERVED1: [u32; 55usize],
    pub SPPR: u32,
    pub RESERVED2: [u32; 131usize],
    pub FFSR: u32,
    pub FFCR: u32,
    pub FSCR: u32,
    pub RESERVED3: [u32; 759usize],
    pub TRIGGER: u32,
    pub FIFO0: u32,
    pub ITATBCTR2: u32,
    pub RESERVED4: [u32; 1usize],
    pub ITATBCTR0: u32,
    pub FIFO1: u32,
    pub ITCTRL: u32,
    pub RESERVED5: [u32; 39usize],
    pub CLAIMSET: u32,
    pub CLAIMCLR: u32,
    pub RESERVED7: [u32; 8usize],
    pub DEVID: u32,
    pub DEVTYPE: u32,
}
#[test]
fn bindgen_test_layout_TPI_Type() {
    const UNINIT: ::core::mem::MaybeUninit<TPI_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TPI_Type>(),
        4048usize,
        concat!("Size of: ", stringify!(TPI_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<TPI_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(TPI_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SSPSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(SSPSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSPSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(CSPSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ACPR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ACPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SPPR) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(SPPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FFSR) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FFSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FFCR) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FFCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSCR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FSCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TRIGGER) as usize - ptr as usize },
        3816usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(TRIGGER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FIFO0) as usize - ptr as usize },
        3820usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FIFO0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ITATBCTR2) as usize - ptr as usize },
        3824usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ITATBCTR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        3828usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ITATBCTR0) as usize - ptr as usize },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ITATBCTR0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FIFO1) as usize - ptr as usize },
        3836usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FIFO1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ITCTRL) as usize - ptr as usize },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ITCTRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        3844usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CLAIMSET) as usize - ptr as usize },
        4000usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(CLAIMSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CLAIMCLR) as usize - ptr as usize },
        4004usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(CLAIMCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        4008usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEVID) as usize - ptr as usize },
        4040usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(DEVID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEVTYPE) as usize - ptr as usize },
        4044usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(DEVTYPE)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MPU_Type {
    pub TYPE: u32,
    pub CTRL: u32,
    pub RNR: u32,
    pub RBAR: u32,
    pub RASR: u32,
    pub RBAR_A1: u32,
    pub RASR_A1: u32,
    pub RBAR_A2: u32,
    pub RASR_A2: u32,
    pub RBAR_A3: u32,
    pub RASR_A3: u32,
}
#[test]
fn bindgen_test_layout_MPU_Type() {
    const UNINIT: ::core::mem::MaybeUninit<MPU_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MPU_Type>(),
        44usize,
        concat!("Size of: ", stringify!(MPU_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<MPU_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(MPU_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TYPE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(TYPE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTRL) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RNR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RNR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RBAR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RBAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RASR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RASR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RBAR_A1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RBAR_A1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RASR_A1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RASR_A1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RBAR_A2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RBAR_A2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RASR_A2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RASR_A2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RBAR_A3) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RBAR_A3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RASR_A3) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RASR_A3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FPU_Type {
    pub RESERVED0: [u32; 1usize],
    pub FPCCR: u32,
    pub FPCAR: u32,
    pub FPDSCR: u32,
    pub MVFR0: u32,
    pub MVFR1: u32,
    pub MVFR2: u32,
}
#[test]
fn bindgen_test_layout_FPU_Type() {
    const UNINIT: ::core::mem::MaybeUninit<FPU_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FPU_Type>(),
        28usize,
        concat!("Size of: ", stringify!(FPU_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<FPU_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(FPU_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FPCCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(FPCCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FPCAR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(FPCAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FPDSCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(FPDSCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MVFR0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(MVFR0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MVFR1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(MVFR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MVFR2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(MVFR2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoreDebug_Type {
    pub DHCSR: u32,
    pub DCRSR: u32,
    pub DCRDR: u32,
    pub DEMCR: u32,
}
#[test]
fn bindgen_test_layout_CoreDebug_Type() {
    const UNINIT: ::core::mem::MaybeUninit<CoreDebug_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CoreDebug_Type>(),
        16usize,
        concat!("Size of: ", stringify!(CoreDebug_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<CoreDebug_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CoreDebug_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHCSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DHCSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCRSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DCRSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCRDR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DCRDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEMCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DEMCR)
        )
    );
}
extern "C" {
    #[link_name = "__NVIC_SetPriorityGrouping__extern"]
    pub fn __NVIC_SetPriorityGrouping(PriorityGroup: u32);
}
extern "C" {
    #[link_name = "__NVIC_GetPriorityGrouping__extern"]
    pub fn __NVIC_GetPriorityGrouping() -> u32;
}
extern "C" {
    #[link_name = "__NVIC_EnableIRQ__extern"]
    pub fn __NVIC_EnableIRQ(IRQn: IRQn_Type);
}
extern "C" {
    #[link_name = "__NVIC_GetEnableIRQ__extern"]
    pub fn __NVIC_GetEnableIRQ(IRQn: IRQn_Type) -> u32;
}
extern "C" {
    #[link_name = "__NVIC_DisableIRQ__extern"]
    pub fn __NVIC_DisableIRQ(IRQn: IRQn_Type);
}
extern "C" {
    #[link_name = "__NVIC_GetPendingIRQ__extern"]
    pub fn __NVIC_GetPendingIRQ(IRQn: IRQn_Type) -> u32;
}
extern "C" {
    #[link_name = "__NVIC_SetPendingIRQ__extern"]
    pub fn __NVIC_SetPendingIRQ(IRQn: IRQn_Type);
}
extern "C" {
    #[link_name = "__NVIC_ClearPendingIRQ__extern"]
    pub fn __NVIC_ClearPendingIRQ(IRQn: IRQn_Type);
}
extern "C" {
    #[link_name = "__NVIC_GetActive__extern"]
    pub fn __NVIC_GetActive(IRQn: IRQn_Type) -> u32;
}
extern "C" {
    #[link_name = "__NVIC_SetPriority__extern"]
    pub fn __NVIC_SetPriority(IRQn: IRQn_Type, priority: u32);
}
extern "C" {
    #[link_name = "__NVIC_GetPriority__extern"]
    pub fn __NVIC_GetPriority(IRQn: IRQn_Type) -> u32;
}
extern "C" {
    #[link_name = "NVIC_EncodePriority__extern"]
    pub fn NVIC_EncodePriority(PriorityGroup: u32, PreemptPriority: u32, SubPriority: u32) -> u32;
}
extern "C" {
    #[link_name = "NVIC_DecodePriority__extern"]
    pub fn NVIC_DecodePriority(
        Priority: u32,
        PriorityGroup: u32,
        pPreemptPriority: *mut u32,
        pSubPriority: *mut u32,
    );
}
extern "C" {
    #[link_name = "__NVIC_SetVector__extern"]
    pub fn __NVIC_SetVector(IRQn: IRQn_Type, vector: u32);
}
extern "C" {
    #[link_name = "__NVIC_GetVector__extern"]
    pub fn __NVIC_GetVector(IRQn: IRQn_Type) -> u32;
}
extern "C" {
    #[link_name = "__NVIC_SystemReset__extern"]
    pub fn __NVIC_SystemReset() -> !;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARM_MPU_Region_t {
    pub RBAR: u32,
    pub RASR: u32,
}
#[test]
fn bindgen_test_layout_ARM_MPU_Region_t() {
    const UNINIT: ::core::mem::MaybeUninit<ARM_MPU_Region_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ARM_MPU_Region_t>(),
        8usize,
        concat!("Size of: ", stringify!(ARM_MPU_Region_t))
    );
    assert_eq!(
        ::core::mem::align_of::<ARM_MPU_Region_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ARM_MPU_Region_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RBAR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ARM_MPU_Region_t),
            "::",
            stringify!(RBAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RASR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ARM_MPU_Region_t),
            "::",
            stringify!(RASR)
        )
    );
}
extern "C" {
    #[link_name = "ARM_MPU_Enable__extern"]
    pub fn ARM_MPU_Enable(MPU_Control: u32);
}
extern "C" {
    #[link_name = "ARM_MPU_Disable__extern"]
    pub fn ARM_MPU_Disable();
}
extern "C" {
    #[link_name = "ARM_MPU_ClrRegion__extern"]
    pub fn ARM_MPU_ClrRegion(rnr: u32);
}
extern "C" {
    #[link_name = "ARM_MPU_SetRegion__extern"]
    pub fn ARM_MPU_SetRegion(rbar: u32, rasr: u32);
}
extern "C" {
    #[link_name = "ARM_MPU_SetRegionEx__extern"]
    pub fn ARM_MPU_SetRegionEx(rnr: u32, rbar: u32, rasr: u32);
}
extern "C" {
    #[link_name = "ARM_MPU_OrderedMemcpy__extern"]
    pub fn ARM_MPU_OrderedMemcpy(dst: *mut u32, src: *const u32, len: u32);
}
extern "C" {
    #[link_name = "ARM_MPU_Load__extern"]
    pub fn ARM_MPU_Load(table: *const ARM_MPU_Region_t, cnt: u32);
}
extern "C" {
    #[link_name = "SCB_GetFPUType__extern"]
    pub fn SCB_GetFPUType() -> u32;
}
extern "C" {
    #[link_name = "SysTick_Config__extern"]
    pub fn SysTick_Config(ticks: u32) -> u32;
}
extern "C" {
    pub static mut ITM_RxBuffer: i32;
}
extern "C" {
    #[link_name = "ITM_SendChar__extern"]
    pub fn ITM_SendChar(ch: u32) -> u32;
}
extern "C" {
    #[link_name = "ITM_ReceiveChar__extern"]
    pub fn ITM_ReceiveChar() -> i32;
}
extern "C" {
    #[link_name = "ITM_CheckChar__extern"]
    pub fn ITM_CheckChar() -> i32;
}
#[doc = "\\brief Exception / Interrupt Handler Function Prototype"]
pub type VECTOR_TABLE_Type = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[doc = "\\brief System Clock Frequency (Core Clock)"]
    pub static mut SystemCoreClock: u32;
}
extern "C" {
    #[doc = "\\brief Setup the microcontroller system.\nInitialize the System and update the SystemCoreClock variable."]
    pub fn SystemInit();
}
extern "C" {
    #[doc = "\\brief  Update SystemCoreClock variable.\nUpdates the SystemCoreClock with current core Clock retrieved from cpu registers."]
    pub fn SystemCoreClockUpdate();
}
#[doc = " @brief FICR_INFO [INFO] (Device info)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FICR_INFO_Type {
    #[doc = "< (@ 0x00000000) Part code"]
    pub PART: u32,
    #[doc = "< (@ 0x00000004) Build code (hardware version and production configuration)"]
    pub VARIANT: u32,
    #[doc = "< (@ 0x00000008) Package option"]
    pub PACKAGE: u32,
    #[doc = "< (@ 0x0000000C) RAM variant"]
    pub RAM: u32,
    #[doc = "< (@ 0x00000010) Flash variant"]
    pub FLASH: u32,
}
#[test]
fn bindgen_test_layout_FICR_INFO_Type() {
    const UNINIT: ::core::mem::MaybeUninit<FICR_INFO_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FICR_INFO_Type>(),
        20usize,
        concat!("Size of: ", stringify!(FICR_INFO_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<FICR_INFO_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(FICR_INFO_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PART) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_INFO_Type),
            "::",
            stringify!(PART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VARIANT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_INFO_Type),
            "::",
            stringify!(VARIANT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PACKAGE) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_INFO_Type),
            "::",
            stringify!(PACKAGE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RAM) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_INFO_Type),
            "::",
            stringify!(RAM)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FLASH) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_INFO_Type),
            "::",
            stringify!(FLASH)
        )
    );
}
#[doc = " @brief FICR_TEMP [TEMP] (Registers storing factory TEMP module linearization coefficients)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FICR_TEMP_Type {
    #[doc = "< (@ 0x00000000) Slope definition A0"]
    pub A0: u32,
    #[doc = "< (@ 0x00000004) Slope definition A1"]
    pub A1: u32,
    #[doc = "< (@ 0x00000008) Slope definition A2"]
    pub A2: u32,
    #[doc = "< (@ 0x0000000C) Slope definition A3"]
    pub A3: u32,
    #[doc = "< (@ 0x00000010) Slope definition A4"]
    pub A4: u32,
    #[doc = "< (@ 0x00000014) Slope definition A5"]
    pub A5: u32,
    #[doc = "< (@ 0x00000018) Y-intercept B0"]
    pub B0: u32,
    #[doc = "< (@ 0x0000001C) Y-intercept B1"]
    pub B1: u32,
    #[doc = "< (@ 0x00000020) Y-intercept B2"]
    pub B2: u32,
    #[doc = "< (@ 0x00000024) Y-intercept B3"]
    pub B3: u32,
    #[doc = "< (@ 0x00000028) Y-intercept B4"]
    pub B4: u32,
    #[doc = "< (@ 0x0000002C) Y-intercept B5"]
    pub B5: u32,
    #[doc = "< (@ 0x00000030) Segment end T0"]
    pub T0: u32,
    #[doc = "< (@ 0x00000034) Segment end T1"]
    pub T1: u32,
    #[doc = "< (@ 0x00000038) Segment end T2"]
    pub T2: u32,
    #[doc = "< (@ 0x0000003C) Segment end T3"]
    pub T3: u32,
    #[doc = "< (@ 0x00000040) Segment end T4"]
    pub T4: u32,
}
#[test]
fn bindgen_test_layout_FICR_TEMP_Type() {
    const UNINIT: ::core::mem::MaybeUninit<FICR_TEMP_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FICR_TEMP_Type>(),
        68usize,
        concat!("Size of: ", stringify!(FICR_TEMP_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<FICR_TEMP_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(FICR_TEMP_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(A0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(A1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(A2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(A3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(A4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(A5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B0) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(B0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B1) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(B1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(B2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B3) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(B3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B4) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(B4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B5) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(B5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).T0) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(T0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).T1) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(T1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).T2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(T2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).T3) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(T3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).T4) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TEMP_Type),
            "::",
            stringify!(T4)
        )
    );
}
#[doc = " @brief FICR_NFC [NFC] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FICR_NFC_Type {
    #[doc = "< (@ 0x00000000) Default header for NFC tag. Software can read\nthese values to populate NFCID1_3RD_LAST,\nNFCID1_2ND_LAST, and NFCID1_LAST."]
    pub TAGHEADER0: u32,
    #[doc = "< (@ 0x00000004) Default header for NFC tag. Software can read\nthese values to populate NFCID1_3RD_LAST,\nNFCID1_2ND_LAST, and NFCID1_LAST."]
    pub TAGHEADER1: u32,
    #[doc = "< (@ 0x00000008) Default header for NFC tag. Software can read\nthese values to populate NFCID1_3RD_LAST,\nNFCID1_2ND_LAST, and NFCID1_LAST."]
    pub TAGHEADER2: u32,
    #[doc = "< (@ 0x0000000C) Default header for NFC tag. Software can read\nthese values to populate NFCID1_3RD_LAST,\nNFCID1_2ND_LAST, and NFCID1_LAST."]
    pub TAGHEADER3: u32,
}
#[test]
fn bindgen_test_layout_FICR_NFC_Type() {
    const UNINIT: ::core::mem::MaybeUninit<FICR_NFC_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FICR_NFC_Type>(),
        16usize,
        concat!("Size of: ", stringify!(FICR_NFC_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<FICR_NFC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(FICR_NFC_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TAGHEADER0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_NFC_Type),
            "::",
            stringify!(TAGHEADER0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TAGHEADER1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_NFC_Type),
            "::",
            stringify!(TAGHEADER1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TAGHEADER2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_NFC_Type),
            "::",
            stringify!(TAGHEADER2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TAGHEADER3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_NFC_Type),
            "::",
            stringify!(TAGHEADER3)
        )
    );
}
#[doc = " @brief FICR_TRNG90B [TRNG90B] (NIST800-90B RNG calibration data)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FICR_TRNG90B_Type {
    #[doc = "< (@ 0x00000000) Amount of bytes for the required entropy bits"]
    pub BYTES: u32,
    #[doc = "< (@ 0x00000004) Repetition counter cutoff"]
    pub RCCUTOFF: u32,
    #[doc = "< (@ 0x00000008) Adaptive proportion cutoff"]
    pub APCUTOFF: u32,
    #[doc = "< (@ 0x0000000C) Amount of bytes for the startup tests"]
    pub STARTUP: u32,
    #[doc = "< (@ 0x00000010) Sample count for ring oscillator 1"]
    pub ROSC1: u32,
    #[doc = "< (@ 0x00000014) Sample count for ring oscillator 2"]
    pub ROSC2: u32,
    #[doc = "< (@ 0x00000018) Sample count for ring oscillator 3"]
    pub ROSC3: u32,
    #[doc = "< (@ 0x0000001C) Sample count for ring oscillator 4"]
    pub ROSC4: u32,
}
#[test]
fn bindgen_test_layout_FICR_TRNG90B_Type() {
    const UNINIT: ::core::mem::MaybeUninit<FICR_TRNG90B_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FICR_TRNG90B_Type>(),
        32usize,
        concat!("Size of: ", stringify!(FICR_TRNG90B_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<FICR_TRNG90B_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(FICR_TRNG90B_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BYTES) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TRNG90B_Type),
            "::",
            stringify!(BYTES)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RCCUTOFF) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TRNG90B_Type),
            "::",
            stringify!(RCCUTOFF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).APCUTOFF) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TRNG90B_Type),
            "::",
            stringify!(APCUTOFF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STARTUP) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TRNG90B_Type),
            "::",
            stringify!(STARTUP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ROSC1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TRNG90B_Type),
            "::",
            stringify!(ROSC1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ROSC2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TRNG90B_Type),
            "::",
            stringify!(ROSC2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ROSC3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TRNG90B_Type),
            "::",
            stringify!(ROSC3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ROSC4) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FICR_TRNG90B_Type),
            "::",
            stringify!(ROSC4)
        )
    );
}
#[doc = " @brief POWER_RAM [RAM] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct POWER_RAM_Type {
    #[doc = "< (@ 0x00000000) Description cluster: RAMn power control register"]
    pub POWER: u32,
    #[doc = "< (@ 0x00000004) Description cluster: RAMn power control set register"]
    pub POWERSET: u32,
    #[doc = "< (@ 0x00000008) Description cluster: RAMn power control clear\nregister"]
    pub POWERCLR: u32,
    pub RESERVED: u32,
}
#[test]
fn bindgen_test_layout_POWER_RAM_Type() {
    const UNINIT: ::core::mem::MaybeUninit<POWER_RAM_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<POWER_RAM_Type>(),
        16usize,
        concat!("Size of: ", stringify!(POWER_RAM_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<POWER_RAM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(POWER_RAM_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).POWER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(POWER_RAM_Type),
            "::",
            stringify!(POWER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).POWERSET) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(POWER_RAM_Type),
            "::",
            stringify!(POWERSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).POWERCLR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(POWER_RAM_Type),
            "::",
            stringify!(POWERCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(POWER_RAM_Type),
            "::",
            stringify!(RESERVED)
        )
    );
}
#[doc = " @brief UART_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UART_PSEL_Type {
    #[doc = "< (@ 0x00000000) Pin select for RTS"]
    pub RTS: u32,
    #[doc = "< (@ 0x00000004) Pin select for TXD"]
    pub TXD: u32,
    #[doc = "< (@ 0x00000008) Pin select for CTS"]
    pub CTS: u32,
    #[doc = "< (@ 0x0000000C) Pin select for RXD"]
    pub RXD: u32,
}
#[test]
fn bindgen_test_layout_UART_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<UART_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<UART_PSEL_Type>(),
        16usize,
        concat!("Size of: ", stringify!(UART_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<UART_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(UART_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RTS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_PSEL_Type),
            "::",
            stringify!(RTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_PSEL_Type),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTS) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_PSEL_Type),
            "::",
            stringify!(CTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_PSEL_Type),
            "::",
            stringify!(RXD)
        )
    );
}
#[doc = " @brief UARTE_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UARTE_PSEL_Type {
    #[doc = "< (@ 0x00000000) Pin select for RTS signal"]
    pub RTS: u32,
    #[doc = "< (@ 0x00000004) Pin select for TXD signal"]
    pub TXD: u32,
    #[doc = "< (@ 0x00000008) Pin select for CTS signal"]
    pub CTS: u32,
    #[doc = "< (@ 0x0000000C) Pin select for RXD signal"]
    pub RXD: u32,
}
#[test]
fn bindgen_test_layout_UARTE_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<UARTE_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<UARTE_PSEL_Type>(),
        16usize,
        concat!("Size of: ", stringify!(UARTE_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<UARTE_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(UARTE_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RTS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UARTE_PSEL_Type),
            "::",
            stringify!(RTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UARTE_PSEL_Type),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTS) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UARTE_PSEL_Type),
            "::",
            stringify!(CTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UARTE_PSEL_Type),
            "::",
            stringify!(RXD)
        )
    );
}
#[doc = " @brief UARTE_RXD [RXD] (RXD EasyDMA channel)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UARTE_RXD_Type {
    #[doc = "< (@ 0x00000000) Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Maximum number of bytes in receive buffer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of bytes transferred in the last transaction"]
    pub AMOUNT: u32,
}
#[test]
fn bindgen_test_layout_UARTE_RXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<UARTE_RXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<UARTE_RXD_Type>(),
        12usize,
        concat!("Size of: ", stringify!(UARTE_RXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<UARTE_RXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(UARTE_RXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UARTE_RXD_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UARTE_RXD_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UARTE_RXD_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
}
#[doc = " @brief UARTE_TXD [TXD] (TXD EasyDMA channel)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UARTE_TXD_Type {
    #[doc = "< (@ 0x00000000) Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Maximum number of bytes in transmit buffer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of bytes transferred in the last transaction"]
    pub AMOUNT: u32,
}
#[test]
fn bindgen_test_layout_UARTE_TXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<UARTE_TXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<UARTE_TXD_Type>(),
        12usize,
        concat!("Size of: ", stringify!(UARTE_TXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<UARTE_TXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(UARTE_TXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UARTE_TXD_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UARTE_TXD_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UARTE_TXD_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
}
#[doc = " @brief SPI_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPI_PSEL_Type {
    #[doc = "< (@ 0x00000000) Pin select for SCK"]
    pub SCK: u32,
    #[doc = "< (@ 0x00000004) Pin select for MOSI signal"]
    pub MOSI: u32,
    #[doc = "< (@ 0x00000008) Pin select for MISO signal"]
    pub MISO: u32,
}
#[test]
fn bindgen_test_layout_SPI_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SPI_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPI_PSEL_Type>(),
        12usize,
        concat!("Size of: ", stringify!(SPI_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SPI_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SPI_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SCK) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_PSEL_Type),
            "::",
            stringify!(SCK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MOSI) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_PSEL_Type),
            "::",
            stringify!(MOSI)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MISO) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_PSEL_Type),
            "::",
            stringify!(MISO)
        )
    );
}
#[doc = " @brief SPIM_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPIM_PSEL_Type {
    #[doc = "< (@ 0x00000000) Pin select for SCK"]
    pub SCK: u32,
    #[doc = "< (@ 0x00000004) Pin select for MOSI signal"]
    pub MOSI: u32,
    #[doc = "< (@ 0x00000008) Pin select for MISO signal"]
    pub MISO: u32,
    #[doc = "< (@ 0x0000000C) Pin select for CSN"]
    pub CSN: u32,
}
#[test]
fn bindgen_test_layout_SPIM_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SPIM_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPIM_PSEL_Type>(),
        16usize,
        concat!("Size of: ", stringify!(SPIM_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SPIM_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SPIM_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SCK) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_PSEL_Type),
            "::",
            stringify!(SCK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MOSI) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_PSEL_Type),
            "::",
            stringify!(MOSI)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MISO) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_PSEL_Type),
            "::",
            stringify!(MISO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSN) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_PSEL_Type),
            "::",
            stringify!(CSN)
        )
    );
}
#[doc = " @brief SPIM_RXD [RXD] (RXD EasyDMA channel)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPIM_RXD_Type {
    #[doc = "< (@ 0x00000000) Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Maximum number of bytes in receive buffer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of bytes transferred in the last transaction"]
    pub AMOUNT: u32,
    #[doc = "< (@ 0x0000000C) EasyDMA list type"]
    pub LIST: u32,
}
#[test]
fn bindgen_test_layout_SPIM_RXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SPIM_RXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPIM_RXD_Type>(),
        16usize,
        concat!("Size of: ", stringify!(SPIM_RXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SPIM_RXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SPIM_RXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_RXD_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_RXD_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_RXD_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIST) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_RXD_Type),
            "::",
            stringify!(LIST)
        )
    );
}
#[doc = " @brief SPIM_TXD [TXD] (TXD EasyDMA channel)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPIM_TXD_Type {
    #[doc = "< (@ 0x00000000) Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Number of bytes in transmit buffer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of bytes transferred in the last transaction"]
    pub AMOUNT: u32,
    #[doc = "< (@ 0x0000000C) EasyDMA list type"]
    pub LIST: u32,
}
#[test]
fn bindgen_test_layout_SPIM_TXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SPIM_TXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPIM_TXD_Type>(),
        16usize,
        concat!("Size of: ", stringify!(SPIM_TXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SPIM_TXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SPIM_TXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_TXD_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_TXD_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_TXD_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIST) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_TXD_Type),
            "::",
            stringify!(LIST)
        )
    );
}
#[doc = " @brief SPIM_IFTIMING [IFTIMING] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPIM_IFTIMING_Type {
    #[doc = "< (@ 0x00000000) Sample delay for input serial data on MISO"]
    pub RXDELAY: u32,
    #[doc = "< (@ 0x00000004) Minimum duration between edge of CSN and edge\nof SCK and minimum duration CSN must stay\nhigh between transactions"]
    pub CSNDUR: u32,
}
#[test]
fn bindgen_test_layout_SPIM_IFTIMING_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SPIM_IFTIMING_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPIM_IFTIMING_Type>(),
        8usize,
        concat!("Size of: ", stringify!(SPIM_IFTIMING_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SPIM_IFTIMING_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SPIM_IFTIMING_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXDELAY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_IFTIMING_Type),
            "::",
            stringify!(RXDELAY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSNDUR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIM_IFTIMING_Type),
            "::",
            stringify!(CSNDUR)
        )
    );
}
#[doc = " @brief SPIS_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPIS_PSEL_Type {
    #[doc = "< (@ 0x00000000) Pin select for SCK"]
    pub SCK: u32,
    #[doc = "< (@ 0x00000004) Pin select for MISO signal"]
    pub MISO: u32,
    #[doc = "< (@ 0x00000008) Pin select for MOSI signal"]
    pub MOSI: u32,
    #[doc = "< (@ 0x0000000C) Pin select for CSN signal"]
    pub CSN: u32,
}
#[test]
fn bindgen_test_layout_SPIS_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SPIS_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPIS_PSEL_Type>(),
        16usize,
        concat!("Size of: ", stringify!(SPIS_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SPIS_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SPIS_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SCK) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIS_PSEL_Type),
            "::",
            stringify!(SCK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MISO) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIS_PSEL_Type),
            "::",
            stringify!(MISO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MOSI) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIS_PSEL_Type),
            "::",
            stringify!(MOSI)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSN) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIS_PSEL_Type),
            "::",
            stringify!(CSN)
        )
    );
}
#[doc = " @brief SPIS_RXD [RXD] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPIS_RXD_Type {
    #[doc = "< (@ 0x00000000) RXD data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Maximum number of bytes in receive buffer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of bytes received in last granted transaction"]
    pub AMOUNT: u32,
    #[doc = "< (@ 0x0000000C) EasyDMA list type"]
    pub LIST: u32,
}
#[test]
fn bindgen_test_layout_SPIS_RXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SPIS_RXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPIS_RXD_Type>(),
        16usize,
        concat!("Size of: ", stringify!(SPIS_RXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SPIS_RXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SPIS_RXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIS_RXD_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIS_RXD_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIS_RXD_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIST) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIS_RXD_Type),
            "::",
            stringify!(LIST)
        )
    );
}
#[doc = " @brief SPIS_TXD [TXD] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPIS_TXD_Type {
    #[doc = "< (@ 0x00000000) TXD data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Maximum number of bytes in transmit buffer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of bytes transmitted in last granted transaction"]
    pub AMOUNT: u32,
    #[doc = "< (@ 0x0000000C) EasyDMA list type"]
    pub LIST: u32,
}
#[test]
fn bindgen_test_layout_SPIS_TXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SPIS_TXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPIS_TXD_Type>(),
        16usize,
        concat!("Size of: ", stringify!(SPIS_TXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SPIS_TXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SPIS_TXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIS_TXD_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIS_TXD_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIS_TXD_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIST) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPIS_TXD_Type),
            "::",
            stringify!(LIST)
        )
    );
}
#[doc = " @brief TWI_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TWI_PSEL_Type {
    #[doc = "< (@ 0x00000000) Pin select for SCL"]
    pub SCL: u32,
    #[doc = "< (@ 0x00000004) Pin select for SDA"]
    pub SDA: u32,
}
#[test]
fn bindgen_test_layout_TWI_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<TWI_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TWI_PSEL_Type>(),
        8usize,
        concat!("Size of: ", stringify!(TWI_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<TWI_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(TWI_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SCL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TWI_PSEL_Type),
            "::",
            stringify!(SCL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDA) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TWI_PSEL_Type),
            "::",
            stringify!(SDA)
        )
    );
}
#[doc = " @brief TWIM_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TWIM_PSEL_Type {
    #[doc = "< (@ 0x00000000) Pin select for SCL signal"]
    pub SCL: u32,
    #[doc = "< (@ 0x00000004) Pin select for SDA signal"]
    pub SDA: u32,
}
#[test]
fn bindgen_test_layout_TWIM_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<TWIM_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TWIM_PSEL_Type>(),
        8usize,
        concat!("Size of: ", stringify!(TWIM_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<TWIM_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(TWIM_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SCL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIM_PSEL_Type),
            "::",
            stringify!(SCL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDA) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIM_PSEL_Type),
            "::",
            stringify!(SDA)
        )
    );
}
#[doc = " @brief TWIM_RXD [RXD] (RXD EasyDMA channel)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TWIM_RXD_Type {
    #[doc = "< (@ 0x00000000) Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Maximum number of bytes in receive buffer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of bytes transferred in the last transaction"]
    pub AMOUNT: u32,
    #[doc = "< (@ 0x0000000C) EasyDMA list type"]
    pub LIST: u32,
}
#[test]
fn bindgen_test_layout_TWIM_RXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<TWIM_RXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TWIM_RXD_Type>(),
        16usize,
        concat!("Size of: ", stringify!(TWIM_RXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<TWIM_RXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(TWIM_RXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIM_RXD_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIM_RXD_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIM_RXD_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIST) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIM_RXD_Type),
            "::",
            stringify!(LIST)
        )
    );
}
#[doc = " @brief TWIM_TXD [TXD] (TXD EasyDMA channel)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TWIM_TXD_Type {
    #[doc = "< (@ 0x00000000) Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Maximum number of bytes in transmit buffer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of bytes transferred in the last transaction"]
    pub AMOUNT: u32,
    #[doc = "< (@ 0x0000000C) EasyDMA list type"]
    pub LIST: u32,
}
#[test]
fn bindgen_test_layout_TWIM_TXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<TWIM_TXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TWIM_TXD_Type>(),
        16usize,
        concat!("Size of: ", stringify!(TWIM_TXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<TWIM_TXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(TWIM_TXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIM_TXD_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIM_TXD_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIM_TXD_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIST) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIM_TXD_Type),
            "::",
            stringify!(LIST)
        )
    );
}
#[doc = " @brief TWIS_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TWIS_PSEL_Type {
    #[doc = "< (@ 0x00000000) Pin select for SCL signal"]
    pub SCL: u32,
    #[doc = "< (@ 0x00000004) Pin select for SDA signal"]
    pub SDA: u32,
}
#[test]
fn bindgen_test_layout_TWIS_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<TWIS_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TWIS_PSEL_Type>(),
        8usize,
        concat!("Size of: ", stringify!(TWIS_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<TWIS_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(TWIS_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SCL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIS_PSEL_Type),
            "::",
            stringify!(SCL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDA) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIS_PSEL_Type),
            "::",
            stringify!(SDA)
        )
    );
}
#[doc = " @brief TWIS_RXD [RXD] (RXD EasyDMA channel)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TWIS_RXD_Type {
    #[doc = "< (@ 0x00000000) RXD Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Maximum number of bytes in RXD buffer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of bytes transferred in the last RXD transaction"]
    pub AMOUNT: u32,
    #[doc = "< (@ 0x0000000C) EasyDMA list type"]
    pub LIST: u32,
}
#[test]
fn bindgen_test_layout_TWIS_RXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<TWIS_RXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TWIS_RXD_Type>(),
        16usize,
        concat!("Size of: ", stringify!(TWIS_RXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<TWIS_RXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(TWIS_RXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIS_RXD_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIS_RXD_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIS_RXD_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIST) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIS_RXD_Type),
            "::",
            stringify!(LIST)
        )
    );
}
#[doc = " @brief TWIS_TXD [TXD] (TXD EasyDMA channel)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TWIS_TXD_Type {
    #[doc = "< (@ 0x00000000) TXD Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Maximum number of bytes in TXD buffer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of bytes transferred in the last TXD transaction"]
    pub AMOUNT: u32,
    #[doc = "< (@ 0x0000000C) EasyDMA list type"]
    pub LIST: u32,
}
#[test]
fn bindgen_test_layout_TWIS_TXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<TWIS_TXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TWIS_TXD_Type>(),
        16usize,
        concat!("Size of: ", stringify!(TWIS_TXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<TWIS_TXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(TWIS_TXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIS_TXD_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIS_TXD_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIS_TXD_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIST) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TWIS_TXD_Type),
            "::",
            stringify!(LIST)
        )
    );
}
#[doc = " @brief NFCT_FRAMESTATUS [FRAMESTATUS] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NFCT_FRAMESTATUS_Type {
    #[doc = "< (@ 0x00000000) Result of last incoming frame"]
    pub RX: u32,
}
#[test]
fn bindgen_test_layout_NFCT_FRAMESTATUS_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NFCT_FRAMESTATUS_Type> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NFCT_FRAMESTATUS_Type>(),
        4usize,
        concat!("Size of: ", stringify!(NFCT_FRAMESTATUS_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NFCT_FRAMESTATUS_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NFCT_FRAMESTATUS_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NFCT_FRAMESTATUS_Type),
            "::",
            stringify!(RX)
        )
    );
}
#[doc = " @brief NFCT_TXD [TXD] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NFCT_TXD_Type {
    #[doc = "< (@ 0x00000000) Configuration of outgoing frames"]
    pub FRAMECONFIG: u32,
    #[doc = "< (@ 0x00000004) Size of outgoing frame"]
    pub AMOUNT: u32,
}
#[test]
fn bindgen_test_layout_NFCT_TXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NFCT_TXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NFCT_TXD_Type>(),
        8usize,
        concat!("Size of: ", stringify!(NFCT_TXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NFCT_TXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NFCT_TXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FRAMECONFIG) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NFCT_TXD_Type),
            "::",
            stringify!(FRAMECONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NFCT_TXD_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
}
#[doc = " @brief NFCT_RXD [RXD] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NFCT_RXD_Type {
    #[doc = "< (@ 0x00000000) Configuration of incoming frames"]
    pub FRAMECONFIG: u32,
    #[doc = "< (@ 0x00000004) Size of last incoming frame"]
    pub AMOUNT: u32,
}
#[test]
fn bindgen_test_layout_NFCT_RXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NFCT_RXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NFCT_RXD_Type>(),
        8usize,
        concat!("Size of: ", stringify!(NFCT_RXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NFCT_RXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NFCT_RXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FRAMECONFIG) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NFCT_RXD_Type),
            "::",
            stringify!(FRAMECONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NFCT_RXD_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
}
#[doc = " @brief SAADC_EVENTS_CH [EVENTS_CH] (Peripheral events.)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SAADC_EVENTS_CH_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Last result is equal or\nabove CH[n].LIMIT.HIGH"]
    pub LIMITH: u32,
    #[doc = "< (@ 0x00000004) Description cluster: Last result is equal or\nbelow CH[n].LIMIT.LOW"]
    pub LIMITL: u32,
}
#[test]
fn bindgen_test_layout_SAADC_EVENTS_CH_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SAADC_EVENTS_CH_Type> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SAADC_EVENTS_CH_Type>(),
        8usize,
        concat!("Size of: ", stringify!(SAADC_EVENTS_CH_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SAADC_EVENTS_CH_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SAADC_EVENTS_CH_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIMITH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SAADC_EVENTS_CH_Type),
            "::",
            stringify!(LIMITH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIMITL) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SAADC_EVENTS_CH_Type),
            "::",
            stringify!(LIMITL)
        )
    );
}
#[doc = " @brief SAADC_CH [CH] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SAADC_CH_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Input positive pin selection\nfor CH[n]"]
    pub PSELP: u32,
    #[doc = "< (@ 0x00000004) Description cluster: Input negative pin selection\nfor CH[n]"]
    pub PSELN: u32,
    #[doc = "< (@ 0x00000008) Description cluster: Input configuration for\nCH[n]"]
    pub CONFIG: u32,
    #[doc = "< (@ 0x0000000C) Description cluster: High/low limits for event\nmonitoring of a channel"]
    pub LIMIT: u32,
}
#[test]
fn bindgen_test_layout_SAADC_CH_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SAADC_CH_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SAADC_CH_Type>(),
        16usize,
        concat!("Size of: ", stringify!(SAADC_CH_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SAADC_CH_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SAADC_CH_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSELP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SAADC_CH_Type),
            "::",
            stringify!(PSELP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSELN) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SAADC_CH_Type),
            "::",
            stringify!(PSELN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFIG) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SAADC_CH_Type),
            "::",
            stringify!(CONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LIMIT) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SAADC_CH_Type),
            "::",
            stringify!(LIMIT)
        )
    );
}
#[doc = " @brief SAADC_RESULT [RESULT] (RESULT EasyDMA channel)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SAADC_RESULT_Type {
    #[doc = "< (@ 0x00000000) Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Maximum number of 16-bit samples to be written\nto output RAM buffer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of 16-bit samples written to output RAM\nbuffer since the previous START task"]
    pub AMOUNT: u32,
}
#[test]
fn bindgen_test_layout_SAADC_RESULT_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SAADC_RESULT_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SAADC_RESULT_Type>(),
        12usize,
        concat!("Size of: ", stringify!(SAADC_RESULT_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SAADC_RESULT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SAADC_RESULT_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SAADC_RESULT_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SAADC_RESULT_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SAADC_RESULT_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
}
#[doc = " @brief QDEC_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QDEC_PSEL_Type {
    #[doc = "< (@ 0x00000000) Pin select for LED signal"]
    pub LED: u32,
    #[doc = "< (@ 0x00000004) Pin select for A signal"]
    pub A: u32,
    #[doc = "< (@ 0x00000008) Pin select for B signal"]
    pub B: u32,
}
#[test]
fn bindgen_test_layout_QDEC_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<QDEC_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<QDEC_PSEL_Type>(),
        12usize,
        concat!("Size of: ", stringify!(QDEC_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<QDEC_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(QDEC_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QDEC_PSEL_Type),
            "::",
            stringify!(LED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(QDEC_PSEL_Type),
            "::",
            stringify!(A)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QDEC_PSEL_Type),
            "::",
            stringify!(B)
        )
    );
}
#[doc = " @brief PWM_SEQ [SEQ] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWM_SEQ_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Beginning address in RAM\nof this sequence"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Description cluster: Number of values (duty cycles)\nin this sequence"]
    pub CNT: u32,
    #[doc = "< (@ 0x00000008) Description cluster: Number of additional PWM\nperiods between samples loaded into compare\nregister"]
    pub REFRESH: u32,
    #[doc = "< (@ 0x0000000C) Description cluster: Time added after the sequence"]
    pub ENDDELAY: u32,
    pub RESERVED: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_PWM_SEQ_Type() {
    const UNINIT: ::core::mem::MaybeUninit<PWM_SEQ_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PWM_SEQ_Type>(),
        32usize,
        concat!("Size of: ", stringify!(PWM_SEQ_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<PWM_SEQ_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(PWM_SEQ_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PWM_SEQ_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PWM_SEQ_Type),
            "::",
            stringify!(CNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).REFRESH) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PWM_SEQ_Type),
            "::",
            stringify!(REFRESH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENDDELAY) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PWM_SEQ_Type),
            "::",
            stringify!(ENDDELAY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PWM_SEQ_Type),
            "::",
            stringify!(RESERVED)
        )
    );
}
#[doc = " @brief PWM_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWM_PSEL_Type {
    #[doc = "< (@ 0x00000000) Description collection: Output pin select for\nPWM channel n"]
    pub OUT: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_PWM_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<PWM_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PWM_PSEL_Type>(),
        16usize,
        concat!("Size of: ", stringify!(PWM_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<PWM_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(PWM_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OUT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PWM_PSEL_Type),
            "::",
            stringify!(OUT)
        )
    );
}
#[doc = " @brief PDM_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDM_PSEL_Type {
    #[doc = "< (@ 0x00000000) Pin number configuration for PDM CLK signal"]
    pub CLK: u32,
    #[doc = "< (@ 0x00000004) Pin number configuration for PDM DIN signal"]
    pub DIN: u32,
}
#[test]
fn bindgen_test_layout_PDM_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<PDM_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PDM_PSEL_Type>(),
        8usize,
        concat!("Size of: ", stringify!(PDM_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<PDM_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(PDM_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CLK) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PDM_PSEL_Type),
            "::",
            stringify!(CLK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIN) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PDM_PSEL_Type),
            "::",
            stringify!(DIN)
        )
    );
}
#[doc = " @brief PDM_SAMPLE [SAMPLE] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDM_SAMPLE_Type {
    #[doc = "< (@ 0x00000000) RAM address pointer to write samples to with\nEasyDMA"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Number of samples to allocate memory for in EasyDMA\nmode"]
    pub MAXCNT: u32,
}
#[test]
fn bindgen_test_layout_PDM_SAMPLE_Type() {
    const UNINIT: ::core::mem::MaybeUninit<PDM_SAMPLE_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PDM_SAMPLE_Type>(),
        8usize,
        concat!("Size of: ", stringify!(PDM_SAMPLE_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<PDM_SAMPLE_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(PDM_SAMPLE_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PDM_SAMPLE_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PDM_SAMPLE_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
}
#[doc = " @brief ACL_ACL [ACL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ACL_ACL_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Start address of region\nto protect. The start address must be word-aligned."]
    pub ADDR: u32,
    #[doc = "< (@ 0x00000004) Description cluster: Size of region to protect\ncounting from address ACL[n].ADDR. Writing\na '0' has no effect."]
    pub SIZE: u32,
    #[doc = "< (@ 0x00000008) Description cluster: Access permissions for region\nn as defined by start address ACL[n].ADDR\nand size ACL[n].SIZE"]
    pub PERM: u32,
    pub RESERVED: u32,
}
#[test]
fn bindgen_test_layout_ACL_ACL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<ACL_ACL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ACL_ACL_Type>(),
        16usize,
        concat!("Size of: ", stringify!(ACL_ACL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<ACL_ACL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(ACL_ACL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADDR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ACL_ACL_Type),
            "::",
            stringify!(ADDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SIZE) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ACL_ACL_Type),
            "::",
            stringify!(SIZE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PERM) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ACL_ACL_Type),
            "::",
            stringify!(PERM)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ACL_ACL_Type),
            "::",
            stringify!(RESERVED)
        )
    );
}
#[doc = " @brief PPI_TASKS_CHG [TASKS_CHG] (Channel group tasks)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPI_TASKS_CHG_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Enable channel group n"]
    pub EN: u32,
    #[doc = "< (@ 0x00000004) Description cluster: Disable channel group n"]
    pub DIS: u32,
}
#[test]
fn bindgen_test_layout_PPI_TASKS_CHG_Type() {
    const UNINIT: ::core::mem::MaybeUninit<PPI_TASKS_CHG_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PPI_TASKS_CHG_Type>(),
        8usize,
        concat!("Size of: ", stringify!(PPI_TASKS_CHG_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<PPI_TASKS_CHG_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(PPI_TASKS_CHG_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EN) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PPI_TASKS_CHG_Type),
            "::",
            stringify!(EN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIS) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PPI_TASKS_CHG_Type),
            "::",
            stringify!(DIS)
        )
    );
}
#[doc = " @brief PPI_CH [CH] (PPI Channel)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPI_CH_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Channel n event endpoint"]
    pub EEP: u32,
    #[doc = "< (@ 0x00000004) Description cluster: Channel n task endpoint"]
    pub TEP: u32,
}
#[test]
fn bindgen_test_layout_PPI_CH_Type() {
    const UNINIT: ::core::mem::MaybeUninit<PPI_CH_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PPI_CH_Type>(),
        8usize,
        concat!("Size of: ", stringify!(PPI_CH_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<PPI_CH_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(PPI_CH_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EEP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PPI_CH_Type),
            "::",
            stringify!(EEP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TEP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PPI_CH_Type),
            "::",
            stringify!(TEP)
        )
    );
}
#[doc = " @brief PPI_FORK [FORK] (Fork)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPI_FORK_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Channel n task endpoint"]
    pub TEP: u32,
}
#[test]
fn bindgen_test_layout_PPI_FORK_Type() {
    const UNINIT: ::core::mem::MaybeUninit<PPI_FORK_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PPI_FORK_Type>(),
        4usize,
        concat!("Size of: ", stringify!(PPI_FORK_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<PPI_FORK_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(PPI_FORK_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TEP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PPI_FORK_Type),
            "::",
            stringify!(TEP)
        )
    );
}
#[doc = " @brief MWU_EVENTS_REGION [EVENTS_REGION] (Peripheral events.)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MWU_EVENTS_REGION_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Write access to region n\ndetected"]
    pub WA: u32,
    #[doc = "< (@ 0x00000004) Description cluster: Read access to region n\ndetected"]
    pub RA: u32,
}
#[test]
fn bindgen_test_layout_MWU_EVENTS_REGION_Type() {
    const UNINIT: ::core::mem::MaybeUninit<MWU_EVENTS_REGION_Type> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MWU_EVENTS_REGION_Type>(),
        8usize,
        concat!("Size of: ", stringify!(MWU_EVENTS_REGION_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<MWU_EVENTS_REGION_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(MWU_EVENTS_REGION_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_EVENTS_REGION_Type),
            "::",
            stringify!(WA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RA) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_EVENTS_REGION_Type),
            "::",
            stringify!(RA)
        )
    );
}
#[doc = " @brief MWU_EVENTS_PREGION [EVENTS_PREGION] (Peripheral events.)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MWU_EVENTS_PREGION_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Write access to peripheral\nregion n detected"]
    pub WA: u32,
    #[doc = "< (@ 0x00000004) Description cluster: Read access to peripheral\nregion n detected"]
    pub RA: u32,
}
#[test]
fn bindgen_test_layout_MWU_EVENTS_PREGION_Type() {
    const UNINIT: ::core::mem::MaybeUninit<MWU_EVENTS_PREGION_Type> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MWU_EVENTS_PREGION_Type>(),
        8usize,
        concat!("Size of: ", stringify!(MWU_EVENTS_PREGION_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<MWU_EVENTS_PREGION_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(MWU_EVENTS_PREGION_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_EVENTS_PREGION_Type),
            "::",
            stringify!(WA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RA) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_EVENTS_PREGION_Type),
            "::",
            stringify!(RA)
        )
    );
}
#[doc = " @brief MWU_PERREGION [PERREGION] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MWU_PERREGION_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Source of event/interrupt\nin region n, write access detected while\ncorresponding subregion was enabled for\nwatching"]
    pub SUBSTATWA: u32,
    #[doc = "< (@ 0x00000004) Description cluster: Source of event/interrupt\nin region n, read access detected while\ncorresponding subregion was enabled for\nwatching"]
    pub SUBSTATRA: u32,
}
#[test]
fn bindgen_test_layout_MWU_PERREGION_Type() {
    const UNINIT: ::core::mem::MaybeUninit<MWU_PERREGION_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MWU_PERREGION_Type>(),
        8usize,
        concat!("Size of: ", stringify!(MWU_PERREGION_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<MWU_PERREGION_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(MWU_PERREGION_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SUBSTATWA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_PERREGION_Type),
            "::",
            stringify!(SUBSTATWA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SUBSTATRA) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_PERREGION_Type),
            "::",
            stringify!(SUBSTATRA)
        )
    );
}
#[doc = " @brief MWU_REGION [REGION] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MWU_REGION_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Start address for region\nn"]
    pub START: u32,
    #[doc = "< (@ 0x00000004) Description cluster: End address of region n"]
    pub END: u32,
    pub RESERVED: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_MWU_REGION_Type() {
    const UNINIT: ::core::mem::MaybeUninit<MWU_REGION_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MWU_REGION_Type>(),
        16usize,
        concat!("Size of: ", stringify!(MWU_REGION_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<MWU_REGION_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(MWU_REGION_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_REGION_Type),
            "::",
            stringify!(START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).END) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_REGION_Type),
            "::",
            stringify!(END)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_REGION_Type),
            "::",
            stringify!(RESERVED)
        )
    );
}
#[doc = " @brief MWU_PREGION [PREGION] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MWU_PREGION_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Reserved for future use"]
    pub START: u32,
    #[doc = "< (@ 0x00000004) Description cluster: Reserved for future use"]
    pub END: u32,
    #[doc = "< (@ 0x00000008) Description cluster: Subregions of region n"]
    pub SUBS: u32,
    pub RESERVED: u32,
}
#[test]
fn bindgen_test_layout_MWU_PREGION_Type() {
    const UNINIT: ::core::mem::MaybeUninit<MWU_PREGION_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<MWU_PREGION_Type>(),
        16usize,
        concat!("Size of: ", stringify!(MWU_PREGION_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<MWU_PREGION_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(MWU_PREGION_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_PREGION_Type),
            "::",
            stringify!(START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).END) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_PREGION_Type),
            "::",
            stringify!(END)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SUBS) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_PREGION_Type),
            "::",
            stringify!(SUBS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MWU_PREGION_Type),
            "::",
            stringify!(RESERVED)
        )
    );
}
#[doc = " @brief I2S_CONFIG [CONFIG] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2S_CONFIG_Type {
    #[doc = "< (@ 0x00000000) I2S mode."]
    pub MODE: u32,
    #[doc = "< (@ 0x00000004) Reception (RX) enable."]
    pub RXEN: u32,
    #[doc = "< (@ 0x00000008) Transmission (TX) enable."]
    pub TXEN: u32,
    #[doc = "< (@ 0x0000000C) Master clock generator enable."]
    pub MCKEN: u32,
    #[doc = "< (@ 0x00000010) Master clock generator frequency."]
    pub MCKFREQ: u32,
    #[doc = "< (@ 0x00000014) MCK / LRCK ratio."]
    pub RATIO: u32,
    #[doc = "< (@ 0x00000018) Sample width."]
    pub SWIDTH: u32,
    #[doc = "< (@ 0x0000001C) Alignment of sample within a frame."]
    pub ALIGN: u32,
    #[doc = "< (@ 0x00000020) Frame format."]
    pub FORMAT: u32,
    #[doc = "< (@ 0x00000024) Enable channels."]
    pub CHANNELS: u32,
}
#[test]
fn bindgen_test_layout_I2S_CONFIG_Type() {
    const UNINIT: ::core::mem::MaybeUninit<I2S_CONFIG_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<I2S_CONFIG_Type>(),
        40usize,
        concat!("Size of: ", stringify!(I2S_CONFIG_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<I2S_CONFIG_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(I2S_CONFIG_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MODE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_CONFIG_Type),
            "::",
            stringify!(MODE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXEN) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_CONFIG_Type),
            "::",
            stringify!(RXEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXEN) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_CONFIG_Type),
            "::",
            stringify!(TXEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MCKEN) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_CONFIG_Type),
            "::",
            stringify!(MCKEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MCKFREQ) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_CONFIG_Type),
            "::",
            stringify!(MCKFREQ)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RATIO) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_CONFIG_Type),
            "::",
            stringify!(RATIO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SWIDTH) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_CONFIG_Type),
            "::",
            stringify!(SWIDTH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ALIGN) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_CONFIG_Type),
            "::",
            stringify!(ALIGN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FORMAT) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_CONFIG_Type),
            "::",
            stringify!(FORMAT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CHANNELS) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_CONFIG_Type),
            "::",
            stringify!(CHANNELS)
        )
    );
}
#[doc = " @brief I2S_RXD [RXD] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2S_RXD_Type {
    #[doc = "< (@ 0x00000000) Receive buffer RAM start address."]
    pub PTR: u32,
}
#[test]
fn bindgen_test_layout_I2S_RXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<I2S_RXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<I2S_RXD_Type>(),
        4usize,
        concat!("Size of: ", stringify!(I2S_RXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<I2S_RXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(I2S_RXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_RXD_Type),
            "::",
            stringify!(PTR)
        )
    );
}
#[doc = " @brief I2S_TXD [TXD] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2S_TXD_Type {
    #[doc = "< (@ 0x00000000) Transmit buffer RAM start address."]
    pub PTR: u32,
}
#[test]
fn bindgen_test_layout_I2S_TXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<I2S_TXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<I2S_TXD_Type>(),
        4usize,
        concat!("Size of: ", stringify!(I2S_TXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<I2S_TXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(I2S_TXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_TXD_Type),
            "::",
            stringify!(PTR)
        )
    );
}
#[doc = " @brief I2S_RXTXD [RXTXD] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2S_RXTXD_Type {
    #[doc = "< (@ 0x00000000) Size of RXD and TXD buffers."]
    pub MAXCNT: u32,
}
#[test]
fn bindgen_test_layout_I2S_RXTXD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<I2S_RXTXD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<I2S_RXTXD_Type>(),
        4usize,
        concat!("Size of: ", stringify!(I2S_RXTXD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<I2S_RXTXD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(I2S_RXTXD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_RXTXD_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
}
#[doc = " @brief I2S_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2S_PSEL_Type {
    #[doc = "< (@ 0x00000000) Pin select for MCK signal."]
    pub MCK: u32,
    #[doc = "< (@ 0x00000004) Pin select for SCK signal."]
    pub SCK: u32,
    #[doc = "< (@ 0x00000008) Pin select for LRCK signal."]
    pub LRCK: u32,
    #[doc = "< (@ 0x0000000C) Pin select for SDIN signal."]
    pub SDIN: u32,
    #[doc = "< (@ 0x00000010) Pin select for SDOUT signal."]
    pub SDOUT: u32,
}
#[test]
fn bindgen_test_layout_I2S_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<I2S_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<I2S_PSEL_Type>(),
        20usize,
        concat!("Size of: ", stringify!(I2S_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<I2S_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(I2S_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MCK) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_PSEL_Type),
            "::",
            stringify!(MCK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SCK) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_PSEL_Type),
            "::",
            stringify!(SCK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LRCK) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_PSEL_Type),
            "::",
            stringify!(LRCK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIN) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_PSEL_Type),
            "::",
            stringify!(SDIN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDOUT) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_PSEL_Type),
            "::",
            stringify!(SDOUT)
        )
    );
}
#[doc = " @brief USBD_HALTED [HALTED] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USBD_HALTED_Type {
    #[doc = "< (@ 0x00000000) Description collection: IN endpoint halted status.\nCan be used as is as response to a GetStatus()\nrequest to endpoint."]
    pub EPIN: [u32; 8usize],
    pub RESERVED: u32,
    #[doc = "< (@ 0x00000024) Description collection: OUT endpoint halted status.\nCan be used as is as response to a GetStatus()\nrequest to endpoint."]
    pub EPOUT: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_USBD_HALTED_Type() {
    const UNINIT: ::core::mem::MaybeUninit<USBD_HALTED_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USBD_HALTED_Type>(),
        68usize,
        concat!("Size of: ", stringify!(USBD_HALTED_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<USBD_HALTED_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(USBD_HALTED_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EPIN) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_HALTED_Type),
            "::",
            stringify!(EPIN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_HALTED_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EPOUT) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_HALTED_Type),
            "::",
            stringify!(EPOUT)
        )
    );
}
#[doc = " @brief USBD_SIZE [SIZE] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USBD_SIZE_Type {
    #[doc = "< (@ 0x00000000) Description collection: Number of bytes received\nlast in the data stage of this OUT endpoint"]
    pub EPOUT: [u32; 8usize],
    #[doc = "< (@ 0x00000020) Number of bytes received last on this ISO OUT\ndata endpoint"]
    pub ISOOUT: u32,
}
#[test]
fn bindgen_test_layout_USBD_SIZE_Type() {
    const UNINIT: ::core::mem::MaybeUninit<USBD_SIZE_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USBD_SIZE_Type>(),
        36usize,
        concat!("Size of: ", stringify!(USBD_SIZE_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<USBD_SIZE_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(USBD_SIZE_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EPOUT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_SIZE_Type),
            "::",
            stringify!(EPOUT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISOOUT) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_SIZE_Type),
            "::",
            stringify!(ISOOUT)
        )
    );
}
#[doc = " @brief USBD_EPIN [EPIN] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USBD_EPIN_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Description cluster: Maximum number of bytes\nto transfer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Description cluster: Number of bytes transferred\nin the last transaction"]
    pub AMOUNT: u32,
    pub RESERVED: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_USBD_EPIN_Type() {
    const UNINIT: ::core::mem::MaybeUninit<USBD_EPIN_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USBD_EPIN_Type>(),
        20usize,
        concat!("Size of: ", stringify!(USBD_EPIN_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<USBD_EPIN_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(USBD_EPIN_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_EPIN_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_EPIN_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_EPIN_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_EPIN_Type),
            "::",
            stringify!(RESERVED)
        )
    );
}
#[doc = " @brief USBD_ISOIN [ISOIN] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USBD_ISOIN_Type {
    #[doc = "< (@ 0x00000000) Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Maximum number of bytes to transfer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of bytes transferred in the last transaction"]
    pub AMOUNT: u32,
}
#[test]
fn bindgen_test_layout_USBD_ISOIN_Type() {
    const UNINIT: ::core::mem::MaybeUninit<USBD_ISOIN_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USBD_ISOIN_Type>(),
        12usize,
        concat!("Size of: ", stringify!(USBD_ISOIN_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<USBD_ISOIN_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(USBD_ISOIN_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_ISOIN_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_ISOIN_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_ISOIN_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
}
#[doc = " @brief USBD_EPOUT [EPOUT] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USBD_EPOUT_Type {
    #[doc = "< (@ 0x00000000) Description cluster: Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Description cluster: Maximum number of bytes\nto transfer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Description cluster: Number of bytes transferred\nin the last transaction"]
    pub AMOUNT: u32,
    pub RESERVED: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_USBD_EPOUT_Type() {
    const UNINIT: ::core::mem::MaybeUninit<USBD_EPOUT_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USBD_EPOUT_Type>(),
        20usize,
        concat!("Size of: ", stringify!(USBD_EPOUT_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<USBD_EPOUT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(USBD_EPOUT_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_EPOUT_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_EPOUT_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_EPOUT_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_EPOUT_Type),
            "::",
            stringify!(RESERVED)
        )
    );
}
#[doc = " @brief USBD_ISOOUT [ISOOUT] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USBD_ISOOUT_Type {
    #[doc = "< (@ 0x00000000) Data pointer"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Maximum number of bytes to transfer"]
    pub MAXCNT: u32,
    #[doc = "< (@ 0x00000008) Number of bytes transferred in the last transaction"]
    pub AMOUNT: u32,
}
#[test]
fn bindgen_test_layout_USBD_ISOOUT_Type() {
    const UNINIT: ::core::mem::MaybeUninit<USBD_ISOOUT_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USBD_ISOOUT_Type>(),
        12usize,
        concat!("Size of: ", stringify!(USBD_ISOOUT_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<USBD_ISOOUT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(USBD_ISOOUT_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_ISOOUT_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_ISOOUT_Type),
            "::",
            stringify!(MAXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AMOUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USBD_ISOOUT_Type),
            "::",
            stringify!(AMOUNT)
        )
    );
}
#[doc = " @brief QSPI_READ [READ] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QSPI_READ_Type {
    #[doc = "< (@ 0x00000000) Flash memory source address"]
    pub SRC: u32,
    #[doc = "< (@ 0x00000004) RAM destination address"]
    pub DST: u32,
    #[doc = "< (@ 0x00000008) Read transfer length"]
    pub CNT: u32,
}
#[test]
fn bindgen_test_layout_QSPI_READ_Type() {
    const UNINIT: ::core::mem::MaybeUninit<QSPI_READ_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<QSPI_READ_Type>(),
        12usize,
        concat!("Size of: ", stringify!(QSPI_READ_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<QSPI_READ_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(QSPI_READ_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SRC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_READ_Type),
            "::",
            stringify!(SRC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DST) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_READ_Type),
            "::",
            stringify!(DST)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_READ_Type),
            "::",
            stringify!(CNT)
        )
    );
}
#[doc = " @brief QSPI_WRITE [WRITE] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QSPI_WRITE_Type {
    #[doc = "< (@ 0x00000000) Flash destination address"]
    pub DST: u32,
    #[doc = "< (@ 0x00000004) RAM source address"]
    pub SRC: u32,
    #[doc = "< (@ 0x00000008) Write transfer length"]
    pub CNT: u32,
}
#[test]
fn bindgen_test_layout_QSPI_WRITE_Type() {
    const UNINIT: ::core::mem::MaybeUninit<QSPI_WRITE_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<QSPI_WRITE_Type>(),
        12usize,
        concat!("Size of: ", stringify!(QSPI_WRITE_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<QSPI_WRITE_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(QSPI_WRITE_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DST) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_WRITE_Type),
            "::",
            stringify!(DST)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SRC) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_WRITE_Type),
            "::",
            stringify!(SRC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_WRITE_Type),
            "::",
            stringify!(CNT)
        )
    );
}
#[doc = " @brief QSPI_ERASE [ERASE] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QSPI_ERASE_Type {
    #[doc = "< (@ 0x00000000) Start address of flash block to be erased"]
    pub PTR: u32,
    #[doc = "< (@ 0x00000004) Size of block to be erased."]
    pub LEN: u32,
}
#[test]
fn bindgen_test_layout_QSPI_ERASE_Type() {
    const UNINIT: ::core::mem::MaybeUninit<QSPI_ERASE_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<QSPI_ERASE_Type>(),
        8usize,
        concat!("Size of: ", stringify!(QSPI_ERASE_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<QSPI_ERASE_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(QSPI_ERASE_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_ERASE_Type),
            "::",
            stringify!(PTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LEN) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_ERASE_Type),
            "::",
            stringify!(LEN)
        )
    );
}
#[doc = " @brief QSPI_PSEL [PSEL] (Unspecified)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QSPI_PSEL_Type {
    #[doc = "< (@ 0x00000000) Pin select for serial clock SCK"]
    pub SCK: u32,
    #[doc = "< (@ 0x00000004) Pin select for chip select signal CSN."]
    pub CSN: u32,
    pub RESERVED: u32,
    #[doc = "< (@ 0x0000000C) Pin select for serial data MOSI/IO0."]
    pub IO0: u32,
    #[doc = "< (@ 0x00000010) Pin select for serial data MISO/IO1."]
    pub IO1: u32,
    #[doc = "< (@ 0x00000014) Pin select for serial data IO2."]
    pub IO2: u32,
    #[doc = "< (@ 0x00000018) Pin select for serial data IO3."]
    pub IO3: u32,
}
#[test]
fn bindgen_test_layout_QSPI_PSEL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<QSPI_PSEL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<QSPI_PSEL_Type>(),
        28usize,
        concat!("Size of: ", stringify!(QSPI_PSEL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<QSPI_PSEL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(QSPI_PSEL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SCK) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_PSEL_Type),
            "::",
            stringify!(SCK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSN) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_PSEL_Type),
            "::",
            stringify!(CSN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_PSEL_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IO0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_PSEL_Type),
            "::",
            stringify!(IO0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IO1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_PSEL_Type),
            "::",
            stringify!(IO1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IO2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_PSEL_Type),
            "::",
            stringify!(IO2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IO3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(QSPI_PSEL_Type),
            "::",
            stringify!(IO3)
        )
    );
}
#[doc = " @brief Factory information configuration registers (FICR)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_FICR_Type {
    pub RESERVED: [u32; 4usize],
    #[doc = "< (@ 0x00000010) Code memory page size"]
    pub CODEPAGESIZE: u32,
    #[doc = "< (@ 0x00000014) Code memory size"]
    pub CODESIZE: u32,
    pub RESERVED1: [u32; 18usize],
    #[doc = "< (@ 0x00000060) Description collection: Device identifier"]
    pub DEVICEID: [u32; 2usize],
    pub RESERVED2: [u32; 6usize],
    #[doc = "< (@ 0x00000080) Description collection: Encryption root, word\nn"]
    pub ER: [u32; 4usize],
    #[doc = "< (@ 0x00000090) Description collection: Identity Root, word n"]
    pub IR: [u32; 4usize],
    #[doc = "< (@ 0x000000A0) Device address type"]
    pub DEVICEADDRTYPE: u32,
    #[doc = "< (@ 0x000000A4) Description collection: Device address n"]
    pub DEVICEADDR: [u32; 2usize],
    pub RESERVED3: [u32; 21usize],
    #[doc = "< (@ 0x00000100) Device info"]
    pub INFO: FICR_INFO_Type,
    pub RESERVED4: [u32; 143usize],
    #[doc = "< (@ 0x00000350) Description collection: Production test signature\nn"]
    pub PRODTEST: [u32; 3usize],
    pub RESERVED5: [u32; 42usize],
    #[doc = "< (@ 0x00000404) Registers storing factory TEMP module linearization\ncoefficients"]
    pub TEMP: FICR_TEMP_Type,
    pub RESERVED6: [u32; 2usize],
    #[doc = "< (@ 0x00000450) Unspecified"]
    pub NFC: FICR_NFC_Type,
    pub RESERVED7: [u32; 488usize],
    #[doc = "< (@ 0x00000C00) NIST800-90B RNG calibration data"]
    pub TRNG90B: FICR_TRNG90B_Type,
}
#[test]
fn bindgen_test_layout_NRF_FICR_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_FICR_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_FICR_Type>(),
        3104usize,
        concat!("Size of: ", stringify!(NRF_FICR_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_FICR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_FICR_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CODEPAGESIZE) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(CODEPAGESIZE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CODESIZE) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(CODESIZE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEVICEID) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(DEVICEID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ER) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(ER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IR) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(IR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEVICEADDRTYPE) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(DEVICEADDRTYPE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEVICEADDR) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(DEVICEADDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INFO) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(INFO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PRODTEST) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(PRODTEST)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TEMP) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(TEMP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NFC) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(NFC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TRNG90B) as usize - ptr as usize },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FICR_Type),
            "::",
            stringify!(TRNG90B)
        )
    );
}
#[doc = " @brief User information configuration registers (UICR)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_UICR_Type {
    pub RESERVED: [u32; 5usize],
    #[doc = "< (@ 0x00000014) Description collection: Reserved for Nordic firmware\ndesign"]
    pub NRFFW: [u32; 13usize],
    pub RESERVED1: [u32; 2usize],
    #[doc = "< (@ 0x00000050) Description collection: Reserved for Nordic hardware\ndesign"]
    pub NRFHW: [u32; 12usize],
    #[doc = "< (@ 0x00000080) Description collection: Reserved for customer"]
    pub CUSTOMER: [u32; 32usize],
    pub RESERVED2: [u32; 64usize],
    #[doc = "< (@ 0x00000200) Description collection: Mapping of the nRESET\nfunction (see POWER chapter for details)"]
    pub PSELRESET: [u32; 2usize],
    #[doc = "< (@ 0x00000208) Access port protection"]
    pub APPROTECT: u32,
    #[doc = "< (@ 0x0000020C) Setting of pins dedicated to NFC functionality:\nNFC antenna or GPIO"]
    pub NFCPINS: u32,
    #[doc = "< (@ 0x00000210) Processor debug control"]
    pub DEBUGCTRL: u32,
    pub RESERVED3: [u32; 60usize],
    #[doc = "< (@ 0x00000304) Output voltage from REG0 regulator stage. The\nmaximum output voltage from this stage is\ngiven as VDDH - V_VDDH-VDD."]
    pub REGOUT0: u32,
}
#[test]
fn bindgen_test_layout_NRF_UICR_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_UICR_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_UICR_Type>(),
        776usize,
        concat!("Size of: ", stringify!(NRF_UICR_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_UICR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_UICR_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UICR_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NRFFW) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UICR_Type),
            "::",
            stringify!(NRFFW)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UICR_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NRFHW) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UICR_Type),
            "::",
            stringify!(NRFHW)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CUSTOMER) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UICR_Type),
            "::",
            stringify!(CUSTOMER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UICR_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSELRESET) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UICR_Type),
            "::",
            stringify!(PSELRESET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).APPROTECT) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UICR_Type),
            "::",
            stringify!(APPROTECT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NFCPINS) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UICR_Type),
            "::",
            stringify!(NFCPINS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEBUGCTRL) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UICR_Type),
            "::",
            stringify!(DEBUGCTRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UICR_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).REGOUT0) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UICR_Type),
            "::",
            stringify!(REGOUT0)
        )
    );
}
#[doc = " @brief Access Port Protection (APPROTECT)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_APPROTECT_Type {
    pub RESERVED: [u32; 340usize],
    #[doc = "< (@ 0x00000550) Software force enable APPROTECT mechanism until\nnext reset."]
    pub FORCEPROTECT: u32,
    pub RESERVED1: u32,
    #[doc = "< (@ 0x00000558) Software disable APPROTECT mechanism"]
    pub DISABLE: u32,
}
#[test]
fn bindgen_test_layout_NRF_APPROTECT_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_APPROTECT_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_APPROTECT_Type>(),
        1372usize,
        concat!("Size of: ", stringify!(NRF_APPROTECT_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_APPROTECT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_APPROTECT_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_APPROTECT_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FORCEPROTECT) as usize - ptr as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_APPROTECT_Type),
            "::",
            stringify!(FORCEPROTECT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_APPROTECT_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DISABLE) as usize - ptr as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_APPROTECT_Type),
            "::",
            stringify!(DISABLE)
        )
    );
}
#[doc = " @brief Clock control (CLOCK)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_CLOCK_Type {
    #[doc = "< (@ 0x00000000) Start HFXO crystal oscillator"]
    pub TASKS_HFCLKSTART: u32,
    #[doc = "< (@ 0x00000004) Stop HFXO crystal oscillator"]
    pub TASKS_HFCLKSTOP: u32,
    #[doc = "< (@ 0x00000008) Start LFCLK"]
    pub TASKS_LFCLKSTART: u32,
    #[doc = "< (@ 0x0000000C) Stop LFCLK"]
    pub TASKS_LFCLKSTOP: u32,
    #[doc = "< (@ 0x00000010) Start calibration of LFRC"]
    pub TASKS_CAL: u32,
    #[doc = "< (@ 0x00000014) Start calibration timer"]
    pub TASKS_CTSTART: u32,
    #[doc = "< (@ 0x00000018) Stop calibration timer"]
    pub TASKS_CTSTOP: u32,
    pub RESERVED: [u32; 57usize],
    #[doc = "< (@ 0x00000100) HFXO crystal oscillator started"]
    pub EVENTS_HFCLKSTARTED: u32,
    #[doc = "< (@ 0x00000104) LFCLK started"]
    pub EVENTS_LFCLKSTARTED: u32,
    pub RESERVED1: u32,
    #[doc = "< (@ 0x0000010C) Calibration of LFRC completed"]
    pub EVENTS_DONE: u32,
    #[doc = "< (@ 0x00000110) Calibration timer timeout"]
    pub EVENTS_CTTO: u32,
    pub RESERVED2: [u32; 5usize],
    #[doc = "< (@ 0x00000128) Calibration timer has been started and is ready\nto process new tasks"]
    pub EVENTS_CTSTARTED: u32,
    #[doc = "< (@ 0x0000012C) Calibration timer has been stopped and is ready\nto process new tasks"]
    pub EVENTS_CTSTOPPED: u32,
    pub RESERVED3: [u32; 117usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED4: [u32; 63usize],
    #[doc = "< (@ 0x00000408) Status indicating that HFCLKSTART task has been\ntriggered"]
    pub HFCLKRUN: u32,
    #[doc = "< (@ 0x0000040C) HFCLK status"]
    pub HFCLKSTAT: u32,
    pub RESERVED5: u32,
    #[doc = "< (@ 0x00000414) Status indicating that LFCLKSTART task has been\ntriggered"]
    pub LFCLKRUN: u32,
    #[doc = "< (@ 0x00000418) LFCLK status"]
    pub LFCLKSTAT: u32,
    #[doc = "< (@ 0x0000041C) Copy of LFCLKSRC register, set when LFCLKSTART\ntask was triggered"]
    pub LFCLKSRCCOPY: u32,
    pub RESERVED6: [u32; 62usize],
    #[doc = "< (@ 0x00000518) Clock source for the LFCLK"]
    pub LFCLKSRC: u32,
    pub RESERVED7: [u32; 3usize],
    #[doc = "< (@ 0x00000528) HFXO debounce time. The HFXO is started by triggering\nthe TASKS_HFCLKSTART task."]
    pub HFXODEBOUNCE: u32,
    pub RESERVED8: [u32; 3usize],
    #[doc = "< (@ 0x00000538) Calibration timer interval"]
    pub CTIV: u32,
    pub RESERVED9: [u32; 8usize],
    #[doc = "< (@ 0x0000055C) Clocking options for the trace port debug interface"]
    pub TRACECONFIG: u32,
    pub RESERVED10: [u32; 21usize],
    #[doc = "< (@ 0x000005B4) LFRC mode configuration"]
    pub LFRCMODE: u32,
}
#[test]
fn bindgen_test_layout_NRF_CLOCK_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_CLOCK_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_CLOCK_Type>(),
        1464usize,
        concat!("Size of: ", stringify!(NRF_CLOCK_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_CLOCK_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_CLOCK_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_HFCLKSTART) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(TASKS_HFCLKSTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_HFCLKSTOP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(TASKS_HFCLKSTOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_LFCLKSTART) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(TASKS_LFCLKSTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_LFCLKSTOP) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(TASKS_LFCLKSTOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CAL) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(TASKS_CAL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CTSTART) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(TASKS_CTSTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CTSTOP) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(TASKS_CTSTOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_HFCLKSTARTED) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(EVENTS_HFCLKSTARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_LFCLKSTARTED) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(EVENTS_LFCLKSTARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_DONE) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(EVENTS_DONE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CTTO) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(EVENTS_CTTO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CTSTARTED) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(EVENTS_CTSTARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CTSTOPPED) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(EVENTS_CTSTOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HFCLKRUN) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(HFCLKRUN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HFCLKSTAT) as usize - ptr as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(HFCLKSTAT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LFCLKRUN) as usize - ptr as usize },
        1044usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(LFCLKRUN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LFCLKSTAT) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(LFCLKSTAT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LFCLKSRCCOPY) as usize - ptr as usize },
        1052usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(LFCLKSRCCOPY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LFCLKSRC) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(LFCLKSRC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HFXODEBOUNCE) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(HFXODEBOUNCE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTIV) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(CTIV)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        1340usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TRACECONFIG) as usize - ptr as usize },
        1372usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(TRACECONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LFRCMODE) as usize - ptr as usize },
        1460usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CLOCK_Type),
            "::",
            stringify!(LFRCMODE)
        )
    );
}
#[doc = " @brief Power control (POWER)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_POWER_Type {
    pub RESERVED: [u32; 30usize],
    #[doc = "< (@ 0x00000078) Enable Constant Latency mode"]
    pub TASKS_CONSTLAT: u32,
    #[doc = "< (@ 0x0000007C) Enable Low-power mode (variable latency)"]
    pub TASKS_LOWPWR: u32,
    pub RESERVED1: [u32; 34usize],
    #[doc = "< (@ 0x00000108) Power failure warning"]
    pub EVENTS_POFWARN: u32,
    pub RESERVED2: [u32; 2usize],
    #[doc = "< (@ 0x00000114) CPU entered WFI/WFE sleep"]
    pub EVENTS_SLEEPENTER: u32,
    #[doc = "< (@ 0x00000118) CPU exited WFI/WFE sleep"]
    pub EVENTS_SLEEPEXIT: u32,
    #[doc = "< (@ 0x0000011C) Voltage supply detected on VBUS"]
    pub EVENTS_USBDETECTED: u32,
    #[doc = "< (@ 0x00000120) Voltage supply removed from VBUS"]
    pub EVENTS_USBREMOVED: u32,
    #[doc = "< (@ 0x00000124) USB 3.3 V supply ready"]
    pub EVENTS_USBPWRRDY: u32,
    pub RESERVED3: [u32; 119usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED4: [u32; 61usize],
    #[doc = "< (@ 0x00000400) Reset reason"]
    pub RESETREAS: u32,
    pub RESERVED5: [u32; 9usize],
    #[doc = "< (@ 0x00000428) Deprecated register - RAM status register"]
    pub RAMSTATUS: u32,
    pub RESERVED6: [u32; 3usize],
    #[doc = "< (@ 0x00000438) USB supply status"]
    pub USBREGSTATUS: u32,
    pub RESERVED7: [u32; 49usize],
    #[doc = "< (@ 0x00000500) System OFF register"]
    pub SYSTEMOFF: u32,
    pub RESERVED8: [u32; 3usize],
    #[doc = "< (@ 0x00000510) Power-fail comparator configuration"]
    pub POFCON: u32,
    pub RESERVED9: [u32; 2usize],
    #[doc = "< (@ 0x0000051C) General purpose retention register"]
    pub GPREGRET: u32,
    #[doc = "< (@ 0x00000520) General purpose retention register"]
    pub GPREGRET2: u32,
    pub RESERVED10: [u32; 21usize],
    #[doc = "< (@ 0x00000578) Enable DC/DC converter for REG1 stage"]
    pub DCDCEN: u32,
    pub RESERVED11: u32,
    #[doc = "< (@ 0x00000580) Enable DC/DC converter for REG0 stage"]
    pub DCDCEN0: u32,
    pub RESERVED12: [u32; 47usize],
    #[doc = "< (@ 0x00000640) Main supply status"]
    pub MAINREGSTATUS: u32,
    pub RESERVED13: [u32; 175usize],
    #[doc = "< (@ 0x00000900) Unspecified"]
    pub RAM: [POWER_RAM_Type; 9usize],
}
#[test]
fn bindgen_test_layout_NRF_POWER_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_POWER_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_POWER_Type>(),
        2448usize,
        concat!("Size of: ", stringify!(NRF_POWER_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_POWER_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_POWER_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CONSTLAT) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(TASKS_CONSTLAT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_LOWPWR) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(TASKS_LOWPWR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_POFWARN) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(EVENTS_POFWARN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_SLEEPENTER) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(EVENTS_SLEEPENTER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_SLEEPEXIT) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(EVENTS_SLEEPEXIT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_USBDETECTED) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(EVENTS_USBDETECTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_USBREMOVED) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(EVENTS_USBREMOVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_USBPWRRDY) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(EVENTS_USBPWRRDY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESETREAS) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESETREAS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RAMSTATUS) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RAMSTATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USBREGSTATUS) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(USBREGSTATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SYSTEMOFF) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(SYSTEMOFF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).POFCON) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(POFCON)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GPREGRET) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(GPREGRET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GPREGRET2) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(GPREGRET2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCDCEN) as usize - ptr as usize },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(DCDCEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        1404usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCDCEN0) as usize - ptr as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(DCDCEN0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        1412usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAINREGSTATUS) as usize - ptr as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(MAINREGSTATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        1604usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RAM) as usize - ptr as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_POWER_Type),
            "::",
            stringify!(RAM)
        )
    );
}
#[doc = " @brief GPIO Port 1 (P0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_GPIO_Type {
    pub RESERVED: [u32; 321usize],
    #[doc = "< (@ 0x00000504) Write GPIO port"]
    pub OUT: u32,
    #[doc = "< (@ 0x00000508) Set individual bits in GPIO port"]
    pub OUTSET: u32,
    #[doc = "< (@ 0x0000050C) Clear individual bits in GPIO port"]
    pub OUTCLR: u32,
    #[doc = "< (@ 0x00000510) Read GPIO port"]
    pub IN: u32,
    #[doc = "< (@ 0x00000514) Direction of GPIO pins"]
    pub DIR: u32,
    #[doc = "< (@ 0x00000518) DIR set register"]
    pub DIRSET: u32,
    #[doc = "< (@ 0x0000051C) DIR clear register"]
    pub DIRCLR: u32,
    #[doc = "< (@ 0x00000520) Latch register indicating what GPIO pins that\nhave met the criteria set in the PIN_CNF[n].SENSE\nregisters"]
    pub LATCH: u32,
    #[doc = "< (@ 0x00000524) Select between default DETECT signal behavior\nand LDETECT mode"]
    pub DETECTMODE: u32,
    pub RESERVED1: [u32; 118usize],
    #[doc = "< (@ 0x00000700) Description collection: Configuration of GPIO\npins"]
    pub PIN_CNF: [u32; 32usize],
}
#[test]
fn bindgen_test_layout_NRF_GPIO_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_GPIO_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_GPIO_Type>(),
        1920usize,
        concat!("Size of: ", stringify!(NRF_GPIO_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_GPIO_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_GPIO_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIO_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OUT) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIO_Type),
            "::",
            stringify!(OUT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OUTSET) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIO_Type),
            "::",
            stringify!(OUTSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OUTCLR) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIO_Type),
            "::",
            stringify!(OUTCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IN) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIO_Type),
            "::",
            stringify!(IN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIR) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIO_Type),
            "::",
            stringify!(DIR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIRSET) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIO_Type),
            "::",
            stringify!(DIRSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIRCLR) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIO_Type),
            "::",
            stringify!(DIRCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LATCH) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIO_Type),
            "::",
            stringify!(LATCH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DETECTMODE) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIO_Type),
            "::",
            stringify!(DETECTMODE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIO_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PIN_CNF) as usize - ptr as usize },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIO_Type),
            "::",
            stringify!(PIN_CNF)
        )
    );
}
#[doc = " @brief 2.4 GHz radio (RADIO)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_RADIO_Type {
    #[doc = "< (@ 0x00000000) Enable RADIO in TX mode"]
    pub TASKS_TXEN: u32,
    #[doc = "< (@ 0x00000004) Enable RADIO in RX mode"]
    pub TASKS_RXEN: u32,
    #[doc = "< (@ 0x00000008) Start RADIO"]
    pub TASKS_START: u32,
    #[doc = "< (@ 0x0000000C) Stop RADIO"]
    pub TASKS_STOP: u32,
    #[doc = "< (@ 0x00000010) Disable RADIO"]
    pub TASKS_DISABLE: u32,
    #[doc = "< (@ 0x00000014) Start the RSSI and take one single sample of\nthe receive signal strength"]
    pub TASKS_RSSISTART: u32,
    #[doc = "< (@ 0x00000018) Stop the RSSI measurement"]
    pub TASKS_RSSISTOP: u32,
    #[doc = "< (@ 0x0000001C) Start the bit counter"]
    pub TASKS_BCSTART: u32,
    #[doc = "< (@ 0x00000020) Stop the bit counter"]
    pub TASKS_BCSTOP: u32,
    #[doc = "< (@ 0x00000024) Start the energy detect measurement used in IEEE\n802.15.4 mode"]
    pub TASKS_EDSTART: u32,
    #[doc = "< (@ 0x00000028) Stop the energy detect measurement"]
    pub TASKS_EDSTOP: u32,
    #[doc = "< (@ 0x0000002C) Start the clear channel assessment used in IEEE\n802.15.4 mode"]
    pub TASKS_CCASTART: u32,
    #[doc = "< (@ 0x00000030) Stop the clear channel assessment"]
    pub TASKS_CCASTOP: u32,
    pub RESERVED: [u32; 51usize],
    #[doc = "< (@ 0x00000100) RADIO has ramped up and is ready to be started"]
    pub EVENTS_READY: u32,
    #[doc = "< (@ 0x00000104) Address sent or received"]
    pub EVENTS_ADDRESS: u32,
    #[doc = "< (@ 0x00000108) Packet payload sent or received"]
    pub EVENTS_PAYLOAD: u32,
    #[doc = "< (@ 0x0000010C) Packet sent or received"]
    pub EVENTS_END: u32,
    #[doc = "< (@ 0x00000110) RADIO has been disabled"]
    pub EVENTS_DISABLED: u32,
    #[doc = "< (@ 0x00000114) A device address match occurred on the last received\npacket"]
    pub EVENTS_DEVMATCH: u32,
    #[doc = "< (@ 0x00000118) No device address match occurred on the last\nreceived packet"]
    pub EVENTS_DEVMISS: u32,
    #[doc = "< (@ 0x0000011C) Sampling of receive signal strength complete"]
    pub EVENTS_RSSIEND: u32,
    pub RESERVED1: [u32; 2usize],
    #[doc = "< (@ 0x00000128) Bit counter reached bit count value"]
    pub EVENTS_BCMATCH: u32,
    pub RESERVED2: u32,
    #[doc = "< (@ 0x00000130) Packet received with CRC ok"]
    pub EVENTS_CRCOK: u32,
    #[doc = "< (@ 0x00000134) Packet received with CRC error"]
    pub EVENTS_CRCERROR: u32,
    #[doc = "< (@ 0x00000138) IEEE 802.15.4 length field received"]
    pub EVENTS_FRAMESTART: u32,
    #[doc = "< (@ 0x0000013C) Sampling of energy detection complete. A new\nED sample is ready for readout from the\nRADIO.EDSAMPLE register."]
    pub EVENTS_EDEND: u32,
    #[doc = "< (@ 0x00000140) The sampling of energy detection has stopped"]
    pub EVENTS_EDSTOPPED: u32,
    #[doc = "< (@ 0x00000144) Wireless medium in idle - clear to send"]
    pub EVENTS_CCAIDLE: u32,
    #[doc = "< (@ 0x00000148) Wireless medium busy - do not send"]
    pub EVENTS_CCABUSY: u32,
    #[doc = "< (@ 0x0000014C) The CCA has stopped"]
    pub EVENTS_CCASTOPPED: u32,
    #[doc = "< (@ 0x00000150) Ble_LR CI field received, receive mode is changed\nfrom Ble_LR125Kbit to Ble_LR500Kbit."]
    pub EVENTS_RATEBOOST: u32,
    #[doc = "< (@ 0x00000154) RADIO has ramped up and is ready to be started\nTX path"]
    pub EVENTS_TXREADY: u32,
    #[doc = "< (@ 0x00000158) RADIO has ramped up and is ready to be started\nRX path"]
    pub EVENTS_RXREADY: u32,
    #[doc = "< (@ 0x0000015C) MAC header match found"]
    pub EVENTS_MHRMATCH: u32,
    pub RESERVED3: [u32; 2usize],
    #[doc = "< (@ 0x00000168) Preamble indicator."]
    pub EVENTS_SYNC: u32,
    #[doc = "< (@ 0x0000016C) Generated in Ble_LR125Kbit, Ble_LR500Kbit and\nIeee802154_250Kbit modes when last bit is\nsent on air."]
    pub EVENTS_PHYEND: u32,
    pub RESERVED4: [u32; 36usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED5: [u32; 64usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED6: [u32; 61usize],
    #[doc = "< (@ 0x00000400) CRC status"]
    pub CRCSTATUS: u32,
    pub RESERVED7: u32,
    #[doc = "< (@ 0x00000408) Received address"]
    pub RXMATCH: u32,
    #[doc = "< (@ 0x0000040C) CRC field of previously received packet"]
    pub RXCRC: u32,
    #[doc = "< (@ 0x00000410) Device address match index"]
    pub DAI: u32,
    #[doc = "< (@ 0x00000414) Payload status"]
    pub PDUSTAT: u32,
    pub RESERVED8: [u32; 59usize],
    #[doc = "< (@ 0x00000504) Packet pointer"]
    pub PACKETPTR: u32,
    #[doc = "< (@ 0x00000508) Frequency"]
    pub FREQUENCY: u32,
    #[doc = "< (@ 0x0000050C) Output power"]
    pub TXPOWER: u32,
    #[doc = "< (@ 0x00000510) Data rate and modulation"]
    pub MODE: u32,
    #[doc = "< (@ 0x00000514) Packet configuration register 0"]
    pub PCNF0: u32,
    #[doc = "< (@ 0x00000518) Packet configuration register 1"]
    pub PCNF1: u32,
    #[doc = "< (@ 0x0000051C) Base address 0"]
    pub BASE0: u32,
    #[doc = "< (@ 0x00000520) Base address 1"]
    pub BASE1: u32,
    #[doc = "< (@ 0x00000524) Prefixes bytes for logical addresses 0-3"]
    pub PREFIX0: u32,
    #[doc = "< (@ 0x00000528) Prefixes bytes for logical addresses 4-7"]
    pub PREFIX1: u32,
    #[doc = "< (@ 0x0000052C) Transmit address select"]
    pub TXADDRESS: u32,
    #[doc = "< (@ 0x00000530) Receive address select"]
    pub RXADDRESSES: u32,
    #[doc = "< (@ 0x00000534) CRC configuration"]
    pub CRCCNF: u32,
    #[doc = "< (@ 0x00000538) CRC polynomial"]
    pub CRCPOLY: u32,
    #[doc = "< (@ 0x0000053C) CRC initial value"]
    pub CRCINIT: u32,
    pub RESERVED9: u32,
    #[doc = "< (@ 0x00000544) Interframe spacing in us"]
    pub TIFS: u32,
    #[doc = "< (@ 0x00000548) RSSI sample"]
    pub RSSISAMPLE: u32,
    pub RESERVED10: u32,
    #[doc = "< (@ 0x00000550) Current radio state"]
    pub STATE: u32,
    #[doc = "< (@ 0x00000554) Data whitening initial value"]
    pub DATAWHITEIV: u32,
    pub RESERVED11: [u32; 2usize],
    #[doc = "< (@ 0x00000560) Bit counter compare"]
    pub BCC: u32,
    pub RESERVED12: [u32; 39usize],
    #[doc = "< (@ 0x00000600) Description collection: Device address base segment\nn"]
    pub DAB: [u32; 8usize],
    #[doc = "< (@ 0x00000620) Description collection: Device address prefix\nn"]
    pub DAP: [u32; 8usize],
    #[doc = "< (@ 0x00000640) Device address match configuration"]
    pub DACNF: u32,
    #[doc = "< (@ 0x00000644) Search pattern configuration"]
    pub MHRMATCHCONF: u32,
    #[doc = "< (@ 0x00000648) Pattern mask"]
    pub MHRMATCHMAS: u32,
    pub RESERVED13: u32,
    #[doc = "< (@ 0x00000650) Radio mode configuration register 0"]
    pub MODECNF0: u32,
    pub RESERVED14: [u32; 3usize],
    #[doc = "< (@ 0x00000660) IEEE 802.15.4 start of frame delimiter"]
    pub SFD: u32,
    #[doc = "< (@ 0x00000664) IEEE 802.15.4 energy detect loop count"]
    pub EDCNT: u32,
    #[doc = "< (@ 0x00000668) IEEE 802.15.4 energy detect level"]
    pub EDSAMPLE: u32,
    #[doc = "< (@ 0x0000066C) IEEE 802.15.4 clear channel assessment control"]
    pub CCACTRL: u32,
    pub RESERVED15: [u32; 611usize],
    #[doc = "< (@ 0x00000FFC) Peripheral power control"]
    pub POWER: u32,
}
#[test]
fn bindgen_test_layout_NRF_RADIO_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_RADIO_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_RADIO_Type>(),
        4096usize,
        concat!("Size of: ", stringify!(NRF_RADIO_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_RADIO_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_RADIO_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_TXEN) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_TXEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_RXEN) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_RXEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_DISABLE) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_DISABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_RSSISTART) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_RSSISTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_RSSISTOP) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_RSSISTOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_BCSTART) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_BCSTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_BCSTOP) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_BCSTOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_EDSTART) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_EDSTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_EDSTOP) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_EDSTOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CCASTART) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_CCASTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CCASTOP) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TASKS_CCASTOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_READY) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_READY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ADDRESS) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_ADDRESS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_PAYLOAD) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_PAYLOAD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_END) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_END)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_DISABLED) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_DISABLED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_DEVMATCH) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_DEVMATCH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_DEVMISS) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_DEVMISS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RSSIEND) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_RSSIEND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_BCMATCH) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_BCMATCH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CRCOK) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_CRCOK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CRCERROR) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_CRCERROR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_FRAMESTART) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_FRAMESTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_EDEND) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_EDEND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_EDSTOPPED) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_EDSTOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CCAIDLE) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_CCAIDLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CCABUSY) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_CCABUSY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CCASTOPPED) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_CCASTOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RATEBOOST) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_RATEBOOST)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TXREADY) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_TXREADY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXREADY) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_RXREADY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_MHRMATCH) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_MHRMATCH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_SYNC) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_SYNC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_PHYEND) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EVENTS_PHYEND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRCSTATUS) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(CRCSTATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXMATCH) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RXMATCH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXCRC) as usize - ptr as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RXCRC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DAI) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(DAI)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PDUSTAT) as usize - ptr as usize },
        1044usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(PDUSTAT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PACKETPTR) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(PACKETPTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FREQUENCY) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(FREQUENCY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXPOWER) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TXPOWER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MODE) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(MODE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PCNF0) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(PCNF0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PCNF1) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(PCNF1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BASE0) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(BASE0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BASE1) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(BASE1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PREFIX0) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(PREFIX0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PREFIX1) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(PREFIX1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXADDRESS) as usize - ptr as usize },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TXADDRESS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXADDRESSES) as usize - ptr as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RXADDRESSES)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRCCNF) as usize - ptr as usize },
        1332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(CRCCNF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRCPOLY) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(CRCPOLY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRCINIT) as usize - ptr as usize },
        1340usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(CRCINIT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIFS) as usize - ptr as usize },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(TIFS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RSSISAMPLE) as usize - ptr as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RSSISAMPLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STATE) as usize - ptr as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(STATE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DATAWHITEIV) as usize - ptr as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(DATAWHITEIV)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BCC) as usize - ptr as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(BCC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        1380usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DAB) as usize - ptr as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(DAB)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DAP) as usize - ptr as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(DAP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DACNF) as usize - ptr as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(DACNF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MHRMATCHCONF) as usize - ptr as usize },
        1604usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(MHRMATCHCONF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MHRMATCHMAS) as usize - ptr as usize },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(MHRMATCHMAS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        1612usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MODECNF0) as usize - ptr as usize },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(MODECNF0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED14) as usize - ptr as usize },
        1620usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SFD) as usize - ptr as usize },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(SFD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EDCNT) as usize - ptr as usize },
        1636usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EDCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EDSAMPLE) as usize - ptr as usize },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(EDSAMPLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCACTRL) as usize - ptr as usize },
        1644usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(CCACTRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED15) as usize - ptr as usize },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(RESERVED15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).POWER) as usize - ptr as usize },
        4092usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RADIO_Type),
            "::",
            stringify!(POWER)
        )
    );
}
#[doc = " @brief Universal Asynchronous Receiver/Transmitter (UART0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_UART_Type {
    #[doc = "< (@ 0x00000000) Start UART receiver"]
    pub TASKS_STARTRX: u32,
    #[doc = "< (@ 0x00000004) Stop UART receiver"]
    pub TASKS_STOPRX: u32,
    #[doc = "< (@ 0x00000008) Start UART transmitter"]
    pub TASKS_STARTTX: u32,
    #[doc = "< (@ 0x0000000C) Stop UART transmitter"]
    pub TASKS_STOPTX: u32,
    pub RESERVED: [u32; 3usize],
    #[doc = "< (@ 0x0000001C) Suspend UART"]
    pub TASKS_SUSPEND: u32,
    pub RESERVED1: [u32; 56usize],
    #[doc = "< (@ 0x00000100) CTS is activated (set low). Clear To Send."]
    pub EVENTS_CTS: u32,
    #[doc = "< (@ 0x00000104) CTS is deactivated (set high). Not Clear To Send."]
    pub EVENTS_NCTS: u32,
    #[doc = "< (@ 0x00000108) Data received in RXD"]
    pub EVENTS_RXDRDY: u32,
    pub RESERVED2: [u32; 4usize],
    #[doc = "< (@ 0x0000011C) Data sent from TXD"]
    pub EVENTS_TXDRDY: u32,
    pub RESERVED3: u32,
    #[doc = "< (@ 0x00000124) Error detected"]
    pub EVENTS_ERROR: u32,
    pub RESERVED4: [u32; 7usize],
    #[doc = "< (@ 0x00000144) Receiver timeout"]
    pub EVENTS_RXTO: u32,
    pub RESERVED5: [u32; 46usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED6: [u32; 64usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED7: [u32; 93usize],
    #[doc = "< (@ 0x00000480) Error source"]
    pub ERRORSRC: u32,
    pub RESERVED8: [u32; 31usize],
    #[doc = "< (@ 0x00000500) Enable UART"]
    pub ENABLE: u32,
    pub RESERVED9: u32,
    #[doc = "< (@ 0x00000508) Unspecified"]
    pub PSEL: UART_PSEL_Type,
    #[doc = "< (@ 0x00000518) RXD register"]
    pub RXD: u32,
    #[doc = "< (@ 0x0000051C) TXD register"]
    pub TXD: u32,
    pub RESERVED10: u32,
    #[doc = "< (@ 0x00000524) Baud rate. Accuracy depends on the HFCLK source\nselected."]
    pub BAUDRATE: u32,
    pub RESERVED11: [u32; 17usize],
    #[doc = "< (@ 0x0000056C) Configuration of parity and hardware flow control"]
    pub CONFIG: u32,
}
#[test]
fn bindgen_test_layout_NRF_UART_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_UART_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_UART_Type>(),
        1392usize,
        concat!("Size of: ", stringify!(NRF_UART_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_UART_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_UART_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTRX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(TASKS_STARTRX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOPRX) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(TASKS_STOPRX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTTX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(TASKS_STARTTX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOPTX) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(TASKS_STOPTX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_SUSPEND) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(TASKS_SUSPEND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CTS) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(EVENTS_CTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_NCTS) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(EVENTS_NCTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXDRDY) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(EVENTS_RXDRDY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TXDRDY) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(EVENTS_TXDRDY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ERROR) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(EVENTS_ERROR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXTO) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(EVENTS_RXTO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERRORSRC) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(ERRORSRC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BAUDRATE) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(BAUDRATE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFIG) as usize - ptr as usize },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UART_Type),
            "::",
            stringify!(CONFIG)
        )
    );
}
#[doc = " @brief UART with EasyDMA 0 (UARTE0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_UARTE_Type {
    #[doc = "< (@ 0x00000000) Start UART receiver"]
    pub TASKS_STARTRX: u32,
    #[doc = "< (@ 0x00000004) Stop UART receiver"]
    pub TASKS_STOPRX: u32,
    #[doc = "< (@ 0x00000008) Start UART transmitter"]
    pub TASKS_STARTTX: u32,
    #[doc = "< (@ 0x0000000C) Stop UART transmitter"]
    pub TASKS_STOPTX: u32,
    pub RESERVED: [u32; 7usize],
    #[doc = "< (@ 0x0000002C) Flush RX FIFO into RX buffer"]
    pub TASKS_FLUSHRX: u32,
    pub RESERVED1: [u32; 52usize],
    #[doc = "< (@ 0x00000100) CTS is activated (set low). Clear To Send."]
    pub EVENTS_CTS: u32,
    #[doc = "< (@ 0x00000104) CTS is deactivated (set high). Not Clear To Send."]
    pub EVENTS_NCTS: u32,
    #[doc = "< (@ 0x00000108) Data received in RXD (but potentially not yet\ntransferred to Data RAM)"]
    pub EVENTS_RXDRDY: u32,
    pub RESERVED2: u32,
    #[doc = "< (@ 0x00000110) Receive buffer is filled up"]
    pub EVENTS_ENDRX: u32,
    pub RESERVED3: [u32; 2usize],
    #[doc = "< (@ 0x0000011C) Data sent from TXD"]
    pub EVENTS_TXDRDY: u32,
    #[doc = "< (@ 0x00000120) Last TX byte transmitted"]
    pub EVENTS_ENDTX: u32,
    #[doc = "< (@ 0x00000124) Error detected"]
    pub EVENTS_ERROR: u32,
    pub RESERVED4: [u32; 7usize],
    #[doc = "< (@ 0x00000144) Receiver timeout"]
    pub EVENTS_RXTO: u32,
    pub RESERVED5: u32,
    #[doc = "< (@ 0x0000014C) UART receiver has started"]
    pub EVENTS_RXSTARTED: u32,
    #[doc = "< (@ 0x00000150) UART transmitter has started"]
    pub EVENTS_TXSTARTED: u32,
    pub RESERVED6: u32,
    #[doc = "< (@ 0x00000158) Transmitter stopped"]
    pub EVENTS_TXSTOPPED: u32,
    pub RESERVED7: [u32; 41usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED8: [u32; 63usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED9: [u32; 93usize],
    #[doc = "< (@ 0x00000480) Error source This register is read/write one\nto clear."]
    pub ERRORSRC: u32,
    pub RESERVED10: [u32; 31usize],
    #[doc = "< (@ 0x00000500) Enable UART"]
    pub ENABLE: u32,
    pub RESERVED11: u32,
    #[doc = "< (@ 0x00000508) Unspecified"]
    pub PSEL: UARTE_PSEL_Type,
    pub RESERVED12: [u32; 3usize],
    #[doc = "< (@ 0x00000524) Baud rate. Accuracy depends on the HFCLK source\nselected."]
    pub BAUDRATE: u32,
    pub RESERVED13: [u32; 3usize],
    #[doc = "< (@ 0x00000534) RXD EasyDMA channel"]
    pub RXD: UARTE_RXD_Type,
    pub RESERVED14: u32,
    #[doc = "< (@ 0x00000544) TXD EasyDMA channel"]
    pub TXD: UARTE_TXD_Type,
    pub RESERVED15: [u32; 7usize],
    #[doc = "< (@ 0x0000056C) Configuration of parity and hardware flow control"]
    pub CONFIG: u32,
}
#[test]
fn bindgen_test_layout_NRF_UARTE_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_UARTE_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_UARTE_Type>(),
        1392usize,
        concat!("Size of: ", stringify!(NRF_UARTE_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_UARTE_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_UARTE_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTRX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(TASKS_STARTRX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOPRX) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(TASKS_STOPRX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTTX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(TASKS_STARTTX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOPTX) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(TASKS_STOPTX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_FLUSHRX) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(TASKS_FLUSHRX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CTS) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(EVENTS_CTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_NCTS) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(EVENTS_NCTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXDRDY) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(EVENTS_RXDRDY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDRX) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(EVENTS_ENDRX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TXDRDY) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(EVENTS_TXDRDY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDTX) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(EVENTS_ENDTX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ERROR) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(EVENTS_ERROR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXTO) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(EVENTS_RXTO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXSTARTED) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(EVENTS_RXSTARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TXSTARTED) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(EVENTS_TXSTARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TXSTOPPED) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(EVENTS_TXSTOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERRORSRC) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(ERRORSRC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BAUDRATE) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(BAUDRATE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        1332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED14) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED15) as usize - ptr as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(RESERVED15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFIG) as usize - ptr as usize },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_UARTE_Type),
            "::",
            stringify!(CONFIG)
        )
    );
}
#[doc = " @brief Serial Peripheral Interface 0 (SPI0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_SPI_Type {
    pub RESERVED: [u32; 66usize],
    #[doc = "< (@ 0x00000108) TXD byte sent and RXD byte received"]
    pub EVENTS_READY: u32,
    pub RESERVED1: [u32; 126usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED2: [u32; 125usize],
    #[doc = "< (@ 0x00000500) Enable SPI"]
    pub ENABLE: u32,
    pub RESERVED3: u32,
    #[doc = "< (@ 0x00000508) Unspecified"]
    pub PSEL: SPI_PSEL_Type,
    pub RESERVED4: u32,
    #[doc = "< (@ 0x00000518) RXD register"]
    pub RXD: u32,
    #[doc = "< (@ 0x0000051C) TXD register"]
    pub TXD: u32,
    pub RESERVED5: u32,
    #[doc = "< (@ 0x00000524) SPI frequency. Accuracy depends on the HFCLK\nsource selected."]
    pub FREQUENCY: u32,
    pub RESERVED6: [u32; 11usize],
    #[doc = "< (@ 0x00000554) Configuration register"]
    pub CONFIG: u32,
}
#[test]
fn bindgen_test_layout_NRF_SPI_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_SPI_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_SPI_Type>(),
        1368usize,
        concat!("Size of: ", stringify!(NRF_SPI_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_SPI_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_SPI_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_READY) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(EVENTS_READY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(RXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FREQUENCY) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(FREQUENCY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFIG) as usize - ptr as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPI_Type),
            "::",
            stringify!(CONFIG)
        )
    );
}
#[doc = " @brief Serial Peripheral Interface Master with EasyDMA 0 (SPIM0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_SPIM_Type {
    pub RESERVED: [u32; 4usize],
    #[doc = "< (@ 0x00000010) Start SPI transaction"]
    pub TASKS_START: u32,
    #[doc = "< (@ 0x00000014) Stop SPI transaction"]
    pub TASKS_STOP: u32,
    pub RESERVED1: u32,
    #[doc = "< (@ 0x0000001C) Suspend SPI transaction"]
    pub TASKS_SUSPEND: u32,
    #[doc = "< (@ 0x00000020) Resume SPI transaction"]
    pub TASKS_RESUME: u32,
    pub RESERVED2: [u32; 56usize],
    #[doc = "< (@ 0x00000104) SPI transaction has stopped"]
    pub EVENTS_STOPPED: u32,
    pub RESERVED3: [u32; 2usize],
    #[doc = "< (@ 0x00000110) End of RXD buffer reached"]
    pub EVENTS_ENDRX: u32,
    pub RESERVED4: u32,
    #[doc = "< (@ 0x00000118) End of RXD buffer and TXD buffer reached"]
    pub EVENTS_END: u32,
    pub RESERVED5: u32,
    #[doc = "< (@ 0x00000120) End of TXD buffer reached"]
    pub EVENTS_ENDTX: u32,
    pub RESERVED6: [u32; 10usize],
    #[doc = "< (@ 0x0000014C) Transaction started"]
    pub EVENTS_STARTED: u32,
    pub RESERVED7: [u32; 44usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED8: [u32; 64usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED9: [u32; 61usize],
    #[doc = "< (@ 0x00000400) Stall status for EasyDMA RAM accesses. The fields\nin this register are set to STALL by hardware\nwhenever a stall occurs and can be cleared\n(set to NOSTALL) by the CPU."]
    pub STALLSTAT: u32,
    pub RESERVED10: [u32; 63usize],
    #[doc = "< (@ 0x00000500) Enable SPIM"]
    pub ENABLE: u32,
    pub RESERVED11: u32,
    #[doc = "< (@ 0x00000508) Unspecified"]
    pub PSEL: SPIM_PSEL_Type,
    pub RESERVED12: [u32; 3usize],
    #[doc = "< (@ 0x00000524) SPI frequency. Accuracy depends on the HFCLK\nsource selected."]
    pub FREQUENCY: u32,
    pub RESERVED13: [u32; 3usize],
    #[doc = "< (@ 0x00000534) RXD EasyDMA channel"]
    pub RXD: SPIM_RXD_Type,
    #[doc = "< (@ 0x00000544) TXD EasyDMA channel"]
    pub TXD: SPIM_TXD_Type,
    #[doc = "< (@ 0x00000554) Configuration register"]
    pub CONFIG: u32,
    pub RESERVED14: [u32; 2usize],
    #[doc = "< (@ 0x00000560) Unspecified"]
    pub IFTIMING: SPIM_IFTIMING_Type,
    #[doc = "< (@ 0x00000568) Polarity of CSN output"]
    pub CSNPOL: u32,
    #[doc = "< (@ 0x0000056C) Pin select for DCX signal"]
    pub PSELDCX: u32,
    #[doc = "< (@ 0x00000570) DCX configuration"]
    pub DCXCNT: u32,
    pub RESERVED15: [u32; 19usize],
    #[doc = "< (@ 0x000005C0) Byte transmitted after TXD.MAXCNT bytes have\nbeen transmitted in the case when RXD.MAXCNT\nis greater than TXD.MAXCNT"]
    pub ORC: u32,
}
#[test]
fn bindgen_test_layout_NRF_SPIM_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_SPIM_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_SPIM_Type>(),
        1476usize,
        concat!("Size of: ", stringify!(NRF_SPIM_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_SPIM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_SPIM_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_SUSPEND) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(TASKS_SUSPEND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_RESUME) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(TASKS_RESUME)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STOPPED) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(EVENTS_STOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDRX) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(EVENTS_ENDRX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_END) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(EVENTS_END)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDTX) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(EVENTS_ENDTX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STARTED) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(EVENTS_STARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STALLSTAT) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(STALLSTAT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FREQUENCY) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(FREQUENCY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        1332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFIG) as usize - ptr as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(CONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED14) as usize - ptr as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IFTIMING) as usize - ptr as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(IFTIMING)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSNPOL) as usize - ptr as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(CSNPOL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSELDCX) as usize - ptr as usize },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(PSELDCX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCXCNT) as usize - ptr as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(DCXCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED15) as usize - ptr as usize },
        1396usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(RESERVED15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ORC) as usize - ptr as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIM_Type),
            "::",
            stringify!(ORC)
        )
    );
}
#[doc = " @brief SPI Slave 0 (SPIS0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_SPIS_Type {
    pub RESERVED: [u32; 9usize],
    #[doc = "< (@ 0x00000024) Acquire SPI semaphore"]
    pub TASKS_ACQUIRE: u32,
    #[doc = "< (@ 0x00000028) Release SPI semaphore, enabling the SPI slave\nto acquire it"]
    pub TASKS_RELEASE: u32,
    pub RESERVED1: [u32; 54usize],
    #[doc = "< (@ 0x00000104) Granted transaction completed"]
    pub EVENTS_END: u32,
    pub RESERVED2: [u32; 2usize],
    #[doc = "< (@ 0x00000110) End of RXD buffer reached"]
    pub EVENTS_ENDRX: u32,
    pub RESERVED3: [u32; 5usize],
    #[doc = "< (@ 0x00000128) Semaphore acquired"]
    pub EVENTS_ACQUIRED: u32,
    pub RESERVED4: [u32; 53usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED5: [u32; 64usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED6: [u32; 61usize],
    #[doc = "< (@ 0x00000400) Semaphore status register"]
    pub SEMSTAT: u32,
    pub RESERVED7: [u32; 15usize],
    #[doc = "< (@ 0x00000440) Status from last transaction"]
    pub STATUS: u32,
    pub RESERVED8: [u32; 47usize],
    #[doc = "< (@ 0x00000500) Enable SPI slave"]
    pub ENABLE: u32,
    pub RESERVED9: u32,
    #[doc = "< (@ 0x00000508) Unspecified"]
    pub PSEL: SPIS_PSEL_Type,
    pub RESERVED10: [u32; 7usize],
    #[doc = "< (@ 0x00000534) Unspecified"]
    pub RXD: SPIS_RXD_Type,
    #[doc = "< (@ 0x00000544) Unspecified"]
    pub TXD: SPIS_TXD_Type,
    #[doc = "< (@ 0x00000554) Configuration register"]
    pub CONFIG: u32,
    pub RESERVED11: u32,
    #[doc = "< (@ 0x0000055C) Default character. Character clocked out in case\nof an ignored transaction."]
    pub DEF: u32,
    pub RESERVED12: [u32; 24usize],
    #[doc = "< (@ 0x000005C0) Over-read character"]
    pub ORC: u32,
}
#[test]
fn bindgen_test_layout_NRF_SPIS_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_SPIS_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_SPIS_Type>(),
        1476usize,
        concat!("Size of: ", stringify!(NRF_SPIS_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_SPIS_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_SPIS_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_ACQUIRE) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(TASKS_ACQUIRE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_RELEASE) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(TASKS_RELEASE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_END) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(EVENTS_END)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDRX) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(EVENTS_ENDRX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ACQUIRED) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(EVENTS_ACQUIRED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SEMSTAT) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(SEMSTAT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STATUS) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        1092usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        1332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFIG) as usize - ptr as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(CONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEF) as usize - ptr as usize },
        1372usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(DEF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ORC) as usize - ptr as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SPIS_Type),
            "::",
            stringify!(ORC)
        )
    );
}
#[doc = " @brief I2C compatible Two-Wire Interface 0 (TWI0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_TWI_Type {
    #[doc = "< (@ 0x00000000) Start TWI receive sequence"]
    pub TASKS_STARTRX: u32,
    pub RESERVED: u32,
    #[doc = "< (@ 0x00000008) Start TWI transmit sequence"]
    pub TASKS_STARTTX: u32,
    pub RESERVED1: [u32; 2usize],
    #[doc = "< (@ 0x00000014) Stop TWI transaction"]
    pub TASKS_STOP: u32,
    pub RESERVED2: u32,
    #[doc = "< (@ 0x0000001C) Suspend TWI transaction"]
    pub TASKS_SUSPEND: u32,
    #[doc = "< (@ 0x00000020) Resume TWI transaction"]
    pub TASKS_RESUME: u32,
    pub RESERVED3: [u32; 56usize],
    #[doc = "< (@ 0x00000104) TWI stopped"]
    pub EVENTS_STOPPED: u32,
    #[doc = "< (@ 0x00000108) TWI RXD byte received"]
    pub EVENTS_RXDREADY: u32,
    pub RESERVED4: [u32; 4usize],
    #[doc = "< (@ 0x0000011C) TWI TXD byte sent"]
    pub EVENTS_TXDSENT: u32,
    pub RESERVED5: u32,
    #[doc = "< (@ 0x00000124) TWI error"]
    pub EVENTS_ERROR: u32,
    pub RESERVED6: [u32; 4usize],
    #[doc = "< (@ 0x00000138) TWI byte boundary, generated before each byte\nthat is sent or received"]
    pub EVENTS_BB: u32,
    pub RESERVED7: [u32; 3usize],
    #[doc = "< (@ 0x00000148) TWI entered the suspended state"]
    pub EVENTS_SUSPENDED: u32,
    pub RESERVED8: [u32; 45usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED9: [u32; 64usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED10: [u32; 110usize],
    #[doc = "< (@ 0x000004C4) Error source"]
    pub ERRORSRC: u32,
    pub RESERVED11: [u32; 14usize],
    #[doc = "< (@ 0x00000500) Enable TWI"]
    pub ENABLE: u32,
    pub RESERVED12: u32,
    #[doc = "< (@ 0x00000508) Unspecified"]
    pub PSEL: TWI_PSEL_Type,
    pub RESERVED13: [u32; 2usize],
    #[doc = "< (@ 0x00000518) RXD register"]
    pub RXD: u32,
    #[doc = "< (@ 0x0000051C) TXD register"]
    pub TXD: u32,
    pub RESERVED14: u32,
    #[doc = "< (@ 0x00000524) TWI frequency. Accuracy depends on the HFCLK\nsource selected."]
    pub FREQUENCY: u32,
    pub RESERVED15: [u32; 24usize],
    #[doc = "< (@ 0x00000588) Address used in the TWI transfer"]
    pub ADDRESS: u32,
}
#[test]
fn bindgen_test_layout_NRF_TWI_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_TWI_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_TWI_Type>(),
        1420usize,
        concat!("Size of: ", stringify!(NRF_TWI_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_TWI_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_TWI_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTRX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(TASKS_STARTRX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTTX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(TASKS_STARTTX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_SUSPEND) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(TASKS_SUSPEND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_RESUME) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(TASKS_RESUME)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STOPPED) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(EVENTS_STOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXDREADY) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(EVENTS_RXDREADY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TXDSENT) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(EVENTS_TXDSENT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ERROR) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(EVENTS_ERROR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_BB) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(EVENTS_BB)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_SUSPENDED) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(EVENTS_SUSPENDED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERRORSRC) as usize - ptr as usize },
        1220usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(ERRORSRC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED14) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FREQUENCY) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(FREQUENCY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED15) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(RESERVED15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADDRESS) as usize - ptr as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWI_Type),
            "::",
            stringify!(ADDRESS)
        )
    );
}
#[doc = " @brief I2C compatible Two-Wire Master Interface with EasyDMA 0 (TWIM0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_TWIM_Type {
    #[doc = "< (@ 0x00000000) Start TWI receive sequence"]
    pub TASKS_STARTRX: u32,
    pub RESERVED: u32,
    #[doc = "< (@ 0x00000008) Start TWI transmit sequence"]
    pub TASKS_STARTTX: u32,
    pub RESERVED1: [u32; 2usize],
    #[doc = "< (@ 0x00000014) Stop TWI transaction. Must be issued while the\nTWI master is not suspended."]
    pub TASKS_STOP: u32,
    pub RESERVED2: u32,
    #[doc = "< (@ 0x0000001C) Suspend TWI transaction"]
    pub TASKS_SUSPEND: u32,
    #[doc = "< (@ 0x00000020) Resume TWI transaction"]
    pub TASKS_RESUME: u32,
    pub RESERVED3: [u32; 56usize],
    #[doc = "< (@ 0x00000104) TWI stopped"]
    pub EVENTS_STOPPED: u32,
    pub RESERVED4: [u32; 7usize],
    #[doc = "< (@ 0x00000124) TWI error"]
    pub EVENTS_ERROR: u32,
    pub RESERVED5: [u32; 8usize],
    #[doc = "< (@ 0x00000148) SUSPEND task has been issued, TWI traffic is\nnow suspended."]
    pub EVENTS_SUSPENDED: u32,
    #[doc = "< (@ 0x0000014C) Receive sequence started"]
    pub EVENTS_RXSTARTED: u32,
    #[doc = "< (@ 0x00000150) Transmit sequence started"]
    pub EVENTS_TXSTARTED: u32,
    pub RESERVED6: [u32; 2usize],
    #[doc = "< (@ 0x0000015C) Byte boundary, starting to receive the last byte"]
    pub EVENTS_LASTRX: u32,
    #[doc = "< (@ 0x00000160) Byte boundary, starting to transmit the last\nbyte"]
    pub EVENTS_LASTTX: u32,
    pub RESERVED7: [u32; 39usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED8: [u32; 63usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED9: [u32; 110usize],
    #[doc = "< (@ 0x000004C4) Error source"]
    pub ERRORSRC: u32,
    pub RESERVED10: [u32; 14usize],
    #[doc = "< (@ 0x00000500) Enable TWIM"]
    pub ENABLE: u32,
    pub RESERVED11: u32,
    #[doc = "< (@ 0x00000508) Unspecified"]
    pub PSEL: TWIM_PSEL_Type,
    pub RESERVED12: [u32; 5usize],
    #[doc = "< (@ 0x00000524) TWI frequency. Accuracy depends on the HFCLK\nsource selected."]
    pub FREQUENCY: u32,
    pub RESERVED13: [u32; 3usize],
    #[doc = "< (@ 0x00000534) RXD EasyDMA channel"]
    pub RXD: TWIM_RXD_Type,
    #[doc = "< (@ 0x00000544) TXD EasyDMA channel"]
    pub TXD: TWIM_TXD_Type,
    pub RESERVED14: [u32; 13usize],
    #[doc = "< (@ 0x00000588) Address used in the TWI transfer"]
    pub ADDRESS: u32,
}
#[test]
fn bindgen_test_layout_NRF_TWIM_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_TWIM_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_TWIM_Type>(),
        1420usize,
        concat!("Size of: ", stringify!(NRF_TWIM_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_TWIM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_TWIM_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTRX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(TASKS_STARTRX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTTX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(TASKS_STARTTX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_SUSPEND) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(TASKS_SUSPEND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_RESUME) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(TASKS_RESUME)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STOPPED) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(EVENTS_STOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ERROR) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(EVENTS_ERROR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_SUSPENDED) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(EVENTS_SUSPENDED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXSTARTED) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(EVENTS_RXSTARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TXSTARTED) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(EVENTS_TXSTARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_LASTRX) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(EVENTS_LASTRX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_LASTTX) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(EVENTS_LASTTX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERRORSRC) as usize - ptr as usize },
        1220usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(ERRORSRC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FREQUENCY) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(FREQUENCY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        1332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED14) as usize - ptr as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(RESERVED14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADDRESS) as usize - ptr as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIM_Type),
            "::",
            stringify!(ADDRESS)
        )
    );
}
#[doc = " @brief I2C compatible Two-Wire Slave Interface with EasyDMA 0 (TWIS0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_TWIS_Type {
    pub RESERVED: [u32; 5usize],
    #[doc = "< (@ 0x00000014) Stop TWI transaction"]
    pub TASKS_STOP: u32,
    pub RESERVED1: u32,
    #[doc = "< (@ 0x0000001C) Suspend TWI transaction"]
    pub TASKS_SUSPEND: u32,
    #[doc = "< (@ 0x00000020) Resume TWI transaction"]
    pub TASKS_RESUME: u32,
    pub RESERVED2: [u32; 3usize],
    #[doc = "< (@ 0x00000030) Prepare the TWI slave to respond to a write command"]
    pub TASKS_PREPARERX: u32,
    #[doc = "< (@ 0x00000034) Prepare the TWI slave to respond to a read command"]
    pub TASKS_PREPARETX: u32,
    pub RESERVED3: [u32; 51usize],
    #[doc = "< (@ 0x00000104) TWI stopped"]
    pub EVENTS_STOPPED: u32,
    pub RESERVED4: [u32; 7usize],
    #[doc = "< (@ 0x00000124) TWI error"]
    pub EVENTS_ERROR: u32,
    pub RESERVED5: [u32; 9usize],
    #[doc = "< (@ 0x0000014C) Receive sequence started"]
    pub EVENTS_RXSTARTED: u32,
    #[doc = "< (@ 0x00000150) Transmit sequence started"]
    pub EVENTS_TXSTARTED: u32,
    pub RESERVED6: [u32; 4usize],
    #[doc = "< (@ 0x00000164) Write command received"]
    pub EVENTS_WRITE: u32,
    #[doc = "< (@ 0x00000168) Read command received"]
    pub EVENTS_READ: u32,
    pub RESERVED7: [u32; 37usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED8: [u32; 63usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED9: [u32; 113usize],
    #[doc = "< (@ 0x000004D0) Error source"]
    pub ERRORSRC: u32,
    #[doc = "< (@ 0x000004D4) Status register indicating which address had\na match"]
    pub MATCH: u32,
    pub RESERVED10: [u32; 10usize],
    #[doc = "< (@ 0x00000500) Enable TWIS"]
    pub ENABLE: u32,
    pub RESERVED11: u32,
    #[doc = "< (@ 0x00000508) Unspecified"]
    pub PSEL: TWIS_PSEL_Type,
    pub RESERVED12: [u32; 9usize],
    #[doc = "< (@ 0x00000534) RXD EasyDMA channel"]
    pub RXD: TWIS_RXD_Type,
    #[doc = "< (@ 0x00000544) TXD EasyDMA channel"]
    pub TXD: TWIS_TXD_Type,
    pub RESERVED13: [u32; 13usize],
    #[doc = "< (@ 0x00000588) Description collection: TWI slave address n"]
    pub ADDRESS: [u32; 2usize],
    pub RESERVED14: u32,
    #[doc = "< (@ 0x00000594) Configuration register for the address match\nmechanism"]
    pub CONFIG: u32,
    pub RESERVED15: [u32; 10usize],
    #[doc = "< (@ 0x000005C0) Over-read character. Character sent out in case\nof an over-read of the transmit buffer."]
    pub ORC: u32,
}
#[test]
fn bindgen_test_layout_NRF_TWIS_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_TWIS_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_TWIS_Type>(),
        1476usize,
        concat!("Size of: ", stringify!(NRF_TWIS_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_TWIS_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_TWIS_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_SUSPEND) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(TASKS_SUSPEND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_RESUME) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(TASKS_RESUME)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_PREPARERX) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(TASKS_PREPARERX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_PREPARETX) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(TASKS_PREPARETX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STOPPED) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(EVENTS_STOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ERROR) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(EVENTS_ERROR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXSTARTED) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(EVENTS_RXSTARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TXSTARTED) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(EVENTS_TXSTARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_WRITE) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(EVENTS_WRITE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_READ) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(EVENTS_READ)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERRORSRC) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(ERRORSRC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MATCH) as usize - ptr as usize },
        1236usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(MATCH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        1332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADDRESS) as usize - ptr as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(ADDRESS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED14) as usize - ptr as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFIG) as usize - ptr as usize },
        1428usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(CONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED15) as usize - ptr as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(RESERVED15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ORC) as usize - ptr as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TWIS_Type),
            "::",
            stringify!(ORC)
        )
    );
}
#[doc = " @brief NFC-A compatible radio (NFCT)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_NFCT_Type {
    #[doc = "< (@ 0x00000000) Activate NFCT peripheral for incoming and outgoing\nframes, change state to activated"]
    pub TASKS_ACTIVATE: u32,
    #[doc = "< (@ 0x00000004) Disable NFCT peripheral"]
    pub TASKS_DISABLE: u32,
    #[doc = "< (@ 0x00000008) Enable NFC sense field mode, change state to\nsense mode"]
    pub TASKS_SENSE: u32,
    #[doc = "< (@ 0x0000000C) Start transmission of an outgoing frame, change\nstate to transmit"]
    pub TASKS_STARTTX: u32,
    pub RESERVED: [u32; 3usize],
    #[doc = "< (@ 0x0000001C) Initializes the EasyDMA for receive."]
    pub TASKS_ENABLERXDATA: u32,
    pub RESERVED1: u32,
    #[doc = "< (@ 0x00000024) Force state machine to IDLE state"]
    pub TASKS_GOIDLE: u32,
    #[doc = "< (@ 0x00000028) Force state machine to SLEEP_A state"]
    pub TASKS_GOSLEEP: u32,
    pub RESERVED2: [u32; 53usize],
    #[doc = "< (@ 0x00000100) The NFCT peripheral is ready to receive and send\nframes"]
    pub EVENTS_READY: u32,
    #[doc = "< (@ 0x00000104) Remote NFC field detected"]
    pub EVENTS_FIELDDETECTED: u32,
    #[doc = "< (@ 0x00000108) Remote NFC field lost"]
    pub EVENTS_FIELDLOST: u32,
    #[doc = "< (@ 0x0000010C) Marks the start of the first symbol of a transmitted\nframe"]
    pub EVENTS_TXFRAMESTART: u32,
    #[doc = "< (@ 0x00000110) Marks the end of the last transmitted on-air\nsymbol of a frame"]
    pub EVENTS_TXFRAMEEND: u32,
    #[doc = "< (@ 0x00000114) Marks the end of the first symbol of a received\nframe"]
    pub EVENTS_RXFRAMESTART: u32,
    #[doc = "< (@ 0x00000118) Received data has been checked (CRC, parity)\nand transferred to RAM, and EasyDMA has\nended accessing the RX buffer"]
    pub EVENTS_RXFRAMEEND: u32,
    #[doc = "< (@ 0x0000011C) NFC error reported. The ERRORSTATUS register\ncontains details on the source of the error."]
    pub EVENTS_ERROR: u32,
    pub RESERVED3: [u32; 2usize],
    #[doc = "< (@ 0x00000128) NFC RX frame error reported. The FRAMESTATUS.RX\nregister contains details on the source\nof the error."]
    pub EVENTS_RXERROR: u32,
    #[doc = "< (@ 0x0000012C) RX buffer (as defined by PACKETPTR and MAXLEN)\nin Data RAM full."]
    pub EVENTS_ENDRX: u32,
    #[doc = "< (@ 0x00000130) Transmission of data in RAM has ended, and EasyDMA\nhas ended accessing the TX buffer"]
    pub EVENTS_ENDTX: u32,
    pub RESERVED4: u32,
    #[doc = "< (@ 0x00000138) Auto collision resolution process has started"]
    pub EVENTS_AUTOCOLRESSTARTED: u32,
    pub RESERVED5: [u32; 3usize],
    #[doc = "< (@ 0x00000148) NFC auto collision resolution error reported."]
    pub EVENTS_COLLISION: u32,
    #[doc = "< (@ 0x0000014C) NFC auto collision resolution successfully completed"]
    pub EVENTS_SELECTED: u32,
    #[doc = "< (@ 0x00000150) EasyDMA is ready to receive or send frames."]
    pub EVENTS_STARTED: u32,
    pub RESERVED6: [u32; 43usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED7: [u32; 63usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED8: [u32; 62usize],
    #[doc = "< (@ 0x00000404) NFC Error Status register"]
    pub ERRORSTATUS: u32,
    pub RESERVED9: u32,
    #[doc = "< (@ 0x0000040C) Unspecified"]
    pub FRAMESTATUS: NFCT_FRAMESTATUS_Type,
    #[doc = "< (@ 0x00000410) NfcTag state register"]
    pub NFCTAGSTATE: u32,
    pub RESERVED10: [u32; 3usize],
    #[doc = "< (@ 0x00000420) Sleep state during automatic collision resolution"]
    pub SLEEPSTATE: u32,
    pub RESERVED11: [u32; 6usize],
    #[doc = "< (@ 0x0000043C) Indicates the presence or not of a valid field"]
    pub FIELDPRESENT: u32,
    pub RESERVED12: [u32; 49usize],
    #[doc = "< (@ 0x00000504) Minimum frame delay"]
    pub FRAMEDELAYMIN: u32,
    #[doc = "< (@ 0x00000508) Maximum frame delay"]
    pub FRAMEDELAYMAX: u32,
    #[doc = "< (@ 0x0000050C) Configuration register for the Frame Delay Timer"]
    pub FRAMEDELAYMODE: u32,
    #[doc = "< (@ 0x00000510) Packet pointer for TXD and RXD data storage in\nData RAM"]
    pub PACKETPTR: u32,
    #[doc = "< (@ 0x00000514) Size of the RAM buffer allocated to TXD and RXD\ndata storage each"]
    pub MAXLEN: u32,
    #[doc = "< (@ 0x00000518) Unspecified"]
    pub TXD: NFCT_TXD_Type,
    #[doc = "< (@ 0x00000520) Unspecified"]
    pub RXD: NFCT_RXD_Type,
    pub RESERVED13: [u32; 26usize],
    #[doc = "< (@ 0x00000590) Last NFCID1 part (4, 7 or 10 bytes ID)"]
    pub NFCID1_LAST: u32,
    #[doc = "< (@ 0x00000594) Second last NFCID1 part (7 or 10 bytes ID)"]
    pub NFCID1_2ND_LAST: u32,
    #[doc = "< (@ 0x00000598) Third last NFCID1 part (10 bytes ID)"]
    pub NFCID1_3RD_LAST: u32,
    #[doc = "< (@ 0x0000059C) Controls the auto collision resolution function.\nThis setting must be done before the NFCT\nperipheral is activated."]
    pub AUTOCOLRESCONFIG: u32,
    #[doc = "< (@ 0x000005A0) NFC-A SENS_RES auto-response settings"]
    pub SENSRES: u32,
    #[doc = "< (@ 0x000005A4) NFC-A SEL_RES auto-response settings"]
    pub SELRES: u32,
}
#[test]
fn bindgen_test_layout_NRF_NFCT_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_NFCT_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_NFCT_Type>(),
        1448usize,
        concat!("Size of: ", stringify!(NRF_NFCT_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_NFCT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_NFCT_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_ACTIVATE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(TASKS_ACTIVATE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_DISABLE) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(TASKS_DISABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_SENSE) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(TASKS_SENSE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTTX) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(TASKS_STARTTX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_ENABLERXDATA) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(TASKS_ENABLERXDATA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_GOIDLE) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(TASKS_GOIDLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_GOSLEEP) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(TASKS_GOSLEEP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_READY) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_READY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_FIELDDETECTED) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_FIELDDETECTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_FIELDLOST) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_FIELDLOST)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TXFRAMESTART) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_TXFRAMESTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TXFRAMEEND) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_TXFRAMEEND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXFRAMESTART) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_RXFRAMESTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXFRAMEEND) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_RXFRAMEEND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ERROR) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_ERROR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXERROR) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_RXERROR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDRX) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_ENDRX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDTX) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_ENDTX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_AUTOCOLRESSTARTED) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_AUTOCOLRESSTARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_COLLISION) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_COLLISION)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_SELECTED) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_SELECTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STARTED) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(EVENTS_STARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERRORSTATUS) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(ERRORSTATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FRAMESTATUS) as usize - ptr as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(FRAMESTATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NFCTAGSTATE) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(NFCTAGSTATE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        1044usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SLEEPSTATE) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(SLEEPSTATE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        1060usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FIELDPRESENT) as usize - ptr as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(FIELDPRESENT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FRAMEDELAYMIN) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(FRAMEDELAYMIN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FRAMEDELAYMAX) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(FRAMEDELAYMAX)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FRAMEDELAYMODE) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(FRAMEDELAYMODE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PACKETPTR) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(PACKETPTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXLEN) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(MAXLEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NFCID1_LAST) as usize - ptr as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(NFCID1_LAST)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NFCID1_2ND_LAST) as usize - ptr as usize },
        1428usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(NFCID1_2ND_LAST)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NFCID1_3RD_LAST) as usize - ptr as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(NFCID1_3RD_LAST)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AUTOCOLRESCONFIG) as usize - ptr as usize },
        1436usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(AUTOCOLRESCONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SENSRES) as usize - ptr as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(SENSRES)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SELRES) as usize - ptr as usize },
        1444usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NFCT_Type),
            "::",
            stringify!(SELRES)
        )
    );
}
#[doc = " @brief GPIO Tasks and Events (GPIOTE)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_GPIOTE_Type {
    #[doc = "< (@ 0x00000000) Description collection: Task for writing to pin\nspecified in CONFIG[n].PSEL. Action on pin\nis configured in CONFIG[n].POLARITY."]
    pub TASKS_OUT: [u32; 8usize],
    pub RESERVED: [u32; 4usize],
    #[doc = "< (@ 0x00000030) Description collection: Task for writing to pin\nspecified in CONFIG[n].PSEL. Action on pin\nis to set it high."]
    pub TASKS_SET: [u32; 8usize],
    pub RESERVED1: [u32; 4usize],
    #[doc = "< (@ 0x00000060) Description collection: Task for writing to pin\nspecified in CONFIG[n].PSEL. Action on pin\nis to set it low."]
    pub TASKS_CLR: [u32; 8usize],
    pub RESERVED2: [u32; 32usize],
    #[doc = "< (@ 0x00000100) Description collection: Event generated from\npin specified in CONFIG[n].PSEL"]
    pub EVENTS_IN: [u32; 8usize],
    pub RESERVED3: [u32; 23usize],
    #[doc = "< (@ 0x0000017C) Event generated from multiple input GPIO pins\nwith SENSE mechanism enabled"]
    pub EVENTS_PORT: u32,
    pub RESERVED4: [u32; 97usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED5: [u32; 129usize],
    #[doc = "< (@ 0x00000510) Description collection: Configuration for OUT[n],\nSET[n], and CLR[n] tasks and IN[n] event"]
    pub CONFIG: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_NRF_GPIOTE_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_GPIOTE_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_GPIOTE_Type>(),
        1328usize,
        concat!("Size of: ", stringify!(NRF_GPIOTE_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_GPIOTE_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_GPIOTE_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_OUT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(TASKS_OUT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_SET) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(TASKS_SET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CLR) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(TASKS_CLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_IN) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(EVENTS_IN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_PORT) as usize - ptr as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(EVENTS_PORT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFIG) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_GPIOTE_Type),
            "::",
            stringify!(CONFIG)
        )
    );
}
#[doc = " @brief Successive approximation register (SAR) analog-to-digital converter (SAADC)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_SAADC_Type {
    #[doc = "< (@ 0x00000000) Starts the SAADC and prepares the result buffer\nin RAM"]
    pub TASKS_START: u32,
    #[doc = "< (@ 0x00000004) Takes one SAADC sample"]
    pub TASKS_SAMPLE: u32,
    #[doc = "< (@ 0x00000008) Stops the SAADC and terminates all on-going conversions"]
    pub TASKS_STOP: u32,
    #[doc = "< (@ 0x0000000C) Starts offset auto-calibration"]
    pub TASKS_CALIBRATEOFFSET: u32,
    pub RESERVED: [u32; 60usize],
    #[doc = "< (@ 0x00000100) The SAADC has started"]
    pub EVENTS_STARTED: u32,
    #[doc = "< (@ 0x00000104) The SAADC has filled up the result buffer"]
    pub EVENTS_END: u32,
    #[doc = "< (@ 0x00000108) A conversion task has been completed. Depending\non the configuration, multiple conversions\nmight be needed for a result to be transferred\nto RAM."]
    pub EVENTS_DONE: u32,
    #[doc = "< (@ 0x0000010C) Result ready for transfer to RAM"]
    pub EVENTS_RESULTDONE: u32,
    #[doc = "< (@ 0x00000110) Calibration is complete"]
    pub EVENTS_CALIBRATEDONE: u32,
    #[doc = "< (@ 0x00000114) The SAADC has stopped"]
    pub EVENTS_STOPPED: u32,
    #[doc = "< (@ 0x00000118) Peripheral events."]
    pub EVENTS_CH: [SAADC_EVENTS_CH_Type; 8usize],
    pub RESERVED1: [u32; 106usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED2: [u32; 61usize],
    #[doc = "< (@ 0x00000400) Status"]
    pub STATUS: u32,
    pub RESERVED3: [u32; 63usize],
    #[doc = "< (@ 0x00000500) Enable or disable SAADC"]
    pub ENABLE: u32,
    pub RESERVED4: [u32; 3usize],
    #[doc = "< (@ 0x00000510) Unspecified"]
    pub CH: [SAADC_CH_Type; 8usize],
    pub RESERVED5: [u32; 24usize],
    #[doc = "< (@ 0x000005F0) Resolution configuration"]
    pub RESOLUTION: u32,
    #[doc = "< (@ 0x000005F4) Oversampling configuration. The RESOLUTION is\napplied before averaging, thus for high\nOVERSAMPLE a higher RESOLUTION should be\nused."]
    pub OVERSAMPLE: u32,
    #[doc = "< (@ 0x000005F8) Controls normal or continuous sample rate"]
    pub SAMPLERATE: u32,
    pub RESERVED6: [u32; 12usize],
    #[doc = "< (@ 0x0000062C) RESULT EasyDMA channel"]
    pub RESULT: SAADC_RESULT_Type,
}
#[test]
fn bindgen_test_layout_NRF_SAADC_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_SAADC_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_SAADC_Type>(),
        1592usize,
        concat!("Size of: ", stringify!(NRF_SAADC_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_SAADC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_SAADC_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_SAMPLE) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(TASKS_SAMPLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CALIBRATEOFFSET) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(TASKS_CALIBRATEOFFSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STARTED) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(EVENTS_STARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_END) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(EVENTS_END)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_DONE) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(EVENTS_DONE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RESULTDONE) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(EVENTS_RESULTDONE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CALIBRATEDONE) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(EVENTS_CALIBRATEDONE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STOPPED) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(EVENTS_STOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CH) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(EVENTS_CH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STATUS) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CH) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(CH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESOLUTION) as usize - ptr as usize },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(RESOLUTION)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OVERSAMPLE) as usize - ptr as usize },
        1524usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(OVERSAMPLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SAMPLERATE) as usize - ptr as usize },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(SAMPLERATE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        1532usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESULT) as usize - ptr as usize },
        1580usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SAADC_Type),
            "::",
            stringify!(RESULT)
        )
    );
}
#[doc = " @brief Timer/Counter 0 (TIMER0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_TIMER_Type {
    #[doc = "< (@ 0x00000000) Start Timer"]
    pub TASKS_START: u32,
    #[doc = "< (@ 0x00000004) Stop Timer"]
    pub TASKS_STOP: u32,
    #[doc = "< (@ 0x00000008) Increment Timer (Counter mode only)"]
    pub TASKS_COUNT: u32,
    #[doc = "< (@ 0x0000000C) Clear time"]
    pub TASKS_CLEAR: u32,
    #[doc = "< (@ 0x00000010) Deprecated register - Shut down timer"]
    pub TASKS_SHUTDOWN: u32,
    pub RESERVED: [u32; 11usize],
    #[doc = "< (@ 0x00000040) Description collection: Capture Timer value to\nCC[n] register"]
    pub TASKS_CAPTURE: [u32; 6usize],
    pub RESERVED1: [u32; 58usize],
    #[doc = "< (@ 0x00000140) Description collection: Compare event on CC[n]\nmatch"]
    pub EVENTS_COMPARE: [u32; 6usize],
    pub RESERVED2: [u32; 42usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED3: [u32; 64usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED4: [u32; 126usize],
    #[doc = "< (@ 0x00000504) Timer mode selection"]
    pub MODE: u32,
    #[doc = "< (@ 0x00000508) Configure the number of bits used by the TIMER"]
    pub BITMODE: u32,
    pub RESERVED5: u32,
    #[doc = "< (@ 0x00000510) Timer prescaler register"]
    pub PRESCALER: u32,
    pub RESERVED6: [u32; 11usize],
    #[doc = "< (@ 0x00000540) Description collection: Capture/Compare register\nn"]
    pub CC: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_NRF_TIMER_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_TIMER_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_TIMER_Type>(),
        1368usize,
        concat!("Size of: ", stringify!(NRF_TIMER_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_TIMER_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_TIMER_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_COUNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(TASKS_COUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CLEAR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(TASKS_CLEAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_SHUTDOWN) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(TASKS_SHUTDOWN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CAPTURE) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(TASKS_CAPTURE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_COMPARE) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(EVENTS_COMPARE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MODE) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(MODE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BITMODE) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(BITMODE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PRESCALER) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(PRESCALER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CC) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TIMER_Type),
            "::",
            stringify!(CC)
        )
    );
}
#[doc = " @brief Real time counter 0 (RTC0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_RTC_Type {
    #[doc = "< (@ 0x00000000) Start RTC COUNTER"]
    pub TASKS_START: u32,
    #[doc = "< (@ 0x00000004) Stop RTC COUNTER"]
    pub TASKS_STOP: u32,
    #[doc = "< (@ 0x00000008) Clear RTC COUNTER"]
    pub TASKS_CLEAR: u32,
    #[doc = "< (@ 0x0000000C) Set COUNTER to 0xFFFFF0"]
    pub TASKS_TRIGOVRFLW: u32,
    pub RESERVED: [u32; 60usize],
    #[doc = "< (@ 0x00000100) Event on COUNTER increment"]
    pub EVENTS_TICK: u32,
    #[doc = "< (@ 0x00000104) Event on COUNTER overflow"]
    pub EVENTS_OVRFLW: u32,
    pub RESERVED1: [u32; 14usize],
    #[doc = "< (@ 0x00000140) Description collection: Compare event on CC[n]\nmatch"]
    pub EVENTS_COMPARE: [u32; 4usize],
    pub RESERVED2: [u32; 109usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 13usize],
    #[doc = "< (@ 0x00000340) Enable or disable event routing"]
    pub EVTEN: u32,
    #[doc = "< (@ 0x00000344) Enable event routing"]
    pub EVTENSET: u32,
    #[doc = "< (@ 0x00000348) Disable event routing"]
    pub EVTENCLR: u32,
    pub RESERVED4: [u32; 110usize],
    #[doc = "< (@ 0x00000504) Current COUNTER value"]
    pub COUNTER: u32,
    #[doc = "< (@ 0x00000508) 12 bit prescaler for COUNTER frequency (32768/(PRESCALER+1)).\nMust be written when RTC is stopped."]
    pub PRESCALER: u32,
    pub RESERVED5: [u32; 13usize],
    #[doc = "< (@ 0x00000540) Description collection: Compare register n"]
    pub CC: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_NRF_RTC_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_RTC_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_RTC_Type>(),
        1360usize,
        concat!("Size of: ", stringify!(NRF_RTC_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_RTC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_RTC_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CLEAR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(TASKS_CLEAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_TRIGOVRFLW) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(TASKS_TRIGOVRFLW)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TICK) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(EVENTS_TICK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_OVRFLW) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(EVENTS_OVRFLW)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_COMPARE) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(EVENTS_COMPARE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVTEN) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(EVTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVTENSET) as usize - ptr as usize },
        836usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(EVTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVTENCLR) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(EVTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).COUNTER) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(COUNTER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PRESCALER) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(PRESCALER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CC) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RTC_Type),
            "::",
            stringify!(CC)
        )
    );
}
#[doc = " @brief Temperature Sensor (TEMP)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_TEMP_Type {
    #[doc = "< (@ 0x00000000) Start temperature measurement"]
    pub TASKS_START: u32,
    #[doc = "< (@ 0x00000004) Stop temperature measurement"]
    pub TASKS_STOP: u32,
    pub RESERVED: [u32; 62usize],
    #[doc = "< (@ 0x00000100) Temperature measurement complete, data ready"]
    pub EVENTS_DATARDY: u32,
    pub RESERVED1: [u32; 128usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED2: [u32; 127usize],
    #[doc = "< (@ 0x00000508) Temperature in degC (0.25deg steps)"]
    pub TEMP: i32,
    pub RESERVED3: [u32; 5usize],
    #[doc = "< (@ 0x00000520) Slope of first piecewise linear function"]
    pub A0: u32,
    #[doc = "< (@ 0x00000524) Slope of second piecewise linear function"]
    pub A1: u32,
    #[doc = "< (@ 0x00000528) Slope of third piecewise linear function"]
    pub A2: u32,
    #[doc = "< (@ 0x0000052C) Slope of fourth piecewise linear function"]
    pub A3: u32,
    #[doc = "< (@ 0x00000530) Slope of fifth piecewise linear function"]
    pub A4: u32,
    #[doc = "< (@ 0x00000534) Slope of sixth piecewise linear function"]
    pub A5: u32,
    pub RESERVED4: [u32; 2usize],
    #[doc = "< (@ 0x00000540) y-intercept of first piecewise linear function"]
    pub B0: u32,
    #[doc = "< (@ 0x00000544) y-intercept of second piecewise linear function"]
    pub B1: u32,
    #[doc = "< (@ 0x00000548) y-intercept of third piecewise linear function"]
    pub B2: u32,
    #[doc = "< (@ 0x0000054C) y-intercept of fourth piecewise linear function"]
    pub B3: u32,
    #[doc = "< (@ 0x00000550) y-intercept of fifth piecewise linear function"]
    pub B4: u32,
    #[doc = "< (@ 0x00000554) y-intercept of sixth piecewise linear function"]
    pub B5: u32,
    pub RESERVED5: [u32; 2usize],
    #[doc = "< (@ 0x00000560) End point of first piecewise linear function"]
    pub T0: u32,
    #[doc = "< (@ 0x00000564) End point of second piecewise linear function"]
    pub T1: u32,
    #[doc = "< (@ 0x00000568) End point of third piecewise linear function"]
    pub T2: u32,
    #[doc = "< (@ 0x0000056C) End point of fourth piecewise linear function"]
    pub T3: u32,
    #[doc = "< (@ 0x00000570) End point of fifth piecewise linear function"]
    pub T4: u32,
}
#[test]
fn bindgen_test_layout_NRF_TEMP_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_TEMP_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_TEMP_Type>(),
        1396usize,
        concat!("Size of: ", stringify!(NRF_TEMP_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_TEMP_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_TEMP_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_DATARDY) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(EVENTS_DATARDY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TEMP) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(TEMP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A0) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(A0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A1) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(A1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A2) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(A2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A3) as usize - ptr as usize },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(A3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A4) as usize - ptr as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(A4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).A5) as usize - ptr as usize },
        1332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(A5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B0) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(B0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B1) as usize - ptr as usize },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(B1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B2) as usize - ptr as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(B2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B3) as usize - ptr as usize },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(B3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B4) as usize - ptr as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(B4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).B5) as usize - ptr as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(B5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).T0) as usize - ptr as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(T0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).T1) as usize - ptr as usize },
        1380usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(T1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).T2) as usize - ptr as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(T2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).T3) as usize - ptr as usize },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(T3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).T4) as usize - ptr as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_TEMP_Type),
            "::",
            stringify!(T4)
        )
    );
}
#[doc = " @brief Random Number Generator (RNG)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_RNG_Type {
    #[doc = "< (@ 0x00000000) Task starting the random number generator"]
    pub TASKS_START: u32,
    #[doc = "< (@ 0x00000004) Task stopping the random number generator"]
    pub TASKS_STOP: u32,
    pub RESERVED: [u32; 62usize],
    #[doc = "< (@ 0x00000100) Event being generated for every new random number\nwritten to the VALUE register"]
    pub EVENTS_VALRDY: u32,
    pub RESERVED1: [u32; 63usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED2: [u32; 64usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 126usize],
    #[doc = "< (@ 0x00000504) Configuration register"]
    pub CONFIG: u32,
    #[doc = "< (@ 0x00000508) Output random number"]
    pub VALUE: u32,
}
#[test]
fn bindgen_test_layout_NRF_RNG_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_RNG_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_RNG_Type>(),
        1292usize,
        concat!("Size of: ", stringify!(NRF_RNG_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_RNG_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_RNG_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RNG_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RNG_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RNG_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_VALRDY) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RNG_Type),
            "::",
            stringify!(EVENTS_VALRDY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RNG_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RNG_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RNG_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RNG_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RNG_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RNG_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFIG) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RNG_Type),
            "::",
            stringify!(CONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VALUE) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_RNG_Type),
            "::",
            stringify!(VALUE)
        )
    );
}
#[doc = " @brief AES ECB Mode Encryption (ECB)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_ECB_Type {
    #[doc = "< (@ 0x00000000) Start ECB block encrypt"]
    pub TASKS_STARTECB: u32,
    #[doc = "< (@ 0x00000004) Abort a possible executing ECB operation"]
    pub TASKS_STOPECB: u32,
    pub RESERVED: [u32; 62usize],
    #[doc = "< (@ 0x00000100) ECB block encrypt complete"]
    pub EVENTS_ENDECB: u32,
    #[doc = "< (@ 0x00000104) ECB block encrypt aborted because of a STOPECB\ntask or due to an error"]
    pub EVENTS_ERRORECB: u32,
    pub RESERVED1: [u32; 127usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED2: [u32; 126usize],
    #[doc = "< (@ 0x00000504) ECB block encrypt memory pointers"]
    pub ECBDATAPTR: u32,
}
#[test]
fn bindgen_test_layout_NRF_ECB_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_ECB_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_ECB_Type>(),
        1288usize,
        concat!("Size of: ", stringify!(NRF_ECB_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_ECB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_ECB_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTECB) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_ECB_Type),
            "::",
            stringify!(TASKS_STARTECB)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOPECB) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_ECB_Type),
            "::",
            stringify!(TASKS_STOPECB)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_ECB_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDECB) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_ECB_Type),
            "::",
            stringify!(EVENTS_ENDECB)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ERRORECB) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_ECB_Type),
            "::",
            stringify!(EVENTS_ERRORECB)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_ECB_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_ECB_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_ECB_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_ECB_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ECBDATAPTR) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_ECB_Type),
            "::",
            stringify!(ECBDATAPTR)
        )
    );
}
#[doc = " @brief Accelerated Address Resolver (AAR)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_AAR_Type {
    #[doc = "< (@ 0x00000000) Start resolving addresses based on IRKs specified\nin the IRK data structure"]
    pub TASKS_START: u32,
    pub RESERVED: u32,
    #[doc = "< (@ 0x00000008) Stop resolving addresses"]
    pub TASKS_STOP: u32,
    pub RESERVED1: [u32; 61usize],
    #[doc = "< (@ 0x00000100) Address resolution procedure complete"]
    pub EVENTS_END: u32,
    #[doc = "< (@ 0x00000104) Address resolved"]
    pub EVENTS_RESOLVED: u32,
    #[doc = "< (@ 0x00000108) Address not resolved"]
    pub EVENTS_NOTRESOLVED: u32,
    pub RESERVED2: [u32; 126usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 61usize],
    #[doc = "< (@ 0x00000400) Resolution status"]
    pub STATUS: u32,
    pub RESERVED4: [u32; 63usize],
    #[doc = "< (@ 0x00000500) Enable AAR"]
    pub ENABLE: u32,
    #[doc = "< (@ 0x00000504) Number of IRKs"]
    pub NIRK: u32,
    #[doc = "< (@ 0x00000508) Pointer to IRK data structure"]
    pub IRKPTR: u32,
    pub RESERVED5: u32,
    #[doc = "< (@ 0x00000510) Pointer to the resolvable address"]
    pub ADDRPTR: u32,
    #[doc = "< (@ 0x00000514) Pointer to data area used for temporary storage"]
    pub SCRATCHPTR: u32,
}
#[test]
fn bindgen_test_layout_NRF_AAR_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_AAR_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_AAR_Type>(),
        1304usize,
        concat!("Size of: ", stringify!(NRF_AAR_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_AAR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_AAR_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_END) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(EVENTS_END)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RESOLVED) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(EVENTS_RESOLVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_NOTRESOLVED) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(EVENTS_NOTRESOLVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STATUS) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NIRK) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(NIRK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IRKPTR) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(IRKPTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADDRPTR) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(ADDRPTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SCRATCHPTR) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_AAR_Type),
            "::",
            stringify!(SCRATCHPTR)
        )
    );
}
#[doc = " @brief AES CCM mode encryption (CCM)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_CCM_Type {
    #[doc = "< (@ 0x00000000) Start generation of keystream. This operation\nwill stop by itself when completed."]
    pub TASKS_KSGEN: u32,
    #[doc = "< (@ 0x00000004) Start encryption/decryption. This operation will\nstop by itself when completed."]
    pub TASKS_CRYPT: u32,
    #[doc = "< (@ 0x00000008) Stop encryption/decryption"]
    pub TASKS_STOP: u32,
    #[doc = "< (@ 0x0000000C) Override DATARATE setting in MODE register with\nthe contents of the RATEOVERRIDE register\nfor any ongoing encryption/decryption"]
    pub TASKS_RATEOVERRIDE: u32,
    pub RESERVED: [u32; 60usize],
    #[doc = "< (@ 0x00000100) Keystream generation complete"]
    pub EVENTS_ENDKSGEN: u32,
    #[doc = "< (@ 0x00000104) Encrypt/decrypt complete"]
    pub EVENTS_ENDCRYPT: u32,
    #[doc = "< (@ 0x00000108) Deprecated register - CCM error event"]
    pub EVENTS_ERROR: u32,
    pub RESERVED1: [u32; 61usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED2: [u32; 64usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 61usize],
    #[doc = "< (@ 0x00000400) MIC check result"]
    pub MICSTATUS: u32,
    pub RESERVED4: [u32; 63usize],
    #[doc = "< (@ 0x00000500) Enable"]
    pub ENABLE: u32,
    #[doc = "< (@ 0x00000504) Operation mode"]
    pub MODE: u32,
    #[doc = "< (@ 0x00000508) Pointer to data structure holding the AES key\nand the NONCE vector"]
    pub CNFPTR: u32,
    #[doc = "< (@ 0x0000050C) Input pointer"]
    pub INPTR: u32,
    #[doc = "< (@ 0x00000510) Output pointer"]
    pub OUTPTR: u32,
    #[doc = "< (@ 0x00000514) Pointer to data area used for temporary storage"]
    pub SCRATCHPTR: u32,
    #[doc = "< (@ 0x00000518) Length of keystream generated when MODE.LENGTH\n= Extended"]
    pub MAXPACKETSIZE: u32,
    #[doc = "< (@ 0x0000051C) Data rate override setting."]
    pub RATEOVERRIDE: u32,
}
#[test]
fn bindgen_test_layout_NRF_CCM_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_CCM_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_CCM_Type>(),
        1312usize,
        concat!("Size of: ", stringify!(NRF_CCM_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_CCM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_CCM_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_KSGEN) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(TASKS_KSGEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CRYPT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(TASKS_CRYPT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_RATEOVERRIDE) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(TASKS_RATEOVERRIDE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDKSGEN) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(EVENTS_ENDKSGEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDCRYPT) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(EVENTS_ENDCRYPT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ERROR) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(EVENTS_ERROR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MICSTATUS) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(MICSTATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MODE) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(MODE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CNFPTR) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(CNFPTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INPTR) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(INPTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OUTPTR) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(OUTPTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SCRATCHPTR) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(SCRATCHPTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAXPACKETSIZE) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(MAXPACKETSIZE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RATEOVERRIDE) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CCM_Type),
            "::",
            stringify!(RATEOVERRIDE)
        )
    );
}
#[doc = " @brief Watchdog Timer (WDT)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_WDT_Type {
    #[doc = "< (@ 0x00000000) Start the watchdog"]
    pub TASKS_START: u32,
    pub RESERVED: [u32; 63usize],
    #[doc = "< (@ 0x00000100) Watchdog timeout"]
    pub EVENTS_TIMEOUT: u32,
    pub RESERVED1: [u32; 128usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED2: [u32; 61usize],
    #[doc = "< (@ 0x00000400) Run status"]
    pub RUNSTATUS: u32,
    #[doc = "< (@ 0x00000404) Request status"]
    pub REQSTATUS: u32,
    pub RESERVED3: [u32; 63usize],
    #[doc = "< (@ 0x00000504) Counter reload value"]
    pub CRV: u32,
    #[doc = "< (@ 0x00000508) Enable register for reload request registers"]
    pub RREN: u32,
    #[doc = "< (@ 0x0000050C) Configuration register"]
    pub CONFIG: u32,
    pub RESERVED4: [u32; 60usize],
    #[doc = "< (@ 0x00000600) Description collection: Reload request n"]
    pub RR: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_NRF_WDT_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_WDT_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_WDT_Type>(),
        1568usize,
        concat!("Size of: ", stringify!(NRF_WDT_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_WDT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_WDT_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TIMEOUT) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(EVENTS_TIMEOUT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RUNSTATUS) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(RUNSTATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).REQSTATUS) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(REQSTATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRV) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(CRV)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RREN) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(RREN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFIG) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(CONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RR) as usize - ptr as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_WDT_Type),
            "::",
            stringify!(RR)
        )
    );
}
#[doc = " @brief Quadrature Decoder (QDEC)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_QDEC_Type {
    #[doc = "< (@ 0x00000000) Task starting the quadrature decoder"]
    pub TASKS_START: u32,
    #[doc = "< (@ 0x00000004) Task stopping the quadrature decoder"]
    pub TASKS_STOP: u32,
    #[doc = "< (@ 0x00000008) Read and clear ACC and ACCDBL"]
    pub TASKS_READCLRACC: u32,
    #[doc = "< (@ 0x0000000C) Read and clear ACC"]
    pub TASKS_RDCLRACC: u32,
    #[doc = "< (@ 0x00000010) Read and clear ACCDBL"]
    pub TASKS_RDCLRDBL: u32,
    pub RESERVED: [u32; 59usize],
    #[doc = "< (@ 0x00000100) Event being generated for every new sample value\nwritten to the SAMPLE register"]
    pub EVENTS_SAMPLERDY: u32,
    #[doc = "< (@ 0x00000104) Non-null report ready"]
    pub EVENTS_REPORTRDY: u32,
    #[doc = "< (@ 0x00000108) ACC or ACCDBL register overflow"]
    pub EVENTS_ACCOF: u32,
    #[doc = "< (@ 0x0000010C) Double displacement(s) detected"]
    pub EVENTS_DBLRDY: u32,
    #[doc = "< (@ 0x00000110) QDEC has been stopped"]
    pub EVENTS_STOPPED: u32,
    pub RESERVED1: [u32; 59usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED2: [u32; 64usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 125usize],
    #[doc = "< (@ 0x00000500) Enable the quadrature decoder"]
    pub ENABLE: u32,
    #[doc = "< (@ 0x00000504) LED output pin polarity"]
    pub LEDPOL: u32,
    #[doc = "< (@ 0x00000508) Sample period"]
    pub SAMPLEPER: u32,
    #[doc = "< (@ 0x0000050C) Motion sample value"]
    pub SAMPLE: i32,
    #[doc = "< (@ 0x00000510) Number of samples to be taken before REPORTRDY\nand DBLRDY events can be generated"]
    pub REPORTPER: u32,
    #[doc = "< (@ 0x00000514) Register accumulating the valid transitions"]
    pub ACC: i32,
    #[doc = "< (@ 0x00000518) Snapshot of the ACC register, updated by the\nREADCLRACC or RDCLRACC task"]
    pub ACCREAD: i32,
    #[doc = "< (@ 0x0000051C) Unspecified"]
    pub PSEL: QDEC_PSEL_Type,
    #[doc = "< (@ 0x00000528) Enable input debounce filters"]
    pub DBFEN: u32,
    pub RESERVED4: [u32; 5usize],
    #[doc = "< (@ 0x00000540) Time period the LED is switched ON prior to sampling"]
    pub LEDPRE: u32,
    #[doc = "< (@ 0x00000544) Register accumulating the number of detected\ndouble transitions"]
    pub ACCDBL: u32,
    #[doc = "< (@ 0x00000548) Snapshot of the ACCDBL, updated by the READCLRACC\nor RDCLRDBL task"]
    pub ACCDBLREAD: u32,
}
#[test]
fn bindgen_test_layout_NRF_QDEC_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_QDEC_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_QDEC_Type>(),
        1356usize,
        concat!("Size of: ", stringify!(NRF_QDEC_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_QDEC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_QDEC_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_READCLRACC) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(TASKS_READCLRACC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_RDCLRACC) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(TASKS_RDCLRACC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_RDCLRDBL) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(TASKS_RDCLRDBL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_SAMPLERDY) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(EVENTS_SAMPLERDY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_REPORTRDY) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(EVENTS_REPORTRDY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ACCOF) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(EVENTS_ACCOF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_DBLRDY) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(EVENTS_DBLRDY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STOPPED) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(EVENTS_STOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LEDPOL) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(LEDPOL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SAMPLEPER) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(SAMPLEPER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SAMPLE) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(SAMPLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).REPORTPER) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(REPORTPER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ACC) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(ACC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ACCREAD) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(ACCREAD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DBFEN) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(DBFEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LEDPRE) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(LEDPRE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ACCDBL) as usize - ptr as usize },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(ACCDBL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ACCDBLREAD) as usize - ptr as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QDEC_Type),
            "::",
            stringify!(ACCDBLREAD)
        )
    );
}
#[doc = " @brief Comparator (COMP)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_COMP_Type {
    #[doc = "< (@ 0x00000000) Start comparator"]
    pub TASKS_START: u32,
    #[doc = "< (@ 0x00000004) Stop comparator"]
    pub TASKS_STOP: u32,
    #[doc = "< (@ 0x00000008) Sample comparator value"]
    pub TASKS_SAMPLE: u32,
    pub RESERVED: [u32; 61usize],
    #[doc = "< (@ 0x00000100) COMP is ready and output is valid"]
    pub EVENTS_READY: u32,
    #[doc = "< (@ 0x00000104) Downward crossing"]
    pub EVENTS_DOWN: u32,
    #[doc = "< (@ 0x00000108) Upward crossing"]
    pub EVENTS_UP: u32,
    #[doc = "< (@ 0x0000010C) Downward or upward crossing"]
    pub EVENTS_CROSS: u32,
    pub RESERVED1: [u32; 60usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED2: [u32; 63usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 61usize],
    #[doc = "< (@ 0x00000400) Compare result"]
    pub RESULT: u32,
    pub RESERVED4: [u32; 63usize],
    #[doc = "< (@ 0x00000500) COMP enable"]
    pub ENABLE: u32,
    #[doc = "< (@ 0x00000504) Pin select"]
    pub PSEL: u32,
    #[doc = "< (@ 0x00000508) Reference source select for single-ended mode"]
    pub REFSEL: u32,
    #[doc = "< (@ 0x0000050C) External reference select"]
    pub EXTREFSEL: u32,
    pub RESERVED5: [u32; 8usize],
    #[doc = "< (@ 0x00000530) Threshold configuration for hysteresis unit"]
    pub TH: u32,
    #[doc = "< (@ 0x00000534) Mode configuration"]
    pub MODE: u32,
    #[doc = "< (@ 0x00000538) Comparator hysteresis enable"]
    pub HYST: u32,
}
#[test]
fn bindgen_test_layout_NRF_COMP_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_COMP_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_COMP_Type>(),
        1340usize,
        concat!("Size of: ", stringify!(NRF_COMP_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_COMP_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_COMP_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_SAMPLE) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(TASKS_SAMPLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_READY) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(EVENTS_READY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_DOWN) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(EVENTS_DOWN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_UP) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(EVENTS_UP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CROSS) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(EVENTS_CROSS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESULT) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(RESULT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).REFSEL) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(REFSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EXTREFSEL) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(EXTREFSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TH) as usize - ptr as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(TH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MODE) as usize - ptr as usize },
        1332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(MODE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HYST) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_COMP_Type),
            "::",
            stringify!(HYST)
        )
    );
}
#[doc = " @brief Low-power comparator (LPCOMP)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_LPCOMP_Type {
    #[doc = "< (@ 0x00000000) Start comparator"]
    pub TASKS_START: u32,
    #[doc = "< (@ 0x00000004) Stop comparator"]
    pub TASKS_STOP: u32,
    #[doc = "< (@ 0x00000008) Sample comparator value"]
    pub TASKS_SAMPLE: u32,
    pub RESERVED: [u32; 61usize],
    #[doc = "< (@ 0x00000100) LPCOMP is ready and output is valid"]
    pub EVENTS_READY: u32,
    #[doc = "< (@ 0x00000104) Downward crossing"]
    pub EVENTS_DOWN: u32,
    #[doc = "< (@ 0x00000108) Upward crossing"]
    pub EVENTS_UP: u32,
    #[doc = "< (@ 0x0000010C) Downward or upward crossing"]
    pub EVENTS_CROSS: u32,
    pub RESERVED1: [u32; 60usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED2: [u32; 64usize],
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 61usize],
    #[doc = "< (@ 0x00000400) Compare result"]
    pub RESULT: u32,
    pub RESERVED4: [u32; 63usize],
    #[doc = "< (@ 0x00000500) Enable LPCOMP"]
    pub ENABLE: u32,
    #[doc = "< (@ 0x00000504) Input pin select"]
    pub PSEL: u32,
    #[doc = "< (@ 0x00000508) Reference select"]
    pub REFSEL: u32,
    #[doc = "< (@ 0x0000050C) External reference select"]
    pub EXTREFSEL: u32,
    pub RESERVED5: [u32; 4usize],
    #[doc = "< (@ 0x00000520) Analog detect configuration"]
    pub ANADETECT: u32,
    pub RESERVED6: [u32; 5usize],
    #[doc = "< (@ 0x00000538) Comparator hysteresis enable"]
    pub HYST: u32,
}
#[test]
fn bindgen_test_layout_NRF_LPCOMP_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_LPCOMP_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_LPCOMP_Type>(),
        1340usize,
        concat!("Size of: ", stringify!(NRF_LPCOMP_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_LPCOMP_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_LPCOMP_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_SAMPLE) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(TASKS_SAMPLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_READY) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(EVENTS_READY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_DOWN) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(EVENTS_DOWN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_UP) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(EVENTS_UP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_CROSS) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(EVENTS_CROSS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESULT) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(RESULT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).REFSEL) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(REFSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EXTREFSEL) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(EXTREFSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ANADETECT) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(ANADETECT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HYST) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_LPCOMP_Type),
            "::",
            stringify!(HYST)
        )
    );
}
#[doc = " @brief Event generator unit 0 (EGU0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_EGU_Type {
    #[doc = "< (@ 0x00000000) Description collection: Trigger n for triggering\nthe corresponding TRIGGERED[n] event"]
    pub TASKS_TRIGGER: [u32; 16usize],
    pub RESERVED: [u32; 48usize],
    #[doc = "< (@ 0x00000100) Description collection: Event number n generated\nby triggering the corresponding TRIGGER[n]\ntask"]
    pub EVENTS_TRIGGERED: [u32; 16usize],
    pub RESERVED1: [u32; 112usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
}
#[test]
fn bindgen_test_layout_NRF_EGU_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_EGU_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_EGU_Type>(),
        780usize,
        concat!("Size of: ", stringify!(NRF_EGU_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_EGU_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_EGU_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_TRIGGER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_EGU_Type),
            "::",
            stringify!(TASKS_TRIGGER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_EGU_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TRIGGERED) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_EGU_Type),
            "::",
            stringify!(EVENTS_TRIGGERED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_EGU_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_EGU_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_EGU_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_EGU_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
}
#[doc = " @brief Software interrupt 0 (SWI0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_SWI_Type {
    #[doc = "< (@ 0x00000000) Unused."]
    pub UNUSED: u32,
}
#[test]
fn bindgen_test_layout_NRF_SWI_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_SWI_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_SWI_Type>(),
        4usize,
        concat!("Size of: ", stringify!(NRF_SWI_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_SWI_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_SWI_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UNUSED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_SWI_Type),
            "::",
            stringify!(UNUSED)
        )
    );
}
#[doc = " @brief Pulse width modulation unit 0 (PWM0)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_PWM_Type {
    pub RESERVED: u32,
    #[doc = "< (@ 0x00000004) Stops PWM pulse generation on all channels at\nthe end of current PWM period, and stops\nsequence playback"]
    pub TASKS_STOP: u32,
    #[doc = "< (@ 0x00000008) Description collection: Loads the first PWM value\non all enabled channels from sequence n,\nand starts playing that sequence at the\nrate defined in SEQ[n]REFRESH and/or DECODER.MODE.\nCauses PWM generation to start if not running."]
    pub TASKS_SEQSTART: [u32; 2usize],
    #[doc = "< (@ 0x00000010) Steps by one value in the current sequence on\nall enabled channels if DECODER.MODE=NextStep.\nDoes not cause PWM generation to start if\nnot running."]
    pub TASKS_NEXTSTEP: u32,
    pub RESERVED1: [u32; 60usize],
    #[doc = "< (@ 0x00000104) Response to STOP task, emitted when PWM pulses\nare no longer generated"]
    pub EVENTS_STOPPED: u32,
    #[doc = "< (@ 0x00000108) Description collection: First PWM period started\non sequence n"]
    pub EVENTS_SEQSTARTED: [u32; 2usize],
    #[doc = "< (@ 0x00000110) Description collection: Emitted at end of every\nsequence n, when last value from RAM has\nbeen applied to wave counter"]
    pub EVENTS_SEQEND: [u32; 2usize],
    #[doc = "< (@ 0x00000118) Emitted at the end of each PWM period"]
    pub EVENTS_PWMPERIODEND: u32,
    #[doc = "< (@ 0x0000011C) Concatenated sequences have been played the amount\nof times defined in LOOP.CNT"]
    pub EVENTS_LOOPSDONE: u32,
    pub RESERVED2: [u32; 56usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED3: [u32; 63usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED4: [u32; 125usize],
    #[doc = "< (@ 0x00000500) PWM module enable register"]
    pub ENABLE: u32,
    #[doc = "< (@ 0x00000504) Selects operating mode of the wave counter"]
    pub MODE: u32,
    #[doc = "< (@ 0x00000508) Value up to which the pulse generator counter\ncounts"]
    pub COUNTERTOP: u32,
    #[doc = "< (@ 0x0000050C) Configuration for PWM_CLK"]
    pub PRESCALER: u32,
    #[doc = "< (@ 0x00000510) Configuration of the decoder"]
    pub DECODER: u32,
    #[doc = "< (@ 0x00000514) Number of playbacks of a loop"]
    pub LOOP: u32,
    pub RESERVED5: [u32; 2usize],
    #[doc = "< (@ 0x00000520) Unspecified"]
    pub SEQ: [PWM_SEQ_Type; 2usize],
    #[doc = "< (@ 0x00000560) Unspecified"]
    pub PSEL: PWM_PSEL_Type,
}
#[test]
fn bindgen_test_layout_NRF_PWM_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_PWM_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_PWM_Type>(),
        1392usize,
        concat!("Size of: ", stringify!(NRF_PWM_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_PWM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_PWM_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_SEQSTART) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(TASKS_SEQSTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_NEXTSTEP) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(TASKS_NEXTSTEP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STOPPED) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(EVENTS_STOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_SEQSTARTED) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(EVENTS_SEQSTARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_SEQEND) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(EVENTS_SEQEND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_PWMPERIODEND) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(EVENTS_PWMPERIODEND)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_LOOPSDONE) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(EVENTS_LOOPSDONE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MODE) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(MODE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).COUNTERTOP) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(COUNTERTOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PRESCALER) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(PRESCALER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DECODER) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(DECODER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LOOP) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(LOOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SEQ) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(SEQ)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PWM_Type),
            "::",
            stringify!(PSEL)
        )
    );
}
#[doc = " @brief Pulse Density Modulation (Digital Microphone) Interface (PDM)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_PDM_Type {
    #[doc = "< (@ 0x00000000) Starts continuous PDM transfer"]
    pub TASKS_START: u32,
    #[doc = "< (@ 0x00000004) Stops PDM transfer"]
    pub TASKS_STOP: u32,
    pub RESERVED: [u32; 62usize],
    #[doc = "< (@ 0x00000100) PDM transfer has started"]
    pub EVENTS_STARTED: u32,
    #[doc = "< (@ 0x00000104) PDM transfer has finished"]
    pub EVENTS_STOPPED: u32,
    #[doc = "< (@ 0x00000108) The PDM has written the last sample specified\nby SAMPLE.MAXCNT (or the last sample after\na STOP task has been received) to Data RAM"]
    pub EVENTS_END: u32,
    pub RESERVED1: [u32; 125usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED2: [u32; 125usize],
    #[doc = "< (@ 0x00000500) PDM module enable register"]
    pub ENABLE: u32,
    #[doc = "< (@ 0x00000504) PDM clock generator control"]
    pub PDMCLKCTRL: u32,
    #[doc = "< (@ 0x00000508) Defines the routing of the connected PDM microphones'\nsignals"]
    pub MODE: u32,
    pub RESERVED3: [u32; 3usize],
    #[doc = "< (@ 0x00000518) Left output gain adjustment"]
    pub GAINL: u32,
    #[doc = "< (@ 0x0000051C) Right output gain adjustment"]
    pub GAINR: u32,
    #[doc = "< (@ 0x00000520) Selects the ratio between PDM_CLK and output\nsample rate. Change PDMCLKCTRL accordingly."]
    pub RATIO: u32,
    pub RESERVED4: [u32; 7usize],
    #[doc = "< (@ 0x00000540) Unspecified"]
    pub PSEL: PDM_PSEL_Type,
    pub RESERVED5: [u32; 6usize],
    #[doc = "< (@ 0x00000560) Unspecified"]
    pub SAMPLE: PDM_SAMPLE_Type,
}
#[test]
fn bindgen_test_layout_NRF_PDM_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_PDM_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_PDM_Type>(),
        1384usize,
        concat!("Size of: ", stringify!(NRF_PDM_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_PDM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_PDM_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STARTED) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(EVENTS_STARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STOPPED) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(EVENTS_STOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_END) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(EVENTS_END)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PDMCLKCTRL) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(PDMCLKCTRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MODE) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(MODE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GAINL) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(GAINL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GAINR) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(GAINR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RATIO) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(RATIO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SAMPLE) as usize - ptr as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PDM_Type),
            "::",
            stringify!(SAMPLE)
        )
    );
}
#[doc = " @brief Access control lists (ACL)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_ACL_Type {
    pub RESERVED: [u32; 512usize],
    #[doc = "< (@ 0x00000800) Unspecified"]
    pub ACL: [ACL_ACL_Type; 8usize],
}
#[test]
fn bindgen_test_layout_NRF_ACL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_ACL_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_ACL_Type>(),
        2176usize,
        concat!("Size of: ", stringify!(NRF_ACL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_ACL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_ACL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_ACL_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ACL) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_ACL_Type),
            "::",
            stringify!(ACL)
        )
    );
}
#[doc = " @brief Non Volatile Memory Controller (NVMC)"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NRF_NVMC_Type {
    pub RESERVED: [u32; 256usize],
    #[doc = "< (@ 0x00000400) Ready flag"]
    pub READY: u32,
    pub RESERVED1: u32,
    #[doc = "< (@ 0x00000408) Ready flag"]
    pub READYNEXT: u32,
    pub RESERVED2: [u32; 62usize],
    #[doc = "< (@ 0x00000504) Configuration register"]
    pub CONFIG: u32,
    pub __bindgen_anon_1: NRF_NVMC_Type__bindgen_ty_1,
    #[doc = "< (@ 0x0000050C) Register for erasing all non-volatile user memory"]
    pub ERASEALL: u32,
    #[doc = "< (@ 0x00000510) Deprecated register - Register for erasing a\npage in code area, equivalent to ERASEPAGE"]
    pub ERASEPCR0: u32,
    #[doc = "< (@ 0x00000514) Register for erasing user information configuration\nregisters"]
    pub ERASEUICR: u32,
    #[doc = "< (@ 0x00000518) Register for partial erase of a page in code\narea"]
    pub ERASEPAGEPARTIAL: u32,
    #[doc = "< (@ 0x0000051C) Register for partial erase configuration"]
    pub ERASEPAGEPARTIALCFG: u32,
    pub RESERVED3: [u32; 8usize],
    #[doc = "< (@ 0x00000540) I-code cache configuration register"]
    pub ICACHECNF: u32,
    pub RESERVED4: u32,
    #[doc = "< (@ 0x00000548) I-code cache hit counter"]
    pub IHIT: u32,
    #[doc = "< (@ 0x0000054C) I-code cache miss counter"]
    pub IMISS: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NRF_NVMC_Type__bindgen_ty_1 {
    #[doc = "< (@ 0x00000508) Register for erasing a page in code area"]
    pub ERASEPAGE: u32,
    #[doc = "< (@ 0x00000508) Deprecated register - Register for erasing a\npage in code area, equivalent to ERASEPAGE"]
    pub ERASEPCR1: u32,
}
#[test]
fn bindgen_test_layout_NRF_NVMC_Type__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_NVMC_Type__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_NVMC_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(NRF_NVMC_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_NVMC_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_NVMC_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERASEPAGE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type__bindgen_ty_1),
            "::",
            stringify!(ERASEPAGE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERASEPCR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type__bindgen_ty_1),
            "::",
            stringify!(ERASEPCR1)
        )
    );
}
#[test]
fn bindgen_test_layout_NRF_NVMC_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_NVMC_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_NVMC_Type>(),
        1360usize,
        concat!("Size of: ", stringify!(NRF_NVMC_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_NVMC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_NVMC_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).READY) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(READY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).READYNEXT) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(READYNEXT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFIG) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(CONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERASEALL) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(ERASEALL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERASEPCR0) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(ERASEPCR0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERASEUICR) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(ERASEUICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERASEPAGEPARTIAL) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(ERASEPAGEPARTIAL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERASEPAGEPARTIALCFG) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(ERASEPAGEPARTIALCFG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICACHECNF) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(ICACHECNF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IHIT) as usize - ptr as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(IHIT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMISS) as usize - ptr as usize },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_NVMC_Type),
            "::",
            stringify!(IMISS)
        )
    );
}
#[doc = " @brief Programmable Peripheral Interconnect (PPI)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_PPI_Type {
    #[doc = "< (@ 0x00000000) Channel group tasks"]
    pub TASKS_CHG: [PPI_TASKS_CHG_Type; 6usize],
    pub RESERVED: [u32; 308usize],
    #[doc = "< (@ 0x00000500) Channel enable register"]
    pub CHEN: u32,
    #[doc = "< (@ 0x00000504) Channel enable set register"]
    pub CHENSET: u32,
    #[doc = "< (@ 0x00000508) Channel enable clear register"]
    pub CHENCLR: u32,
    pub RESERVED1: u32,
    #[doc = "< (@ 0x00000510) PPI Channel"]
    pub CH: [PPI_CH_Type; 20usize],
    pub RESERVED2: [u32; 148usize],
    #[doc = "< (@ 0x00000800) Description collection: Channel group n"]
    pub CHG: [u32; 6usize],
    pub RESERVED3: [u32; 62usize],
    #[doc = "< (@ 0x00000910) Fork"]
    pub FORK: [PPI_FORK_Type; 32usize],
}
#[test]
fn bindgen_test_layout_NRF_PPI_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_PPI_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_PPI_Type>(),
        2448usize,
        concat!("Size of: ", stringify!(NRF_PPI_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_PPI_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_PPI_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_CHG) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PPI_Type),
            "::",
            stringify!(TASKS_CHG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PPI_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CHEN) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PPI_Type),
            "::",
            stringify!(CHEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CHENSET) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PPI_Type),
            "::",
            stringify!(CHENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CHENCLR) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PPI_Type),
            "::",
            stringify!(CHENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PPI_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CH) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PPI_Type),
            "::",
            stringify!(CH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PPI_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CHG) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PPI_Type),
            "::",
            stringify!(CHG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PPI_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FORK) as usize - ptr as usize },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_PPI_Type),
            "::",
            stringify!(FORK)
        )
    );
}
#[doc = " @brief Memory Watch Unit (MWU)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_MWU_Type {
    pub RESERVED: [u32; 64usize],
    #[doc = "< (@ 0x00000100) Peripheral events."]
    pub EVENTS_REGION: [MWU_EVENTS_REGION_Type; 4usize],
    pub RESERVED1: [u32; 16usize],
    #[doc = "< (@ 0x00000160) Peripheral events."]
    pub EVENTS_PREGION: [MWU_EVENTS_PREGION_Type; 2usize],
    pub RESERVED2: [u32; 100usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 5usize],
    #[doc = "< (@ 0x00000320) Enable or disable interrupt"]
    pub NMIEN: u32,
    #[doc = "< (@ 0x00000324) Enable interrupt"]
    pub NMIENSET: u32,
    #[doc = "< (@ 0x00000328) Disable interrupt"]
    pub NMIENCLR: u32,
    pub RESERVED4: [u32; 53usize],
    #[doc = "< (@ 0x00000400) Unspecified"]
    pub PERREGION: [MWU_PERREGION_Type; 2usize],
    pub RESERVED5: [u32; 64usize],
    #[doc = "< (@ 0x00000510) Enable/disable regions watch"]
    pub REGIONEN: u32,
    #[doc = "< (@ 0x00000514) Enable regions watch"]
    pub REGIONENSET: u32,
    #[doc = "< (@ 0x00000518) Disable regions watch"]
    pub REGIONENCLR: u32,
    pub RESERVED6: [u32; 57usize],
    #[doc = "< (@ 0x00000600) Unspecified"]
    pub REGION: [MWU_REGION_Type; 4usize],
    pub RESERVED7: [u32; 32usize],
    #[doc = "< (@ 0x000006C0) Unspecified"]
    pub PREGION: [MWU_PREGION_Type; 2usize],
}
#[test]
fn bindgen_test_layout_NRF_MWU_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_MWU_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_MWU_Type>(),
        1760usize,
        concat!("Size of: ", stringify!(NRF_MWU_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_MWU_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_MWU_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_REGION) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(EVENTS_REGION)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_PREGION) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(EVENTS_PREGION)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NMIEN) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(NMIEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NMIENSET) as usize - ptr as usize },
        804usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(NMIENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NMIENCLR) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(NMIENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PERREGION) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(PERREGION)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).REGIONEN) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(REGIONEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).REGIONENSET) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(REGIONENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).REGIONENCLR) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(REGIONENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).REGION) as usize - ptr as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(REGION)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PREGION) as usize - ptr as usize },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_MWU_Type),
            "::",
            stringify!(PREGION)
        )
    );
}
#[doc = " @brief Inter-IC Sound (I2S)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_I2S_Type {
    #[doc = "< (@ 0x00000000) Starts continuous I2S transfer. Also starts MCK\ngenerator when this is enabled."]
    pub TASKS_START: u32,
    #[doc = "< (@ 0x00000004) Stops I2S transfer. Also stops MCK generator.\nTriggering this task will cause the STOPPED\nevent to be generated."]
    pub TASKS_STOP: u32,
    pub RESERVED: [u32; 63usize],
    #[doc = "< (@ 0x00000104) The RXD.PTR register has been copied to internal\ndouble-buffers. When the I2S module is started\nand RX is enabled, this event will be generated\nfor every RXTXD.MAXCNT words that are received\non the SDIN pin."]
    pub EVENTS_RXPTRUPD: u32,
    #[doc = "< (@ 0x00000108) I2S transfer stopped."]
    pub EVENTS_STOPPED: u32,
    pub RESERVED1: [u32; 2usize],
    #[doc = "< (@ 0x00000114) The TDX.PTR register has been copied to internal\ndouble-buffers. When the I2S module is started\nand TX is enabled, this event will be generated\nfor every RXTXD.MAXCNT words that are sent\non the SDOUT pin."]
    pub EVENTS_TXPTRUPD: u32,
    pub RESERVED2: [u32; 122usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED3: [u32; 125usize],
    #[doc = "< (@ 0x00000500) Enable I2S module."]
    pub ENABLE: u32,
    #[doc = "< (@ 0x00000504) Unspecified"]
    pub CONFIG: I2S_CONFIG_Type,
    pub RESERVED4: [u32; 3usize],
    #[doc = "< (@ 0x00000538) Unspecified"]
    pub RXD: I2S_RXD_Type,
    pub RESERVED5: u32,
    #[doc = "< (@ 0x00000540) Unspecified"]
    pub TXD: I2S_TXD_Type,
    pub RESERVED6: [u32; 3usize],
    #[doc = "< (@ 0x00000550) Unspecified"]
    pub RXTXD: I2S_RXTXD_Type,
    pub RESERVED7: [u32; 3usize],
    #[doc = "< (@ 0x00000560) Unspecified"]
    pub PSEL: I2S_PSEL_Type,
}
#[test]
fn bindgen_test_layout_NRF_I2S_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_I2S_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_I2S_Type>(),
        1396usize,
        concat!("Size of: ", stringify!(NRF_I2S_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_I2S_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_I2S_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_START) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(TASKS_START)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STOP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(TASKS_STOP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_RXPTRUPD) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(EVENTS_RXPTRUPD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STOPPED) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(EVENTS_STOPPED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_TXPTRUPD) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(EVENTS_TXPTRUPD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CONFIG) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(CONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(RXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1340usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXTXD) as usize - ptr as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(RXTXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_I2S_Type),
            "::",
            stringify!(PSEL)
        )
    );
}
#[doc = " @brief FPU (FPU)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_FPU_Type {
    #[doc = "< (@ 0x00000000) Unused."]
    pub UNUSED: u32,
}
#[test]
fn bindgen_test_layout_NRF_FPU_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_FPU_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_FPU_Type>(),
        4usize,
        concat!("Size of: ", stringify!(NRF_FPU_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_FPU_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_FPU_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).UNUSED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_FPU_Type),
            "::",
            stringify!(UNUSED)
        )
    );
}
#[doc = " @brief Universal serial bus device (USBD)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_USBD_Type {
    pub RESERVED: u32,
    #[doc = "< (@ 0x00000004) Description collection: Captures the EPIN[n].PTR\nand EPIN[n].MAXCNT registers values, and\nenables endpoint IN n to respond to traffic\nfrom host"]
    pub TASKS_STARTEPIN: [u32; 8usize],
    #[doc = "< (@ 0x00000024) Captures the ISOIN.PTR and ISOIN.MAXCNT registers\nvalues, and enables sending data on ISO\nendpoint"]
    pub TASKS_STARTISOIN: u32,
    #[doc = "< (@ 0x00000028) Description collection: Captures the EPOUT[n].PTR\nand EPOUT[n].MAXCNT registers values, and\nenables endpoint n to respond to traffic\nfrom host"]
    pub TASKS_STARTEPOUT: [u32; 8usize],
    #[doc = "< (@ 0x00000048) Captures the ISOOUT.PTR and ISOOUT.MAXCNT registers\nvalues, and enables receiving of data on\nISO endpoint"]
    pub TASKS_STARTISOOUT: u32,
    #[doc = "< (@ 0x0000004C) Allows OUT data stage on control endpoint 0"]
    pub TASKS_EP0RCVOUT: u32,
    #[doc = "< (@ 0x00000050) Allows status stage on control endpoint 0"]
    pub TASKS_EP0STATUS: u32,
    #[doc = "< (@ 0x00000054) Stalls data and status stage on control endpoint\n0"]
    pub TASKS_EP0STALL: u32,
    #[doc = "< (@ 0x00000058) Forces D+ and D- lines into the state defined\nin the DPDMVALUE register"]
    pub TASKS_DPDMDRIVE: u32,
    #[doc = "< (@ 0x0000005C) Stops forcing D+ and D- lines into any state\n(USB engine takes control)"]
    pub TASKS_DPDMNODRIVE: u32,
    pub RESERVED1: [u32; 40usize],
    #[doc = "< (@ 0x00000100) Signals that a USB reset condition has been detected\non USB lines"]
    pub EVENTS_USBRESET: u32,
    #[doc = "< (@ 0x00000104) Confirms that the EPIN[n].PTR and EPIN[n].MAXCNT,\nor EPOUT[n].PTR and EPOUT[n].MAXCNT registers\nhave been captured on all endpoints reported\nin the EPSTATUS register"]
    pub EVENTS_STARTED: u32,
    #[doc = "< (@ 0x00000108) Description collection: The whole EPIN[n] buffer\nhas been consumed. The buffer can be accessed\nsafely by software."]
    pub EVENTS_ENDEPIN: [u32; 8usize],
    #[doc = "< (@ 0x00000128) An acknowledged data transfer has taken place\non the control endpoint"]
    pub EVENTS_EP0DATADONE: u32,
    #[doc = "< (@ 0x0000012C) The whole ISOIN buffer has been consumed. The\nbuffer can be accessed safely by software."]
    pub EVENTS_ENDISOIN: u32,
    #[doc = "< (@ 0x00000130) Description collection: The whole EPOUT[n] buffer\nhas been consumed. The buffer can be accessed\nsafely by software."]
    pub EVENTS_ENDEPOUT: [u32; 8usize],
    #[doc = "< (@ 0x00000150) The whole ISOOUT buffer has been consumed. The\nbuffer can be accessed safely by software."]
    pub EVENTS_ENDISOOUT: u32,
    #[doc = "< (@ 0x00000154) Signals that a SOF (start of frame) condition\nhas been detected on USB lines"]
    pub EVENTS_SOF: u32,
    #[doc = "< (@ 0x00000158) An event or an error not covered by specific\nevents has occurred. Check EVENTCAUSE register\nto find the cause."]
    pub EVENTS_USBEVENT: u32,
    #[doc = "< (@ 0x0000015C) A valid SETUP token has been received (and acknowledged)\non the control endpoint"]
    pub EVENTS_EP0SETUP: u32,
    #[doc = "< (@ 0x00000160) A data transfer has occurred on a data endpoint,\nindicated by the EPDATASTATUS register"]
    pub EVENTS_EPDATA: u32,
    pub RESERVED2: [u32; 39usize],
    #[doc = "< (@ 0x00000200) Shortcuts between local events and tasks"]
    pub SHORTS: u32,
    pub RESERVED3: [u32; 63usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED4: [u32; 61usize],
    #[doc = "< (@ 0x00000400) Details on what caused the USBEVENT event"]
    pub EVENTCAUSE: u32,
    pub RESERVED5: [u32; 7usize],
    #[doc = "< (@ 0x00000420) Unspecified"]
    pub HALTED: USBD_HALTED_Type,
    pub RESERVED6: u32,
    #[doc = "< (@ 0x00000468) Provides information on which endpoint's EasyDMA\nregisters have been captured"]
    pub EPSTATUS: u32,
    #[doc = "< (@ 0x0000046C) Provides information on which endpoint(s) an\nacknowledged data transfer has occurred\n(EPDATA event)"]
    pub EPDATASTATUS: u32,
    #[doc = "< (@ 0x00000470) Device USB address"]
    pub USBADDR: u32,
    pub RESERVED7: [u32; 3usize],
    #[doc = "< (@ 0x00000480) SETUP data, byte 0, bmRequestType"]
    pub BMREQUESTTYPE: u32,
    #[doc = "< (@ 0x00000484) SETUP data, byte 1, bRequest"]
    pub BREQUEST: u32,
    #[doc = "< (@ 0x00000488) SETUP data, byte 2, LSB of wValue"]
    pub WVALUEL: u32,
    #[doc = "< (@ 0x0000048C) SETUP data, byte 3, MSB of wValue"]
    pub WVALUEH: u32,
    #[doc = "< (@ 0x00000490) SETUP data, byte 4, LSB of wIndex"]
    pub WINDEXL: u32,
    #[doc = "< (@ 0x00000494) SETUP data, byte 5, MSB of wIndex"]
    pub WINDEXH: u32,
    #[doc = "< (@ 0x00000498) SETUP data, byte 6, LSB of wLength"]
    pub WLENGTHL: u32,
    #[doc = "< (@ 0x0000049C) SETUP data, byte 7, MSB of wLength"]
    pub WLENGTHH: u32,
    #[doc = "< (@ 0x000004A0) Unspecified"]
    pub SIZE: USBD_SIZE_Type,
    pub RESERVED8: [u32; 15usize],
    #[doc = "< (@ 0x00000500) Enable USB"]
    pub ENABLE: u32,
    #[doc = "< (@ 0x00000504) Control of the USB pull-up"]
    pub USBPULLUP: u32,
    #[doc = "< (@ 0x00000508) State D+ and D- lines will be forced into by\nthe DPDMDRIVE task. The DPDMNODRIVE task\nreverts the control of the lines to MAC\nIP (no forcing)."]
    pub DPDMVALUE: u32,
    #[doc = "< (@ 0x0000050C) Data toggle control and status"]
    pub DTOGGLE: u32,
    #[doc = "< (@ 0x00000510) Endpoint IN enable"]
    pub EPINEN: u32,
    #[doc = "< (@ 0x00000514) Endpoint OUT enable"]
    pub EPOUTEN: u32,
    #[doc = "< (@ 0x00000518) STALL endpoints"]
    pub EPSTALL: u32,
    #[doc = "< (@ 0x0000051C) Controls the split of ISO buffers"]
    pub ISOSPLIT: u32,
    #[doc = "< (@ 0x00000520) Returns the current value of the start of frame\ncounter"]
    pub FRAMECNTR: u32,
    pub RESERVED9: [u32; 2usize],
    #[doc = "< (@ 0x0000052C) Controls USBD peripheral low power mode during\nUSB suspend"]
    pub LOWPOWER: u32,
    #[doc = "< (@ 0x00000530) Controls the response of the ISO IN endpoint\nto an IN token when no data is ready to\nbe sent"]
    pub ISOINCONFIG: u32,
    pub RESERVED10: [u32; 51usize],
    #[doc = "< (@ 0x00000600) Unspecified"]
    pub EPIN: [USBD_EPIN_Type; 8usize],
    #[doc = "< (@ 0x000006A0) Unspecified"]
    pub ISOIN: USBD_ISOIN_Type,
    pub RESERVED11: [u32; 21usize],
    #[doc = "< (@ 0x00000700) Unspecified"]
    pub EPOUT: [USBD_EPOUT_Type; 8usize],
    #[doc = "< (@ 0x000007A0) Unspecified"]
    pub ISOOUT: USBD_ISOOUT_Type,
}
#[test]
fn bindgen_test_layout_NRF_USBD_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_USBD_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_USBD_Type>(),
        1964usize,
        concat!("Size of: ", stringify!(NRF_USBD_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_USBD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_USBD_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTEPIN) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(TASKS_STARTEPIN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTISOIN) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(TASKS_STARTISOIN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTEPOUT) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(TASKS_STARTEPOUT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_STARTISOOUT) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(TASKS_STARTISOOUT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_EP0RCVOUT) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(TASKS_EP0RCVOUT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_EP0STATUS) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(TASKS_EP0STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_EP0STALL) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(TASKS_EP0STALL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_DPDMDRIVE) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(TASKS_DPDMDRIVE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_DPDMNODRIVE) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(TASKS_DPDMNODRIVE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_USBRESET) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EVENTS_USBRESET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_STARTED) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EVENTS_STARTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDEPIN) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EVENTS_ENDEPIN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_EP0DATADONE) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EVENTS_EP0DATADONE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDISOIN) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EVENTS_ENDISOIN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDEPOUT) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EVENTS_ENDEPOUT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_ENDISOOUT) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EVENTS_ENDISOOUT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_SOF) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EVENTS_SOF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_USBEVENT) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EVENTS_USBEVENT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_EP0SETUP) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EVENTS_EP0SETUP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_EPDATA) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EVENTS_EPDATA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHORTS) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(SHORTS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTCAUSE) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EVENTCAUSE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HALTED) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(HALTED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        1124usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EPSTATUS) as usize - ptr as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EPSTATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EPDATASTATUS) as usize - ptr as usize },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EPDATASTATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USBADDR) as usize - ptr as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(USBADDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        1140usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BMREQUESTTYPE) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(BMREQUESTTYPE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BREQUEST) as usize - ptr as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(BREQUEST)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WVALUEL) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(WVALUEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WVALUEH) as usize - ptr as usize },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(WVALUEH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WINDEXL) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(WINDEXL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WINDEXH) as usize - ptr as usize },
        1172usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(WINDEXH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WLENGTHL) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(WLENGTHL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WLENGTHH) as usize - ptr as usize },
        1180usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(WLENGTHH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SIZE) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(SIZE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        1220usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USBPULLUP) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(USBPULLUP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DPDMVALUE) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(DPDMVALUE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DTOGGLE) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(DTOGGLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EPINEN) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EPINEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EPOUTEN) as usize - ptr as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EPOUTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EPSTALL) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EPSTALL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISOSPLIT) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(ISOSPLIT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FRAMECNTR) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(FRAMECNTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LOWPOWER) as usize - ptr as usize },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(LOWPOWER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISOINCONFIG) as usize - ptr as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(ISOINCONFIG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        1332usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EPIN) as usize - ptr as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EPIN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISOIN) as usize - ptr as usize },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(ISOIN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        1708usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EPOUT) as usize - ptr as usize },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(EPOUT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISOOUT) as usize - ptr as usize },
        1952usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_USBD_Type),
            "::",
            stringify!(ISOOUT)
        )
    );
}
#[doc = " @brief External flash interface (QSPI)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_QSPI_Type {
    #[doc = "< (@ 0x00000000) Activate QSPI interface"]
    pub TASKS_ACTIVATE: u32,
    #[doc = "< (@ 0x00000004) Start transfer from external flash memory to\ninternal RAM"]
    pub TASKS_READSTART: u32,
    #[doc = "< (@ 0x00000008) Start transfer from internal RAM to external\nflash memory"]
    pub TASKS_WRITESTART: u32,
    #[doc = "< (@ 0x0000000C) Start external flash memory erase operation"]
    pub TASKS_ERASESTART: u32,
    #[doc = "< (@ 0x00000010) Deactivate QSPI interface"]
    pub TASKS_DEACTIVATE: u32,
    pub RESERVED: [u32; 59usize],
    #[doc = "< (@ 0x00000100) QSPI peripheral is ready. This event will be\ngenerated as a response to any QSPI task."]
    pub EVENTS_READY: u32,
    pub RESERVED1: [u32; 127usize],
    #[doc = "< (@ 0x00000300) Enable or disable interrupt"]
    pub INTEN: u32,
    #[doc = "< (@ 0x00000304) Enable interrupt"]
    pub INTENSET: u32,
    #[doc = "< (@ 0x00000308) Disable interrupt"]
    pub INTENCLR: u32,
    pub RESERVED2: [u32; 125usize],
    #[doc = "< (@ 0x00000500) Enable QSPI peripheral and acquire the pins selected\nin PSELn registers"]
    pub ENABLE: u32,
    #[doc = "< (@ 0x00000504) Unspecified"]
    pub READ: QSPI_READ_Type,
    #[doc = "< (@ 0x00000510) Unspecified"]
    pub WRITE: QSPI_WRITE_Type,
    #[doc = "< (@ 0x0000051C) Unspecified"]
    pub ERASE: QSPI_ERASE_Type,
    #[doc = "< (@ 0x00000524) Unspecified"]
    pub PSEL: QSPI_PSEL_Type,
    #[doc = "< (@ 0x00000540) Address offset into the external memory for Execute\nin Place operation."]
    pub XIPOFFSET: u32,
    #[doc = "< (@ 0x00000544) Interface configuration."]
    pub IFCONFIG0: u32,
    pub RESERVED3: [u32; 46usize],
    #[doc = "< (@ 0x00000600) Interface configuration."]
    pub IFCONFIG1: u32,
    #[doc = "< (@ 0x00000604) Status register."]
    pub STATUS: u32,
    pub RESERVED4: [u32; 3usize],
    #[doc = "< (@ 0x00000614) Set the duration required to enter/exit deep\npower-down mode (DPM)."]
    pub DPMDUR: u32,
    pub RESERVED5: [u32; 3usize],
    #[doc = "< (@ 0x00000624) Extended address configuration."]
    pub ADDRCONF: u32,
    pub RESERVED6: [u32; 3usize],
    #[doc = "< (@ 0x00000634) Custom instruction configuration register."]
    pub CINSTRCONF: u32,
    #[doc = "< (@ 0x00000638) Custom instruction data register 0."]
    pub CINSTRDAT0: u32,
    #[doc = "< (@ 0x0000063C) Custom instruction data register 1."]
    pub CINSTRDAT1: u32,
    #[doc = "< (@ 0x00000640) SPI interface timing."]
    pub IFTIMING: u32,
}
#[test]
fn bindgen_test_layout_NRF_QSPI_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_QSPI_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_QSPI_Type>(),
        1604usize,
        concat!("Size of: ", stringify!(NRF_QSPI_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_QSPI_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_QSPI_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_ACTIVATE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(TASKS_ACTIVATE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_READSTART) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(TASKS_READSTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_WRITESTART) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(TASKS_WRITESTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_ERASESTART) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(TASKS_ERASESTART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TASKS_DEACTIVATE) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(TASKS_DEACTIVATE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVENTS_READY) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(EVENTS_READY)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENSET) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(INTENSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTENCLR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(INTENCLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(ENABLE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).READ) as usize - ptr as usize },
        1284usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(READ)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WRITE) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(WRITE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERASE) as usize - ptr as usize },
        1308usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(ERASE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSEL) as usize - ptr as usize },
        1316usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(PSEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).XIPOFFSET) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(XIPOFFSET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IFCONFIG0) as usize - ptr as usize },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(IFCONFIG0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IFCONFIG1) as usize - ptr as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(IFCONFIG1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STATUS) as usize - ptr as usize },
        1540usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DPMDUR) as usize - ptr as usize },
        1556usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(DPMDUR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADDRCONF) as usize - ptr as usize },
        1572usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(ADDRCONF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CINSTRCONF) as usize - ptr as usize },
        1588usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(CINSTRCONF)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CINSTRDAT0) as usize - ptr as usize },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(CINSTRDAT0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CINSTRDAT1) as usize - ptr as usize },
        1596usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(CINSTRDAT1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IFTIMING) as usize - ptr as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_QSPI_Type),
            "::",
            stringify!(IFTIMING)
        )
    );
}
#[doc = " @brief CRYPTOCELL HOST_RGF interface (CC_HOST_RGF)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_CC_HOST_RGF_Type {
    pub RESERVED: [u32; 1678usize],
    #[doc = "< (@ 0x00001A38) AES hardware key select"]
    pub HOST_CRYPTOKEY_SEL: u32,
    pub RESERVED1: [u32; 4usize],
    #[doc = "< (@ 0x00001A4C) This write-once register is the K_PRTL lock register.\nWhen this register is set, K_PRTL cannot\nbe used and a zeroed key will be used instead.\nThe value of this register is saved in the\nCRYPTOCELL AO power domain."]
    pub HOST_IOT_KPRTL_LOCK: u32,
    #[doc = "< (@ 0x00001A50) This register holds bits 31:0 of K_DR. The value\nof this register is saved in the CRYPTOCELL\nAO power domain. Reading from this address\nreturns the K_DR valid status indicating\nif K_DR is successfully retained."]
    pub HOST_IOT_KDR0: u32,
    #[doc = "< (@ 0x00001A54) This register holds bits 63:32 of K_DR. The value\nof this register is saved in the CRYPTOCELL\nAO power domain."]
    pub HOST_IOT_KDR1: u32,
    #[doc = "< (@ 0x00001A58) This register holds bits 95:64 of K_DR. The value\nof this register is saved in the CRYPTOCELL\nAO power domain."]
    pub HOST_IOT_KDR2: u32,
    #[doc = "< (@ 0x00001A5C) This register holds bits 127:96 of K_DR. The\nvalue of this register is saved in the CRYPTOCELL\nAO power domain."]
    pub HOST_IOT_KDR3: u32,
    #[doc = "< (@ 0x00001A60) Controls lifecycle state (LCS) for CRYPTOCELL\nsubsystem"]
    pub HOST_IOT_LCS: u32,
}
#[test]
fn bindgen_test_layout_NRF_CC_HOST_RGF_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_CC_HOST_RGF_Type> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_CC_HOST_RGF_Type>(),
        6756usize,
        concat!("Size of: ", stringify!(NRF_CC_HOST_RGF_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_CC_HOST_RGF_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_CC_HOST_RGF_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CC_HOST_RGF_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HOST_CRYPTOKEY_SEL) as usize - ptr as usize },
        6712usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CC_HOST_RGF_Type),
            "::",
            stringify!(HOST_CRYPTOKEY_SEL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6716usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CC_HOST_RGF_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HOST_IOT_KPRTL_LOCK) as usize - ptr as usize },
        6732usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CC_HOST_RGF_Type),
            "::",
            stringify!(HOST_IOT_KPRTL_LOCK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HOST_IOT_KDR0) as usize - ptr as usize },
        6736usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CC_HOST_RGF_Type),
            "::",
            stringify!(HOST_IOT_KDR0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HOST_IOT_KDR1) as usize - ptr as usize },
        6740usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CC_HOST_RGF_Type),
            "::",
            stringify!(HOST_IOT_KDR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HOST_IOT_KDR2) as usize - ptr as usize },
        6744usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CC_HOST_RGF_Type),
            "::",
            stringify!(HOST_IOT_KDR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HOST_IOT_KDR3) as usize - ptr as usize },
        6748usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CC_HOST_RGF_Type),
            "::",
            stringify!(HOST_IOT_KDR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HOST_IOT_LCS) as usize - ptr as usize },
        6752usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CC_HOST_RGF_Type),
            "::",
            stringify!(HOST_IOT_LCS)
        )
    );
}
#[doc = " @brief ARM TrustZone CryptoCell register interface (CRYPTOCELL)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRF_CRYPTOCELL_Type {
    pub RESERVED: [u32; 320usize],
    #[doc = "< (@ 0x00000500) Enable CRYPTOCELL subsystem"]
    pub ENABLE: u32,
}
#[test]
fn bindgen_test_layout_NRF_CRYPTOCELL_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NRF_CRYPTOCELL_Type> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NRF_CRYPTOCELL_Type>(),
        1284usize,
        concat!("Size of: ", stringify!(NRF_CRYPTOCELL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NRF_CRYPTOCELL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NRF_CRYPTOCELL_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CRYPTOCELL_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ENABLE) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(NRF_CRYPTOCELL_Type),
            "::",
            stringify!(ENABLE)
        )
    );
}
extern "C" {
    #[link_name = "gcc_current_sp__extern"]
    pub fn gcc_current_sp() -> ::core::ffi::c_uint;
}
#[doc = " @brief IRQ handler type."]
pub type nrfx_irq_handler_t = ::core::option::Option<unsafe extern "C" fn()>;
#[doc = "< Uninitialized."]
pub const nrfx_drv_state_t_NRFX_DRV_STATE_UNINITIALIZED: nrfx_drv_state_t = 0;
#[doc = "< Initialized but powered off."]
pub const nrfx_drv_state_t_NRFX_DRV_STATE_INITIALIZED: nrfx_drv_state_t = 1;
#[doc = "< Initialized and powered on."]
pub const nrfx_drv_state_t_NRFX_DRV_STATE_POWERED_ON: nrfx_drv_state_t = 2;
#[doc = " @brief Driver state."]
pub type nrfx_drv_state_t = ::core::ffi::c_uint;
extern "C" {
    #[doc = " @brief Function for checking if an object is placed in the Data RAM region.\n\n Several peripherals (the ones using EasyDMA) require the transfer buffers\n to be placed in the Data RAM region. This function can be used to check if\n this condition is met.\n\n @param[in] p_object Pointer to an object whose location is to be checked.\n\n @retval true  The pointed object is located in the Data RAM region.\n @retval false The pointed object is not located in the Data RAM region."]
    #[link_name = "nrfx_is_in_ram__extern"]
    pub fn nrfx_is_in_ram(p_object: *const ::core::ffi::c_void) -> bool;
}
extern "C" {
    #[doc = " @brief Function for checking if an object is aligned to a 32-bit word\n\n Several peripherals (the ones using EasyDMA) require the transfer buffers\n to be aligned to a 32-bit word. This function can be used to check if\n this condition is met.\n\n @param[in] p_object  Pointer to an object whose location is to be checked.\n\n @retval true  The pointed object is aligned to a 32-bit word.\n @retval false The pointed object is not aligned to a 32-bit word."]
    #[link_name = "nrfx_is_word_aligned__extern"]
    pub fn nrfx_is_word_aligned(p_object: *const ::core::ffi::c_void) -> bool;
}
extern "C" {
    #[doc = " @brief Function for getting the interrupt number for the specified peripheral.\n\n @param[in] p_reg Peripheral base pointer.\n\n @return Interrupt number associated with the pointed peripheral."]
    #[link_name = "nrfx_get_irq_number__extern"]
    pub fn nrfx_get_irq_number(p_reg: *const ::core::ffi::c_void) -> IRQn_Type;
}
extern "C" {
    #[doc = " @brief Function for converting an INTEN register bit position to the\n        corresponding event identifier.\n\n The event identifier is the offset between the event register address and\n the peripheral base address, and is equal (thus, can be directly cast) to\n the corresponding value of the enumerated type from HAL (nrf_*_event_t).\n\n @param[in] bit INTEN register bit position.\n\n @return Event identifier.\n\n @sa nrfx_event_to_bitpos"]
    #[link_name = "nrfx_bitpos_to_event__extern"]
    pub fn nrfx_bitpos_to_event(bit: u32) -> u32;
}
extern "C" {
    #[doc = " @brief Function for converting an event identifier to the corresponding\n        INTEN register bit position.\n\n The event identifier is the offset between the event register address and\n the peripheral base address, and is equal (thus, can be directly cast) to\n the corresponding value of the enumerated type from HAL (nrf_*_event_t).\n\n @param[in] event Event identifier.\n\n @return INTEN register bit position.\n\n @sa nrfx_bitpos_to_event"]
    #[link_name = "nrfx_event_to_bitpos__extern"]
    pub fn nrfx_event_to_bitpos(event: u32) -> u32;
}
extern "C" {
    #[doc = " Configure a dynamic interrupt.\n\n Use this instead of IRQ_CONNECT() if arguments cannot be known at build time.\n\n @param irq IRQ line number\n @param priority Interrupt priority\n @param routine Interrupt service routine\n @param parameter ISR parameter\n @param flags Arch-specific IRQ configuration flags\n\n @return The vector assigned to this interrupt"]
    #[link_name = "irq_connect_dynamic__extern"]
    pub fn irq_connect_dynamic(
        irq: ::core::ffi::c_uint,
        priority: ::core::ffi::c_uint,
        routine: ::core::option::Option<
            unsafe extern "C" fn(parameter: *const ::core::ffi::c_void),
        >,
        parameter: *const ::core::ffi::c_void,
        flags: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " Disconnect a dynamic interrupt.\n\n Use this in conjunction with shared interrupts to remove a routine/parameter\n pair from the list of clients using the same interrupt line. If the interrupt\n is not being shared then the associated _sw_isr_table entry will be replaced\n by (NULL, z_irq_spurious) (default entry).\n\n @param irq IRQ line number\n @param priority Interrupt priority\n @param routine Interrupt service routine\n @param parameter ISR parameter\n @param flags Arch-specific IRQ configuration flags\n\n @return 0 in case of success, negative value otherwise"]
    #[link_name = "irq_disconnect_dynamic__extern"]
    pub fn irq_disconnect_dynamic(
        irq: ::core::ffi::c_uint,
        priority: ::core::ffi::c_uint,
        routine: ::core::option::Option<
            unsafe extern "C" fn(parameter: *const ::core::ffi::c_void),
        >,
        parameter: *const ::core::ffi::c_void,
        flags: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn nrfx_busy_wait(usec_to_wait: u32);
}
extern "C" {
    #[doc = " @brief Function helping to integrate nrfx IRQ handlers with IRQ_CONNECT.\n\n This function simply calls the nrfx IRQ handler supplied as the parameter.\n It is intended to be used in the following way:\n IRQ_CONNECT(IRQ_NUM, IRQ_PRI, nrfx_isr, nrfx_..._irq_handler, 0);\n\n @param[in] irq_handler  Pointer to the nrfx IRQ handler to be called."]
    pub fn nrfx_isr(irq_handler: *const ::core::ffi::c_void);
}
extern "C" {
    #[doc = " @brief Function for checking if an object is accesible by EasyDMA of given peripheral instance.\n\n Peripherals that use EasyDMA require buffers to be placed in certain memory regions.\n\n @param[in] p_reg    Peripheral base pointer.\n @param[in] p_object Pointer to an object whose location is to be checked.\n\n @retval true  The pointed object is located in the memory region accessible by EasyDMA.\n @retval false The pointed object is not located in the memory region accessible by EasyDMA."]
    #[link_name = "nrf_dma_accessible_check__extern"]
    pub fn nrf_dma_accessible_check(
        p_reg: *const ::core::ffi::c_void,
        p_object: *const ::core::ffi::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "nrf_barrier_w__extern"]
    pub fn nrf_barrier_w();
}
extern "C" {
    #[link_name = "nrf_barrier_r__extern"]
    pub fn nrf_barrier_r();
}
extern "C" {
    #[link_name = "nrf_barrier_rw__extern"]
    pub fn nrf_barrier_rw();
}
extern "C" {
    #[link_name = "nrf_event_check__extern"]
    pub fn nrf_event_check(p_reg: *const ::core::ffi::c_void, event: u32) -> bool;
}
extern "C" {
    #[link_name = "nrf_task_event_address_get__extern"]
    pub fn nrf_task_event_address_get(p_reg: *const ::core::ffi::c_void, task_event: u32) -> u32;
}
extern "C" {
    #[link_name = "nrf_event_readback__extern"]
    pub fn nrf_event_readback(p_event_reg: *mut ::core::ffi::c_void);
}
#[doc = "< Operation performed successfully."]
pub const nrfx_err_t_NRFX_SUCCESS: nrfx_err_t = 195887104;
#[doc = "< Internal error."]
pub const nrfx_err_t_NRFX_ERROR_INTERNAL: nrfx_err_t = 195887105;
#[doc = "< No memory for operation."]
pub const nrfx_err_t_NRFX_ERROR_NO_MEM: nrfx_err_t = 195887106;
#[doc = "< Not supported."]
pub const nrfx_err_t_NRFX_ERROR_NOT_SUPPORTED: nrfx_err_t = 195887107;
#[doc = "< Invalid parameter."]
pub const nrfx_err_t_NRFX_ERROR_INVALID_PARAM: nrfx_err_t = 195887108;
#[doc = "< Invalid state, operation disallowed in this state."]
pub const nrfx_err_t_NRFX_ERROR_INVALID_STATE: nrfx_err_t = 195887109;
#[doc = "< Invalid length."]
pub const nrfx_err_t_NRFX_ERROR_INVALID_LENGTH: nrfx_err_t = 195887110;
#[doc = "< Operation timed out."]
pub const nrfx_err_t_NRFX_ERROR_TIMEOUT: nrfx_err_t = 195887111;
#[doc = "< Operation is forbidden."]
pub const nrfx_err_t_NRFX_ERROR_FORBIDDEN: nrfx_err_t = 195887112;
#[doc = "< Null pointer."]
pub const nrfx_err_t_NRFX_ERROR_NULL: nrfx_err_t = 195887113;
#[doc = "< Bad memory address."]
pub const nrfx_err_t_NRFX_ERROR_INVALID_ADDR: nrfx_err_t = 195887114;
#[doc = "< Busy."]
pub const nrfx_err_t_NRFX_ERROR_BUSY: nrfx_err_t = 195887115;
#[doc = "< Operation already done."]
pub const nrfx_err_t_NRFX_ERROR_ALREADY: nrfx_err_t = 195887116;
#[doc = "< @deprecated Use @ref NRFX_ERROR_ALREADY instead."]
pub const nrfx_err_t_NRFX_ERROR_ALREADY_INITIALIZED: nrfx_err_t = 195887116;
#[doc = "< TWI error: Overrun."]
pub const nrfx_err_t_NRFX_ERROR_DRV_TWI_ERR_OVERRUN: nrfx_err_t = 195952640;
#[doc = "< TWI error: Address not acknowledged."]
pub const nrfx_err_t_NRFX_ERROR_DRV_TWI_ERR_ANACK: nrfx_err_t = 195952641;
#[doc = "< TWI error: Data not acknowledged."]
pub const nrfx_err_t_NRFX_ERROR_DRV_TWI_ERR_DNACK: nrfx_err_t = 195952642;
#[doc = " @brief Enumerated type for error codes."]
pub type nrfx_err_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_mpu_region_attr {
    pub rasr: u32,
}
#[test]
fn bindgen_test_layout_arm_mpu_region_attr() {
    const UNINIT: ::core::mem::MaybeUninit<arm_mpu_region_attr> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<arm_mpu_region_attr>(),
        4usize,
        concat!("Size of: ", stringify!(arm_mpu_region_attr))
    );
    assert_eq!(
        ::core::mem::align_of::<arm_mpu_region_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(arm_mpu_region_attr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rasr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_mpu_region_attr),
            "::",
            stringify!(rasr)
        )
    );
}
pub type arm_mpu_region_attr_t = arm_mpu_region_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_mem_partition_attr_t {
    pub rasr_attr: u32,
}
#[test]
fn bindgen_test_layout_k_mem_partition_attr_t() {
    const UNINIT: ::core::mem::MaybeUninit<k_mem_partition_attr_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_mem_partition_attr_t>(),
        4usize,
        concat!("Size of: ", stringify!(k_mem_partition_attr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<k_mem_partition_attr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(k_mem_partition_attr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rasr_attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mem_partition_attr_t),
            "::",
            stringify!(rasr_attr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_mpu_region {
    pub base: u32,
    pub name: *const ::core::ffi::c_char,
    pub attr: arm_mpu_region_attr_t,
}
#[test]
fn bindgen_test_layout_arm_mpu_region() {
    const UNINIT: ::core::mem::MaybeUninit<arm_mpu_region> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<arm_mpu_region>(),
        12usize,
        concat!("Size of: ", stringify!(arm_mpu_region))
    );
    assert_eq!(
        ::core::mem::align_of::<arm_mpu_region>(),
        4usize,
        concat!("Alignment of ", stringify!(arm_mpu_region))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_mpu_region),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_mpu_region),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_mpu_region),
            "::",
            stringify!(attr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_mpu_config {
    pub num_regions: u32,
    pub mpu_regions: *const arm_mpu_region,
}
#[test]
fn bindgen_test_layout_arm_mpu_config() {
    const UNINIT: ::core::mem::MaybeUninit<arm_mpu_config> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<arm_mpu_config>(),
        8usize,
        concat!("Size of: ", stringify!(arm_mpu_config))
    );
    assert_eq!(
        ::core::mem::align_of::<arm_mpu_config>(),
        4usize,
        concat!("Alignment of ", stringify!(arm_mpu_config))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).num_regions) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_mpu_config),
            "::",
            stringify!(num_regions)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mpu_regions) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_mpu_config),
            "::",
            stringify!(mpu_regions)
        )
    );
}
extern "C" {
    pub static mpu_config: arm_mpu_config;
}
pub type k_ticks_t = i64;
#[doc = " @brief Kernel timeout type\n\n Timeout arguments presented to kernel APIs are stored in this\n opaque type, which is capable of representing times in various\n formats and units.  It should be constructed from application data\n using one of the macros defined for this purpose (e.g. `K_MSEC()`,\n `K_TIMEOUT_ABS_TICKS()`, etc...), or be one of the two constants\n K_NO_WAIT or K_FOREVER.  Applications should not inspect the\n internal data once constructed.  Timeout values may be compared for\n equality with the `K_TIMEOUT_EQ()` macro."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_timeout_t {
    pub ticks: k_ticks_t,
}
#[test]
fn bindgen_test_layout_k_timeout_t() {
    const UNINIT: ::core::mem::MaybeUninit<k_timeout_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_timeout_t>(),
        8usize,
        concat!("Size of: ", stringify!(k_timeout_t))
    );
    assert_eq!(
        ::core::mem::align_of::<k_timeout_t>(),
        8usize,
        concat!("Alignment of ", stringify!(k_timeout_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ticks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_timeout_t),
            "::",
            stringify!(ticks)
        )
    );
}
extern "C" {
    #[doc = " @brief Return the lower part of the current system tick count\n\n @return the current system tick count\n"]
    pub fn sys_clock_tick_get_32() -> u32;
}
extern "C" {
    #[doc = " @brief Return the current system tick count\n\n @return the current system tick count\n"]
    pub fn sys_clock_tick_get() -> i64;
}
#[doc = " @brief Kernel timepoint type\n\n Absolute timepoints are stored in this opaque type.\n It is best not to inspect its content directly.\n\n @see sys_timepoint_calc()\n @see sys_timepoint_timeout()\n @see sys_timepoint_expired()"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_timepoint_t {
    pub tick: u64,
}
#[test]
fn bindgen_test_layout_k_timepoint_t() {
    const UNINIT: ::core::mem::MaybeUninit<k_timepoint_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_timepoint_t>(),
        8usize,
        concat!("Size of: ", stringify!(k_timepoint_t))
    );
    assert_eq!(
        ::core::mem::align_of::<k_timepoint_t>(),
        8usize,
        concat!("Alignment of ", stringify!(k_timepoint_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tick) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_timepoint_t),
            "::",
            stringify!(tick)
        )
    );
}
extern "C" {
    #[doc = " @brief Calculate a timepoint value\n\n Returns a timepoint corresponding to the expiration (relative to an\n unlocked \"now\"!) of a timeout object.  When used correctly, this should\n be called once, synchronously with the user passing a new timeout value.\n It should not be used iteratively to adjust a timeout (see\n `sys_timepoint_timeout()` for that purpose).\n\n @param timeout Timeout value relative to current time (may also be\n                `K_FOREVER` or `K_NO_WAIT`).\n @retval Timepoint value corresponding to given timeout\n\n @see sys_timepoint_timeout()\n @see sys_timepoint_expired()"]
    pub fn sys_timepoint_calc(timeout: k_timeout_t) -> k_timepoint_t;
}
extern "C" {
    #[doc = " @brief Remaining time to given timepoint\n\n Returns the timeout interval between current time and provided timepoint.\n If the timepoint is now in the past or if it was created with `K_NO_WAIT`\n then `K_NO_WAIT` is returned. If it was created with `K_FOREVER` then\n `K_FOREVER` is returned.\n\n @param timepoint Timepoint for which a timeout value is wanted.\n @retval Corresponding timeout value.\n\n @see sys_timepoint_calc()"]
    pub fn sys_timepoint_timeout(timepoint: k_timepoint_t) -> k_timeout_t;
}
extern "C" {
    #[doc = " @brief Provided for backward compatibility.\n\n This is deprecated. Consider `sys_timepoint_calc()` instead.\n\n @see sys_timepoint_calc()"]
    #[link_name = "sys_clock_timeout_end_calc__extern"]
    pub fn sys_clock_timeout_end_calc(timeout: k_timeout_t) -> u64;
}
extern "C" {
    #[doc = " @brief Compare two timepoint values.\n\n This function is used to compare two timepoint values.\n\n @param a Timepoint to compare\n @param b Timepoint to compare against.\n @return zero if both timepoints are the same. Negative value if timepoint @a a is before\n timepoint @a b, positive otherwise."]
    #[link_name = "sys_timepoint_cmp__extern"]
    pub fn sys_timepoint_cmp(a: k_timepoint_t, b: k_timepoint_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Indicates if timepoint is expired\n\n @param timepoint Timepoint to evaluate\n @retval true if the timepoint is in the past, false otherwise\n\n @see sys_timepoint_calc()"]
    #[link_name = "sys_timepoint_expired__extern"]
    pub fn sys_timepoint_expired(timepoint: k_timepoint_t) -> bool;
}
pub type error_t = ::core::ffi::c_int;
extern "C" {
    pub fn __errno() -> *mut ::core::ffi::c_int;
}
extern "C" {
    pub static _sys_errlist: [*const ::core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut _sys_nerr: ::core::ffi::c_int;
}
#[doc = " @brief Spinlock APIs\n @defgroup spinlock_apis Spinlock APIs\n @ingroup kernel_apis\n @{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct z_spinlock_key {
    pub key: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_z_spinlock_key() {
    const UNINIT: ::core::mem::MaybeUninit<z_spinlock_key> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<z_spinlock_key>(),
        4usize,
        concat!("Size of: ", stringify!(z_spinlock_key))
    );
    assert_eq!(
        ::core::mem::align_of::<z_spinlock_key>(),
        4usize,
        concat!("Alignment of ", stringify!(z_spinlock_key))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_spinlock_key),
            "::",
            stringify!(key)
        )
    );
}
#[doc = " @brief Kernel Spin Lock\n\n This struct defines a spin lock record on which CPUs can wait with\n k_spin_lock().  Any number of spinlocks may be defined in\n application code."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_spinlock {
    pub dummy: ::core::ffi::c_char,
}
#[test]
fn bindgen_test_layout_k_spinlock() {
    const UNINIT: ::core::mem::MaybeUninit<k_spinlock> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_spinlock>(),
        1usize,
        concat!("Size of: ", stringify!(k_spinlock))
    );
    assert_eq!(
        ::core::mem::align_of::<k_spinlock>(),
        1usize,
        concat!("Alignment of ", stringify!(k_spinlock))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_spinlock),
            "::",
            stringify!(dummy)
        )
    );
}
#[doc = " @brief Spinlock key type\n\n This type defines a \"key\" value used by a spinlock implementation\n to store the system interrupt state at the time of a call to\n k_spin_lock().  It is expected to be passed to a matching\n k_spin_unlock().\n\n This type is opaque and should not be inspected by application\n code."]
pub type k_spinlock_key_t = z_spinlock_key;
extern "C" {
    #[link_name = "z_spinlock_validate_pre__extern"]
    pub fn z_spinlock_validate_pre(l: *mut k_spinlock);
}
extern "C" {
    #[link_name = "z_spinlock_validate_post__extern"]
    pub fn z_spinlock_validate_post(l: *mut k_spinlock);
}
extern "C" {
    #[doc = " @brief Lock a spinlock\n\n This routine locks the specified spinlock, returning a key handle\n representing interrupt state needed at unlock time.  Upon\n returning, the calling thread is guaranteed not to be suspended or\n interrupted on its current CPU until it calls k_spin_unlock().  The\n implementation guarantees mutual exclusion: exactly one thread on\n one CPU will return from k_spin_lock() at a time.  Other CPUs\n trying to acquire a lock already held by another CPU will enter an\n implementation-defined busy loop (\"spinning\") until the lock is\n released.\n\n Separate spin locks may be nested. It is legal to lock an\n (unlocked) spin lock while holding a different lock.  Spin locks\n are not recursive, however: an attempt to acquire a spin lock that\n the CPU already holds will deadlock.\n\n In circumstances where only one CPU exists, the behavior of\n k_spin_lock() remains as specified above, though obviously no\n spinning will take place.  Implementations may be free to optimize\n in uniprocessor contexts such that the locking reduces to an\n interrupt mask operation.\n\n @param l A pointer to the spinlock to lock\n @return A key value that must be passed to k_spin_unlock() when the\n         lock is released."]
    #[link_name = "k_spin_lock__extern"]
    pub fn k_spin_lock(l: *mut k_spinlock) -> k_spinlock_key_t;
}
extern "C" {
    #[doc = " @brief Attempt to lock a spinlock\n\n This routine makes one attempt to lock @p l. If it is successful, then\n it will store the key into @p k.\n\n @param[in] l A pointer to the spinlock to lock\n @param[out] k A pointer to the spinlock key\n @retval 0 on success\n @retval -EBUSY if another thread holds the lock\n\n @see k_spin_lock\n @see k_spin_unlock"]
    #[link_name = "k_spin_trylock__extern"]
    pub fn k_spin_trylock(l: *mut k_spinlock, k: *mut k_spinlock_key_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Unlock a spin lock\n\n This releases a lock acquired by k_spin_lock().  After this\n function is called, any CPU will be able to acquire the lock.  If\n other CPUs are currently spinning inside k_spin_lock() waiting for\n this lock, exactly one of them will return synchronously with the\n lock held.\n\n Spin locks must be properly nested.  A call to k_spin_unlock() must\n be made on the lock object most recently locked using\n k_spin_lock(), using the key value that it returned.  Attempts to\n unlock mis-nested locks, or to unlock locks that are not held, or\n to passing a key parameter other than the one returned from\n k_spin_lock(), are illegal.  When CONFIG_SPIN_VALIDATE is set, some\n of these errors can be detected by the framework.\n\n @param l A pointer to the spinlock to release\n @param key The value returned from k_spin_lock() when this lock was\n        acquired"]
    #[link_name = "k_spin_unlock__extern"]
    pub fn k_spin_unlock(l: *mut k_spinlock, key: k_spinlock_key_t);
}
extern "C" {
    #[link_name = "k_spin_release__extern"]
    pub fn k_spin_release(l: *mut k_spinlock);
}
extern "C" {
    #[doc = " @brief Halt the system on a fatal error\n\n Invokes architecture-specific code to power off or halt the system in\n a low power state. Lacking that, lock interrupts and sit in an idle loop.\n\n @param reason Fatal exception reason code"]
    pub fn k_fatal_halt(reason: ::core::ffi::c_uint) -> !;
}
extern "C" {
    #[doc = " @brief Fatal error policy handler\n\n This function is not invoked by application code, but is declared as a\n weak symbol so that applications may introduce their own policy.\n\n The default implementation of this function halts the system\n unconditionally. Depending on architecture support, this may be\n a simple infinite loop, power off the hardware, or exit an emulator.\n\n If this function returns, then the currently executing thread will be\n aborted.\n\n A few notes for custom implementations:\n\n - If the error is determined to be unrecoverable, LOG_PANIC() should be\n   invoked to flush any pending logging buffers.\n - K_ERR_KERNEL_PANIC indicates a severe unrecoverable error in the kernel\n   itself, and should not be considered recoverable. There is an assertion\n   in z_fatal_error() to enforce this.\n - Even outside of a kernel panic, unless the fault occurred in user mode,\n   the kernel itself may be in an inconsistent state, with API calls to\n   kernel objects possibly exhibiting undefined behavior or triggering\n   another exception.\n\n @param reason The reason for the fatal error\n @param esf Exception context, with details and partial or full register\n            state when the error occurred. May in some cases be NULL."]
    pub fn k_sys_fatal_error_handler(reason: ::core::ffi::c_uint, esf: *const z_arch_esf_t);
}
extern "C" {
    #[doc = " Called by architecture code upon a fatal error.\n\n This function dumps out architecture-agnostic information about the error\n and then makes a policy decision on what to do by invoking\n k_sys_fatal_error_handler().\n\n On architectures where k_thread_abort() never returns, this function\n never returns either.\n\n @param reason The reason for the fatal error\n @param esf Exception context, with details and partial or full register\n            state when the error occurred. May in some cases be NULL."]
    pub fn z_fatal_error(reason: ::core::ffi::c_uint, esf: *const z_arch_esf_t);
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct z_thread_stack_element {
    pub data: ::core::ffi::c_char,
}
#[test]
fn bindgen_test_layout_z_thread_stack_element() {
    const UNINIT: ::core::mem::MaybeUninit<z_thread_stack_element> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<z_thread_stack_element>(),
        1usize,
        concat!("Size of: ", stringify!(z_thread_stack_element))
    );
    assert_eq!(
        ::core::mem::align_of::<z_thread_stack_element>(),
        1usize,
        concat!("Alignment of ", stringify!(z_thread_stack_element))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_thread_stack_element),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    #[doc = " @brief Properly align a CPU stack pointer value\n\n Take the provided value and round it down such that the value is aligned\n to the CPU and ABI requirements. This is not used for any memory protection\n hardware requirements.\n\n @param ptr Proposed stack pointer address\n @return Properly aligned stack pointer address"]
    #[link_name = "z_stack_ptr_align__extern"]
    pub fn z_stack_ptr_align(ptr: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    #[doc = " @}"]
    #[link_name = "Z_KERNEL_STACK_BUFFER__extern"]
    pub fn Z_KERNEL_STACK_BUFFER(sym: *mut k_thread_stack_t) -> *mut ::core::ffi::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _pipe_desc {
    pub node: sys_dnode_t,
    pub buffer: *mut ::core::ffi::c_uchar,
    pub bytes_to_xfer: usize,
    pub thread: *mut k_thread,
}
#[test]
fn bindgen_test_layout__pipe_desc() {
    const UNINIT: ::core::mem::MaybeUninit<_pipe_desc> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_pipe_desc>(),
        20usize,
        concat!("Size of: ", stringify!(_pipe_desc))
    );
    assert_eq!(
        ::core::mem::align_of::<_pipe_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(_pipe_desc))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pipe_desc),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pipe_desc),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytes_to_xfer) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_pipe_desc),
            "::",
            stringify!(bytes_to_xfer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pipe_desc),
            "::",
            stringify!(thread)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _thread_base {
    pub __bindgen_anon_1: _thread_base__bindgen_ty_1,
    pub pended_on: *mut _wait_q_t,
    pub user_options: u8,
    pub thread_state: u8,
    pub __bindgen_anon_2: _thread_base__bindgen_ty_2,
    pub order_key: u32,
    pub swap_data: *mut ::core::ffi::c_void,
    pub timeout: _timeout,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _thread_base__bindgen_ty_1 {
    pub qnode_dlist: sys_dnode_t,
    pub qnode_rb: rbnode,
}
#[test]
fn bindgen_test_layout__thread_base__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<_thread_base__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_thread_base__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_thread_base__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<_thread_base__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_thread_base__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).qnode_dlist) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_base__bindgen_ty_1),
            "::",
            stringify!(qnode_dlist)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).qnode_rb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_base__bindgen_ty_1),
            "::",
            stringify!(qnode_rb)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _thread_base__bindgen_ty_2 {
    pub __bindgen_anon_1: _thread_base__bindgen_ty_2__bindgen_ty_1,
    pub preempt: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _thread_base__bindgen_ty_2__bindgen_ty_1 {
    pub prio: i8,
    pub sched_locked: u8,
}
#[test]
fn bindgen_test_layout__thread_base__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<_thread_base__bindgen_ty_2__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_thread_base__bindgen_ty_2__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(_thread_base__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<_thread_base__bindgen_ty_2__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_thread_base__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prio) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_base__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sched_locked) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_base__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(sched_locked)
        )
    );
}
#[test]
fn bindgen_test_layout__thread_base__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<_thread_base__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_thread_base__bindgen_ty_2>(),
        2usize,
        concat!("Size of: ", stringify!(_thread_base__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<_thread_base__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(_thread_base__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).preempt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_base__bindgen_ty_2),
            "::",
            stringify!(preempt)
        )
    );
}
#[test]
fn bindgen_test_layout__thread_base() {
    const UNINIT: ::core::mem::MaybeUninit<_thread_base> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_thread_base>(),
        48usize,
        concat!("Size of: ", stringify!(_thread_base))
    );
    assert_eq!(
        ::core::mem::align_of::<_thread_base>(),
        8usize,
        concat!("Alignment of ", stringify!(_thread_base))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pended_on) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_base),
            "::",
            stringify!(pended_on)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).user_options) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_base),
            "::",
            stringify!(user_options)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thread_state) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_base),
            "::",
            stringify!(thread_state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).order_key) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_base),
            "::",
            stringify!(order_key)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).swap_data) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_base),
            "::",
            stringify!(swap_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_base),
            "::",
            stringify!(timeout)
        )
    );
}
pub type _thread_base_t = _thread_base;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _thread_stack_info {
    pub start: usize,
    pub size: usize,
    pub delta: usize,
}
#[test]
fn bindgen_test_layout__thread_stack_info() {
    const UNINIT: ::core::mem::MaybeUninit<_thread_stack_info> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_thread_stack_info>(),
        12usize,
        concat!("Size of: ", stringify!(_thread_stack_info))
    );
    assert_eq!(
        ::core::mem::align_of::<_thread_stack_info>(),
        4usize,
        concat!("Alignment of ", stringify!(_thread_stack_info))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_stack_info),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_stack_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).delta) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_thread_stack_info),
            "::",
            stringify!(delta)
        )
    );
}
pub type _thread_stack_info_t = _thread_stack_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_thread_runtime_stats {}
#[test]
fn bindgen_test_layout_k_thread_runtime_stats() {
    assert_eq!(
        ::core::mem::size_of::<k_thread_runtime_stats>(),
        0usize,
        concat!("Size of: ", stringify!(k_thread_runtime_stats))
    );
    assert_eq!(
        ::core::mem::align_of::<k_thread_runtime_stats>(),
        1usize,
        concat!("Alignment of ", stringify!(k_thread_runtime_stats))
    );
}
pub type k_thread_runtime_stats_t = k_thread_runtime_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct z_poller {
    pub is_polling: bool,
    pub mode: u8,
}
#[test]
fn bindgen_test_layout_z_poller() {
    const UNINIT: ::core::mem::MaybeUninit<z_poller> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<z_poller>(),
        2usize,
        concat!("Size of: ", stringify!(z_poller))
    );
    assert_eq!(
        ::core::mem::align_of::<z_poller>(),
        1usize,
        concat!("Alignment of ", stringify!(z_poller))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is_polling) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_poller),
            "::",
            stringify!(is_polling)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(z_poller),
            "::",
            stringify!(mode)
        )
    );
}
#[doc = " @ingroup thread_apis\n Thread Structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_thread {
    pub base: _thread_base,
    #[doc = " defined by the architecture, but all archs need these"]
    pub callee_saved: _callee_saved,
    #[doc = " static thread init data"]
    pub init_data: *mut ::core::ffi::c_void,
    #[doc = " threads waiting in k_thread_join()"]
    pub join_queue: _wait_q_t,
    #[doc = " Stack Info"]
    pub stack_info: _thread_stack_info,
    #[doc = " resource pool"]
    pub resource_pool: *mut k_heap,
    pub tls: usize,
    #[doc = " arch-specifics: must always be at the end"]
    pub arch: _thread_arch,
}
#[test]
fn bindgen_test_layout_k_thread() {
    const UNINIT: ::core::mem::MaybeUninit<k_thread> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_thread>(),
        128usize,
        concat!("Size of: ", stringify!(k_thread))
    );
    assert_eq!(
        ::core::mem::align_of::<k_thread>(),
        8usize,
        concat!("Alignment of ", stringify!(k_thread))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_thread),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).callee_saved) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(k_thread),
            "::",
            stringify!(callee_saved)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_data) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(k_thread),
            "::",
            stringify!(init_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).join_queue) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(k_thread),
            "::",
            stringify!(join_queue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stack_info) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(k_thread),
            "::",
            stringify!(stack_info)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).resource_pool) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(k_thread),
            "::",
            stringify!(resource_pool)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tls) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(k_thread),
            "::",
            stringify!(tls)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).arch) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(k_thread),
            "::",
            stringify!(arch)
        )
    );
}
#[doc = " @ingroup thread_apis\n Thread Structure"]
pub type _thread_t = k_thread;
pub type k_tid_t = *mut k_thread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_mem_partition {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " @brief Initialize a memory domain.\n\n Initialize a memory domain with given name and memory partitions.\n\n See documentation for k_mem_domain_add_partition() for details about\n partition constraints.\n\n Do not call k_mem_domain_init() on the same memory domain more than once,\n doing so is undefined behavior.\n\n @param domain The memory domain to be initialized.\n @param num_parts The number of array items of \"parts\" parameter.\n @param parts An array of pointers to the memory partitions. Can be NULL\n              if num_parts is zero.\n\n @retval 0 if successful\n @retval -EINVAL if invalid parameters supplied\n @retval -ENOMEM if insufficient memory"]
    pub fn k_mem_domain_init(
        domain: *mut k_mem_domain,
        num_parts: u8,
        parts: *mut *mut k_mem_partition,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Add a memory partition into a memory domain.\n\n Add a memory partition into a memory domain. Partitions must conform to\n the following constraints:\n\n - Partitions in the same memory domain may not overlap each other.\n - Partitions must not be defined which expose private kernel\n   data structures or kernel objects.\n - The starting address alignment, and the partition size must conform to\n   the constraints of the underlying memory management hardware, which\n   varies per architecture.\n - Memory domain partitions are only intended to control access to memory\n   from user mode threads.\n - If CONFIG_EXECUTE_XOR_WRITE is enabled, the partition must not allow\n   both writes and execution.\n\n Violating these constraints may lead to CPU exceptions or undefined\n behavior.\n\n @param domain The memory domain to be added a memory partition.\n @param part The memory partition to be added\n\n @retval 0 if successful\n @retval -EINVAL if invalid parameters supplied\n @retval -ENOSPC if no free partition slots available"]
    pub fn k_mem_domain_add_partition(
        domain: *mut k_mem_domain,
        part: *mut k_mem_partition,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Remove a memory partition from a memory domain.\n\n Remove a memory partition from a memory domain.\n\n @param domain The memory domain to be removed a memory partition.\n @param part The memory partition to be removed\n\n @retval 0 if successful\n @retval -EINVAL if invalid parameters supplied\n @retval -ENOENT if no matching partition found"]
    pub fn k_mem_domain_remove_partition(
        domain: *mut k_mem_domain,
        part: *mut k_mem_partition,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Add a thread into a memory domain.\n\n Add a thread into a memory domain. It will be removed from whatever\n memory domain it previously belonged to.\n\n @param domain The memory domain that the thread is going to be added into.\n @param thread ID of thread going to be added into the memory domain.\n\n @return 0 if successful, fails otherwise."]
    pub fn k_mem_domain_add_thread(
        domain: *mut k_mem_domain,
        thread: k_tid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "k_object_init__extern"]
    pub fn k_object_init(obj: *const ::core::ffi::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_object {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "k_object_create_dynamic_aligned__extern"]
    pub fn k_object_create_dynamic_aligned(align: usize, size: usize) -> *mut k_object;
}
extern "C" {
    #[link_name = "k_object_create_dynamic__extern"]
    pub fn k_object_create_dynamic(size: usize) -> *mut k_object;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct z_futex_data {
    _unused: [u8; 0],
}
pub const k_objects_K_OBJ_ANY: k_objects = 0;
pub const k_objects_K_OBJ_MEM_SLAB: k_objects = 1;
pub const k_objects_K_OBJ_MSGQ: k_objects = 2;
pub const k_objects_K_OBJ_MUTEX: k_objects = 3;
pub const k_objects_K_OBJ_PIPE: k_objects = 4;
pub const k_objects_K_OBJ_QUEUE: k_objects = 5;
pub const k_objects_K_OBJ_POLL_SIGNAL: k_objects = 6;
pub const k_objects_K_OBJ_SEM: k_objects = 7;
pub const k_objects_K_OBJ_STACK: k_objects = 8;
pub const k_objects_K_OBJ_THREAD: k_objects = 9;
pub const k_objects_K_OBJ_TIMER: k_objects = 10;
pub const k_objects_K_OBJ_THREAD_STACK_ELEMENT: k_objects = 11;
pub const k_objects_K_OBJ_NET_SOCKET: k_objects = 12;
pub const k_objects_K_OBJ_NET_IF: k_objects = 13;
pub const k_objects_K_OBJ_SYS_MUTEX: k_objects = 14;
pub const k_objects_K_OBJ_FUTEX: k_objects = 15;
pub const k_objects_K_OBJ_CONDVAR: k_objects = 16;
pub const k_objects_K_OBJ_DRIVER_GPIO: k_objects = 17;
pub const k_objects_K_OBJ_DRIVER_UART: k_objects = 18;
pub const k_objects_K_OBJ_DRIVER_CRYPTO: k_objects = 19;
pub const k_objects_K_OBJ_DRIVER_ADC: k_objects = 20;
pub const k_objects_K_OBJ_DRIVER_AUXDISPLAY: k_objects = 21;
pub const k_objects_K_OBJ_DRIVER_BBRAM: k_objects = 22;
pub const k_objects_K_OBJ_DRIVER_CAN: k_objects = 23;
pub const k_objects_K_OBJ_DRIVER_CELLULAR: k_objects = 24;
pub const k_objects_K_OBJ_DRIVER_CHARGER: k_objects = 25;
pub const k_objects_K_OBJ_DRIVER_COREDUMP: k_objects = 26;
pub const k_objects_K_OBJ_DRIVER_COUNTER: k_objects = 27;
pub const k_objects_K_OBJ_DRIVER_DAC: k_objects = 28;
pub const k_objects_K_OBJ_DRIVER_DAI: k_objects = 29;
pub const k_objects_K_OBJ_DRIVER_DMA: k_objects = 30;
pub const k_objects_K_OBJ_DRIVER_EDAC: k_objects = 31;
pub const k_objects_K_OBJ_DRIVER_EEPROM: k_objects = 32;
pub const k_objects_K_OBJ_DRIVER_FUEL_GAUGE_EMUL: k_objects = 33;
pub const k_objects_K_OBJ_DRIVER_EMUL_SENSOR_BACKEND_API: k_objects = 34;
pub const k_objects_K_OBJ_DRIVER_ENTROPY: k_objects = 35;
pub const k_objects_K_OBJ_DRIVER_ESPI: k_objects = 36;
pub const k_objects_K_OBJ_DRIVER_ESPI_SAF: k_objects = 37;
pub const k_objects_K_OBJ_DRIVER_FLASH: k_objects = 38;
pub const k_objects_K_OBJ_DRIVER_FPGA: k_objects = 39;
pub const k_objects_K_OBJ_DRIVER_FUEL_GAUGE: k_objects = 40;
pub const k_objects_K_OBJ_DRIVER_GNSS: k_objects = 41;
pub const k_objects_K_OBJ_DRIVER_HWSPINLOCK: k_objects = 42;
pub const k_objects_K_OBJ_DRIVER_I2C: k_objects = 43;
pub const k_objects_K_OBJ_DRIVER_I2S: k_objects = 44;
pub const k_objects_K_OBJ_DRIVER_I3C: k_objects = 45;
pub const k_objects_K_OBJ_DRIVER_IPM: k_objects = 46;
pub const k_objects_K_OBJ_DRIVER_KSCAN: k_objects = 47;
pub const k_objects_K_OBJ_DRIVER_LED: k_objects = 48;
pub const k_objects_K_OBJ_DRIVER_MBOX: k_objects = 49;
pub const k_objects_K_OBJ_DRIVER_MDIO: k_objects = 50;
pub const k_objects_K_OBJ_DRIVER_MIPI_DSI: k_objects = 51;
pub const k_objects_K_OBJ_DRIVER_PECI: k_objects = 52;
pub const k_objects_K_OBJ_DRIVER_PS2: k_objects = 53;
pub const k_objects_K_OBJ_DRIVER_PTP_CLOCK: k_objects = 54;
pub const k_objects_K_OBJ_DRIVER_PWM: k_objects = 55;
pub const k_objects_K_OBJ_DRIVER_REGULATOR_PARENT: k_objects = 56;
pub const k_objects_K_OBJ_DRIVER_REGULATOR: k_objects = 57;
pub const k_objects_K_OBJ_DRIVER_RESET: k_objects = 58;
pub const k_objects_K_OBJ_DRIVER_RETAINED_MEM: k_objects = 59;
pub const k_objects_K_OBJ_DRIVER_RTC: k_objects = 60;
pub const k_objects_K_OBJ_DRIVER_SDHC: k_objects = 61;
pub const k_objects_K_OBJ_DRIVER_SENSOR: k_objects = 62;
pub const k_objects_K_OBJ_DRIVER_SMBUS: k_objects = 63;
pub const k_objects_K_OBJ_DRIVER_SPI: k_objects = 64;
pub const k_objects_K_OBJ_DRIVER_SYSCON: k_objects = 65;
pub const k_objects_K_OBJ_DRIVER_W1: k_objects = 66;
pub const k_objects_K_OBJ_DRIVER_WDT: k_objects = 67;
pub const k_objects_K_OBJ_DRIVER_CAN_TRANSCEIVER: k_objects = 68;
pub const k_objects_K_OBJ_DRIVER_UART_MUX: k_objects = 69;
pub const k_objects_K_OBJ_DRIVER_ITS: k_objects = 70;
pub const k_objects_K_OBJ_DRIVER_TGPIO: k_objects = 71;
pub const k_objects_K_OBJ_DRIVER_PCIE_CTRL: k_objects = 72;
pub const k_objects_K_OBJ_DRIVER_SVC: k_objects = 73;
pub const k_objects_K_OBJ_DRIVER_BC12_EMUL: k_objects = 74;
pub const k_objects_K_OBJ_DRIVER_BC12: k_objects = 75;
pub const k_objects_K_OBJ_DRIVER_TCPC: k_objects = 76;
pub const k_objects_K_OBJ_DRIVER_IVSHMEM: k_objects = 77;
pub const k_objects_K_OBJ_DRIVER_EC_HOST_CMD_BACKEND_API: k_objects = 78;
pub const k_objects_K_OBJ_DRIVER_ETHPHY: k_objects = 79;
#[doc = " @endcond"]
pub const k_objects_K_OBJ_LAST: k_objects = 80;
#[doc = " @brief Kernel Object Types\n\n This enumeration needs to be kept in sync with the lists of kernel objects\n and subsystems in scripts/build/gen_kobject_list.py, as well as the otype_to_str()\n function in kernel/userspace.c"]
pub type k_objects = ::core::ffi::c_uint;
extern "C" {
    #[doc = " @internal"]
    #[link_name = "z_impl_k_object_access_grant__extern"]
    pub fn z_impl_k_object_access_grant(object: *const ::core::ffi::c_void, thread: *mut k_thread);
}
extern "C" {
    #[doc = " @internal"]
    #[link_name = "k_object_access_revoke__extern"]
    pub fn k_object_access_revoke(object: *const ::core::ffi::c_void, thread: *mut k_thread);
}
extern "C" {
    #[doc = " @internal"]
    #[link_name = "z_impl_k_object_release__extern"]
    pub fn z_impl_k_object_release(object: *const ::core::ffi::c_void);
}
extern "C" {
    #[link_name = "k_object_access_all_grant__extern"]
    pub fn k_object_access_all_grant(object: *const ::core::ffi::c_void);
}
extern "C" {
    #[link_name = "k_object_is_valid__extern"]
    pub fn k_object_is_valid(obj: *const ::core::ffi::c_void, otype: k_objects) -> bool;
}
extern "C" {
    #[link_name = "z_impl_k_object_alloc__extern"]
    pub fn z_impl_k_object_alloc(otype: k_objects) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[link_name = "z_impl_k_object_alloc_size__extern"]
    pub fn z_impl_k_object_alloc_size(otype: k_objects, size: usize) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " @brief Free an object\n\n @param obj"]
    #[link_name = "k_object_free__extern"]
    pub fn k_object_free(obj: *mut ::core::ffi::c_void);
}
extern "C" {
    #[link_name = "k_object_access_grant__extern"]
    pub fn k_object_access_grant(object: *const ::core::ffi::c_void, thread: *mut k_thread);
}
extern "C" {
    #[link_name = "k_object_release__extern"]
    pub fn k_object_release(object: *const ::core::ffi::c_void);
}
extern "C" {
    #[link_name = "k_object_alloc__extern"]
    pub fn k_object_alloc(otype: k_objects) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[link_name = "k_object_alloc_size__extern"]
    pub fn k_object_alloc_size(otype: k_objects, size: usize) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn z_init_cpu(id: ::core::ffi::c_int);
}
extern "C" {
    pub fn z_sched_ipi();
}
extern "C" {
    pub fn z_smp_start_cpu(id: ::core::ffi::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_futex {
    _unused: [u8; 0],
}
pub const execution_context_types_K_ISR: execution_context_types = 0;
pub const execution_context_types_K_COOP_THREAD: execution_context_types = 1;
pub const execution_context_types_K_PREEMPT_THREAD: execution_context_types = 2;
pub type execution_context_types = ::core::ffi::c_uint;
pub type _poller_cb_t = ::core::option::Option<
    unsafe extern "C" fn(event: *mut k_poll_event, state: u32) -> ::core::ffi::c_int,
>;
#[doc = " @addtogroup thread_apis\n @{"]
pub type k_thread_user_cb_t = ::core::option::Option<
    unsafe extern "C" fn(thread: *const k_thread, user_data: *mut ::core::ffi::c_void),
>;
extern "C" {
    #[doc = " @brief Iterate over all the threads in the system.\n\n This routine iterates over all the threads in the system and\n calls the user_cb function for each thread.\n\n @param user_cb Pointer to the user callback function.\n @param user_data Pointer to user data.\n\n @note @kconfig{CONFIG_THREAD_MONITOR} must be set for this function\n to be effective.\n @note This API uses @ref k_spin_lock to protect the _kernel.threads\n list which means creation of new threads and terminations of existing\n threads are blocked until this API returns."]
    pub fn k_thread_foreach(user_cb: k_thread_user_cb_t, user_data: *mut ::core::ffi::c_void);
}
extern "C" {
    #[doc = " @brief Iterate over all the threads in the system without locking.\n\n This routine works exactly the same like @ref k_thread_foreach\n but unlocks interrupts when user_cb is executed.\n\n @param user_cb Pointer to the user callback function.\n @param user_data Pointer to user data.\n\n @note @kconfig{CONFIG_THREAD_MONITOR} must be set for this function\n to be effective.\n @note This API uses @ref k_spin_lock only when accessing the _kernel.threads\n queue elements. It unlocks it during user callback function processing.\n If a new task is created when this @c foreach function is in progress,\n the added new task would not be included in the enumeration.\n If a task is aborted during this enumeration, there would be a race here\n and there is a possibility that this aborted task would be included in the\n enumeration.\n @note If the task is aborted and the memory occupied by its @c k_thread\n structure is reused when this @c k_thread_foreach_unlocked is in progress\n it might even lead to the system behave unstable.\n This function may never return, as it would follow some @c next task\n pointers treating given pointer as a pointer to the k_thread structure\n while it is something different right now.\n Do not reuse the memory that was occupied by k_thread structure of aborted\n task if it was aborted after this function was called in any context."]
    pub fn k_thread_foreach_unlocked(
        user_cb: k_thread_user_cb_t,
        user_data: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    #[doc = " @brief Dynamically allocate a thread stack.\n\n Relevant stack creation flags include:\n - @ref K_USER allocate a userspace thread (requires `CONFIG_USERSPACE=y`)\n\n @param size Stack size in bytes.\n @param flags Stack creation flags, or 0.\n\n @retval the allocated thread stack on success.\n @retval NULL on failure.\n\n @see CONFIG_DYNAMIC_THREAD"]
    #[link_name = "k_thread_stack_alloc__extern"]
    pub fn k_thread_stack_alloc(size: usize, flags: ::core::ffi::c_int) -> *mut k_thread_stack_t;
}
extern "C" {
    #[doc = " @brief Free a dynamically allocated thread stack.\n\n @param stack Pointer to the thread stack.\n\n @retval 0 on success.\n @retval -EBUSY if the thread stack is in use.\n @retval -EINVAL if @p stack is invalid.\n @retval -ENOSYS if dynamic thread stack allocation is disabled\n\n @see CONFIG_DYNAMIC_THREAD"]
    #[link_name = "k_thread_stack_free__extern"]
    pub fn k_thread_stack_free(stack: *mut k_thread_stack_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Create a thread.\n\n This routine initializes a thread, then schedules it for execution.\n\n The new thread may be scheduled for immediate execution or a delayed start.\n If the newly spawned thread does not have a delayed start the kernel\n scheduler may preempt the current thread to allow the new thread to\n execute.\n\n Thread options are architecture-specific, and can include K_ESSENTIAL,\n K_FP_REGS, and K_SSE_REGS. Multiple options may be specified by separating\n them using \"|\" (the logical OR operator).\n\n Stack objects passed to this function must be originally defined with\n either of these macros in order to be portable:\n\n - K_THREAD_STACK_DEFINE() - For stacks that may support either user or\n   supervisor threads.\n - K_KERNEL_STACK_DEFINE() - For stacks that may support supervisor\n   threads only. These stacks use less memory if CONFIG_USERSPACE is\n   enabled.\n\n The stack_size parameter has constraints. It must either be:\n\n - The original size value passed to K_THREAD_STACK_DEFINE() or\n   K_KERNEL_STACK_DEFINE()\n - The return value of K_THREAD_STACK_SIZEOF(stack) if the stack was\n   defined with K_THREAD_STACK_DEFINE()\n - The return value of K_KERNEL_STACK_SIZEOF(stack) if the stack was\n   defined with K_KERNEL_STACK_DEFINE().\n\n Using other values, or sizeof(stack) may produce undefined behavior.\n\n @param new_thread Pointer to uninitialized struct k_thread\n @param stack Pointer to the stack space.\n @param stack_size Stack size in bytes.\n @param entry Thread entry function.\n @param p1 1st entry point parameter.\n @param p2 2nd entry point parameter.\n @param p3 3rd entry point parameter.\n @param prio Thread priority.\n @param options Thread options.\n @param delay Scheduling delay, or K_NO_WAIT (for no delay).\n\n @return ID of new thread.\n"]
    #[link_name = "k_thread_create__extern"]
    pub fn k_thread_create(
        new_thread: *mut k_thread,
        stack: *mut k_thread_stack_t,
        stack_size: usize,
        entry: k_thread_entry_t,
        p1: *mut ::core::ffi::c_void,
        p2: *mut ::core::ffi::c_void,
        p3: *mut ::core::ffi::c_void,
        prio: ::core::ffi::c_int,
        options: u32,
        delay: k_timeout_t,
    ) -> k_tid_t;
}
extern "C" {
    #[doc = " @brief Drop a thread's privileges permanently to user mode\n\n This allows a supervisor thread to be re-used as a user thread.\n This function does not return, but control will transfer to the provided\n entry point as if this was a new user thread.\n\n The implementation ensures that the stack buffer contents are erased.\n Any thread-local storage will be reverted to a pristine state.\n\n Memory domain membership, resource pool assignment, kernel object\n permissions, priority, and thread options are preserved.\n\n A common use of this function is to re-use the main thread as a user thread\n once all supervisor mode-only tasks have been completed.\n\n @param entry Function to start executing from\n @param p1 1st entry point parameter\n @param p2 2nd entry point parameter\n @param p3 3rd entry point parameter"]
    pub fn k_thread_user_mode_enter(
        entry: k_thread_entry_t,
        p1: *mut ::core::ffi::c_void,
        p2: *mut ::core::ffi::c_void,
        p3: *mut ::core::ffi::c_void,
    ) -> !;
}
extern "C" {
    #[doc = " @brief Assign a resource memory pool to a thread\n\n By default, threads have no resource pool assigned unless their parent\n thread has a resource pool, in which case it is inherited. Multiple\n threads may be assigned to the same memory pool.\n\n Changing a thread's resource pool will not migrate allocations from the\n previous pool.\n\n @param thread Target thread to assign a memory pool for resource requests.\n @param heap Heap object to use for resources,\n             or NULL if the thread should no longer have a memory pool."]
    #[link_name = "k_thread_heap_assign__extern"]
    pub fn k_thread_heap_assign(thread: *mut k_thread, heap: *mut k_heap);
}
extern "C" {
    #[doc = " @brief Sleep until a thread exits\n\n The caller will be put to sleep until the target thread exits, either due\n to being aborted, self-exiting, or taking a fatal error. This API returns\n immediately if the thread isn't running.\n\n This API may only be called from ISRs with a K_NO_WAIT timeout,\n where it can be useful as a predicate to detect when a thread has\n aborted.\n\n @param thread Thread to wait to exit\n @param timeout upper bound time to wait for the thread to exit.\n @retval 0 success, target thread has exited or wasn't running\n @retval -EBUSY returned without waiting\n @retval -EAGAIN waiting period timed out\n @retval -EDEADLK target thread is joining on the caller, or target thread\n                  is the caller"]
    #[link_name = "k_thread_join__extern"]
    pub fn k_thread_join(thread: *mut k_thread, timeout: k_timeout_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Put the current thread to sleep.\n\n This routine puts the current thread to sleep for @a duration,\n specified as a k_timeout_t object.\n\n @note if @a timeout is set to K_FOREVER then the thread is suspended.\n\n @param timeout Desired duration of sleep.\n\n @return Zero if the requested time has elapsed or the number of milliseconds\n left to sleep, if thread was woken up by \\ref k_wakeup call."]
    #[link_name = "k_sleep__extern"]
    pub fn k_sleep(timeout: k_timeout_t) -> i32;
}
extern "C" {
    #[doc = " @brief Put the current thread to sleep.\n\n This routine puts the current thread to sleep for @a duration milliseconds.\n\n @param ms Number of milliseconds to sleep.\n\n @return Zero if the requested time has elapsed or the number of milliseconds\n left to sleep, if thread was woken up by \\ref k_wakeup call."]
    #[link_name = "k_msleep__extern"]
    pub fn k_msleep(ms: i32) -> i32;
}
extern "C" {
    #[doc = " @brief Put the current thread to sleep with microsecond resolution.\n\n This function is unlikely to work as expected without kernel tuning.\n In particular, because the lower bound on the duration of a sleep is\n the duration of a tick, @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} must be\n adjusted to achieve the resolution desired. The implications of doing\n this must be understood before attempting to use k_usleep(). Use with\n caution.\n\n @param us Number of microseconds to sleep.\n\n @return Zero if the requested time has elapsed or the number of microseconds\n left to sleep, if thread was woken up by \\ref k_wakeup call."]
    #[link_name = "k_usleep__extern"]
    pub fn k_usleep(us: i32) -> i32;
}
extern "C" {
    #[doc = " @brief Cause the current thread to busy wait.\n\n This routine causes the current thread to execute a \"do nothing\" loop for\n @a usec_to_wait microseconds.\n\n @note The clock used for the microsecond-resolution delay here may\n be skewed relative to the clock used for system timeouts like\n k_sleep().  For example k_busy_wait(1000) may take slightly more or\n less time than k_sleep(K_MSEC(1)), with the offset dependent on\n clock tolerances.\n\n @note In case when @kconfig{CONFIG_SYSTEM_CLOCK_SLOPPY_IDLE} and\n @kconfig{CONFIG_PM} options are enabled, this function may not work.\n The timer/clock used for delay processing may be disabled/inactive."]
    #[link_name = "k_busy_wait__extern"]
    pub fn k_busy_wait(usec_to_wait: u32);
}
extern "C" {
    #[doc = " @brief Check whether it is possible to yield in the current context.\n\n This routine checks whether the kernel is in a state where it is possible to\n yield or call blocking API's. It should be used by code that needs to yield\n to perform correctly, but can feasibly be called from contexts where that\n is not possible. For example in the PRE_KERNEL initialization step, or when\n being run from the idle thread.\n\n @return True if it is possible to yield in the current context, false otherwise."]
    pub fn k_can_yield() -> bool;
}
extern "C" {
    #[doc = " @brief Yield the current thread.\n\n This routine causes the current thread to yield execution to another\n thread of the same or higher priority. If there are no other ready threads\n of the same or higher priority, the routine returns immediately."]
    #[link_name = "k_yield__extern"]
    pub fn k_yield();
}
extern "C" {
    #[doc = " @brief Wake up a sleeping thread.\n\n This routine prematurely wakes up @a thread from sleeping.\n\n If @a thread is not currently sleeping, the routine has no effect.\n\n @param thread ID of thread to wake."]
    #[link_name = "k_wakeup__extern"]
    pub fn k_wakeup(thread: k_tid_t);
}
extern "C" {
    #[doc = " @brief Query thread ID of the current thread.\n\n This unconditionally queries the kernel via a system call.\n\n @note Use k_current_get() unless absolutely sure this is necessary.\n       This should only be used directly where the thread local\n       variable cannot be used or may contain invalid values\n       if thread local storage (TLS) is enabled. If TLS is not\n       enabled, this is the same as k_current_get().\n\n @return ID of current thread."]
    #[link_name = "k_sched_current_thread_query__extern"]
    pub fn k_sched_current_thread_query() -> k_tid_t;
}
extern "C" {
    #[doc = " @brief Get thread ID of the current thread.\n\n @return ID of current thread.\n"]
    #[link_name = "k_current_get__extern"]
    pub fn k_current_get() -> k_tid_t;
}
extern "C" {
    #[doc = " @brief Abort a thread.\n\n This routine permanently stops execution of @a thread. The thread is taken\n off all kernel queues it is part of (i.e. the ready queue, the timeout\n queue, or a kernel object wait queue). However, any kernel resources the\n thread might currently own (such as mutexes or memory blocks) are not\n released. It is the responsibility of the caller of this routine to ensure\n all necessary cleanup is performed.\n\n After k_thread_abort() returns, the thread is guaranteed not to be\n running or to become runnable anywhere on the system.  Normally\n this is done via blocking the caller (in the same manner as\n k_thread_join()), but in interrupt context on SMP systems the\n implementation is required to spin for threads that are running on\n other CPUs.\n\n @param thread ID of thread to abort."]
    #[link_name = "k_thread_abort__extern"]
    pub fn k_thread_abort(thread: k_tid_t);
}
extern "C" {
    #[doc = " @brief Start an inactive thread\n\n If a thread was created with K_FOREVER in the delay parameter, it will\n not be added to the scheduling queue until this function is called\n on it.\n\n @param thread thread to start"]
    #[link_name = "k_thread_start__extern"]
    pub fn k_thread_start(thread: k_tid_t);
}
extern "C" {
    pub fn z_timeout_expires(timeout: *const _timeout) -> k_ticks_t;
}
extern "C" {
    pub fn z_timeout_remaining(timeout: *const _timeout) -> k_ticks_t;
}
extern "C" {
    #[doc = " @brief Get time when a thread wakes up, in system ticks\n\n This routine computes the system uptime when a waiting thread next\n executes, in units of system ticks.  If the thread is not waiting,\n it returns current system time."]
    #[link_name = "k_thread_timeout_expires_ticks__extern"]
    pub fn k_thread_timeout_expires_ticks(t: *const k_thread) -> k_ticks_t;
}
extern "C" {
    #[link_name = "z_impl_k_thread_timeout_expires_ticks__extern"]
    pub fn z_impl_k_thread_timeout_expires_ticks(t: *const k_thread) -> k_ticks_t;
}
extern "C" {
    #[doc = " @brief Get time remaining before a thread wakes up, in system ticks\n\n This routine computes the time remaining before a waiting thread\n next executes, in units of system ticks.  If the thread is not\n waiting, it returns zero."]
    #[link_name = "k_thread_timeout_remaining_ticks__extern"]
    pub fn k_thread_timeout_remaining_ticks(t: *const k_thread) -> k_ticks_t;
}
extern "C" {
    #[link_name = "z_impl_k_thread_timeout_remaining_ticks__extern"]
    pub fn z_impl_k_thread_timeout_remaining_ticks(t: *const k_thread) -> k_ticks_t;
}
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _static_thread_data {
    pub init_thread: *mut k_thread,
    pub init_stack: *mut k_thread_stack_t,
    pub init_stack_size: ::core::ffi::c_uint,
    pub init_entry: k_thread_entry_t,
    pub init_p1: *mut ::core::ffi::c_void,
    pub init_p2: *mut ::core::ffi::c_void,
    pub init_p3: *mut ::core::ffi::c_void,
    pub init_prio: ::core::ffi::c_int,
    pub init_options: u32,
    pub init_name: *const ::core::ffi::c_char,
    pub init_delay: k_timeout_t,
}
#[test]
fn bindgen_test_layout__static_thread_data() {
    const UNINIT: ::core::mem::MaybeUninit<_static_thread_data> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_static_thread_data>(),
        48usize,
        concat!("Size of: ", stringify!(_static_thread_data))
    );
    assert_eq!(
        ::core::mem::align_of::<_static_thread_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_static_thread_data))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_thread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_static_thread_data),
            "::",
            stringify!(init_thread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_stack) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_static_thread_data),
            "::",
            stringify!(init_stack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_stack_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_static_thread_data),
            "::",
            stringify!(init_stack_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_entry) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_static_thread_data),
            "::",
            stringify!(init_entry)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_p1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_static_thread_data),
            "::",
            stringify!(init_p1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_p2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_static_thread_data),
            "::",
            stringify!(init_p2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_p3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_static_thread_data),
            "::",
            stringify!(init_p3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_prio) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_static_thread_data),
            "::",
            stringify!(init_prio)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_options) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_static_thread_data),
            "::",
            stringify!(init_options)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_static_thread_data),
            "::",
            stringify!(init_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).init_delay) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_static_thread_data),
            "::",
            stringify!(init_delay)
        )
    );
}
extern "C" {
    #[doc = " @brief Get a thread's priority.\n\n This routine gets the priority of @a thread.\n\n @param thread ID of thread whose priority is needed.\n\n @return Priority of @a thread."]
    #[link_name = "k_thread_priority_get__extern"]
    pub fn k_thread_priority_get(thread: k_tid_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Set a thread's priority.\n\n This routine immediately changes the priority of @a thread.\n\n Rescheduling can occur immediately depending on the priority @a thread is\n set to:\n\n - If its priority is raised above the priority of the caller of this\n function, and the caller is preemptible, @a thread will be scheduled in.\n\n - If the caller operates on itself, it lowers its priority below that of\n other threads in the system, and the caller is preemptible, the thread of\n highest priority will be scheduled in.\n\n Priority can be assigned in the range of -CONFIG_NUM_COOP_PRIORITIES to\n CONFIG_NUM_PREEMPT_PRIORITIES-1, where -CONFIG_NUM_COOP_PRIORITIES is the\n highest priority.\n\n @param thread ID of thread whose priority is to be set.\n @param prio New priority.\n\n @warning Changing the priority of a thread currently involved in mutex\n priority inheritance may result in undefined behavior."]
    #[link_name = "k_thread_priority_set__extern"]
    pub fn k_thread_priority_set(thread: k_tid_t, prio: ::core::ffi::c_int);
}
extern "C" {
    #[doc = " @brief Suspend a thread.\n\n This routine prevents the kernel scheduler from making @a thread\n the current thread. All other internal operations on @a thread are\n still performed; for example, kernel objects it is waiting on are\n still handed to it.  Note that any existing timeouts\n (e.g. k_sleep(), or a timeout argument to k_sem_take() et. al.)\n will be canceled.  On resume, the thread will begin running\n immediately and return from the blocked call.\n\n When the target thread is active on another CPU, the caller will block until\n the target thread is halted (suspended or aborted).  But if the caller is in\n an interrupt context, it will spin waiting for that target thread active on\n another CPU to halt.\n\n If @a thread is already suspended, the routine has no effect.\n\n @param thread ID of thread to suspend."]
    #[link_name = "k_thread_suspend__extern"]
    pub fn k_thread_suspend(thread: k_tid_t);
}
extern "C" {
    #[doc = " @brief Resume a suspended thread.\n\n This routine allows the kernel scheduler to make @a thread the current\n thread, when it is next eligible for that role.\n\n If @a thread is not currently suspended, the routine has no effect.\n\n @param thread ID of thread to resume."]
    #[link_name = "k_thread_resume__extern"]
    pub fn k_thread_resume(thread: k_tid_t);
}
extern "C" {
    #[doc = " @brief Set time-slicing period and scope.\n\n This routine specifies how the scheduler will perform time slicing of\n preemptible threads.\n\n To enable time slicing, @a slice must be non-zero. The scheduler\n ensures that no thread runs for more than the specified time limit\n before other threads of that priority are given a chance to execute.\n Any thread whose priority is higher than @a prio is exempted, and may\n execute as long as desired without being preempted due to time slicing.\n\n Time slicing only limits the maximum amount of time a thread may continuously\n execute. Once the scheduler selects a thread for execution, there is no\n minimum guaranteed time the thread will execute before threads of greater or\n equal priority are scheduled.\n\n When the current thread is the only one of that priority eligible\n for execution, this routine has no effect; the thread is immediately\n rescheduled after the slice period expires.\n\n To disable timeslicing, set both @a slice and @a prio to zero.\n\n @param slice Maximum time slice length (in milliseconds).\n @param prio Highest thread priority level eligible for time slicing."]
    pub fn k_sched_time_slice_set(slice: i32, prio: ::core::ffi::c_int);
}
extern "C" {
    #[doc = " @brief Set thread time slice\n\n As for k_sched_time_slice_set, but (when\n CONFIG_TIMESLICE_PER_THREAD=y) sets the timeslice for a specific\n thread.  When non-zero, this timeslice will take precedence over\n the global value.\n\n When such a thread's timeslice expires, the configured callback\n will be called before the thread is removed/re-added to the run\n queue.  This callback will occur in interrupt context, and the\n specified thread is guaranteed to have been preempted by the\n currently-executing ISR.  Such a callback is free to, for example,\n modify the thread priority or slice time for future execution,\n suspend the thread, etc...\n\n @note Unlike the older API, the time slice parameter here is\n specified in ticks, not milliseconds.  Ticks have always been the\n internal unit, and not all platforms have integer conversions\n between the two.\n\n @note Threads with a non-zero slice time set will be timesliced\n always, even if they are higher priority than the maximum timeslice\n priority set via k_sched_time_slice_set().\n\n @note The callback notification for slice expiration happens, as it\n must, while the thread is still \"current\", and thus it happens\n before any registered timeouts at this tick.  This has the somewhat\n confusing side effect that the tick time (c.f. k_uptime_get()) does\n not yet reflect the expired ticks.  Applications wishing to make\n fine-grained timing decisions within this callback should use the\n cycle API, or derived facilities like k_thread_runtime_stats_get().\n\n @param th A valid, initialized thread\n @param slice_ticks Maximum timeslice, in ticks\n @param expired Callback function called on slice expiration\n @param data Parameter for the expiration handler"]
    pub fn k_thread_time_slice_set(
        th: *mut k_thread,
        slice_ticks: i32,
        expired: k_thread_timeslice_fn_t,
        data: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    #[doc = " @brief Determine if code is running at interrupt level.\n\n This routine allows the caller to customize its actions, depending on\n whether it is a thread or an ISR.\n\n @funcprops \\isr_ok\n\n @return false if invoked by a thread.\n @return true if invoked by an ISR."]
    pub fn k_is_in_isr() -> bool;
}
extern "C" {
    #[doc = " @brief Determine if code is running in a preemptible thread.\n\n This routine allows the caller to customize its actions, depending on\n whether it can be preempted by another thread. The routine returns a 'true'\n value if all of the following conditions are met:\n\n - The code is running in a thread, not at ISR.\n - The thread's priority is in the preemptible range.\n - The thread has not locked the scheduler.\n\n @funcprops \\isr_ok\n\n @return 0 if invoked by an ISR or by a cooperative thread.\n @return Non-zero if invoked by a preemptible thread."]
    #[link_name = "k_is_preempt_thread__extern"]
    pub fn k_is_preempt_thread() -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Test whether startup is in the before-main-task phase.\n\n This routine allows the caller to customize its actions, depending on\n whether it being invoked before the kernel is fully active.\n\n @funcprops \\isr_ok\n\n @return true if invoked before post-kernel initialization\n @return false if invoked during/after post-kernel initialization"]
    #[link_name = "k_is_pre_kernel__extern"]
    pub fn k_is_pre_kernel() -> bool;
}
extern "C" {
    #[doc = " @brief Lock the scheduler.\n\n This routine prevents the current thread from being preempted by another\n thread by instructing the scheduler to treat it as a cooperative thread.\n If the thread subsequently performs an operation that makes it unready,\n it will be context switched out in the normal manner. When the thread\n again becomes the current thread, its non-preemptible status is maintained.\n\n This routine can be called recursively.\n\n Owing to clever implementation details, scheduler locks are\n extremely fast for non-userspace threads (just one byte\n inc/decrement in the thread struct).\n\n @note This works by elevating the thread priority temporarily to a\n cooperative priority, allowing cheap synchronization vs. other\n preemptible or cooperative threads running on the current CPU.  It\n does not prevent preemption or asynchrony of other types.  It does\n not prevent threads from running on other CPUs when CONFIG_SMP=y.\n It does not prevent interrupts from happening, nor does it prevent\n threads with MetaIRQ priorities from preempting the current thread.\n In general this is a historical API not well-suited to modern\n applications, use with care."]
    pub fn k_sched_lock();
}
extern "C" {
    #[doc = " @brief Unlock the scheduler.\n\n This routine reverses the effect of a previous call to k_sched_lock().\n A thread must call the routine once for each time it called k_sched_lock()\n before the thread becomes preemptible."]
    pub fn k_sched_unlock();
}
extern "C" {
    #[doc = " @brief Set current thread's custom data.\n\n This routine sets the custom data for the current thread to @ value.\n\n Custom data is not used by the kernel itself, and is freely available\n for a thread to use as it sees fit. It can be used as a framework\n upon which to build thread-local storage.\n\n @param value New custom data value.\n"]
    #[link_name = "k_thread_custom_data_set__extern"]
    pub fn k_thread_custom_data_set(value: *mut ::core::ffi::c_void);
}
extern "C" {
    #[doc = " @brief Get current thread's custom data.\n\n This routine returns the custom data for the current thread.\n\n @return Current custom data value."]
    #[link_name = "k_thread_custom_data_get__extern"]
    pub fn k_thread_custom_data_get() -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " @brief Set current thread name\n\n Set the name of the thread to be used when @kconfig{CONFIG_THREAD_MONITOR}\n is enabled for tracing and debugging.\n\n @param thread Thread to set name, or NULL to set the current thread\n @param str Name string\n @retval 0 on success\n @retval -EFAULT Memory access error with supplied string\n @retval -ENOSYS Thread name configuration option not enabled\n @retval -EINVAL Thread name too long"]
    #[link_name = "k_thread_name_set__extern"]
    pub fn k_thread_name_set(
        thread: k_tid_t,
        str_: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Get thread name\n\n Get the name of a thread\n\n @param thread Thread ID\n @retval Thread name, or NULL if configuration not enabled"]
    pub fn k_thread_name_get(thread: k_tid_t) -> *const ::core::ffi::c_char;
}
extern "C" {
    #[doc = " @brief Copy the thread name into a supplied buffer\n\n @param thread Thread to obtain name information\n @param buf Destination buffer\n @param size Destination buffer size\n @retval -ENOSPC Destination buffer too small\n @retval -EFAULT Memory access error\n @retval -ENOSYS Thread name feature not enabled\n @retval 0 Success"]
    #[link_name = "k_thread_name_copy__extern"]
    pub fn k_thread_name_copy(
        thread: k_tid_t,
        buf: *mut ::core::ffi::c_char,
        size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Get thread state string\n\n This routine generates a human friendly string containing the thread's\n state, and copies as much of it as possible into @a buf.\n\n @param thread_id Thread ID\n @param buf Buffer into which to copy state strings\n @param buf_size Size of the buffer\n\n @retval Pointer to @a buf if data was copied, else a pointer to \"\"."]
    pub fn k_thread_state_str(
        thread_id: k_tid_t,
        buf: *mut ::core::ffi::c_char,
        buf_size: usize,
    ) -> *const ::core::ffi::c_char;
}
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_timer {
    pub timeout: _timeout,
    pub wait_q: _wait_q_t,
    pub expiry_fn: ::core::option::Option<unsafe extern "C" fn(timer: *mut k_timer)>,
    pub stop_fn: ::core::option::Option<unsafe extern "C" fn(timer: *mut k_timer)>,
    pub period: k_timeout_t,
    pub status: u32,
    pub user_data: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_k_timer() {
    const UNINIT: ::core::mem::MaybeUninit<k_timer> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_timer>(),
        56usize,
        concat!("Size of: ", stringify!(k_timer))
    );
    assert_eq!(
        ::core::mem::align_of::<k_timer>(),
        8usize,
        concat!("Alignment of ", stringify!(k_timer))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_timer),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wait_q) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(k_timer),
            "::",
            stringify!(wait_q)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).expiry_fn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(k_timer),
            "::",
            stringify!(expiry_fn)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stop_fn) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(k_timer),
            "::",
            stringify!(stop_fn)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(k_timer),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(k_timer),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(k_timer),
            "::",
            stringify!(user_data)
        )
    );
}
#[doc = " @typedef k_timer_expiry_t\n @brief Timer expiry function type.\n\n A timer's expiry function is executed by the system clock interrupt handler\n each time the timer expires. The expiry function is optional, and is only\n invoked if the timer has been initialized with one.\n\n @param timer     Address of timer."]
pub type k_timer_expiry_t = ::core::option::Option<unsafe extern "C" fn(timer: *mut k_timer)>;
#[doc = " @typedef k_timer_stop_t\n @brief Timer stop function type.\n\n A timer's stop function is executed if the timer is stopped prematurely.\n The function runs in the context of call that stops the timer.  As\n k_timer_stop() can be invoked from an ISR, the stop function must be\n callable from interrupt context (isr-ok).\n\n The stop function is optional, and is only invoked if the timer has been\n initialized with one.\n\n @param timer     Address of timer."]
pub type k_timer_stop_t = ::core::option::Option<unsafe extern "C" fn(timer: *mut k_timer)>;
extern "C" {
    #[doc = " @brief Initialize a timer.\n\n This routine initializes a timer, prior to its first use.\n\n @param timer     Address of timer.\n @param expiry_fn Function to invoke each time the timer expires.\n @param stop_fn   Function to invoke if the timer is stopped while running."]
    pub fn k_timer_init(timer: *mut k_timer, expiry_fn: k_timer_expiry_t, stop_fn: k_timer_stop_t);
}
extern "C" {
    #[doc = " @brief Start a timer.\n\n This routine starts a timer, and resets its status to zero. The timer\n begins counting down using the specified duration and period values.\n\n Attempting to start a timer that is already running is permitted.\n The timer's status is reset to zero and the timer begins counting down\n using the new duration and period values.\n\n @param timer     Address of timer.\n @param duration  Initial timer duration.\n @param period    Timer period."]
    #[link_name = "k_timer_start__extern"]
    pub fn k_timer_start(timer: *mut k_timer, duration: k_timeout_t, period: k_timeout_t);
}
extern "C" {
    #[doc = " @brief Stop a timer.\n\n This routine stops a running timer prematurely. The timer's stop function,\n if one exists, is invoked by the caller.\n\n Attempting to stop a timer that is not running is permitted, but has no\n effect on the timer.\n\n @note The stop handler has to be callable from ISRs if @a k_timer_stop is to\n be called from ISRs.\n\n @funcprops \\isr_ok\n\n @param timer     Address of timer."]
    #[link_name = "k_timer_stop__extern"]
    pub fn k_timer_stop(timer: *mut k_timer);
}
extern "C" {
    #[doc = " @brief Read timer status.\n\n This routine reads the timer's status, which indicates the number of times\n it has expired since its status was last read.\n\n Calling this routine resets the timer's status to zero.\n\n @param timer     Address of timer.\n\n @return Timer status."]
    #[link_name = "k_timer_status_get__extern"]
    pub fn k_timer_status_get(timer: *mut k_timer) -> u32;
}
extern "C" {
    #[doc = " @brief Synchronize thread to timer expiration.\n\n This routine blocks the calling thread until the timer's status is non-zero\n (indicating that it has expired at least once since it was last examined)\n or the timer is stopped. If the timer status is already non-zero,\n or the timer is already stopped, the caller continues without waiting.\n\n Calling this routine resets the timer's status to zero.\n\n This routine must not be used by interrupt handlers, since they are not\n allowed to block.\n\n @param timer     Address of timer.\n\n @return Timer status."]
    #[link_name = "k_timer_status_sync__extern"]
    pub fn k_timer_status_sync(timer: *mut k_timer) -> u32;
}
extern "C" {
    #[doc = " @brief Get next expiration time of a timer, in system ticks\n\n This routine returns the future system uptime reached at the next\n time of expiration of the timer, in units of system ticks.  If the\n timer is not running, current system time is returned.\n\n @param timer The timer object\n @return Uptime of expiration, in ticks"]
    #[link_name = "k_timer_expires_ticks__extern"]
    pub fn k_timer_expires_ticks(timer: *const k_timer) -> k_ticks_t;
}
extern "C" {
    #[link_name = "z_impl_k_timer_expires_ticks__extern"]
    pub fn z_impl_k_timer_expires_ticks(timer: *const k_timer) -> k_ticks_t;
}
extern "C" {
    #[doc = " @brief Get time remaining before a timer next expires, in system ticks\n\n This routine computes the time remaining before a running timer\n next expires, in units of system ticks.  If the timer is not\n running, it returns zero."]
    #[link_name = "k_timer_remaining_ticks__extern"]
    pub fn k_timer_remaining_ticks(timer: *const k_timer) -> k_ticks_t;
}
extern "C" {
    #[link_name = "z_impl_k_timer_remaining_ticks__extern"]
    pub fn z_impl_k_timer_remaining_ticks(timer: *const k_timer) -> k_ticks_t;
}
extern "C" {
    #[doc = " @brief Get time remaining before a timer next expires.\n\n This routine computes the (approximate) time remaining before a running\n timer next expires. If the timer is not running, it returns zero.\n\n @param timer     Address of timer.\n\n @return Remaining time (in milliseconds)."]
    #[link_name = "k_timer_remaining_get__extern"]
    pub fn k_timer_remaining_get(timer: *mut k_timer) -> u32;
}
extern "C" {
    #[doc = " @brief Associate user-specific data with a timer.\n\n This routine records the @a user_data with the @a timer, to be retrieved\n later.\n\n It can be used e.g. in a timer handler shared across multiple subsystems to\n retrieve data specific to the subsystem this timer is associated with.\n\n @param timer     Address of timer.\n @param user_data User data to associate with the timer."]
    #[link_name = "k_timer_user_data_set__extern"]
    pub fn k_timer_user_data_set(timer: *mut k_timer, user_data: *mut ::core::ffi::c_void);
}
extern "C" {
    #[doc = " @internal"]
    #[link_name = "z_impl_k_timer_user_data_set__extern"]
    pub fn z_impl_k_timer_user_data_set(timer: *mut k_timer, user_data: *mut ::core::ffi::c_void);
}
extern "C" {
    #[doc = " @brief Retrieve the user-specific data from a timer.\n\n @param timer     Address of timer.\n\n @return The user data."]
    #[link_name = "k_timer_user_data_get__extern"]
    pub fn k_timer_user_data_get(timer: *const k_timer) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[link_name = "z_impl_k_timer_user_data_get__extern"]
    pub fn z_impl_k_timer_user_data_get(timer: *const k_timer) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " @brief Get system uptime, in system ticks.\n\n This routine returns the elapsed time since the system booted, in\n ticks (c.f. @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC}), which is the\n fundamental unit of resolution of kernel timekeeping.\n\n @return Current uptime in ticks."]
    #[link_name = "k_uptime_ticks__extern"]
    pub fn k_uptime_ticks() -> i64;
}
extern "C" {
    #[doc = " @brief Get system uptime.\n\n This routine returns the elapsed time since the system booted,\n in milliseconds.\n\n @note\n    While this function returns time in milliseconds, it does\n    not mean it has millisecond resolution. The actual resolution depends on\n    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option.\n\n @return Current uptime in milliseconds."]
    #[link_name = "k_uptime_get__extern"]
    pub fn k_uptime_get() -> i64;
}
extern "C" {
    #[doc = " @brief Get system uptime (32-bit version).\n\n This routine returns the lower 32 bits of the system uptime in\n milliseconds.\n\n Because correct conversion requires full precision of the system\n clock there is no benefit to using this over k_uptime_get() unless\n you know the application will never run long enough for the system\n clock to approach 2^32 ticks.  Calls to this function may involve\n interrupt blocking and 64-bit math.\n\n @note\n    While this function returns time in milliseconds, it does\n    not mean it has millisecond resolution. The actual resolution depends on\n    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option\n\n @return The low 32 bits of the current uptime, in milliseconds."]
    #[link_name = "k_uptime_get_32__extern"]
    pub fn k_uptime_get_32() -> u32;
}
extern "C" {
    #[doc = " @brief Get elapsed time.\n\n This routine computes the elapsed time between the current system uptime\n and an earlier reference time, in milliseconds.\n\n @param reftime Pointer to a reference time, which is updated to the current\n                uptime upon return.\n\n @return Elapsed time."]
    #[link_name = "k_uptime_delta__extern"]
    pub fn k_uptime_delta(reftime: *mut i64) -> i64;
}
extern "C" {
    #[doc = " @brief Read the hardware clock.\n\n This routine returns the current time, as measured by the system's hardware\n clock.\n\n @return Current hardware clock up-counter (in cycles)."]
    #[link_name = "k_cycle_get_32__extern"]
    pub fn k_cycle_get_32() -> u32;
}
extern "C" {
    #[doc = " @brief Read the 64-bit hardware clock.\n\n This routine returns the current time in 64-bits, as measured by the\n system's hardware clock, if available.\n\n @see CONFIG_TIMER_HAS_64BIT_CYCLE_COUNTER\n\n @return Current hardware clock up-counter (in cycles)."]
    #[link_name = "k_cycle_get_64__extern"]
    pub fn k_cycle_get_64() -> u64;
}
#[doc = " @}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_queue {
    pub data_q: sys_sflist_t,
    pub lock: k_spinlock,
    pub wait_q: _wait_q_t,
}
#[test]
fn bindgen_test_layout_k_queue() {
    const UNINIT: ::core::mem::MaybeUninit<k_queue> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_queue>(),
        20usize,
        concat!("Size of: ", stringify!(k_queue))
    );
    assert_eq!(
        ::core::mem::align_of::<k_queue>(),
        4usize,
        concat!("Alignment of ", stringify!(k_queue))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data_q) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_queue),
            "::",
            stringify!(data_q)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_queue),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wait_q) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_queue),
            "::",
            stringify!(wait_q)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a queue.\n\n This routine initializes a queue object, prior to its first use.\n\n @param queue Address of the queue."]
    #[link_name = "k_queue_init__extern"]
    pub fn k_queue_init(queue: *mut k_queue);
}
extern "C" {
    #[doc = " @brief Cancel waiting on a queue.\n\n This routine causes first thread pending on @a queue, if any, to\n return from k_queue_get() call with NULL value (as if timeout expired).\n If the queue is being waited on by k_poll(), it will return with\n -EINTR and K_POLL_STATE_CANCELLED state (and per above, subsequent\n k_queue_get() will return NULL).\n\n @funcprops \\isr_ok\n\n @param queue Address of the queue."]
    #[link_name = "k_queue_cancel_wait__extern"]
    pub fn k_queue_cancel_wait(queue: *mut k_queue);
}
extern "C" {
    #[doc = " @brief Append an element to the end of a queue.\n\n This routine appends a data item to @a queue. A queue data item must be\n aligned on a word boundary, and the first word of the item is reserved\n for the kernel's use.\n\n @funcprops \\isr_ok\n\n @param queue Address of the queue.\n @param data Address of the data item."]
    pub fn k_queue_append(queue: *mut k_queue, data: *mut ::core::ffi::c_void);
}
extern "C" {
    #[doc = " @brief Append an element to a queue.\n\n This routine appends a data item to @a queue. There is an implicit memory\n allocation to create an additional temporary bookkeeping data structure from\n the calling thread's resource pool, which is automatically freed when the\n item is removed. The data itself is not copied.\n\n @funcprops \\isr_ok\n\n @param queue Address of the queue.\n @param data Address of the data item.\n\n @retval 0 on success\n @retval -ENOMEM if there isn't sufficient RAM in the caller's resource pool"]
    #[link_name = "k_queue_alloc_append__extern"]
    pub fn k_queue_alloc_append(queue: *mut k_queue, data: *mut ::core::ffi::c_void) -> i32;
}
extern "C" {
    #[doc = " @brief Prepend an element to a queue.\n\n This routine prepends a data item to @a queue. A queue data item must be\n aligned on a word boundary, and the first word of the item is reserved\n for the kernel's use.\n\n @funcprops \\isr_ok\n\n @param queue Address of the queue.\n @param data Address of the data item."]
    pub fn k_queue_prepend(queue: *mut k_queue, data: *mut ::core::ffi::c_void);
}
extern "C" {
    #[doc = " @brief Prepend an element to a queue.\n\n This routine prepends a data item to @a queue. There is an implicit memory\n allocation to create an additional temporary bookkeeping data structure from\n the calling thread's resource pool, which is automatically freed when the\n item is removed. The data itself is not copied.\n\n @funcprops \\isr_ok\n\n @param queue Address of the queue.\n @param data Address of the data item.\n\n @retval 0 on success\n @retval -ENOMEM if there isn't sufficient RAM in the caller's resource pool"]
    #[link_name = "k_queue_alloc_prepend__extern"]
    pub fn k_queue_alloc_prepend(queue: *mut k_queue, data: *mut ::core::ffi::c_void) -> i32;
}
extern "C" {
    #[doc = " @brief Inserts an element to a queue.\n\n This routine inserts a data item to @a queue after previous item. A queue\n data item must be aligned on a word boundary, and the first word of\n the item is reserved for the kernel's use.\n\n @funcprops \\isr_ok\n\n @param queue Address of the queue.\n @param prev Address of the previous data item.\n @param data Address of the data item."]
    pub fn k_queue_insert(
        queue: *mut k_queue,
        prev: *mut ::core::ffi::c_void,
        data: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    #[doc = " @brief Atomically append a list of elements to a queue.\n\n This routine adds a list of data items to @a queue in one operation.\n The data items must be in a singly-linked list, with the first word\n in each data item pointing to the next data item; the list must be\n NULL-terminated.\n\n @funcprops \\isr_ok\n\n @param queue Address of the queue.\n @param head Pointer to first node in singly-linked list.\n @param tail Pointer to last node in singly-linked list.\n\n @retval 0 on success\n @retval -EINVAL on invalid supplied data\n"]
    pub fn k_queue_append_list(
        queue: *mut k_queue,
        head: *mut ::core::ffi::c_void,
        tail: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Atomically add a list of elements to a queue.\n\n This routine adds a list of data items to @a queue in one operation.\n The data items must be in a singly-linked list implemented using a\n sys_slist_t object. Upon completion, the original list is empty.\n\n @funcprops \\isr_ok\n\n @param queue Address of the queue.\n @param list Pointer to sys_slist_t object.\n\n @retval 0 on success\n @retval -EINVAL on invalid data"]
    pub fn k_queue_merge_slist(queue: *mut k_queue, list: *mut sys_slist_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Get an element from a queue.\n\n This routine removes first data item from @a queue. The first word of the\n data item is reserved for the kernel's use.\n\n @note @a timeout must be set to K_NO_WAIT if called from ISR.\n\n @funcprops \\isr_ok\n\n @param queue Address of the queue.\n @param timeout Non-negative waiting period to obtain a data item\n                or one of the special values K_NO_WAIT and\n                K_FOREVER.\n\n @return Address of the data item if successful; NULL if returned\n without waiting, or waiting period timed out."]
    #[link_name = "k_queue_get__extern"]
    pub fn k_queue_get(queue: *mut k_queue, timeout: k_timeout_t) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " @brief Remove an element from a queue.\n\n This routine removes data item from @a queue. The first word of the\n data item is reserved for the kernel's use. Removing elements from k_queue\n rely on sys_slist_find_and_remove which is not a constant time operation.\n\n @note @a timeout must be set to K_NO_WAIT if called from ISR.\n\n @funcprops \\isr_ok\n\n @param queue Address of the queue.\n @param data Address of the data item.\n\n @return true if data item was removed"]
    pub fn k_queue_remove(queue: *mut k_queue, data: *mut ::core::ffi::c_void) -> bool;
}
extern "C" {
    #[doc = " @brief Append an element to a queue only if it's not present already.\n\n This routine appends data item to @a queue. The first word of the data\n item is reserved for the kernel's use. Appending elements to k_queue\n relies on sys_slist_is_node_in_list which is not a constant time operation.\n\n @funcprops \\isr_ok\n\n @param queue Address of the queue.\n @param data Address of the data item.\n\n @return true if data item was added, false if not"]
    pub fn k_queue_unique_append(queue: *mut k_queue, data: *mut ::core::ffi::c_void) -> bool;
}
extern "C" {
    #[doc = " @brief Query a queue to see if it has data available.\n\n Note that the data might be already gone by the time this function returns\n if other threads are also trying to read from the queue.\n\n @funcprops \\isr_ok\n\n @param queue Address of the queue.\n\n @return Non-zero if the queue is empty.\n @return 0 if data is available."]
    #[link_name = "k_queue_is_empty__extern"]
    pub fn k_queue_is_empty(queue: *mut k_queue) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "z_impl_k_queue_is_empty__extern"]
    pub fn z_impl_k_queue_is_empty(queue: *mut k_queue) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Peek element at the head of queue.\n\n Return element from the head of queue without removing it.\n\n @param queue Address of the queue.\n\n @return Head element, or NULL if queue is empty."]
    #[link_name = "k_queue_peek_head__extern"]
    pub fn k_queue_peek_head(queue: *mut k_queue) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " @brief Peek element at the tail of queue.\n\n Return element from the tail of queue without removing it.\n\n @param queue Address of the queue.\n\n @return Tail element, or NULL if queue is empty."]
    #[link_name = "k_queue_peek_tail__extern"]
    pub fn k_queue_peek_tail(queue: *mut k_queue) -> *mut ::core::ffi::c_void;
}
#[doc = " Event Structure\n @ingroup event_apis"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_event {
    pub wait_q: _wait_q_t,
    pub events: u32,
    pub lock: k_spinlock,
}
#[test]
fn bindgen_test_layout_k_event() {
    const UNINIT: ::core::mem::MaybeUninit<k_event> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_event>(),
        16usize,
        concat!("Size of: ", stringify!(k_event))
    );
    assert_eq!(
        ::core::mem::align_of::<k_event>(),
        4usize,
        concat!("Alignment of ", stringify!(k_event))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wait_q) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_event),
            "::",
            stringify!(wait_q)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_event),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_event),
            "::",
            stringify!(lock)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize an event object\n\n This routine initializes an event object, prior to its first use.\n\n @param event Address of the event object."]
    #[link_name = "k_event_init__extern"]
    pub fn k_event_init(event: *mut k_event);
}
extern "C" {
    #[doc = " @brief Post one or more events to an event object\n\n This routine posts one or more events to an event object. All tasks waiting\n on the event object @a event whose waiting conditions become met by this\n posting immediately unpend.\n\n Posting differs from setting in that posted events are merged together with\n the current set of events tracked by the event object.\n\n @param event Address of the event object\n @param events Set of events to post to @a event\n\n @retval Previous value of the events in @a event"]
    #[link_name = "k_event_post__extern"]
    pub fn k_event_post(event: *mut k_event, events: u32) -> u32;
}
extern "C" {
    #[doc = " @brief Set the events in an event object\n\n This routine sets the events stored in event object to the specified value.\n All tasks waiting on the event object @a event whose waiting conditions\n become met by this immediately unpend.\n\n Setting differs from posting in that set events replace the current set of\n events tracked by the event object.\n\n @param event Address of the event object\n @param events Set of events to set in @a event\n\n @retval Previous value of the events in @a event"]
    #[link_name = "k_event_set__extern"]
    pub fn k_event_set(event: *mut k_event, events: u32) -> u32;
}
extern "C" {
    #[doc = " @brief Set or clear the events in an event object\n\n This routine sets the events stored in event object to the specified value.\n All tasks waiting on the event object @a event whose waiting conditions\n become met by this immediately unpend. Unlike @ref k_event_set, this routine\n allows specific event bits to be set and cleared as determined by the mask.\n\n @param event Address of the event object\n @param events Set of events to set/clear in @a event\n @param events_mask Mask to be applied to @a events\n\n @retval Previous value of the events in @a events_mask"]
    #[link_name = "k_event_set_masked__extern"]
    pub fn k_event_set_masked(event: *mut k_event, events: u32, events_mask: u32) -> u32;
}
extern "C" {
    #[doc = " @brief Clear the events in an event object\n\n This routine clears (resets) the specified events stored in an event object.\n\n @param event Address of the event object\n @param events Set of events to clear in @a event\n\n @retval Previous value of the events in @a event"]
    #[link_name = "k_event_clear__extern"]
    pub fn k_event_clear(event: *mut k_event, events: u32) -> u32;
}
extern "C" {
    #[doc = " @brief Wait for any of the specified events\n\n This routine waits on event object @a event until any of the specified\n events have been delivered to the event object, or the maximum wait time\n @a timeout has expired. A thread may wait on up to 32 distinctly numbered\n events that are expressed as bits in a single 32-bit word.\n\n @note The caller must be careful when resetting if there are multiple threads\n waiting for the event object @a event.\n\n @param event Address of the event object\n @param events Set of desired events on which to wait\n @param reset If true, clear the set of events tracked by the event object\n              before waiting. If false, do not clear the events.\n @param timeout Waiting period for the desired set of events or one of the\n                special values K_NO_WAIT and K_FOREVER.\n\n @retval set of matching events upon success\n @retval 0 if matching events were not received within the specified time"]
    #[link_name = "k_event_wait__extern"]
    pub fn k_event_wait(event: *mut k_event, events: u32, reset: bool, timeout: k_timeout_t)
        -> u32;
}
extern "C" {
    #[doc = " @brief Wait for all of the specified events\n\n This routine waits on event object @a event until all of the specified\n events have been delivered to the event object, or the maximum wait time\n @a timeout has expired. A thread may wait on up to 32 distinctly numbered\n events that are expressed as bits in a single 32-bit word.\n\n @note The caller must be careful when resetting if there are multiple threads\n waiting for the event object @a event.\n\n @param event Address of the event object\n @param events Set of desired events on which to wait\n @param reset If true, clear the set of events tracked by the event object\n              before waiting. If false, do not clear the events.\n @param timeout Waiting period for the desired set of events or one of the\n                special values K_NO_WAIT and K_FOREVER.\n\n @retval set of matching events upon success\n @retval 0 if matching events were not received within the specified time"]
    #[link_name = "k_event_wait_all__extern"]
    pub fn k_event_wait_all(
        event: *mut k_event,
        events: u32,
        reset: bool,
        timeout: k_timeout_t,
    ) -> u32;
}
extern "C" {
    #[doc = " @brief Test the events currently tracked in the event object\n\n @param event Address of the event object\n @param events_mask Set of desired events to test\n\n @retval Current value of events in @a events_mask"]
    #[link_name = "k_event_test__extern"]
    pub fn k_event_test(event: *mut k_event, events_mask: u32) -> u32;
}
#[doc = " @}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_fifo {
    pub _queue: k_queue,
}
#[test]
fn bindgen_test_layout_k_fifo() {
    const UNINIT: ::core::mem::MaybeUninit<k_fifo> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_fifo>(),
        20usize,
        concat!("Size of: ", stringify!(k_fifo))
    );
    assert_eq!(
        ::core::mem::align_of::<k_fifo>(),
        4usize,
        concat!("Alignment of ", stringify!(k_fifo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._queue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_fifo),
            "::",
            stringify!(_queue)
        )
    );
}
#[doc = " @}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_lifo {
    pub _queue: k_queue,
}
#[test]
fn bindgen_test_layout_k_lifo() {
    const UNINIT: ::core::mem::MaybeUninit<k_lifo> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_lifo>(),
        20usize,
        concat!("Size of: ", stringify!(k_lifo))
    );
    assert_eq!(
        ::core::mem::align_of::<k_lifo>(),
        4usize,
        concat!("Alignment of ", stringify!(k_lifo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._queue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_lifo),
            "::",
            stringify!(_queue)
        )
    );
}
pub type stack_data_t = usize;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_stack {
    pub wait_q: _wait_q_t,
    pub lock: k_spinlock,
    pub base: *mut stack_data_t,
    pub next: *mut stack_data_t,
    pub top: *mut stack_data_t,
    pub flags: u8,
}
#[test]
fn bindgen_test_layout_k_stack() {
    const UNINIT: ::core::mem::MaybeUninit<k_stack> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_stack>(),
        28usize,
        concat!("Size of: ", stringify!(k_stack))
    );
    assert_eq!(
        ::core::mem::align_of::<k_stack>(),
        4usize,
        concat!("Alignment of ", stringify!(k_stack))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wait_q) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_stack),
            "::",
            stringify!(wait_q)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_stack),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_stack),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(k_stack),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(k_stack),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(k_stack),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a stack.\n\n This routine initializes a stack object, prior to its first use.\n\n @param stack Address of the stack.\n @param buffer Address of array used to hold stacked values.\n @param num_entries Maximum number of values that can be stacked."]
    pub fn k_stack_init(stack: *mut k_stack, buffer: *mut stack_data_t, num_entries: u32);
}
extern "C" {
    #[doc = " @brief Initialize a stack.\n\n This routine initializes a stack object, prior to its first use. Internal\n buffers will be allocated from the calling thread's resource pool.\n This memory will be released if k_stack_cleanup() is called, or\n userspace is enabled and the stack object loses all references to it.\n\n @param stack Address of the stack.\n @param num_entries Maximum number of values that can be stacked.\n\n @return -ENOMEM if memory couldn't be allocated"]
    #[link_name = "k_stack_alloc_init__extern"]
    pub fn k_stack_alloc_init(stack: *mut k_stack, num_entries: u32) -> i32;
}
extern "C" {
    #[doc = " @brief Release a stack's allocated buffer\n\n If a stack object was given a dynamically allocated buffer via\n k_stack_alloc_init(), this will free it. This function does nothing\n if the buffer wasn't dynamically allocated.\n\n @param stack Address of the stack.\n @retval 0 on success\n @retval -EAGAIN when object is still in use"]
    pub fn k_stack_cleanup(stack: *mut k_stack) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Push an element onto a stack.\n\n This routine adds a stack_data_t value @a data to @a stack.\n\n @funcprops \\isr_ok\n\n @param stack Address of the stack.\n @param data Value to push onto the stack.\n\n @retval 0 on success\n @retval -ENOMEM if stack is full"]
    #[link_name = "k_stack_push__extern"]
    pub fn k_stack_push(stack: *mut k_stack, data: stack_data_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Pop an element from a stack.\n\n This routine removes a stack_data_t value from @a stack in a \"last in,\n first out\" manner and stores the value in @a data.\n\n @note @a timeout must be set to K_NO_WAIT if called from ISR.\n\n @funcprops \\isr_ok\n\n @param stack Address of the stack.\n @param data Address of area to hold the value popped from the stack.\n @param timeout Waiting period to obtain a value,\n                or one of the special values K_NO_WAIT and\n                K_FOREVER.\n\n @retval 0 Element popped from stack.\n @retval -EBUSY Returned without waiting.\n @retval -EAGAIN Waiting period timed out."]
    #[link_name = "k_stack_pop__extern"]
    pub fn k_stack_pop(
        stack: *mut k_stack,
        data: *mut stack_data_t,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
#[doc = " @brief A structure used to hold work until it can be processed."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_work_q {
    pub thread: k_thread,
    pub pending: sys_slist_t,
    pub notifyq: _wait_q_t,
    pub drainq: _wait_q_t,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_k_work_q() {
    const UNINIT: ::core::mem::MaybeUninit<k_work_q> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_work_q>(),
        160usize,
        concat!("Size of: ", stringify!(k_work_q))
    );
    assert_eq!(
        ::core::mem::align_of::<k_work_q>(),
        8usize,
        concat!("Alignment of ", stringify!(k_work_q))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_q),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pending) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_q),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).notifyq) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_q),
            "::",
            stringify!(notifyq)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).drainq) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_q),
            "::",
            stringify!(drainq)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_q),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub static mut k_sys_work_q: k_work_q;
}
#[doc = " Mutex Structure\n @ingroup mutex_apis"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_mutex {
    #[doc = " Mutex wait queue"]
    pub wait_q: _wait_q_t,
    #[doc = " Mutex owner"]
    pub owner: *mut k_thread,
    #[doc = " Current lock count"]
    pub lock_count: u32,
    #[doc = " Original thread priority"]
    pub owner_orig_prio: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_k_mutex() {
    const UNINIT: ::core::mem::MaybeUninit<k_mutex> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_mutex>(),
        20usize,
        concat!("Size of: ", stringify!(k_mutex))
    );
    assert_eq!(
        ::core::mem::align_of::<k_mutex>(),
        4usize,
        concat!("Alignment of ", stringify!(k_mutex))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wait_q) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mutex),
            "::",
            stringify!(wait_q)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mutex),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lock_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mutex),
            "::",
            stringify!(lock_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).owner_orig_prio) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mutex),
            "::",
            stringify!(owner_orig_prio)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a mutex.\n\n This routine initializes a mutex object, prior to its first use.\n\n Upon completion, the mutex is available and does not have an owner.\n\n @param mutex Address of the mutex.\n\n @retval 0 Mutex object created\n"]
    #[link_name = "k_mutex_init__extern"]
    pub fn k_mutex_init(mutex: *mut k_mutex) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Lock a mutex.\n\n This routine locks @a mutex. If the mutex is locked by another thread,\n the calling thread waits until the mutex becomes available or until\n a timeout occurs.\n\n A thread is permitted to lock a mutex it has already locked. The operation\n completes immediately and the lock count is increased by 1.\n\n Mutexes may not be locked in ISRs.\n\n @param mutex Address of the mutex.\n @param timeout Waiting period to lock the mutex,\n                or one of the special values K_NO_WAIT and\n                K_FOREVER.\n\n @retval 0 Mutex locked.\n @retval -EBUSY Returned without waiting.\n @retval -EAGAIN Waiting period timed out."]
    #[link_name = "k_mutex_lock__extern"]
    pub fn k_mutex_lock(mutex: *mut k_mutex, timeout: k_timeout_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Unlock a mutex.\n\n This routine unlocks @a mutex. The mutex must already be locked by the\n calling thread.\n\n The mutex cannot be claimed by another thread until it has been unlocked by\n the calling thread as many times as it was previously locked by that\n thread.\n\n Mutexes may not be unlocked in ISRs, as mutexes must only be manipulated\n in thread context due to ownership and priority inheritance semantics.\n\n @param mutex Address of the mutex.\n\n @retval 0 Mutex unlocked.\n @retval -EPERM The current thread does not own the mutex\n @retval -EINVAL The mutex is not locked\n"]
    #[link_name = "k_mutex_unlock__extern"]
    pub fn k_mutex_unlock(mutex: *mut k_mutex) -> ::core::ffi::c_int;
}
#[doc = " @}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_condvar {
    pub wait_q: _wait_q_t,
}
#[test]
fn bindgen_test_layout_k_condvar() {
    const UNINIT: ::core::mem::MaybeUninit<k_condvar> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_condvar>(),
        8usize,
        concat!("Size of: ", stringify!(k_condvar))
    );
    assert_eq!(
        ::core::mem::align_of::<k_condvar>(),
        4usize,
        concat!("Alignment of ", stringify!(k_condvar))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wait_q) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_condvar),
            "::",
            stringify!(wait_q)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a condition variable\n\n @param condvar pointer to a @p k_condvar structure\n @retval 0 Condition variable created successfully"]
    #[link_name = "k_condvar_init__extern"]
    pub fn k_condvar_init(condvar: *mut k_condvar) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Signals one thread that is pending on the condition variable\n\n @param condvar pointer to a @p k_condvar structure\n @retval 0 On success"]
    #[link_name = "k_condvar_signal__extern"]
    pub fn k_condvar_signal(condvar: *mut k_condvar) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Unblock all threads that are pending on the condition\n variable\n\n @param condvar pointer to a @p k_condvar structure\n @return An integer with number of woken threads on success"]
    #[link_name = "k_condvar_broadcast__extern"]
    pub fn k_condvar_broadcast(condvar: *mut k_condvar) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Waits on the condition variable releasing the mutex lock\n\n Atomically releases the currently owned mutex, blocks the current thread\n waiting on the condition variable specified by @a condvar,\n and finally acquires the mutex again.\n\n The waiting thread unblocks only after another thread calls\n k_condvar_signal, or k_condvar_broadcast with the same condition variable.\n\n @param condvar pointer to a @p k_condvar structure\n @param mutex Address of the mutex.\n @param timeout Waiting period for the condition variable\n                or one of the special values K_NO_WAIT and K_FOREVER.\n @retval 0 On success\n @retval -EAGAIN Waiting period timed out."]
    #[link_name = "k_condvar_wait__extern"]
    pub fn k_condvar_wait(
        condvar: *mut k_condvar,
        mutex: *mut k_mutex,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_sem {
    pub wait_q: _wait_q_t,
    pub count: ::core::ffi::c_uint,
    pub limit: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout_k_sem() {
    const UNINIT: ::core::mem::MaybeUninit<k_sem> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_sem>(),
        16usize,
        concat!("Size of: ", stringify!(k_sem))
    );
    assert_eq!(
        ::core::mem::align_of::<k_sem>(),
        4usize,
        concat!("Alignment of ", stringify!(k_sem))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wait_q) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_sem),
            "::",
            stringify!(wait_q)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_sem),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_sem),
            "::",
            stringify!(limit)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a semaphore.\n\n This routine initializes a semaphore object, prior to its first use.\n\n @param sem Address of the semaphore.\n @param initial_count Initial semaphore count.\n @param limit Maximum permitted semaphore count.\n\n @see K_SEM_MAX_LIMIT\n\n @retval 0 Semaphore created successfully\n @retval -EINVAL Invalid values\n"]
    #[link_name = "k_sem_init__extern"]
    pub fn k_sem_init(
        sem: *mut k_sem,
        initial_count: ::core::ffi::c_uint,
        limit: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Take a semaphore.\n\n This routine takes @a sem.\n\n @note @a timeout must be set to K_NO_WAIT if called from ISR.\n\n @funcprops \\isr_ok\n\n @param sem Address of the semaphore.\n @param timeout Waiting period to take the semaphore,\n                or one of the special values K_NO_WAIT and K_FOREVER.\n\n @retval 0 Semaphore taken.\n @retval -EBUSY Returned without waiting.\n @retval -EAGAIN Waiting period timed out,\n\t\t\tor the semaphore was reset during the waiting period."]
    #[link_name = "k_sem_take__extern"]
    pub fn k_sem_take(sem: *mut k_sem, timeout: k_timeout_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Give a semaphore.\n\n This routine gives @a sem, unless the semaphore is already at its maximum\n permitted count.\n\n @funcprops \\isr_ok\n\n @param sem Address of the semaphore."]
    #[link_name = "k_sem_give__extern"]
    pub fn k_sem_give(sem: *mut k_sem);
}
extern "C" {
    #[doc = " @brief Resets a semaphore's count to zero.\n\n This routine sets the count of @a sem to zero.\n Any outstanding semaphore takes will be aborted\n with -EAGAIN.\n\n @param sem Address of the semaphore."]
    #[link_name = "k_sem_reset__extern"]
    pub fn k_sem_reset(sem: *mut k_sem);
}
extern "C" {
    #[doc = " @brief Get a semaphore's count.\n\n This routine returns the current count of @a sem.\n\n @param sem Address of the semaphore.\n\n @return Current semaphore count."]
    #[link_name = "k_sem_count_get__extern"]
    pub fn k_sem_count_get(sem: *mut k_sem) -> ::core::ffi::c_uint;
}
extern "C" {
    #[doc = " @internal"]
    #[link_name = "z_impl_k_sem_count_get__extern"]
    pub fn z_impl_k_sem_count_get(sem: *mut k_sem) -> ::core::ffi::c_uint;
}
#[doc = " @brief The signature for a work item handler function.\n\n The function will be invoked by the thread animating a work queue.\n\n @param work the work item that provided the handler."]
pub type k_work_handler_t = ::core::option::Option<unsafe extern "C" fn(work: *mut k_work)>;
extern "C" {
    #[doc = " @brief Initialize a (non-delayable) work structure.\n\n This must be invoked before submitting a work structure for the first time.\n It need not be invoked again on the same work structure.  It can be\n re-invoked to change the associated handler, but this must be done when the\n work item is idle.\n\n @funcprops \\isr_ok\n\n @param work the work structure to be initialized.\n\n @param handler the handler to be invoked by the work item."]
    pub fn k_work_init(work: *mut k_work, handler: k_work_handler_t);
}
extern "C" {
    #[doc = " @brief Busy state flags from the work item.\n\n A zero return value indicates the work item appears to be idle.\n\n @note This is a live snapshot of state, which may change before the result\n is checked.  Use locks where appropriate.\n\n @funcprops \\isr_ok\n\n @param work pointer to the work item.\n\n @return a mask of flags K_WORK_DELAYED, K_WORK_QUEUED,\n K_WORK_RUNNING, and K_WORK_CANCELING."]
    pub fn k_work_busy_get(work: *const k_work) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Test whether a work item is currently pending.\n\n Wrapper to determine whether a work item is in a non-idle dstate.\n\n @note This is a live snapshot of state, which may change before the result\n is checked.  Use locks where appropriate.\n\n @funcprops \\isr_ok\n\n @param work pointer to the work item.\n\n @return true if and only if k_work_busy_get() returns a non-zero value."]
    #[link_name = "k_work_is_pending__extern"]
    pub fn k_work_is_pending(work: *const k_work) -> bool;
}
extern "C" {
    #[doc = " @brief Submit a work item to a queue.\n\n @param queue pointer to the work queue on which the item should run.  If\n NULL the queue from the most recent submission will be used.\n\n @funcprops \\isr_ok\n\n @param work pointer to the work item.\n\n @retval 0 if work was already submitted to a queue\n @retval 1 if work was not submitted and has been queued to @p queue\n @retval 2 if work was running and has been queued to the queue that was\n running it\n @retval -EBUSY\n * if work submission was rejected because the work item is cancelling; or\n * @p queue is draining; or\n * @p queue is plugged.\n @retval -EINVAL if @p queue is null and the work item has never been run.\n @retval -ENODEV if @p queue has not been started."]
    pub fn k_work_submit_to_queue(queue: *mut k_work_q, work: *mut k_work) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Submit a work item to the system queue.\n\n @funcprops \\isr_ok\n\n @param work pointer to the work item.\n\n @return as with k_work_submit_to_queue()."]
    pub fn k_work_submit(work: *mut k_work) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Wait for last-submitted instance to complete.\n\n Resubmissions may occur while waiting, including chained submissions (from\n within the handler).\n\n @note Be careful of caller and work queue thread relative priority.  If\n this function sleeps it will not return until the work queue thread\n completes the tasks that allow this thread to resume.\n\n @note Behavior is undefined if this function is invoked on @p work from a\n work queue running @p work.\n\n @param work pointer to the work item.\n\n @param sync pointer to an opaque item containing state related to the\n pending cancellation.  The object must persist until the call returns, and\n be accessible from both the caller thread and the work queue thread.  The\n object must not be used for any other flush or cancel operation until this\n one completes.  On architectures with CONFIG_KERNEL_COHERENCE the object\n must be allocated in coherent memory.\n\n @retval true if call had to wait for completion\n @retval false if work was already idle"]
    pub fn k_work_flush(work: *mut k_work, sync: *mut k_work_sync) -> bool;
}
extern "C" {
    #[doc = " @brief Cancel a work item.\n\n This attempts to prevent a pending (non-delayable) work item from being\n processed by removing it from the work queue.  If the item is being\n processed, the work item will continue to be processed, but resubmissions\n are rejected until cancellation completes.\n\n If this returns zero cancellation is complete, otherwise something\n (probably a work queue thread) is still referencing the item.\n\n See also k_work_cancel_sync().\n\n @funcprops \\isr_ok\n\n @param work pointer to the work item.\n\n @return the k_work_busy_get() status indicating the state of the item after all\n cancellation steps performed by this call are completed."]
    pub fn k_work_cancel(work: *mut k_work) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Cancel a work item and wait for it to complete.\n\n Same as k_work_cancel() but does not return until cancellation is complete.\n This can be invoked by a thread after k_work_cancel() to synchronize with a\n previous cancellation.\n\n On return the work structure will be idle unless something submits it after\n the cancellation was complete.\n\n @note Be careful of caller and work queue thread relative priority.  If\n this function sleeps it will not return until the work queue thread\n completes the tasks that allow this thread to resume.\n\n @note Behavior is undefined if this function is invoked on @p work from a\n work queue running @p work.\n\n @param work pointer to the work item.\n\n @param sync pointer to an opaque item containing state related to the\n pending cancellation.  The object must persist until the call returns, and\n be accessible from both the caller thread and the work queue thread.  The\n object must not be used for any other flush or cancel operation until this\n one completes.  On architectures with CONFIG_KERNEL_COHERENCE the object\n must be allocated in coherent memory.\n\n @retval true if work was pending (call had to wait for cancellation of a\n running handler to complete, or scheduled or submitted operations were\n cancelled);\n @retval false otherwise"]
    pub fn k_work_cancel_sync(work: *mut k_work, sync: *mut k_work_sync) -> bool;
}
extern "C" {
    #[doc = " @brief Initialize a work queue structure.\n\n This must be invoked before starting a work queue structure for the first time.\n It need not be invoked again on the same work queue structure.\n\n @funcprops \\isr_ok\n\n @param queue the queue structure to be initialized."]
    pub fn k_work_queue_init(queue: *mut k_work_q);
}
extern "C" {
    #[doc = " @brief Initialize a work queue.\n\n This configures the work queue thread and starts it running.  The function\n should not be re-invoked on a queue.\n\n @param queue pointer to the queue structure. It must be initialized\n        in zeroed/bss memory or with @ref k_work_queue_init before\n        use.\n\n @param stack pointer to the work thread stack area.\n\n @param stack_size size of the the work thread stack area, in bytes.\n\n @param prio initial thread priority\n\n @param cfg optional additional configuration parameters.  Pass @c\n NULL if not required, to use the defaults documented in\n k_work_queue_config."]
    pub fn k_work_queue_start(
        queue: *mut k_work_q,
        stack: *mut k_thread_stack_t,
        stack_size: usize,
        prio: ::core::ffi::c_int,
        cfg: *const k_work_queue_config,
    );
}
extern "C" {
    #[doc = " @brief Access the thread that animates a work queue.\n\n This is necessary to grant a work queue thread access to things the work\n items it will process are expected to use.\n\n @param queue pointer to the queue structure.\n\n @return the thread associated with the work queue."]
    #[link_name = "k_work_queue_thread_get__extern"]
    pub fn k_work_queue_thread_get(queue: *mut k_work_q) -> k_tid_t;
}
extern "C" {
    #[doc = " @brief Wait until the work queue has drained, optionally plugging it.\n\n This blocks submission to the work queue except when coming from queue\n thread, and blocks the caller until no more work items are available in the\n queue.\n\n If @p plug is true then submission will continue to be blocked after the\n drain operation completes until k_work_queue_unplug() is invoked.\n\n Note that work items that are delayed are not yet associated with their\n work queue.  They must be cancelled externally if a goal is to ensure the\n work queue remains empty.  The @p plug feature can be used to prevent\n delayed items from being submitted after the drain completes.\n\n @param queue pointer to the queue structure.\n\n @param plug if true the work queue will continue to block new submissions\n after all items have drained.\n\n @retval 1 if call had to wait for the drain to complete\n @retval 0 if call did not have to wait\n @retval negative if wait was interrupted or failed"]
    pub fn k_work_queue_drain(queue: *mut k_work_q, plug: bool) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Release a work queue to accept new submissions.\n\n This releases the block on new submissions placed when k_work_queue_drain()\n is invoked with the @p plug option enabled.  If this is invoked before the\n drain completes new items may be submitted as soon as the drain completes.\n\n @funcprops \\isr_ok\n\n @param queue pointer to the queue structure.\n\n @retval 0 if successfully unplugged\n @retval -EALREADY if the work queue was not plugged."]
    pub fn k_work_queue_unplug(queue: *mut k_work_q) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Initialize a delayable work structure.\n\n This must be invoked before scheduling a delayable work structure for the\n first time.  It need not be invoked again on the same work structure.  It\n can be re-invoked to change the associated handler, but this must be done\n when the work item is idle.\n\n @funcprops \\isr_ok\n\n @param dwork the delayable work structure to be initialized.\n\n @param handler the handler to be invoked by the work item."]
    pub fn k_work_init_delayable(dwork: *mut k_work_delayable, handler: k_work_handler_t);
}
extern "C" {
    #[doc = " @brief Get the parent delayable work structure from a work pointer.\n\n This function is necessary when a @c k_work_handler_t function is passed to\n k_work_schedule_for_queue() and the handler needs to access data from the\n container of the containing `k_work_delayable`.\n\n @param work Address passed to the work handler\n\n @return Address of the containing @c k_work_delayable structure."]
    #[link_name = "k_work_delayable_from_work__extern"]
    pub fn k_work_delayable_from_work(work: *mut k_work) -> *mut k_work_delayable;
}
extern "C" {
    #[doc = " @brief Busy state flags from the delayable work item.\n\n @funcprops \\isr_ok\n\n @note This is a live snapshot of state, which may change before the result\n can be inspected.  Use locks where appropriate.\n\n @param dwork pointer to the delayable work item.\n\n @return a mask of flags K_WORK_DELAYED, K_WORK_QUEUED, K_WORK_RUNNING, and\n K_WORK_CANCELING.  A zero return value indicates the work item appears to\n be idle."]
    pub fn k_work_delayable_busy_get(dwork: *const k_work_delayable) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Test whether a delayed work item is currently pending.\n\n Wrapper to determine whether a delayed work item is in a non-idle state.\n\n @note This is a live snapshot of state, which may change before the result\n can be inspected.  Use locks where appropriate.\n\n @funcprops \\isr_ok\n\n @param dwork pointer to the delayable work item.\n\n @return true if and only if k_work_delayable_busy_get() returns a non-zero\n value."]
    #[link_name = "k_work_delayable_is_pending__extern"]
    pub fn k_work_delayable_is_pending(dwork: *const k_work_delayable) -> bool;
}
extern "C" {
    #[doc = " @brief Get the absolute tick count at which a scheduled delayable work\n will be submitted.\n\n @note This is a live snapshot of state, which may change before the result\n can be inspected.  Use locks where appropriate.\n\n @funcprops \\isr_ok\n\n @param dwork pointer to the delayable work item.\n\n @return the tick count when the timer that will schedule the work item will\n expire, or the current tick count if the work is not scheduled."]
    #[link_name = "k_work_delayable_expires_get__extern"]
    pub fn k_work_delayable_expires_get(dwork: *const k_work_delayable) -> k_ticks_t;
}
extern "C" {
    #[doc = " @brief Get the number of ticks until a scheduled delayable work will be\n submitted.\n\n @note This is a live snapshot of state, which may change before the result\n can be inspected.  Use locks where appropriate.\n\n @funcprops \\isr_ok\n\n @param dwork pointer to the delayable work item.\n\n @return the number of ticks until the timer that will schedule the work\n item will expire, or zero if the item is not scheduled."]
    #[link_name = "k_work_delayable_remaining_get__extern"]
    pub fn k_work_delayable_remaining_get(dwork: *const k_work_delayable) -> k_ticks_t;
}
extern "C" {
    #[doc = " @brief Submit an idle work item to a queue after a delay.\n\n Unlike k_work_reschedule_for_queue() this is a no-op if the work item is\n already scheduled or submitted, even if @p delay is @c K_NO_WAIT.\n\n @funcprops \\isr_ok\n\n @param queue the queue on which the work item should be submitted after the\n delay.\n\n @param dwork pointer to the delayable work item.\n\n @param delay the time to wait before submitting the work item.  If @c\n K_NO_WAIT and the work is not pending this is equivalent to\n k_work_submit_to_queue().\n\n @retval 0 if work was already scheduled or submitted.\n @retval 1 if work has been scheduled.\n @retval -EBUSY if @p delay is @c K_NO_WAIT and\n         k_work_submit_to_queue() fails with this code.\n @retval -EINVAL if @p delay is @c K_NO_WAIT and\n         k_work_submit_to_queue() fails with this code.\n @retval -ENODEV if @p delay is @c K_NO_WAIT and\n         k_work_submit_to_queue() fails with this code."]
    pub fn k_work_schedule_for_queue(
        queue: *mut k_work_q,
        dwork: *mut k_work_delayable,
        delay: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Submit an idle work item to the system work queue after a\n delay.\n\n This is a thin wrapper around k_work_schedule_for_queue(), with all the API\n characteristics of that function.\n\n @param dwork pointer to the delayable work item.\n\n @param delay the time to wait before submitting the work item.  If @c\n K_NO_WAIT this is equivalent to k_work_submit_to_queue().\n\n @return as with k_work_schedule_for_queue()."]
    pub fn k_work_schedule(dwork: *mut k_work_delayable, delay: k_timeout_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Reschedule a work item to a queue after a delay.\n\n Unlike k_work_schedule_for_queue() this function can change the deadline of\n a scheduled work item, and will schedule a work item that is in any state\n (e.g. is idle, submitted, or running).  This function does not affect\n (\"unsubmit\") a work item that has been submitted to a queue.\n\n @funcprops \\isr_ok\n\n @param queue the queue on which the work item should be submitted after the\n delay.\n\n @param dwork pointer to the delayable work item.\n\n @param delay the time to wait before submitting the work item.  If @c\n K_NO_WAIT this is equivalent to k_work_submit_to_queue() after canceling\n any previous scheduled submission.\n\n @note If delay is @c K_NO_WAIT (\"no delay\") the return values are as with\n k_work_submit_to_queue().\n\n @retval 0 if delay is @c K_NO_WAIT and work was already on a queue\n @retval 1 if\n * delay is @c K_NO_WAIT and work was not submitted but has now been queued\n   to @p queue; or\n * delay not @c K_NO_WAIT and work has been scheduled\n @retval 2 if delay is @c K_NO_WAIT and work was running and has been queued\n to the queue that was running it\n @retval -EBUSY if @p delay is @c K_NO_WAIT and\n         k_work_submit_to_queue() fails with this code.\n @retval -EINVAL if @p delay is @c K_NO_WAIT and\n         k_work_submit_to_queue() fails with this code.\n @retval -ENODEV if @p delay is @c K_NO_WAIT and\n         k_work_submit_to_queue() fails with this code."]
    pub fn k_work_reschedule_for_queue(
        queue: *mut k_work_q,
        dwork: *mut k_work_delayable,
        delay: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Reschedule a work item to the system work queue after a\n delay.\n\n This is a thin wrapper around k_work_reschedule_for_queue(), with all the\n API characteristics of that function.\n\n @param dwork pointer to the delayable work item.\n\n @param delay the time to wait before submitting the work item.\n\n @return as with k_work_reschedule_for_queue()."]
    pub fn k_work_reschedule(
        dwork: *mut k_work_delayable,
        delay: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Flush delayable work.\n\n If the work is scheduled, it is immediately submitted.  Then the caller\n blocks until the work completes, as with k_work_flush().\n\n @note Be careful of caller and work queue thread relative priority.  If\n this function sleeps it will not return until the work queue thread\n completes the tasks that allow this thread to resume.\n\n @note Behavior is undefined if this function is invoked on @p dwork from a\n work queue running @p dwork.\n\n @param dwork pointer to the delayable work item.\n\n @param sync pointer to an opaque item containing state related to the\n pending cancellation.  The object must persist until the call returns, and\n be accessible from both the caller thread and the work queue thread.  The\n object must not be used for any other flush or cancel operation until this\n one completes.  On architectures with CONFIG_KERNEL_COHERENCE the object\n must be allocated in coherent memory.\n\n @retval true if call had to wait for completion\n @retval false if work was already idle"]
    pub fn k_work_flush_delayable(dwork: *mut k_work_delayable, sync: *mut k_work_sync) -> bool;
}
extern "C" {
    #[doc = " @brief Cancel delayable work.\n\n Similar to k_work_cancel() but for delayable work.  If the work is\n scheduled or submitted it is canceled.  This function does not wait for the\n cancellation to complete.\n\n @note The work may still be running when this returns.  Use\n k_work_flush_delayable() or k_work_cancel_delayable_sync() to ensure it is\n not running.\n\n @note Canceling delayable work does not prevent rescheduling it.  It does\n prevent submitting it until the cancellation completes.\n\n @funcprops \\isr_ok\n\n @param dwork pointer to the delayable work item.\n\n @return the k_work_delayable_busy_get() status indicating the state of the\n item after all cancellation steps performed by this call are completed."]
    pub fn k_work_cancel_delayable(dwork: *mut k_work_delayable) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Cancel delayable work and wait.\n\n Like k_work_cancel_delayable() but waits until the work becomes idle.\n\n @note Canceling delayable work does not prevent rescheduling it.  It does\n prevent submitting it until the cancellation completes.\n\n @note Be careful of caller and work queue thread relative priority.  If\n this function sleeps it will not return until the work queue thread\n completes the tasks that allow this thread to resume.\n\n @note Behavior is undefined if this function is invoked on @p dwork from a\n work queue running @p dwork.\n\n @param dwork pointer to the delayable work item.\n\n @param sync pointer to an opaque item containing state related to the\n pending cancellation.  The object must persist until the call returns, and\n be accessible from both the caller thread and the work queue thread.  The\n object must not be used for any other flush or cancel operation until this\n one completes.  On architectures with CONFIG_KERNEL_COHERENCE the object\n must be allocated in coherent memory.\n\n @retval true if work was not idle (call had to wait for cancellation of a\n running handler to complete, or scheduled or submitted operations were\n cancelled);\n @retval false otherwise"]
    pub fn k_work_cancel_delayable_sync(
        dwork: *mut k_work_delayable,
        sync: *mut k_work_sync,
    ) -> bool;
}
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_RUNNING_BIT: _bindgen_ty_1 = 0;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_CANCELING_BIT: _bindgen_ty_1 = 1;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_QUEUED_BIT: _bindgen_ty_1 = 2;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_DELAYED_BIT: _bindgen_ty_1 = 3;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_MASK: _bindgen_ty_1 = 15;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_DELAYABLE_BIT: _bindgen_ty_1 = 8;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_DELAYABLE: _bindgen_ty_1 = 256;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_QUEUE_STARTED_BIT: _bindgen_ty_1 = 0;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_QUEUE_STARTED: _bindgen_ty_1 = 1;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_QUEUE_BUSY_BIT: _bindgen_ty_1 = 1;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_QUEUE_BUSY: _bindgen_ty_1 = 2;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_QUEUE_DRAIN_BIT: _bindgen_ty_1 = 2;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_QUEUE_DRAIN: _bindgen_ty_1 = 4;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_QUEUE_PLUGGED_BIT: _bindgen_ty_1 = 3;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_QUEUE_PLUGGED: _bindgen_ty_1 = 8;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_QUEUE_NO_YIELD_BIT: _bindgen_ty_1 = 8;
#[doc = " @cond INTERNAL_HIDDEN"]
pub const K_WORK_QUEUE_NO_YIELD: _bindgen_ty_1 = 256;
#[doc = " @brief Flag indicating a work item that is running under a work\n queue thread.\n\n Accessed via k_work_busy_get().  May co-occur with other flags."]
pub const K_WORK_RUNNING: _bindgen_ty_1 = 1;
#[doc = " @brief Flag indicating a work item that is being canceled.\n\n Accessed via k_work_busy_get().  May co-occur with other flags."]
pub const K_WORK_CANCELING: _bindgen_ty_1 = 2;
#[doc = " @brief Flag indicating a work item that has been submitted to a\n queue but has not started running.\n\n Accessed via k_work_busy_get().  May co-occur with other flags."]
pub const K_WORK_QUEUED: _bindgen_ty_1 = 4;
#[doc = " @brief Flag indicating a delayed work item that is scheduled for\n submission to a queue.\n\n Accessed via k_work_busy_get().  May co-occur with other flags."]
pub const K_WORK_DELAYED: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_work {
    pub node: sys_snode_t,
    pub handler: k_work_handler_t,
    pub queue: *mut k_work_q,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_k_work() {
    const UNINIT: ::core::mem::MaybeUninit<k_work> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_work>(),
        16usize,
        concat!("Size of: ", stringify!(k_work))
    );
    assert_eq!(
        ::core::mem::align_of::<k_work>(),
        4usize,
        concat!("Alignment of ", stringify!(k_work))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work),
            "::",
            stringify!(flags)
        )
    );
}
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_work_delayable {
    pub work: k_work,
    pub timeout: _timeout,
    pub queue: *mut k_work_q,
}
#[test]
fn bindgen_test_layout_k_work_delayable() {
    const UNINIT: ::core::mem::MaybeUninit<k_work_delayable> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_work_delayable>(),
        48usize,
        concat!("Size of: ", stringify!(k_work_delayable))
    );
    assert_eq!(
        ::core::mem::align_of::<k_work_delayable>(),
        8usize,
        concat!("Alignment of ", stringify!(k_work_delayable))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).work) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_delayable),
            "::",
            stringify!(work)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_delayable),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_delayable),
            "::",
            stringify!(queue)
        )
    );
}
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct z_work_flusher {
    pub work: k_work,
    pub sem: k_sem,
}
#[test]
fn bindgen_test_layout_z_work_flusher() {
    const UNINIT: ::core::mem::MaybeUninit<z_work_flusher> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<z_work_flusher>(),
        32usize,
        concat!("Size of: ", stringify!(z_work_flusher))
    );
    assert_eq!(
        ::core::mem::align_of::<z_work_flusher>(),
        4usize,
        concat!("Alignment of ", stringify!(z_work_flusher))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).work) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_work_flusher),
            "::",
            stringify!(work)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sem) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(z_work_flusher),
            "::",
            stringify!(sem)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct z_work_canceller {
    pub node: sys_snode_t,
    pub work: *mut k_work,
    pub sem: k_sem,
}
#[test]
fn bindgen_test_layout_z_work_canceller() {
    const UNINIT: ::core::mem::MaybeUninit<z_work_canceller> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<z_work_canceller>(),
        24usize,
        concat!("Size of: ", stringify!(z_work_canceller))
    );
    assert_eq!(
        ::core::mem::align_of::<z_work_canceller>(),
        4usize,
        concat!("Alignment of ", stringify!(z_work_canceller))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_work_canceller),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).work) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(z_work_canceller),
            "::",
            stringify!(work)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(z_work_canceller),
            "::",
            stringify!(sem)
        )
    );
}
#[doc = " @brief A structure holding internal state for a pending synchronous\n operation on a work item or queue.\n\n Instances of this type are provided by the caller for invocation of\n k_work_flush(), k_work_cancel_sync() and sibling flush and cancel APIs.  A\n referenced object must persist until the call returns, and be accessible\n from both the caller thread and the work queue thread.\n\n @note If CONFIG_KERNEL_COHERENCE is enabled the object must be allocated in\n coherent memory; see arch_mem_coherent().  The stack on these architectures\n is generally not coherent.  be stack-allocated.  Violations are detected by\n runtime assertion."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_work_sync {
    pub __bindgen_anon_1: k_work_sync__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union k_work_sync__bindgen_ty_1 {
    pub flusher: z_work_flusher,
    pub canceller: z_work_canceller,
}
#[test]
fn bindgen_test_layout_k_work_sync__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<k_work_sync__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_work_sync__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(k_work_sync__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<k_work_sync__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(k_work_sync__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flusher) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_sync__bindgen_ty_1),
            "::",
            stringify!(flusher)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).canceller) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_sync__bindgen_ty_1),
            "::",
            stringify!(canceller)
        )
    );
}
#[test]
fn bindgen_test_layout_k_work_sync() {
    assert_eq!(
        ::core::mem::size_of::<k_work_sync>(),
        32usize,
        concat!("Size of: ", stringify!(k_work_sync))
    );
    assert_eq!(
        ::core::mem::align_of::<k_work_sync>(),
        4usize,
        concat!("Alignment of ", stringify!(k_work_sync))
    );
}
#[doc = " @brief A structure holding optional configuration items for a work\n queue.\n\n This structure, and values it references, are not retained by\n k_work_queue_start()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_work_queue_config {
    #[doc = " The name to be given to the work queue thread.\n\n If left null the thread will not have a name."]
    pub name: *const ::core::ffi::c_char,
    #[doc = " Control whether the work queue thread should yield between\n items.\n\n Yielding between items helps guarantee the work queue\n thread does not starve other threads, including cooperative\n ones released by a work item.  This is the default behavior.\n\n Set this to @c true to prevent the work queue thread from\n yielding between items.  This may be appropriate when a\n sequence of items should complete without yielding\n control."]
    pub no_yield: bool,
}
#[test]
fn bindgen_test_layout_k_work_queue_config() {
    const UNINIT: ::core::mem::MaybeUninit<k_work_queue_config> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_work_queue_config>(),
        8usize,
        concat!("Size of: ", stringify!(k_work_queue_config))
    );
    assert_eq!(
        ::core::mem::align_of::<k_work_queue_config>(),
        4usize,
        concat!("Alignment of ", stringify!(k_work_queue_config))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_queue_config),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).no_yield) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_queue_config),
            "::",
            stringify!(no_yield)
        )
    );
}
#[doc = " @typedef k_work_user_handler_t\n @brief Work item handler function type for user work queues.\n\n A work item's handler function is executed by a user workqueue's thread\n when the work item is processed by the workqueue.\n\n @param work Address of the work item."]
pub type k_work_user_handler_t =
    ::core::option::Option<unsafe extern "C" fn(work: *mut k_work_user)>;
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_work_user_q {
    pub queue: k_queue,
    pub thread: k_thread,
}
#[test]
fn bindgen_test_layout_k_work_user_q() {
    const UNINIT: ::core::mem::MaybeUninit<k_work_user_q> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_work_user_q>(),
        152usize,
        concat!("Size of: ", stringify!(k_work_user_q))
    );
    assert_eq!(
        ::core::mem::align_of::<k_work_user_q>(),
        8usize,
        concat!("Alignment of ", stringify!(k_work_user_q))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_user_q),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_user_q),
            "::",
            stringify!(thread)
        )
    );
}
pub const K_WORK_USER_STATE_PENDING: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
#[doc = " @}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_work_user {
    pub _reserved: *mut ::core::ffi::c_void,
    pub handler: k_work_user_handler_t,
    pub flags: atomic_t,
}
#[test]
fn bindgen_test_layout_k_work_user() {
    const UNINIT: ::core::mem::MaybeUninit<k_work_user> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_work_user>(),
        12usize,
        concat!("Size of: ", stringify!(k_work_user))
    );
    assert_eq!(
        ::core::mem::align_of::<k_work_user>(),
        4usize,
        concat!("Alignment of ", stringify!(k_work_user))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_user),
            "::",
            stringify!(_reserved)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_user),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_user),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a userspace work item.\n\n This routine initializes a user workqueue work item, prior to its\n first use.\n\n @param work Address of work item.\n @param handler Function to invoke each time work item is processed."]
    #[link_name = "k_work_user_init__extern"]
    pub fn k_work_user_init(work: *mut k_work_user, handler: k_work_user_handler_t);
}
extern "C" {
    #[doc = " @brief Check if a userspace work item is pending.\n\n This routine indicates if user work item @a work is pending in a workqueue's\n queue.\n\n @note Checking if the work is pending gives no guarantee that the\n       work will still be pending when this information is used. It is up to\n       the caller to make sure that this information is used in a safe manner.\n\n @funcprops \\isr_ok\n\n @param work Address of work item.\n\n @return true if work item is pending, or false if it is not pending."]
    #[link_name = "k_work_user_is_pending__extern"]
    pub fn k_work_user_is_pending(work: *mut k_work_user) -> bool;
}
extern "C" {
    #[doc = " @brief Submit a work item to a user mode workqueue\n\n Submits a work item to a workqueue that runs in user mode. A temporary\n memory allocation is made from the caller's resource pool which is freed\n once the worker thread consumes the k_work item. The workqueue\n thread must have memory access to the k_work item being submitted. The caller\n must have permission granted on the work_q parameter's queue object.\n\n @funcprops \\isr_ok\n\n @param work_q Address of workqueue.\n @param work Address of work item.\n\n @retval -EBUSY if the work item was already in some workqueue\n @retval -ENOMEM if no memory for thread resource pool allocation\n @retval 0 Success"]
    #[link_name = "k_work_user_submit_to_queue__extern"]
    pub fn k_work_user_submit_to_queue(
        work_q: *mut k_work_user_q,
        work: *mut k_work_user,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Start a workqueue in user mode\n\n This works identically to k_work_queue_start() except it is callable from\n user mode, and the worker thread created will run in user mode.  The caller\n must have permissions granted on both the work_q parameter's thread and\n queue objects, and the same restrictions on priority apply as\n k_thread_create().\n\n @param work_q Address of workqueue.\n @param stack Pointer to work queue thread's stack space, as defined by\n\t\tK_THREAD_STACK_DEFINE()\n @param stack_size Size of the work queue thread's stack (in bytes), which\n\t\tshould either be the same constant passed to\n\t\tK_THREAD_STACK_DEFINE() or the value of K_THREAD_STACK_SIZEOF().\n @param prio Priority of the work queue's thread.\n @param name optional thread name.  If not null a copy is made into the\n\t\tthread's name buffer."]
    pub fn k_work_user_queue_start(
        work_q: *mut k_work_user_q,
        stack: *mut k_thread_stack_t,
        stack_size: usize,
        prio: ::core::ffi::c_int,
        name: *const ::core::ffi::c_char,
    );
}
extern "C" {
    #[doc = " @brief Access the user mode thread that animates a work queue.\n\n This is necessary to grant a user mode work queue thread access to things\n the work items it will process are expected to use.\n\n @param work_q pointer to the user mode queue structure.\n\n @return the user mode thread associated with the work queue."]
    #[link_name = "k_work_user_queue_thread_get__extern"]
    pub fn k_work_user_queue_thread_get(work_q: *mut k_work_user_q) -> k_tid_t;
}
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_work_poll {
    pub work: k_work,
    pub workq: *mut k_work_q,
    pub poller: z_poller,
    pub events: *mut k_poll_event,
    pub num_events: ::core::ffi::c_int,
    pub real_handler: k_work_handler_t,
    pub timeout: _timeout,
    pub poll_result: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_k_work_poll() {
    const UNINIT: ::core::mem::MaybeUninit<k_work_poll> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_work_poll>(),
        72usize,
        concat!("Size of: ", stringify!(k_work_poll))
    );
    assert_eq!(
        ::core::mem::align_of::<k_work_poll>(),
        8usize,
        concat!("Alignment of ", stringify!(k_work_poll))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).work) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_poll),
            "::",
            stringify!(work)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).workq) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_poll),
            "::",
            stringify!(workq)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).poller) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_poll),
            "::",
            stringify!(poller)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_poll),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).num_events) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_poll),
            "::",
            stringify!(num_events)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).real_handler) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_poll),
            "::",
            stringify!(real_handler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_poll),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).poll_result) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(k_work_poll),
            "::",
            stringify!(poll_result)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a triggered work item.\n\n This routine initializes a workqueue triggered work item, prior to\n its first use.\n\n @param work Address of triggered work item.\n @param handler Function to invoke each time work item is processed."]
    pub fn k_work_poll_init(work: *mut k_work_poll, handler: k_work_handler_t);
}
extern "C" {
    #[doc = " @brief Submit a triggered work item.\n\n This routine schedules work item @a work to be processed by workqueue\n @a work_q when one of the given @a events is signaled. The routine\n initiates internal poller for the work item and then returns to the caller.\n Only when one of the watched events happen the work item is actually\n submitted to the workqueue and becomes pending.\n\n Submitting a previously submitted triggered work item that is still\n waiting for the event cancels the existing submission and reschedules it\n the using the new event list. Note that this behavior is inherently subject\n to race conditions with the pre-existing triggered work item and work queue,\n so care must be taken to synchronize such resubmissions externally.\n\n @funcprops \\isr_ok\n\n @warning\n Provided array of events as well as a triggered work item must be placed\n in persistent memory (valid until work handler execution or work\n cancellation) and cannot be modified after submission.\n\n @param work_q Address of workqueue.\n @param work Address of delayed work item.\n @param events An array of events which trigger the work.\n @param num_events The number of events in the array.\n @param timeout Timeout after which the work will be scheduled\n\t\t  for execution even if not triggered.\n\n\n @retval 0 Work item started watching for events.\n @retval -EINVAL Work item is being processed or has completed its work.\n @retval -EADDRINUSE Work item is pending on a different workqueue."]
    pub fn k_work_poll_submit_to_queue(
        work_q: *mut k_work_q,
        work: *mut k_work_poll,
        events: *mut k_poll_event,
        num_events: ::core::ffi::c_int,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Submit a triggered work item to the system workqueue.\n\n This routine schedules work item @a work to be processed by system\n workqueue when one of the given @a events is signaled. The routine\n initiates internal poller for the work item and then returns to the caller.\n Only when one of the watched events happen the work item is actually\n submitted to the workqueue and becomes pending.\n\n Submitting a previously submitted triggered work item that is still\n waiting for the event cancels the existing submission and reschedules it\n the using the new event list. Note that this behavior is inherently subject\n to race conditions with the pre-existing triggered work item and work queue,\n so care must be taken to synchronize such resubmissions externally.\n\n @funcprops \\isr_ok\n\n @warning\n Provided array of events as well as a triggered work item must not be\n modified until the item has been processed by the workqueue.\n\n @param work Address of delayed work item.\n @param events An array of events which trigger the work.\n @param num_events The number of events in the array.\n @param timeout Timeout after which the work will be scheduled\n\t\t  for execution even if not triggered.\n\n @retval 0 Work item started watching for events.\n @retval -EINVAL Work item is being processed or has completed its work.\n @retval -EADDRINUSE Work item is pending on a different workqueue."]
    pub fn k_work_poll_submit(
        work: *mut k_work_poll,
        events: *mut k_poll_event,
        num_events: ::core::ffi::c_int,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Cancel a triggered work item.\n\n This routine cancels the submission of triggered work item @a work.\n A triggered work item can only be canceled if no event triggered work\n submission.\n\n @funcprops \\isr_ok\n\n @param work Address of delayed work item.\n\n @retval 0 Work item canceled.\n @retval -EINVAL Work item is being processed or has completed its work."]
    pub fn k_work_poll_cancel(work: *mut k_work_poll) -> ::core::ffi::c_int;
}
#[doc = " @brief Message Queue Structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_msgq {
    #[doc = " Message queue wait queue"]
    pub wait_q: _wait_q_t,
    #[doc = " Lock"]
    pub lock: k_spinlock,
    #[doc = " Message size"]
    pub msg_size: usize,
    #[doc = " Maximal number of messages"]
    pub max_msgs: u32,
    #[doc = " Start of message buffer"]
    pub buffer_start: *mut ::core::ffi::c_char,
    #[doc = " End of message buffer"]
    pub buffer_end: *mut ::core::ffi::c_char,
    #[doc = " Read pointer"]
    pub read_ptr: *mut ::core::ffi::c_char,
    #[doc = " Write pointer"]
    pub write_ptr: *mut ::core::ffi::c_char,
    #[doc = " Number of used messages"]
    pub used_msgs: u32,
    #[doc = " Message queue"]
    pub flags: u8,
}
#[test]
fn bindgen_test_layout_k_msgq() {
    const UNINIT: ::core::mem::MaybeUninit<k_msgq> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_msgq>(),
        44usize,
        concat!("Size of: ", stringify!(k_msgq))
    );
    assert_eq!(
        ::core::mem::align_of::<k_msgq>(),
        4usize,
        concat!("Alignment of ", stringify!(k_msgq))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wait_q) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq),
            "::",
            stringify!(wait_q)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq),
            "::",
            stringify!(msg_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_msgs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq),
            "::",
            stringify!(max_msgs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer_start) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq),
            "::",
            stringify!(buffer_start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer_end) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq),
            "::",
            stringify!(buffer_end)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).read_ptr) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq),
            "::",
            stringify!(read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).write_ptr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq),
            "::",
            stringify!(write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).used_msgs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq),
            "::",
            stringify!(used_msgs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq),
            "::",
            stringify!(flags)
        )
    );
}
#[doc = " @brief Message Queue Attributes"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_msgq_attrs {
    #[doc = " Message Size"]
    pub msg_size: usize,
    #[doc = " Maximal number of messages"]
    pub max_msgs: u32,
    #[doc = " Used messages"]
    pub used_msgs: u32,
}
#[test]
fn bindgen_test_layout_k_msgq_attrs() {
    const UNINIT: ::core::mem::MaybeUninit<k_msgq_attrs> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_msgq_attrs>(),
        12usize,
        concat!("Size of: ", stringify!(k_msgq_attrs))
    );
    assert_eq!(
        ::core::mem::align_of::<k_msgq_attrs>(),
        4usize,
        concat!("Alignment of ", stringify!(k_msgq_attrs))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq_attrs),
            "::",
            stringify!(msg_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).max_msgs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq_attrs),
            "::",
            stringify!(max_msgs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).used_msgs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_msgq_attrs),
            "::",
            stringify!(used_msgs)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a message queue.\n\n This routine initializes a message queue object, prior to its first use.\n\n The message queue's ring buffer must contain space for @a max_msgs messages,\n each of which is @a msg_size bytes long. Alignment of the message queue's\n ring buffer is not necessary.\n\n @param msgq Address of the message queue.\n @param buffer Pointer to ring buffer that holds queued messages.\n @param msg_size Message size (in bytes).\n @param max_msgs Maximum number of messages that can be queued."]
    pub fn k_msgq_init(
        msgq: *mut k_msgq,
        buffer: *mut ::core::ffi::c_char,
        msg_size: usize,
        max_msgs: u32,
    );
}
extern "C" {
    #[doc = " @brief Initialize a message queue.\n\n This routine initializes a message queue object, prior to its first use,\n allocating its internal ring buffer from the calling thread's resource\n pool.\n\n Memory allocated for the ring buffer can be released by calling\n k_msgq_cleanup(), or if userspace is enabled and the msgq object loses\n all of its references.\n\n @param msgq Address of the message queue.\n @param msg_size Message size (in bytes).\n @param max_msgs Maximum number of messages that can be queued.\n\n @return 0 on success, -ENOMEM if there was insufficient memory in the\n\tthread's resource pool, or -EINVAL if the size parameters cause\n\tan integer overflow."]
    #[link_name = "k_msgq_alloc_init__extern"]
    pub fn k_msgq_alloc_init(
        msgq: *mut k_msgq,
        msg_size: usize,
        max_msgs: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Release allocated buffer for a queue\n\n Releases memory allocated for the ring buffer.\n\n @param msgq message queue to cleanup\n\n @retval 0 on success\n @retval -EBUSY Queue not empty"]
    pub fn k_msgq_cleanup(msgq: *mut k_msgq) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Send a message to a message queue.\n\n This routine sends a message to message queue @a q.\n\n @note The message content is copied from @a data into @a msgq and the @a data\n pointer is not retained, so the message content will not be modified\n by this function.\n\n @funcprops \\isr_ok\n\n @param msgq Address of the message queue.\n @param data Pointer to the message.\n @param timeout Non-negative waiting period to add the message,\n                or one of the special values K_NO_WAIT and\n                K_FOREVER.\n\n @retval 0 Message sent.\n @retval -ENOMSG Returned without waiting or queue purged.\n @retval -EAGAIN Waiting period timed out."]
    #[link_name = "k_msgq_put__extern"]
    pub fn k_msgq_put(
        msgq: *mut k_msgq,
        data: *const ::core::ffi::c_void,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Receive a message from a message queue.\n\n This routine receives a message from message queue @a q in a \"first in,\n first out\" manner.\n\n @note @a timeout must be set to K_NO_WAIT if called from ISR.\n\n @funcprops \\isr_ok\n\n @param msgq Address of the message queue.\n @param data Address of area to hold the received message.\n @param timeout Waiting period to receive the message,\n                or one of the special values K_NO_WAIT and\n                K_FOREVER.\n\n @retval 0 Message received.\n @retval -ENOMSG Returned without waiting.\n @retval -EAGAIN Waiting period timed out."]
    #[link_name = "k_msgq_get__extern"]
    pub fn k_msgq_get(
        msgq: *mut k_msgq,
        data: *mut ::core::ffi::c_void,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Peek/read a message from a message queue.\n\n This routine reads a message from message queue @a q in a \"first in,\n first out\" manner and leaves the message in the queue.\n\n @funcprops \\isr_ok\n\n @param msgq Address of the message queue.\n @param data Address of area to hold the message read from the queue.\n\n @retval 0 Message read.\n @retval -ENOMSG Returned when the queue has no message."]
    #[link_name = "k_msgq_peek__extern"]
    pub fn k_msgq_peek(msgq: *mut k_msgq, data: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Peek/read a message from a message queue at the specified index\n\n This routine reads a message from message queue at the specified index\n and leaves the message in the queue.\n k_msgq_peek_at(msgq, data, 0) is equivalent to k_msgq_peek(msgq, data)\n\n @funcprops \\isr_ok\n\n @param msgq Address of the message queue.\n @param data Address of area to hold the message read from the queue.\n @param idx Message queue index at which to peek\n\n @retval 0 Message read.\n @retval -ENOMSG Returned when the queue has no message at index."]
    #[link_name = "k_msgq_peek_at__extern"]
    pub fn k_msgq_peek_at(
        msgq: *mut k_msgq,
        data: *mut ::core::ffi::c_void,
        idx: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Purge a message queue.\n\n This routine discards all unreceived messages in a message queue's ring\n buffer. Any threads that are blocked waiting to send a message to the\n message queue are unblocked and see an -ENOMSG error code.\n\n @param msgq Address of the message queue."]
    #[link_name = "k_msgq_purge__extern"]
    pub fn k_msgq_purge(msgq: *mut k_msgq);
}
extern "C" {
    #[doc = " @brief Get the amount of free space in a message queue.\n\n This routine returns the number of unused entries in a message queue's\n ring buffer.\n\n @param msgq Address of the message queue.\n\n @return Number of unused ring buffer entries."]
    #[link_name = "k_msgq_num_free_get__extern"]
    pub fn k_msgq_num_free_get(msgq: *mut k_msgq) -> u32;
}
extern "C" {
    #[doc = " @brief Get basic attributes of a message queue.\n\n This routine fetches basic attributes of message queue into attr argument.\n\n @param msgq Address of the message queue.\n @param attrs pointer to message queue attribute structure."]
    #[link_name = "k_msgq_get_attrs__extern"]
    pub fn k_msgq_get_attrs(msgq: *mut k_msgq, attrs: *mut k_msgq_attrs);
}
extern "C" {
    #[link_name = "z_impl_k_msgq_num_free_get__extern"]
    pub fn z_impl_k_msgq_num_free_get(msgq: *mut k_msgq) -> u32;
}
extern "C" {
    #[doc = " @brief Get the number of messages in a message queue.\n\n This routine returns the number of messages in a message queue's ring buffer.\n\n @param msgq Address of the message queue.\n\n @return Number of messages."]
    #[link_name = "k_msgq_num_used_get__extern"]
    pub fn k_msgq_num_used_get(msgq: *mut k_msgq) -> u32;
}
extern "C" {
    #[link_name = "z_impl_k_msgq_num_used_get__extern"]
    pub fn z_impl_k_msgq_num_used_get(msgq: *mut k_msgq) -> u32;
}
#[doc = " @brief Mailbox Message Structure\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_mbox_msg {
    #[doc = " internal use only - needed for legacy API support"]
    pub _mailbox: u32,
    #[doc = " size of message (in bytes)"]
    pub size: usize,
    #[doc = " application-defined information value"]
    pub info: u32,
    #[doc = " sender's message data buffer"]
    pub tx_data: *mut ::core::ffi::c_void,
    #[doc = " source thread id"]
    pub rx_source_thread: k_tid_t,
    #[doc = " target thread id"]
    pub tx_target_thread: k_tid_t,
    #[doc = " internal use only - thread waiting on send (may be a dummy)"]
    pub _syncing_thread: k_tid_t,
    #[doc = " internal use only - semaphore used during asynchronous send"]
    pub _async_sem: *mut k_sem,
}
#[test]
fn bindgen_test_layout_k_mbox_msg() {
    const UNINIT: ::core::mem::MaybeUninit<k_mbox_msg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_mbox_msg>(),
        32usize,
        concat!("Size of: ", stringify!(k_mbox_msg))
    );
    assert_eq!(
        ::core::mem::align_of::<k_mbox_msg>(),
        4usize,
        concat!("Alignment of ", stringify!(k_mbox_msg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._mailbox) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mbox_msg),
            "::",
            stringify!(_mailbox)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mbox_msg),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mbox_msg),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tx_data) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mbox_msg),
            "::",
            stringify!(tx_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rx_source_thread) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mbox_msg),
            "::",
            stringify!(rx_source_thread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tx_target_thread) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mbox_msg),
            "::",
            stringify!(tx_target_thread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._syncing_thread) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mbox_msg),
            "::",
            stringify!(_syncing_thread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._async_sem) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mbox_msg),
            "::",
            stringify!(_async_sem)
        )
    );
}
#[doc = " @brief Mailbox Structure\n"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_mbox {
    #[doc = " Transmit messages queue"]
    pub tx_msg_queue: _wait_q_t,
    #[doc = " Receive message queue"]
    pub rx_msg_queue: _wait_q_t,
    pub lock: k_spinlock,
}
#[test]
fn bindgen_test_layout_k_mbox() {
    const UNINIT: ::core::mem::MaybeUninit<k_mbox> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_mbox>(),
        20usize,
        concat!("Size of: ", stringify!(k_mbox))
    );
    assert_eq!(
        ::core::mem::align_of::<k_mbox>(),
        4usize,
        concat!("Alignment of ", stringify!(k_mbox))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tx_msg_queue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mbox),
            "::",
            stringify!(tx_msg_queue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rx_msg_queue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mbox),
            "::",
            stringify!(rx_msg_queue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mbox),
            "::",
            stringify!(lock)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a mailbox.\n\n This routine initializes a mailbox object, prior to its first use.\n\n @param mbox Address of the mailbox."]
    pub fn k_mbox_init(mbox: *mut k_mbox);
}
extern "C" {
    #[doc = " @brief Send a mailbox message in a synchronous manner.\n\n This routine sends a message to @a mbox and waits for a receiver to both\n receive and process it. The message data may be in a buffer or non-existent\n (i.e. an empty message).\n\n @param mbox Address of the mailbox.\n @param tx_msg Address of the transmit message descriptor.\n @param timeout Waiting period for the message to be received,\n                or one of the special values K_NO_WAIT\n                and K_FOREVER. Once the message has been received,\n                this routine waits as long as necessary for the message\n                to be completely processed.\n\n @retval 0 Message sent.\n @retval -ENOMSG Returned without waiting.\n @retval -EAGAIN Waiting period timed out."]
    pub fn k_mbox_put(
        mbox: *mut k_mbox,
        tx_msg: *mut k_mbox_msg,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Send a mailbox message in an asynchronous manner.\n\n This routine sends a message to @a mbox without waiting for a receiver\n to process it. The message data may be in a buffer or non-existent\n (i.e. an empty message). Optionally, the semaphore @a sem will be given\n when the message has been both received and completely processed by\n the receiver.\n\n @param mbox Address of the mailbox.\n @param tx_msg Address of the transmit message descriptor.\n @param sem Address of a semaphore, or NULL if none is needed."]
    pub fn k_mbox_async_put(mbox: *mut k_mbox, tx_msg: *mut k_mbox_msg, sem: *mut k_sem);
}
extern "C" {
    #[doc = " @brief Receive a mailbox message.\n\n This routine receives a message from @a mbox, then optionally retrieves\n its data and disposes of the message.\n\n @param mbox Address of the mailbox.\n @param rx_msg Address of the receive message descriptor.\n @param buffer Address of the buffer to receive data, or NULL to defer data\n               retrieval and message disposal until later.\n @param timeout Waiting period for a message to be received,\n                or one of the special values K_NO_WAIT and K_FOREVER.\n\n @retval 0 Message received.\n @retval -ENOMSG Returned without waiting.\n @retval -EAGAIN Waiting period timed out."]
    pub fn k_mbox_get(
        mbox: *mut k_mbox,
        rx_msg: *mut k_mbox_msg,
        buffer: *mut ::core::ffi::c_void,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Retrieve mailbox message data into a buffer.\n\n This routine completes the processing of a received message by retrieving\n its data into a buffer, then disposing of the message.\n\n Alternatively, this routine can be used to dispose of a received message\n without retrieving its data.\n\n @param rx_msg Address of the receive message descriptor.\n @param buffer Address of the buffer to receive data, or NULL to discard\n               the data."]
    pub fn k_mbox_data_get(rx_msg: *mut k_mbox_msg, buffer: *mut ::core::ffi::c_void);
}
#[doc = " Pipe Structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_pipe {
    #[doc = "< Pipe buffer: may be NULL"]
    pub buffer: *mut ::core::ffi::c_uchar,
    #[doc = "< Buffer size"]
    pub size: usize,
    #[doc = "< # bytes used in buffer"]
    pub bytes_used: usize,
    #[doc = "< Where in buffer to read from"]
    pub read_index: usize,
    #[doc = "< Where in buffer to write"]
    pub write_index: usize,
    #[doc = "< Synchronization lock"]
    pub lock: k_spinlock,
    pub wait_q: k_pipe__bindgen_ty_1,
    #[doc = "< Flags"]
    pub flags: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_pipe__bindgen_ty_1 {
    #[doc = "< Reader wait queue"]
    pub readers: _wait_q_t,
    #[doc = "< Writer wait queue"]
    pub writers: _wait_q_t,
}
#[test]
fn bindgen_test_layout_k_pipe__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<k_pipe__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_pipe__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(k_pipe__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<k_pipe__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(k_pipe__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_pipe__bindgen_ty_1),
            "::",
            stringify!(readers)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).writers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_pipe__bindgen_ty_1),
            "::",
            stringify!(writers)
        )
    );
}
#[test]
fn bindgen_test_layout_k_pipe() {
    const UNINIT: ::core::mem::MaybeUninit<k_pipe> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_pipe>(),
        44usize,
        concat!("Size of: ", stringify!(k_pipe))
    );
    assert_eq!(
        ::core::mem::align_of::<k_pipe>(),
        4usize,
        concat!("Alignment of ", stringify!(k_pipe))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_pipe),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(k_pipe),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytes_used) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_pipe),
            "::",
            stringify!(bytes_used)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).read_index) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_pipe),
            "::",
            stringify!(read_index)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).write_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(k_pipe),
            "::",
            stringify!(write_index)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(k_pipe),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wait_q) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(k_pipe),
            "::",
            stringify!(wait_q)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(k_pipe),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a pipe.\n\n This routine initializes a pipe object, prior to its first use.\n\n @param pipe Address of the pipe.\n @param buffer Address of the pipe's ring buffer, or NULL if no ring buffer\n               is used.\n @param size Size of the pipe's ring buffer (in bytes), or zero if no ring\n             buffer is used."]
    pub fn k_pipe_init(pipe: *mut k_pipe, buffer: *mut ::core::ffi::c_uchar, size: usize);
}
extern "C" {
    #[doc = " @brief Release a pipe's allocated buffer\n\n If a pipe object was given a dynamically allocated buffer via\n k_pipe_alloc_init(), this will free it. This function does nothing\n if the buffer wasn't dynamically allocated.\n\n @param pipe Address of the pipe.\n @retval 0 on success\n @retval -EAGAIN nothing to cleanup"]
    pub fn k_pipe_cleanup(pipe: *mut k_pipe) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Initialize a pipe and allocate a buffer for it\n\n Storage for the buffer region will be allocated from the calling thread's\n resource pool. This memory will be released if k_pipe_cleanup() is called,\n or userspace is enabled and the pipe object loses all references to it.\n\n This function should only be called on uninitialized pipe objects.\n\n @param pipe Address of the pipe.\n @param size Size of the pipe's ring buffer (in bytes), or zero if no ring\n             buffer is used.\n @retval 0 on success\n @retval -ENOMEM if memory couldn't be allocated"]
    #[link_name = "k_pipe_alloc_init__extern"]
    pub fn k_pipe_alloc_init(pipe: *mut k_pipe, size: usize) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Write data to a pipe.\n\n This routine writes up to @a bytes_to_write bytes of data to @a pipe.\n\n @param pipe Address of the pipe.\n @param data Address of data to write.\n @param bytes_to_write Size of data (in bytes).\n @param bytes_written Address of area to hold the number of bytes written.\n @param min_xfer Minimum number of bytes to write.\n @param timeout Waiting period to wait for the data to be written,\n                or one of the special values K_NO_WAIT and K_FOREVER.\n\n @retval 0 At least @a min_xfer bytes of data were written.\n @retval -EIO Returned without waiting; zero data bytes were written.\n @retval -EAGAIN Waiting period timed out; between zero and @a min_xfer\n                 minus one data bytes were written."]
    #[link_name = "k_pipe_put__extern"]
    pub fn k_pipe_put(
        pipe: *mut k_pipe,
        data: *mut ::core::ffi::c_void,
        bytes_to_write: usize,
        bytes_written: *mut usize,
        min_xfer: usize,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Read data from a pipe.\n\n This routine reads up to @a bytes_to_read bytes of data from @a pipe.\n\n @param pipe Address of the pipe.\n @param data Address to place the data read from pipe.\n @param bytes_to_read Maximum number of data bytes to read.\n @param bytes_read Address of area to hold the number of bytes read.\n @param min_xfer Minimum number of data bytes to read.\n @param timeout Waiting period to wait for the data to be read,\n                or one of the special values K_NO_WAIT and K_FOREVER.\n\n @retval 0 At least @a min_xfer bytes of data were read.\n @retval -EINVAL invalid parameters supplied\n @retval -EIO Returned without waiting; zero data bytes were read.\n @retval -EAGAIN Waiting period timed out; between zero and @a min_xfer\n                 minus one data bytes were read."]
    #[link_name = "k_pipe_get__extern"]
    pub fn k_pipe_get(
        pipe: *mut k_pipe,
        data: *mut ::core::ffi::c_void,
        bytes_to_read: usize,
        bytes_read: *mut usize,
        min_xfer: usize,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Query the number of bytes that may be read from @a pipe.\n\n @param pipe Address of the pipe.\n\n @retval a number n such that 0 <= n <= @ref k_pipe.size; the\n         result is zero for unbuffered pipes."]
    #[link_name = "k_pipe_read_avail__extern"]
    pub fn k_pipe_read_avail(pipe: *mut k_pipe) -> usize;
}
extern "C" {
    #[doc = " @brief Query the number of bytes that may be written to @a pipe\n\n @param pipe Address of the pipe.\n\n @retval a number n such that 0 <= n <= @ref k_pipe.size; the\n         result is zero for unbuffered pipes."]
    #[link_name = "k_pipe_write_avail__extern"]
    pub fn k_pipe_write_avail(pipe: *mut k_pipe) -> usize;
}
extern "C" {
    #[doc = " @brief Flush the pipe of write data\n\n This routine flushes the pipe. Flushing the pipe is equivalent to reading\n both all the data in the pipe's buffer and all the data waiting to go into\n that pipe into a large temporary buffer and discarding the buffer. Any\n writers that were previously pended become unpended.\n\n @param pipe Address of the pipe."]
    #[link_name = "k_pipe_flush__extern"]
    pub fn k_pipe_flush(pipe: *mut k_pipe);
}
extern "C" {
    #[doc = " @brief Flush the pipe's internal buffer\n\n This routine flushes the pipe's internal buffer. This is equivalent to\n reading up to N bytes from the pipe (where N is the size of the pipe's\n buffer) into a temporary buffer and then discarding that buffer. If there\n were writers previously pending, then some may unpend as they try to fill\n up the pipe's emptied buffer.\n\n @param pipe Address of the pipe."]
    #[link_name = "k_pipe_buffer_flush__extern"]
    pub fn k_pipe_buffer_flush(pipe: *mut k_pipe);
}
#[doc = " @cond INTERNAL_HIDDEN"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct k_mem_slab_info {
    pub num_blocks: u32,
    pub block_size: usize,
    pub num_used: u32,
}
#[test]
fn bindgen_test_layout_k_mem_slab_info() {
    const UNINIT: ::core::mem::MaybeUninit<k_mem_slab_info> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_mem_slab_info>(),
        12usize,
        concat!("Size of: ", stringify!(k_mem_slab_info))
    );
    assert_eq!(
        ::core::mem::align_of::<k_mem_slab_info>(),
        4usize,
        concat!("Alignment of ", stringify!(k_mem_slab_info))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).num_blocks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mem_slab_info),
            "::",
            stringify!(num_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mem_slab_info),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).num_used) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mem_slab_info),
            "::",
            stringify!(num_used)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_mem_slab {
    pub wait_q: _wait_q_t,
    pub lock: k_spinlock,
    pub buffer: *mut ::core::ffi::c_char,
    pub free_list: *mut ::core::ffi::c_char,
    pub info: k_mem_slab_info,
}
#[test]
fn bindgen_test_layout_k_mem_slab() {
    const UNINIT: ::core::mem::MaybeUninit<k_mem_slab> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_mem_slab>(),
        32usize,
        concat!("Size of: ", stringify!(k_mem_slab))
    );
    assert_eq!(
        ::core::mem::align_of::<k_mem_slab>(),
        4usize,
        concat!("Alignment of ", stringify!(k_mem_slab))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wait_q) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mem_slab),
            "::",
            stringify!(wait_q)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mem_slab),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mem_slab),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free_list) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mem_slab),
            "::",
            stringify!(free_list)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(k_mem_slab),
            "::",
            stringify!(info)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a memory slab.\n\n Initializes a memory slab, prior to its first use.\n\n The memory slab's buffer contains @a slab_num_blocks memory blocks\n that are @a slab_block_size bytes long. The buffer must be aligned to an\n N-byte boundary matching a word boundary, where N is a power of 2\n (i.e. 4 on 32-bit systems, 8, 16, ...).\n To ensure that each memory block is similarly aligned to this boundary,\n @a slab_block_size must also be a multiple of N.\n\n @param slab Address of the memory slab.\n @param buffer Pointer to buffer used for the memory blocks.\n @param block_size Size of each memory block (in bytes).\n @param num_blocks Number of memory blocks.\n\n @retval 0 on success\n @retval -EINVAL invalid data supplied\n"]
    pub fn k_mem_slab_init(
        slab: *mut k_mem_slab,
        buffer: *mut ::core::ffi::c_void,
        block_size: usize,
        num_blocks: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Allocate memory from a memory slab.\n\n This routine allocates a memory block from a memory slab.\n\n @note @a timeout must be set to K_NO_WAIT if called from ISR.\n @note When CONFIG_MULTITHREADING=n any @a timeout is treated as K_NO_WAIT.\n\n @funcprops \\isr_ok\n\n @param slab Address of the memory slab.\n @param mem Pointer to block address area.\n @param timeout Non-negative waiting period to wait for operation to complete.\n        Use K_NO_WAIT to return without waiting,\n        or K_FOREVER to wait as long as necessary.\n\n @retval 0 Memory allocated. The block address area pointed at by @a mem\n         is set to the starting address of the memory block.\n @retval -ENOMEM Returned without waiting.\n @retval -EAGAIN Waiting period timed out.\n @retval -EINVAL Invalid data supplied"]
    pub fn k_mem_slab_alloc(
        slab: *mut k_mem_slab,
        mem: *mut *mut ::core::ffi::c_void,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Free memory allocated from a memory slab.\n\n This routine releases a previously allocated memory block back to its\n associated memory slab.\n\n @param slab Address of the memory slab.\n @param mem Pointer to the memory block (as returned by k_mem_slab_alloc())."]
    pub fn k_mem_slab_free(slab: *mut k_mem_slab, mem: *mut ::core::ffi::c_void);
}
extern "C" {
    #[doc = " @brief Get the number of used blocks in a memory slab.\n\n This routine gets the number of memory blocks that are currently\n allocated in @a slab.\n\n @param slab Address of the memory slab.\n\n @return Number of allocated memory blocks."]
    #[link_name = "k_mem_slab_num_used_get__extern"]
    pub fn k_mem_slab_num_used_get(slab: *mut k_mem_slab) -> u32;
}
extern "C" {
    #[doc = " @brief Get the number of maximum used blocks so far in a memory slab.\n\n This routine gets the maximum number of memory blocks that were\n allocated in @a slab.\n\n @param slab Address of the memory slab.\n\n @return Maximum number of allocated memory blocks."]
    #[link_name = "k_mem_slab_max_used_get__extern"]
    pub fn k_mem_slab_max_used_get(slab: *mut k_mem_slab) -> u32;
}
extern "C" {
    #[doc = " @brief Get the number of unused blocks in a memory slab.\n\n This routine gets the number of memory blocks that are currently\n unallocated in @a slab.\n\n @param slab Address of the memory slab.\n\n @return Number of unallocated memory blocks."]
    #[link_name = "k_mem_slab_num_free_get__extern"]
    pub fn k_mem_slab_num_free_get(slab: *mut k_mem_slab) -> u32;
}
extern "C" {
    #[doc = " @brief Get the memory stats for a memory slab\n\n This routine gets the runtime memory usage stats for the slab @a slab.\n\n @param slab Address of the memory slab\n @param stats Pointer to memory into which to copy memory usage statistics\n\n @retval 0 Success\n @retval -EINVAL Any parameter points to NULL"]
    pub fn k_mem_slab_runtime_stats_get(
        slab: *mut k_mem_slab,
        stats: *mut sys_memory_stats,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Reset the maximum memory usage for a slab\n\n This routine resets the maximum memory usage for the slab @a slab to its\n current usage.\n\n @param slab Address of the memory slab\n\n @retval 0 Success\n @retval -EINVAL Memory slab is NULL"]
    pub fn k_mem_slab_runtime_stats_reset_max(slab: *mut k_mem_slab) -> ::core::ffi::c_int;
}
#[doc = " @addtogroup heap_apis\n @{"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_heap {
    pub heap: sys_heap,
    pub wait_q: _wait_q_t,
    pub lock: k_spinlock,
}
#[test]
fn bindgen_test_layout_k_heap() {
    const UNINIT: ::core::mem::MaybeUninit<k_heap> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_heap>(),
        24usize,
        concat!("Size of: ", stringify!(k_heap))
    );
    assert_eq!(
        ::core::mem::align_of::<k_heap>(),
        4usize,
        concat!("Alignment of ", stringify!(k_heap))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).heap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_heap),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wait_q) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_heap),
            "::",
            stringify!(wait_q)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(k_heap),
            "::",
            stringify!(lock)
        )
    );
}
extern "C" {
    #[doc = " @brief Initialize a k_heap\n\n This constructs a synchronized k_heap object over a memory region\n specified by the user.  Note that while any alignment and size can\n be passed as valid parameters, internal alignment restrictions\n inside the inner sys_heap mean that not all bytes may be usable as\n allocated memory.\n\n @param h Heap struct to initialize\n @param mem Pointer to memory.\n @param bytes Size of memory region, in bytes"]
    pub fn k_heap_init(h: *mut k_heap, mem: *mut ::core::ffi::c_void, bytes: usize);
}
extern "C" {
    #[doc = " @brief Allocate aligned memory from a k_heap\n\n Behaves in all ways like k_heap_alloc(), except that the returned\n memory (if available) will have a starting address in memory which\n is a multiple of the specified power-of-two alignment value in\n bytes.  The resulting memory can be returned to the heap using\n k_heap_free().\n\n @note @a timeout must be set to K_NO_WAIT if called from ISR.\n @note When CONFIG_MULTITHREADING=n any @a timeout is treated as K_NO_WAIT.\n\n @funcprops \\isr_ok\n\n @param h Heap from which to allocate\n @param align Alignment in bytes, must be a power of two\n @param bytes Number of bytes requested\n @param timeout How long to wait, or K_NO_WAIT\n @return Pointer to memory the caller can now use"]
    pub fn k_heap_aligned_alloc(
        h: *mut k_heap,
        align: usize,
        bytes: usize,
        timeout: k_timeout_t,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " @brief Allocate memory from a k_heap\n\n Allocates and returns a memory buffer from the memory region owned\n by the heap.  If no memory is available immediately, the call will\n block for the specified timeout (constructed via the standard\n timeout API, or K_NO_WAIT or K_FOREVER) waiting for memory to be\n freed.  If the allocation cannot be performed by the expiration of\n the timeout, NULL will be returned.\n Allocated memory is aligned on a multiple of pointer sizes.\n\n @note @a timeout must be set to K_NO_WAIT if called from ISR.\n @note When CONFIG_MULTITHREADING=n any @a timeout is treated as K_NO_WAIT.\n\n @funcprops \\isr_ok\n\n @param h Heap from which to allocate\n @param bytes Desired size of block to allocate\n @param timeout How long to wait, or K_NO_WAIT\n @return A pointer to valid heap memory, or NULL"]
    pub fn k_heap_alloc(
        h: *mut k_heap,
        bytes: usize,
        timeout: k_timeout_t,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " @brief Free memory allocated by k_heap_alloc()\n\n Returns the specified memory block, which must have been returned\n from k_heap_alloc(), to the heap for use by other callers.  Passing\n a NULL block is legal, and has no effect.\n\n @param h Heap to which to return the memory\n @param mem A valid memory block, or NULL"]
    pub fn k_heap_free(h: *mut k_heap, mem: *mut ::core::ffi::c_void);
}
extern "C" {
    #[doc = " @brief Allocate memory from the heap with a specified alignment.\n\n This routine provides semantics similar to aligned_alloc(); memory is\n allocated from the heap with a specified alignment. However, one minor\n difference is that k_aligned_alloc() accepts any non-zero @p size,\n whereas aligned_alloc() only accepts a @p size that is an integral\n multiple of @p align.\n\n Above, aligned_alloc() refers to:\n C11 standard (ISO/IEC 9899:2011): 7.22.3.1\n The aligned_alloc function (p: 347-348)\n\n @param align Alignment of memory requested (in bytes).\n @param size Amount of memory requested (in bytes).\n\n @return Address of the allocated memory if successful; otherwise NULL."]
    pub fn k_aligned_alloc(align: usize, size: usize) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " @brief Allocate memory from the heap.\n\n This routine provides traditional malloc() semantics. Memory is\n allocated from the heap memory pool.\n Allocated memory is aligned on a multiple of pointer sizes.\n\n @param size Amount of memory requested (in bytes).\n\n @return Address of the allocated memory if successful; otherwise NULL."]
    pub fn k_malloc(size: usize) -> *mut ::core::ffi::c_void;
}
extern "C" {
    #[doc = " @brief Free memory allocated from heap.\n\n This routine provides traditional free() semantics. The memory being\n returned must have been allocated from the heap memory pool.\n\n If @a ptr is NULL, no operation is performed.\n\n @param ptr Pointer to previously allocated memory."]
    pub fn k_free(ptr: *mut ::core::ffi::c_void);
}
extern "C" {
    #[doc = " @brief Allocate memory from heap, array style\n\n This routine provides traditional calloc() semantics. Memory is\n allocated from the heap memory pool and zeroed.\n\n @param nmemb Number of elements in the requested array\n @param size Size of each array element (in bytes).\n\n @return Address of the allocated memory if successful; otherwise NULL."]
    pub fn k_calloc(nmemb: usize, size: usize) -> *mut ::core::ffi::c_void;
}
pub const _poll_types_bits__POLL_TYPE_IGNORE: _poll_types_bits = 0;
pub const _poll_types_bits__POLL_TYPE_SIGNAL: _poll_types_bits = 1;
pub const _poll_types_bits__POLL_TYPE_SEM_AVAILABLE: _poll_types_bits = 2;
pub const _poll_types_bits__POLL_TYPE_DATA_AVAILABLE: _poll_types_bits = 3;
pub const _poll_types_bits__POLL_TYPE_MSGQ_DATA_AVAILABLE: _poll_types_bits = 4;
pub const _poll_types_bits__POLL_TYPE_PIPE_DATA_AVAILABLE: _poll_types_bits = 5;
pub const _poll_types_bits__POLL_NUM_TYPES: _poll_types_bits = 6;
pub type _poll_types_bits = ::core::ffi::c_uint;
pub const _poll_states_bits__POLL_STATE_NOT_READY: _poll_states_bits = 0;
pub const _poll_states_bits__POLL_STATE_SIGNALED: _poll_states_bits = 1;
pub const _poll_states_bits__POLL_STATE_SEM_AVAILABLE: _poll_states_bits = 2;
pub const _poll_states_bits__POLL_STATE_DATA_AVAILABLE: _poll_states_bits = 3;
pub const _poll_states_bits__POLL_STATE_CANCELLED: _poll_states_bits = 4;
pub const _poll_states_bits__POLL_STATE_MSGQ_DATA_AVAILABLE: _poll_states_bits = 5;
pub const _poll_states_bits__POLL_STATE_PIPE_DATA_AVAILABLE: _poll_states_bits = 6;
pub const _poll_states_bits__POLL_NUM_STATES: _poll_states_bits = 7;
pub type _poll_states_bits = ::core::ffi::c_uint;
pub const k_poll_modes_K_POLL_MODE_NOTIFY_ONLY: k_poll_modes = 0;
pub const k_poll_modes_K_POLL_NUM_MODES: k_poll_modes = 1;
pub type k_poll_modes = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_poll_signal {
    #[doc = " PRIVATE - DO NOT TOUCH"]
    pub poll_events: sys_dlist_t,
    #[doc = " 1 if the event has been signaled, 0 otherwise. Stays set to 1 until\n user resets it to 0."]
    pub signaled: ::core::ffi::c_uint,
    #[doc = " custom result value passed to k_poll_signal_raise() if needed"]
    pub result: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_k_poll_signal() {
    const UNINIT: ::core::mem::MaybeUninit<k_poll_signal> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_poll_signal>(),
        16usize,
        concat!("Size of: ", stringify!(k_poll_signal))
    );
    assert_eq!(
        ::core::mem::align_of::<k_poll_signal>(),
        4usize,
        concat!("Alignment of ", stringify!(k_poll_signal))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).poll_events) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_poll_signal),
            "::",
            stringify!(poll_events)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).signaled) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_poll_signal),
            "::",
            stringify!(signaled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(k_poll_signal),
            "::",
            stringify!(result)
        )
    );
}
#[doc = " @brief Poll Event\n"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct k_poll_event {
    #[doc = " PRIVATE - DO NOT TOUCH"]
    pub _node: sys_dnode_t,
    #[doc = " PRIVATE - DO NOT TOUCH"]
    pub poller: *mut z_poller,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_anon_1: k_poll_event__bindgen_ty_1,
}
#[doc = " per-type data"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union k_poll_event__bindgen_ty_1 {
    pub obj: *mut ::core::ffi::c_void,
    pub signal: *mut k_poll_signal,
    pub sem: *mut k_sem,
    pub fifo: *mut k_fifo,
    pub queue: *mut k_queue,
    pub msgq: *mut k_msgq,
}
#[test]
fn bindgen_test_layout_k_poll_event__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<k_poll_event__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_poll_event__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(k_poll_event__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<k_poll_event__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(k_poll_event__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_poll_event__bindgen_ty_1),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).signal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_poll_event__bindgen_ty_1),
            "::",
            stringify!(signal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_poll_event__bindgen_ty_1),
            "::",
            stringify!(sem)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fifo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_poll_event__bindgen_ty_1),
            "::",
            stringify!(fifo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_poll_event__bindgen_ty_1),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msgq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_poll_event__bindgen_ty_1),
            "::",
            stringify!(msgq)
        )
    );
}
#[test]
fn bindgen_test_layout_k_poll_event() {
    const UNINIT: ::core::mem::MaybeUninit<k_poll_event> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<k_poll_event>(),
        20usize,
        concat!("Size of: ", stringify!(k_poll_event))
    );
    assert_eq!(
        ::core::mem::align_of::<k_poll_event>(),
        4usize,
        concat!("Alignment of ", stringify!(k_poll_event))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(k_poll_event),
            "::",
            stringify!(_node)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).poller) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(k_poll_event),
            "::",
            stringify!(poller)
        )
    );
}
impl k_poll_event {
    #[inline]
    pub fn tag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn state(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_state(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tag: u32,
        type_: u32,
        state: u32,
        mode: u32,
        unused: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tag: u32 = unsafe { ::core::mem::transmute(tag) };
            tag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 6u8, {
            let type_: u32 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(14usize, 7u8, {
            let state: u32 = unsafe { ::core::mem::transmute(state) };
            state as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let mode: u32 = unsafe { ::core::mem::transmute(mode) };
            mode as u64
        });
        __bindgen_bitfield_unit.set(22usize, 10u8, {
            let unused: u32 = unsafe { ::core::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[doc = " @brief Initialize one struct k_poll_event instance\n\n After this routine is called on a poll event, the event it ready to be\n placed in an event array to be passed to k_poll().\n\n @param event The event to initialize.\n @param type A bitfield of the types of event, from the K_POLL_TYPE_xxx\n             values. Only values that apply to the same object being polled\n             can be used together. Choosing K_POLL_TYPE_IGNORE disables the\n             event.\n @param mode Future. Use K_POLL_MODE_NOTIFY_ONLY.\n @param obj Kernel object or poll signal."]
    pub fn k_poll_event_init(
        event: *mut k_poll_event,
        type_: u32,
        mode: ::core::ffi::c_int,
        obj: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    #[doc = " @brief Wait for one or many of multiple poll events to occur\n\n This routine allows a thread to wait concurrently for one or many of\n multiple poll events to have occurred. Such events can be a kernel object\n being available, like a semaphore, or a poll signal event.\n\n When an event notifies that a kernel object is available, the kernel object\n is not \"given\" to the thread calling k_poll(): it merely signals the fact\n that the object was available when the k_poll() call was in effect. Also,\n all threads trying to acquire an object the regular way, i.e. by pending on\n the object, have precedence over the thread polling on the object. This\n means that the polling thread will never get the poll event on an object\n until the object becomes available and its pend queue is empty. For this\n reason, the k_poll() call is more effective when the objects being polled\n only have one thread, the polling thread, trying to acquire them.\n\n When k_poll() returns 0, the caller should loop on all the events that were\n passed to k_poll() and check the state field for the values that were\n expected and take the associated actions.\n\n Before being reused for another call to k_poll(), the user has to reset the\n state field to K_POLL_STATE_NOT_READY.\n\n When called from user mode, a temporary memory allocation is required from\n the caller's resource pool.\n\n @param events An array of events to be polled for.\n @param num_events The number of events in the array.\n @param timeout Waiting period for an event to be ready,\n                or one of the special values K_NO_WAIT and K_FOREVER.\n\n @retval 0 One or more events are ready.\n @retval -EAGAIN Waiting period timed out.\n @retval -EINTR Polling has been interrupted, e.g. with\n         k_queue_cancel_wait(). All output events are still set and valid,\n         cancelled event(s) will be set to K_POLL_STATE_CANCELLED. In other\n         words, -EINTR status means that at least one of output events is\n         K_POLL_STATE_CANCELLED.\n @retval -ENOMEM Thread resource pool insufficient memory (user mode only)\n @retval -EINVAL Bad parameters (user mode only)"]
    #[link_name = "k_poll__extern"]
    pub fn k_poll(
        events: *mut k_poll_event,
        num_events: ::core::ffi::c_int,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Initialize a poll signal object.\n\n Ready a poll signal object to be signaled via k_poll_signal_raise().\n\n @param sig A poll signal."]
    #[link_name = "k_poll_signal_init__extern"]
    pub fn k_poll_signal_init(sig: *mut k_poll_signal);
}
extern "C" {
    #[link_name = "k_poll_signal_reset__extern"]
    pub fn k_poll_signal_reset(sig: *mut k_poll_signal);
}
extern "C" {
    #[doc = " @brief Fetch the signaled state and result value of a poll signal\n\n @param sig A poll signal object\n @param signaled An integer buffer which will be written nonzero if the\n\t\t   object was signaled\n @param result An integer destination buffer which will be written with the\n\t\t   result value if the object was signaled, or an undefined\n\t\t   value if it was not."]
    #[link_name = "k_poll_signal_check__extern"]
    pub fn k_poll_signal_check(
        sig: *mut k_poll_signal,
        signaled: *mut ::core::ffi::c_uint,
        result: *mut ::core::ffi::c_int,
    );
}
extern "C" {
    #[doc = " @brief Signal a poll signal object.\n\n This routine makes ready a poll signal, which is basically a poll event of\n type K_POLL_TYPE_SIGNAL. If a thread was polling on that event, it will be\n made ready to run. A @a result value can be specified.\n\n The poll signal contains a 'signaled' field that, when set by\n k_poll_signal_raise(), stays set until the user sets it back to 0 with\n k_poll_signal_reset(). It thus has to be reset by the user before being\n passed again to k_poll() or k_poll() will consider it being signaled, and\n will return immediately.\n\n @note The result is stored and the 'signaled' field is set even if\n this function returns an error indicating that an expiring poll was\n not notified.  The next k_poll() will detect the missed raise.\n\n @param sig A poll signal.\n @param result The value to store in the result field of the signal.\n\n @retval 0 The signal was delivered successfully.\n @retval -EAGAIN The polling thread's timeout is in the process of expiring."]
    #[link_name = "k_poll_signal_raise__extern"]
    pub fn k_poll_signal_raise(
        sig: *mut k_poll_signal,
        result: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @defgroup cpu_idle_apis CPU Idling APIs\n @ingroup kernel_apis\n @{\n/\n/**\n @brief Make the CPU idle.\n\n This function makes the CPU idle until an event wakes it up.\n\n In a regular system, the idle thread should be the only thread responsible\n for making the CPU idle and triggering any type of power management.\n However, in some more constrained systems, such as a single-threaded system,\n the only thread would be responsible for this if needed.\n\n @note In some architectures, before returning, the function unmasks interrupts\n unconditionally."]
    #[link_name = "k_cpu_idle__extern"]
    pub fn k_cpu_idle();
}
extern "C" {
    #[doc = " @brief Make the CPU idle in an atomic fashion.\n\n Similar to k_cpu_idle(), but must be called with interrupts locked.\n\n Enabling interrupts and entering a low-power mode will be atomic,\n i.e. there will be no period of time where interrupts are enabled before\n the processor enters a low-power mode.\n\n After waking up from the low-power mode, the interrupt lockout state will\n be restored as if by irq_unlock(key).\n\n @param key Interrupt locking key obtained from irq_lock()."]
    #[link_name = "k_cpu_atomic_idle__extern"]
    pub fn k_cpu_atomic_idle(key: ::core::ffi::c_uint);
}
extern "C" {
    #[doc = " @internal"]
    pub fn z_init_static_threads();
}
extern "C" {
    #[doc = " @internal"]
    pub fn z_timer_expiration_handler(t: *mut _timeout);
}
extern "C" {
    #[doc = " @brief Emit a character buffer to the console device\n\n @param c String of characters to print\n @param n The length of the string\n"]
    #[link_name = "k_str_out__extern"]
    pub fn k_str_out(c: *mut ::core::ffi::c_char, n: usize);
}
extern "C" {
    #[doc = " @brief Disable preservation of floating point context information.\n\n This routine informs the kernel that the specified thread\n will no longer be using the floating point registers.\n\n @warning\n Some architectures apply restrictions on how the disabling of floating\n point preservation may be requested, see arch_float_disable.\n\n @warning\n This routine should only be used to disable floating point support for\n a thread that currently has such support enabled.\n\n @param thread ID of thread.\n\n @retval 0        On success.\n @retval -ENOTSUP If the floating point disabling is not implemented.\n         -EINVAL  If the floating point disabling could not be performed."]
    #[link_name = "k_float_disable__extern"]
    pub fn k_float_disable(thread: *mut k_thread) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Enable preservation of floating point context information.\n\n This routine informs the kernel that the specified thread\n will use the floating point registers.\n\n Invoking this routine initializes the thread's floating point context info\n to that of an FPU that has been reset. The next time the thread is scheduled\n by z_swap() it will either inherit an FPU that is guaranteed to be in a\n \"sane\" state (if the most recent user of the FPU was cooperatively swapped\n out) or the thread's own floating point context will be loaded (if the most\n recent user of the FPU was preempted, or if this thread is the first user\n of the FPU). Thereafter, the kernel will protect the thread's FP context\n so that it is not altered during a preemptive context switch.\n\n The @a options parameter indicates which floating point register sets will\n be used by the specified thread.\n\n For x86 options:\n\n - K_FP_REGS  indicates x87 FPU and MMX registers only\n - K_SSE_REGS indicates SSE registers (and also x87 FPU and MMX registers)\n\n @warning\n Some architectures apply restrictions on how the enabling of floating\n point preservation may be requested, see arch_float_enable.\n\n @warning\n This routine should only be used to enable floating point support for\n a thread that currently has such support enabled.\n\n @param thread  ID of thread.\n @param options architecture dependent options\n\n @retval 0        On success.\n @retval -ENOTSUP If the floating point enabling is not implemented.\n         -EINVAL  If the floating point enabling could not be performed."]
    #[link_name = "k_float_enable__extern"]
    pub fn k_float_enable(
        thread: *mut k_thread,
        options: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Get the runtime statistics of a thread\n\n @param thread ID of thread.\n @param stats Pointer to struct to copy statistics into.\n @return -EINVAL if null pointers, otherwise 0"]
    pub fn k_thread_runtime_stats_get(
        thread: k_tid_t,
        stats: *mut k_thread_runtime_stats_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Get the runtime statistics of all threads\n\n @param stats Pointer to struct to copy statistics into.\n @return -EINVAL if null pointers, otherwise 0"]
    pub fn k_thread_runtime_stats_all_get(
        stats: *mut k_thread_runtime_stats_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Enable gathering of runtime statistics for specified thread\n\n This routine enables the gathering of runtime statistics for the specified\n thread.\n\n @param thread ID of thread\n @return -EINVAL if invalid thread ID, otherwise 0"]
    pub fn k_thread_runtime_stats_enable(thread: k_tid_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Disable gathering of runtime statistics for specified thread\n\n This routine disables the gathering of runtime statistics for the specified\n thread.\n\n @param thread ID of thread\n @return -EINVAL if invalid thread ID, otherwise 0"]
    pub fn k_thread_runtime_stats_disable(thread: k_tid_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Enable gathering of system runtime statistics\n\n This routine enables the gathering of system runtime statistics. Note that\n it does not affect the gathering of similar statistics for individual\n threads."]
    pub fn k_sys_runtime_stats_enable();
}
extern "C" {
    #[doc = " @brief Disable gathering of system runtime statistics\n\n This routine disables the gathering of system runtime statistics. Note that\n it does not affect the gathering of similar statistics for individual\n threads."]
    pub fn k_sys_runtime_stats_disable();
}
extern "C" {
    #[doc = " @brief Called when entering an ISR"]
    pub fn sys_trace_isr_enter();
}
extern "C" {
    #[doc = " @brief Called when exiting an ISR"]
    pub fn sys_trace_isr_exit();
}
extern "C" {
    #[doc = " @brief Called when exiting an ISR and switching to scheduler"]
    pub fn sys_trace_isr_exit_to_scheduler();
}
extern "C" {
    #[doc = " @brief Called when the cpu enters the idle state"]
    pub fn sys_trace_idle();
}
extern "C" {
    pub fn z_impl_k_thread_stack_alloc(
        size: usize,
        flags: ::core::ffi::c_int,
    ) -> *mut k_thread_stack_t;
}
extern "C" {
    pub fn z_impl_k_thread_stack_free(stack: *mut k_thread_stack_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_thread_create(
        new_thread: *mut k_thread,
        stack: *mut k_thread_stack_t,
        stack_size: usize,
        entry: k_thread_entry_t,
        p1: *mut ::core::ffi::c_void,
        p2: *mut ::core::ffi::c_void,
        p3: *mut ::core::ffi::c_void,
        prio: ::core::ffi::c_int,
        options: u32,
        delay: k_timeout_t,
    ) -> k_tid_t;
}
extern "C" {
    pub fn z_impl_k_thread_stack_space_get(
        thread: *const k_thread,
        unused_ptr: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "k_thread_stack_space_get__extern"]
    pub fn k_thread_stack_space_get(
        thread: *const k_thread,
        unused_ptr: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_thread_join(thread: *mut k_thread, timeout: k_timeout_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_sleep(timeout: k_timeout_t) -> i32;
}
extern "C" {
    pub fn z_impl_k_usleep(us: i32) -> i32;
}
extern "C" {
    pub fn z_impl_k_busy_wait(usec_to_wait: u32);
}
extern "C" {
    pub fn z_impl_k_yield();
}
extern "C" {
    pub fn z_impl_k_wakeup(thread: k_tid_t);
}
extern "C" {
    pub fn z_impl_k_sched_current_thread_query() -> k_tid_t;
}
extern "C" {
    pub fn z_impl_k_thread_abort(thread: k_tid_t);
}
extern "C" {
    pub fn z_impl_k_thread_start(thread: k_tid_t);
}
extern "C" {
    pub fn z_impl_k_thread_priority_get(thread: k_tid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_thread_priority_set(thread: k_tid_t, prio: ::core::ffi::c_int);
}
extern "C" {
    pub fn z_impl_k_thread_deadline_set(thread: k_tid_t, deadline: ::core::ffi::c_int);
}
extern "C" {
    #[link_name = "k_thread_deadline_set__extern"]
    pub fn k_thread_deadline_set(thread: k_tid_t, deadline: ::core::ffi::c_int);
}
extern "C" {
    pub fn z_impl_k_thread_suspend(thread: k_tid_t);
}
extern "C" {
    pub fn z_impl_k_thread_resume(thread: k_tid_t);
}
extern "C" {
    pub fn z_impl_k_is_preempt_thread() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_thread_custom_data_set(value: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn z_impl_k_thread_custom_data_get() -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn z_impl_k_thread_name_set(
        thread: k_tid_t,
        str_: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_thread_name_copy(
        thread: k_tid_t,
        buf: *mut ::core::ffi::c_char,
        size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_timer_start(timer: *mut k_timer, duration: k_timeout_t, period: k_timeout_t);
}
extern "C" {
    pub fn z_impl_k_timer_stop(timer: *mut k_timer);
}
extern "C" {
    pub fn z_impl_k_timer_status_get(timer: *mut k_timer) -> u32;
}
extern "C" {
    pub fn z_impl_k_timer_status_sync(timer: *mut k_timer) -> u32;
}
extern "C" {
    pub fn z_impl_k_uptime_ticks() -> i64;
}
extern "C" {
    pub fn z_impl_k_queue_init(queue: *mut k_queue);
}
extern "C" {
    pub fn z_impl_k_queue_cancel_wait(queue: *mut k_queue);
}
extern "C" {
    pub fn z_impl_k_queue_alloc_append(queue: *mut k_queue, data: *mut ::core::ffi::c_void) -> i32;
}
extern "C" {
    pub fn z_impl_k_queue_alloc_prepend(queue: *mut k_queue, data: *mut ::core::ffi::c_void)
        -> i32;
}
extern "C" {
    pub fn z_impl_k_queue_get(
        queue: *mut k_queue,
        timeout: k_timeout_t,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn z_impl_k_queue_peek_head(queue: *mut k_queue) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn z_impl_k_queue_peek_tail(queue: *mut k_queue) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn z_impl_k_futex_wait(
        futex: *mut k_futex,
        expected: ::core::ffi::c_int,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "k_futex_wait__extern"]
    pub fn k_futex_wait(
        futex: *mut k_futex,
        expected: ::core::ffi::c_int,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_futex_wake(futex: *mut k_futex, wake_all: bool) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "k_futex_wake__extern"]
    pub fn k_futex_wake(futex: *mut k_futex, wake_all: bool) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_event_init(event: *mut k_event);
}
extern "C" {
    pub fn z_impl_k_event_post(event: *mut k_event, events: u32) -> u32;
}
extern "C" {
    pub fn z_impl_k_event_set(event: *mut k_event, events: u32) -> u32;
}
extern "C" {
    pub fn z_impl_k_event_set_masked(event: *mut k_event, events: u32, events_mask: u32) -> u32;
}
extern "C" {
    pub fn z_impl_k_event_clear(event: *mut k_event, events: u32) -> u32;
}
extern "C" {
    pub fn z_impl_k_event_wait(
        event: *mut k_event,
        events: u32,
        reset: bool,
        timeout: k_timeout_t,
    ) -> u32;
}
extern "C" {
    pub fn z_impl_k_event_wait_all(
        event: *mut k_event,
        events: u32,
        reset: bool,
        timeout: k_timeout_t,
    ) -> u32;
}
extern "C" {
    pub fn z_impl_k_stack_alloc_init(stack: *mut k_stack, num_entries: u32) -> i32;
}
extern "C" {
    pub fn z_impl_k_stack_push(stack: *mut k_stack, data: stack_data_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_stack_pop(
        stack: *mut k_stack,
        data: *mut stack_data_t,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_mutex_init(mutex: *mut k_mutex) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_mutex_lock(mutex: *mut k_mutex, timeout: k_timeout_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_mutex_unlock(mutex: *mut k_mutex) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_condvar_init(condvar: *mut k_condvar) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_condvar_signal(condvar: *mut k_condvar) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_condvar_broadcast(condvar: *mut k_condvar) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_condvar_wait(
        condvar: *mut k_condvar,
        mutex: *mut k_mutex,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_sem_init(
        sem: *mut k_sem,
        initial_count: ::core::ffi::c_uint,
        limit: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_sem_take(sem: *mut k_sem, timeout: k_timeout_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_sem_give(sem: *mut k_sem);
}
extern "C" {
    pub fn z_impl_k_sem_reset(sem: *mut k_sem);
}
extern "C" {
    pub fn z_impl_k_msgq_alloc_init(
        msgq: *mut k_msgq,
        msg_size: usize,
        max_msgs: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_msgq_put(
        msgq: *mut k_msgq,
        data: *const ::core::ffi::c_void,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_msgq_get(
        msgq: *mut k_msgq,
        data: *mut ::core::ffi::c_void,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_msgq_peek(
        msgq: *mut k_msgq,
        data: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_msgq_peek_at(
        msgq: *mut k_msgq,
        data: *mut ::core::ffi::c_void,
        idx: u32,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_msgq_purge(msgq: *mut k_msgq);
}
extern "C" {
    pub fn z_impl_k_msgq_get_attrs(msgq: *mut k_msgq, attrs: *mut k_msgq_attrs);
}
extern "C" {
    pub fn z_impl_k_pipe_alloc_init(pipe: *mut k_pipe, size: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_pipe_put(
        pipe: *mut k_pipe,
        data: *mut ::core::ffi::c_void,
        bytes_to_write: usize,
        bytes_written: *mut usize,
        min_xfer: usize,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_pipe_get(
        pipe: *mut k_pipe,
        data: *mut ::core::ffi::c_void,
        bytes_to_read: usize,
        bytes_read: *mut usize,
        min_xfer: usize,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_pipe_read_avail(pipe: *mut k_pipe) -> usize;
}
extern "C" {
    pub fn z_impl_k_pipe_write_avail(pipe: *mut k_pipe) -> usize;
}
extern "C" {
    pub fn z_impl_k_pipe_flush(pipe: *mut k_pipe);
}
extern "C" {
    pub fn z_impl_k_pipe_buffer_flush(pipe: *mut k_pipe);
}
extern "C" {
    pub fn z_impl_k_poll(
        events: *mut k_poll_event,
        num_events: ::core::ffi::c_int,
        timeout: k_timeout_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_poll_signal_init(sig: *mut k_poll_signal);
}
extern "C" {
    pub fn z_impl_k_poll_signal_reset(sig: *mut k_poll_signal);
}
extern "C" {
    pub fn z_impl_k_poll_signal_check(
        sig: *mut k_poll_signal,
        signaled: *mut ::core::ffi::c_uint,
        result: *mut ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn z_impl_k_poll_signal_raise(
        sig: *mut k_poll_signal,
        result: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_str_out(c: *mut ::core::ffi::c_char, n: usize);
}
extern "C" {
    pub fn z_impl_k_float_disable(thread: *mut k_thread) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn z_impl_k_float_enable(
        thread: *mut k_thread,
        options: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " @brief Reboot the system\n\n Reboot the system in the manner specified by @a type.  Not all architectures\n or platforms support the various reboot types (SYS_REBOOT_COLD,\n SYS_REBOOT_WARM).\n\n When successful, this routine does not return."]
    pub fn sys_reboot(type_: ::core::ffi::c_int) -> !;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct z_heap {
    pub _address: u8,
}
